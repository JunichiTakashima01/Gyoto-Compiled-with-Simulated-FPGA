<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Scenery>

  An optically thin blob centered on the origin of the coordinate
  system, in flat space-time. Computation uses the spherical
  coordinates.

  <Metric kind = "KerrBL">
    <Spin> 0. </Spin>
    <Mass unit="sunmass"> 4e6 </Mass>
  </Metric>

  <Screen>
    <Distance unit="kpc"> 8 </Distance>
    <Time unit="yr"> 30e3 </Time>
    <FieldOfView unit="microas"> 150 </FieldOfView>
    In UTF-8 locales, "microas" may be written "µas".
    <Inclination unit="degree"> 90 </Inclination>
    In UTF-8 locales, "degree" may be written "°".
    <PALN> 0 </PALN>
    <Argument> 0 </Argument>
    <Resolution> 32 </Resolution>
  </Screen>

  <Astrobj kind = "Python::Standard">
    <Module>gyoto_sample_standard</Module>
    <Class>FixedStar</Class>

    Standard objects define a potential of some sort through method
    __call__, below CriticalValue is inside the object, above is
    outside. SafetyValue must be slighlty above CriticalValue, a
    minimum of __call__ is searched when the potential is below
    SafetyValue to check whether the object has been crossed.
    <!--CriticalValue> 9. </CriticalValue-->
    <!--SafetyValue> 11. </SafetyValue-->

    In this Python implementation of the FixedStar (like in the
    eponymous C++ implementation), CriticalValue and SafetyValue are
    both set when setting the convenience, ad-hoc property Radius
    defined in Python. The other Python-defined properties are the 3
    space coordinates of the center of the FixedStar, a spectrum and
    an opacity.
    <Position> 0. 0. 0. </Position>
    <Radius> 12. </Radius>
    <Spectrum kind="PowerLaw">
      <Exponent> 0 </Exponent>
      <Constant> 0.001 </Constant>
    </Spectrum>
    <Opacity kind="PowerLaw">
      <Exponent> 0 </Exponent>
      <Constant> 0.01 </Constant>
    </Opacity>

    Gyoto::Astrobj::Python::Standard also support the rest of the
    Gyoto::Astrobj::Standard Properties:
    <OpticallyThin/>
    <RMax>20.</RMax>
  </Astrobj>

  <Delta> 1e0 </Delta>
  <MinimumTime> 0. </MinimumTime>
  <Quantities>
    Intensity
  </Quantities>
  One can also specify a unit (if Gyoto was compiled with --with-udunits):
    Intensity[mJy/pix²]
    Intensity[mJy/µas²]
    Intensity[J.m-2.s-1.sr-1.Hz-1]
    Intensity[erg.cm-2.s-1.sr-1.Hz-1]
    Intensity[mJy.sr-1]
    Intensity[Jy.sr-1]

  <DeltaMaxOverR>0.01</DeltaMaxOverR>
  <!--DeltaMax>0.1</DeltaMax-->

</Scenery>
