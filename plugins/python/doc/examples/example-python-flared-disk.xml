<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Scenery>

  <Metric kind = "KerrBL">
    <Mass unit="sunmass"> 4e6 </Mass>
    <Spin> 0.52 </Spin>
  </Metric>

  <Screen>
    <Distance unit="kpc"> 8 </Distance>
    <Inclination unit="degree"> 90 </Inclination>
    <PALN unit="degree"> 180 </PALN> 
    <Time unit="kpc"> 8 </Time>
    <FieldOfView unit="microas"> 200 </FieldOfView>
    <Resolution> 32 </Resolution>
    <Spectrometer kind="wave" nsamples="1"> 2.0e-6 2.4e-6 </Spectrometer>
  </Screen>

  <Astrobj kind = "Python::Standard">
    <RMax> 50 </RMax>

    <CriticalValue>0.</CriticalValue>
    <SafetyValue>0.3</SafetyValue>

    <OpticallyThin/>
    <InlineModule>
        import math
        class FlaredDisk:
            opening=0.2
            rin=4
            rout=15
            def __call__(self, coord):
                r=math.sin(coord[2])*coord[1]
                h_r=abs(math.cos(coord[2]))
                return max(h_r-self.opening, self.rin-r, r-self.rout)
            def getVelocity(self, coord, vel):
                self.this.metric().circularVelocity(coord, vel)
    </InlineModule>
    <Class>FlaredDisk</Class>
  </Astrobj>

  <Quantities>Intensity</Quantities>

</Scenery>
