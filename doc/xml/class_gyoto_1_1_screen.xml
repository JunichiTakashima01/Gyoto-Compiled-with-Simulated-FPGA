<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_gyoto_1_1_screen" kind="class" language="C++" prot="public">
    <compoundname>Gyoto::Screen</compoundname>
    <basecompoundref refid="class_gyoto_1_1_smart_pointee" prot="public" virt="non-virtual">Gyoto::SmartPointee</basecompoundref>
    <basecompoundref refid="class_gyoto_1_1_object" prot="public" virt="non-virtual">Gyoto::Object</basecompoundref>
    <includes refid="_gyoto_screen_8h" local="no">GyotoScreen.h</includes>
    <innerclass refid="class_gyoto_1_1_screen_1_1_angles" prot="public">Gyoto::Screen::Angles</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_bucket" prot="public">Gyoto::Screen::Bucket</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_coord1d_set" prot="public">Gyoto::Screen::Coord1dSet</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_coord2d_set" prot="public">Gyoto::Screen::Coord2dSet</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_empty" prot="public">Gyoto::Screen::Empty</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_grid" prot="public">Gyoto::Screen::Grid</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_indices" prot="public">Gyoto::Screen::Indices</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_range" prot="public">Gyoto::Screen::Range</innerclass>
    <innerclass refid="class_gyoto_1_1_screen_1_1_repeat_angle" prot="public">Gyoto::Screen::RepeatAngle</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbc" prot="private" static="no" strong="no">
        <type></type>
        <name>anglekind_e</name>
        <enumvalue id="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbca2dc93de4c64d1eedc5997e985b66e1ca" prot="private">
          <name>equatorial_angles</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbca04b68dd9f071b27d920329f14e3fbc3b" prot="private">
          <name>rectilinear</name>
          <initializer>=1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbcaa083f0d394cfa9d7550051d2c8d0130e" prot="private">
          <name>spherical_angles</name>
          <initializer>=2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="202" column="3" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gyoto_1_1_screen_1a7ca3191ddb07c0bdc6ecfb50ae8efe27" prot="private" static="no">
        <type>int</type>
        <definition>typedef int Gyoto::Screen::anglekind_t</definition>
        <argsstring></argsstring>
        <name>anglekind_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="203" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_gyoto_1_1_screen_1a3d039508310efe3dcbf50204a3619b2f" prot="public" static="no" strong="no">
        <type></type>
        <name>CoordType_e</name>
        <enumvalue id="class_gyoto_1_1_screen_1a3d039508310efe3dcbf50204a3619b2fab11967a242ab4a6a6bd1596ca1dfc0b0" prot="public">
          <name>angle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_gyoto_1_1_screen_1a3d039508310efe3dcbf50204a3619b2fa99b9b3f7c47c9ac374f88bfd1293eaa7" prot="public">
          <name>pixel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum to specify whether a coordinate set (<ref refid="class_gyoto_1_1_screen_1_1_coord1d_set" kindref="compound">Coord1dSet</ref> or <ref refid="class_gyoto_1_1_screen_1_1_coord2d_set" kindref="compound">Coord2dSet</ref>) holds pixel values or angles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="636" column="5" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="636" bodyend="636"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" prot="public" static="no">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">Gyoto::SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_smart_pointee" kindref="compound">Gyoto::SmartPointee</ref> &gt;</type>
        <definition>typedef Gyoto::SmartPointer&lt;Gyoto::SmartPointee&gt; Gyoto::SmartPointee::Subcontractor_t(Gyoto::FactoryMessenger *, std::vector&lt; std::string &gt; const &amp;)</definition>
        <argsstring>(Gyoto::FactoryMessenger *, std::vector&lt; std::string &gt; const &amp;)</argsstring>
        <name>Subcontractor_t</name>
        <briefdescription>
<para>A subcontractor builds an object upon order from the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Various classes need to provide a subcontractor to be able to instantiate themselves upon order from the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref>. A subcontractor is a function (often a static member function) which accepts a pointer to a <ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">FactoryMessenger</ref> as unique parameter, communicates with the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref> using this messenger to read an XML description of the object to build, and returns this objet. <ref refid="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" kindref="member">SmartPointee::Subcontractor_t</ref>* is just generic enough a typedef to cast to and from other subcontractor types: <ref refid="namespace_gyoto_1_1_astrobj_1aa53c7ada58c8c8f3799c3485b7d8f3bb" kindref="member">Astrobj::Subcontractor_t</ref>, <ref refid="namespace_gyoto_1_1_metric_1ad6b33a642cc94ad67855184d2adb95df" kindref="member">Metric::Subcontractor_t</ref>, <ref refid="namespace_gyoto_1_1_spectrum_1a163055eef14aee22dd8fa5188812d889" kindref="member">Spectrum::Subcontractor_t</ref>. A subcontractor needs to be registered using the relevant <ref refid="namespace_gyoto_1_1_astrobj_1abb6caf3023a51cb77b5f6793ac03b188" kindref="member">Register()</ref> function: <ref refid="namespace_gyoto_1_1_astrobj_1abb6caf3023a51cb77b5f6793ac03b188" kindref="member">Astrobj::Register()</ref>, <ref refid="namespace_gyoto_1_1_metric_1a602cba49b001e7470f3d439d1ab3e8f7" kindref="member">Metric::Register()</ref>, <ref refid="namespace_gyoto_1_1_spectrum_1a517874749d838d7121880e7d9d14c626" kindref="member">Spectrum::Register()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="114" column="5" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gyoto_1_1_screen_1aa3d99a09ebfd623e66cb8cad4732c0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Gyoto::SmartPointer&lt; Gyoto::Screen &gt;</definition>
        <argsstring></argsstring>
        <name>Gyoto::SmartPointer&lt; Gyoto::Screen &gt;</name>
        <param>
          <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">Gyoto::SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_screen" kindref="compound">Gyoto::Screen</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="47" column="5" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a8ed940061d9e8c6e0e235d76412b0908" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::tobs_</definition>
        <argsstring></argsstring>
        <name>tobs_</name>
        <briefdescription>
<para>Observing date in s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="180" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a05676dadaa657bdc43c36b3e5dca58dc" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::fov_</definition>
        <argsstring></argsstring>
        <name>fov_</name>
        <briefdescription>
<para>Field-of-view in rad. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="181" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a3bf1a87d30f464a041179bb24ff9d8a1" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::azimuthal_fov_</definition>
        <argsstring></argsstring>
        <name>azimuthal_fov_</name>
        <briefdescription>
<para>Azimuthal field-of-view for Spherical <ref refid="class_gyoto_1_1_screen_1_1_angles" kindref="compound">Angles</ref> images. Maximal extent of image in the azimuthal b-angle direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="182" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a1ad9755611f0442d1c9fe58a2998d133" prot="private" static="no" mutable="no">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        <definition>size_t Gyoto::Screen::npix_</definition>
        <argsstring></argsstring>
        <name>npix_</name>
        <briefdescription>
<para>Resolution in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="184" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1ac3bf86898ecf9aac143b995d98c8df52" prot="private" static="no" mutable="no">
        <type>double *</type>
        <definition>double* Gyoto::Screen::mask_</definition>
        <argsstring></argsstring>
        <name>mask_</name>
        <briefdescription>
<para>Mask with 0 where the ray-tracing should not be performed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="189" column="11" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a4992e92935ebc335973ca93957fcc648" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gyoto::Screen::mask_filename_</definition>
        <argsstring></argsstring>
        <name>mask_filename_</name>
        <briefdescription>
<para>Last read or written FITS file. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when saving to XML: if the mask was saved or loaded from FITS file, output this file name in the XML. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="197" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a30c30ba3daebc04ede4a1a7fd700543b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::distance_</definition>
        <argsstring></argsstring>
        <name>distance_</name>
        <briefdescription>
<para>Distance to the observer in m. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="199" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1ada4d6e039ed2e51d688c97421af91b96" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::dmax_</definition>
        <argsstring></argsstring>
        <name>dmax_</name>
        <briefdescription>
<para>Maximum distance from which the photons are launched (geometrical units) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="200" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a5fe8cfa532a7ff58970519cf25040710" prot="private" static="no" mutable="no">
        <type>anglekind_t</type>
        <definition>anglekind_t Gyoto::Screen::anglekind_</definition>
        <argsstring></argsstring>
        <name>anglekind_</name>
        <briefdescription>
<para><ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> angles kind (0: equatorial, 1: spherical) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="205" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a78512e2b290966a9324a63a18ccde5dc" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::euler_[3]</definition>
        <argsstring>[3]</argsstring>
        <name>euler_</name>
        <briefdescription>
<para>Euler angles. </para>
        </briefdescription>
        <detaileddescription>
<para>The angles are position angle of the line of nodes (North of East), inclination (0 = face-on), argument of X axis. We use the z-x-z convention. See <ulink url="http://en.wikipedia.org/wiki/Euler_angles">http://en.wikipedia.org/wiki/Euler_angles</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="212" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a12c1dcc108221467b4610bd1e9d1bfd5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::ex_[3]</definition>
        <argsstring>[3]</argsstring>
        <name>ex_</name>
        <briefdescription>
<para>Sky coordinate of base X vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="213" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a23faaa0e30354203435ba5321fab87a3" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::ey_[3]</definition>
        <argsstring>[3]</argsstring>
        <name>ey_</name>
        <briefdescription>
<para>Sky coordinate of base Y vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="214" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a1301fa88db90b65e1c7076fced77dc93" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::ez_[3]</definition>
        <argsstring>[3]</argsstring>
        <name>ez_</name>
        <briefdescription>
<para>Sky coordinate of base Z vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="215" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1ab46edd61cb5363d03d906c02926696f5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::fourvel_[4]</definition>
        <argsstring>[4]</argsstring>
        <name>fourvel_</name>
        <briefdescription>
<para>Observer&apos;s 4-velocity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="217" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a879052ef3c52f2a84c42bcb1383a9ba0" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::screen1_[4]</definition>
        <argsstring>[4]</argsstring>
        <name>screen1_</name>
        <briefdescription>
<para><ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> e1 vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="218" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1addcecd0b24324e73d880af9813ff55ae" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::screen2_[4]</definition>
        <argsstring>[4]</argsstring>
        <name>screen2_</name>
        <briefdescription>
<para><ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> e2 vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="219" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a10ce21458df390989b7b89621cd29fc7" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::screen3_[4]</definition>
        <argsstring>[4]</argsstring>
        <name>screen3_</name>
        <briefdescription>
<para><ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> e3 vector (normal) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="220" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1abf6bd370ee528d28c5b33afc56a1cb4b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::dangle1_</definition>
        <argsstring></argsstring>
        <name>dangle1_</name>
        <briefdescription>
<para>Increment to first position angle of <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref>; can be typically alpha if in Equatorial <ref refid="class_gyoto_1_1_screen_1_1_angles" kindref="compound">Angles</ref>, or a if in Spherical <ref refid="class_gyoto_1_1_screen_1_1_angles" kindref="compound">Angles</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="222" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1aa20af9c764d367b86c6135cf402c226b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::dangle2_</definition>
        <argsstring></argsstring>
        <name>dangle2_</name>
        <briefdescription>
<para>Increment to second position angle of <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref>; can be typically delta if in Equatorial <ref refid="class_gyoto_1_1_screen_1_1_angles" kindref="compound">Angles</ref>, or b if in Spherical <ref refid="class_gyoto_1_1_screen_1_1_angles" kindref="compound">Angles</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="223" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a011767f8a5b9db586c12c01f31970556" prot="private" static="no" mutable="no">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_metric_1_1_generic" kindref="compound">Metric::Generic</ref> &gt;</type>
        <definition>SmartPointer&lt;Metric::Generic&gt; Gyoto::Screen::gg_</definition>
        <argsstring></argsstring>
        <name>gg_</name>
        <briefdescription>
<para>The <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> in this end of the Universe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="224" column="16" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1ad0e0a42a7b99e8d5f8d2eb9748dee978" prot="private" static="no" mutable="no">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_spectrometer_1_1_generic" kindref="compound">Spectrometer::Generic</ref> &gt;</type>
        <definition>SmartPointer&lt;Spectrometer::Generic&gt; Gyoto::Screen::spectro_</definition>
        <argsstring></argsstring>
        <name>spectro_</name>
        <briefdescription>
<para><ref refid="class_gyoto_1_1_spectrometer_1_1_generic" kindref="compound">Gyoto::Spectrometer::Generic</ref> subclass instance used for quantities <ref refid="namespace_gyoto_1_1_spectrum" kindref="compound">Spectrum</ref> and BinSpectrum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="229" column="16" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a02accc43491f2b87dc96f779f42a2a75" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Screen::freq_obs_</definition>
        <argsstring></argsstring>
        <name>freq_obs_</name>
        <briefdescription>
<para>Frequency at which the observer observes. </para>
        </briefdescription>
        <detaileddescription>
<para>For the quantity Intensity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="236" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a6a700fec56bcef3ca6088b1421259a2b" prot="private" static="no" mutable="no">
        <type><ref refid="_gyoto_defs_8h_1abdc37c8fde52ef588246ff7da367d65c" kindref="member">obskind_t</ref></type>
        <definition>obskind_t Gyoto::Screen::observerkind_</definition>
        <argsstring></argsstring>
        <name>observerkind_</name>
        <briefdescription>
<para>What kind of observer are we considering? (At infinity, ZAMO...) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="242" column="13" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_smart_pointee_1aaaf212a70fb1880b70e4d357e843cc85" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::refCount</definition>
        <argsstring></argsstring>
        <name>refCount</name>
        <briefdescription>
<para>Reference counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="83" column="7" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_smart_pointee_1abf1c1e431cdd4f08f13de581cccb6770" prot="private" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t Gyoto::SmartPointee::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
<para>A mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>When compiled with libpthread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="89" column="19" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1ae8b15135924b213a8c0169b45b4b448d" prot="public" static="yes" mutable="no">
        <type><ref refid="_gyoto_object_8h_1a750e7a43779f63bdb13111eaf0271203" kindref="member">GYOTO_OBJECT</ref> <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const</type>
        <definition>GYOTO_OBJECT Property const Gyoto::Screen::properties[]</definition>
        <argsstring>[]</argsstring>
        <name>properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="245" column="42" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_screen_1a587c5d275234369eb01eab64f4cce18c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Gyoto::Screen::GYOTO_OBJECT_THREAD_SAFETY</definition>
        <argsstring></argsstring>
        <name>GYOTO_OBJECT_THREAD_SAFETY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="246" column="3" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a636e5e881825a8835d4f962b9f0d1b47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const  *</type>
        <definition>virtual Property const* Gyoto::Screen::getProperties</definition>
        <argsstring>() const</argsstring>
        <name>getProperties</name>
        <reimplements refid="class_gyoto_1_1_object_1afe00718a056ffc6293705c03f588088c">getProperties</reimplements>
        <briefdescription>
<para>Get list of properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is declared automatically by the <ref refid="_gyoto_object_8h_1a750e7a43779f63bdb13111eaf0271203" kindref="member">GYOTO_OBJECT</ref> macro and defined automatically by the <ref refid="_gyoto_property_8h_1a1356435ea7ee0e18d07201a80e034dcc" kindref="member">GYOTO_PROPERTY_END</ref> macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="245" column="79"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a3e8ee3fae738eebcd30ec468effd446a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Screen::Screen</definition>
        <argsstring>()</argsstring>
        <name>Screen</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="250" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a1d163cecc0ac373f5b7553e8b03e6366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Screen::Screen</definition>
        <argsstring>(const Screen &amp;)</argsstring>
        <name>Screen</name>
        <param>
          <type>const <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="251" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a78863fb072cf8fee8db3014b26ef8907" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> *</type>
        <definition>Screen* Gyoto::Screen::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
<para>Cloner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="252" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a25bf668b384b47043f5c802c9d7ea427" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Gyoto::Screen::~Screen</definition>
        <argsstring>()</argsstring>
        <name>~Screen</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="254" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aac0b885b8967104ee65c494a88158f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::setProjection</definition>
        <argsstring>(const double paln, const double inclination, const double argument)</argsstring>
        <name>setProjection</name>
        <param>
          <type>const double</type>
          <declname>paln</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>inclination</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>argument</declname>
        </param>
        <briefdescription>
<para>Set inclination etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="260" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ad457be9c39ee196d2a252aaa29d96c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::setProjection</definition>
        <argsstring>(const double distance, const double paln, const double inclination, const double argument)</argsstring>
        <name>setProjection</name>
        <param>
          <type>const double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>paln</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>inclination</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>argument</declname>
        </param>
        <briefdescription>
<para>Set distance, inclination etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="264" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ae1a1645e79ee8897fa8a95c12cabb98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::distance</definition>
        <argsstring>(double dist)</argsstring>
        <name>distance</name>
        <param>
          <type>double</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
<para>Set distance from observer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in meters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="273" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a7e57ddb7fae5b89ae7b59859b9b68ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::dMax</definition>
        <argsstring>(double dist)</argsstring>
        <name>dMax</name>
        <param>
          <type>double</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
<para>Set ray-tracing maximum distance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in geometrical units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="279" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a980a3e6f7f81fdcf81aa9fd063a1cd27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::distance</definition>
        <argsstring>(double dist, const std::string &amp;unit)</argsstring>
        <name>distance</name>
        <param>
          <type>double</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set distance from observer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance expressed in the specified unit; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>convertible to meters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="286" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a76e6f8eafa8bc1a7e3d600b9aac28a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::inclination</definition>
        <argsstring>(double)</argsstring>
        <name>inclination</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set inclination relative to line-of-sight. </para>
        </briefdescription>
        <detaileddescription>
<para>Inclination of z-axis relative to line-of-sight, or inclination of equatorial plane relative to plane of the sky, in radians </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="293" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a9cd7ecfd7426b2b2567ea1f65a5d9b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::inclination</definition>
        <argsstring>(double, const std::string &amp;unit)</argsstring>
        <name>inclination</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set inclination relative to line-of-sight. </para>
        </briefdescription>
        <detaileddescription>
<para>Inclination of z-axis relative to line-of-sight, or inclination of equatorial plane relative to plane of the sky, in specified unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="300" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a3533fce8d94b1678634e00d6c5e908e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::PALN</definition>
        <argsstring>(double)</argsstring>
        <name>PALN</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set position angle of the line of nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="302" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a41d61e848badc884f04b9448072d93da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::PALN</definition>
        <argsstring>(double, const std::string &amp;unit)</argsstring>
        <name>PALN</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set position angle of the line of nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="304" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a520d6c146be00f52481bcbec17ec77d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::argument</definition>
        <argsstring>(double)</argsstring>
        <name>argument</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set angle beetwen line of nodes and X axis of object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="306" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a582d1c316a2d4c0fbf678b52426dc21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::argument</definition>
        <argsstring>(double, const std::string &amp;unit)</argsstring>
        <name>argument</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set angle beetwen line of nodes and X axis of object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="308" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ac4655e7c8f5b30d0e66d917006c6f262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::spectrometer</definition>
        <argsstring>(SmartPointer&lt; Spectrometer::Generic &gt; spectro)</argsstring>
        <name>spectrometer</name>
        <param>
          <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_spectrometer_1_1_generic" kindref="compound">Spectrometer::Generic</ref> &gt;</type>
          <declname>spectro</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_screen_1ad0e0a42a7b99e8d5f8d2eb9748dee978" kindref="member">Screen::spectro_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="310" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aa04bcd493cf3cb4e48023f7fd52ef087" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_spectrometer_1_1_generic" kindref="compound">Spectrometer::Generic</ref> &gt;</type>
        <definition>SmartPointer&lt;Spectrometer::Generic&gt; Gyoto::Screen::spectrometer</definition>
        <argsstring>() const</argsstring>
        <name>spectrometer</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_screen_1ad0e0a42a7b99e8d5f8d2eb9748dee978" kindref="member">Screen::spectro_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="312" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a631c6f6c831dfb1ed35a3f7d81079d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::freqObs</definition>
        <argsstring>(double fo)</argsstring>
        <name>freqObs</name>
        <param>
          <type>double</type>
          <declname>fo</declname>
        </param>
        <briefdescription>
<para>Set freq_obs_. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fo</parametername>
</parameternamelist>
<parameterdescription>
<para>double: observing frequency in Hz </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="319" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a22d6664c292b69b2f0984a17592313a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::freqObs</definition>
        <argsstring>(double fo, const std::string &amp;unit)</argsstring>
        <name>freqObs</name>
        <param>
          <type>double</type>
          <declname>fo</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set freq_obs_. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fo</parametername>
</parameternamelist>
<parameterdescription>
<para>double: observing frequency (or wavelength) in &quot;unit&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>string: unit in which fo is expressed, convertible to Herz or meters or energy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="328" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a4a24c8f8b8fedf796630337c25be5b1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::freqObs</definition>
        <argsstring>() const</argsstring>
        <name>freqObs</name>
        <briefdescription>
<para>Get freq_obs_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="333" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a3f8d6737fe0a3a73fbad975eca93ca45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::freqObs</definition>
        <argsstring>(const std::string &amp;unit) const</argsstring>
        <name>freqObs</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get freq_obs_. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>string: unit in which freq_obs_ should be returned is expressed, convertible to Herz or meters or energy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="340" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ac4738c59529e7a8ea0c5a0300866978e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::setObserverPos</definition>
        <argsstring>(const double pos[4])</argsstring>
        <name>setObserverPos</name>
        <param>
          <type>const double</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Alternative way to set projection. </para>
        </briefdescription>
        <detaileddescription>
<para>Beware : paln can not be set this way, setting later other parameters change the observer&apos;s coordinates. For observationnal ray-tracing purposes, prefer <ref refid="class_gyoto_1_1_screen_1aac0b885b8967104ee65c494a88158f57" kindref="member">setProjection()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of observer in <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref>&apos;s coordinate system. Content is copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="351" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a318640d216032ccc48098ed0211a7691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::observerKind</definition>
        <argsstring>(const std::string &amp;kind)</argsstring>
        <name>observerKind</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="352" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a8b87259ba714cdcb7e46ffde8b811ec0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gyoto::Screen::observerKind</definition>
        <argsstring>() const</argsstring>
        <name>observerKind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="353" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a6d64a13dc2178e2b12c70e31f56d3b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::setFourVel</definition>
        <argsstring>(const double coord[4])</argsstring>
        <name>setFourVel</name>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Sets the observer&apos;s 4-velocity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="354" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ad348a1f0eed557f45ba8ef885d150f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::setScreen1</definition>
        <argsstring>(const double coord[4])</argsstring>
        <name>setScreen1</name>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Sets the screen vector e1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="356" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a44a010e55ce14224f7bd3e254ff3a666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::setScreen2</definition>
        <argsstring>(const double coord[4])</argsstring>
        <name>setScreen2</name>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Sets the screen vector e2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="358" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aba397f13ceda3b3dd0139caf9f1ed29a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::setScreen3</definition>
        <argsstring>(const double coord[4])</argsstring>
        <name>setScreen3</name>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Sets the screen vector e3 (normal) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="360" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a7a7a34bea4741958a822f58f2cd01e47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::Screen::coordKind</definition>
        <argsstring>() const</argsstring>
        <name>coordKind</name>
        <briefdescription>
<para>Get coordinate kind. </para>
        </briefdescription>
        <detaileddescription>
<para>From <ref refid="class_gyoto_1_1_screen_1a011767f8a5b9db586c12c01f31970556" kindref="member">Screen::gg_</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="370" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a4c49e20ef041790a0ba62cb8e8fda521" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::distance</definition>
        <argsstring>() const</argsstring>
        <name>distance</name>
        <briefdescription>
<para>Get distance from observer. </para>
        </briefdescription>
        <detaileddescription>
<para>In meters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="376" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a5b304a11f3aefb290dd48d8ce39c83b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::distance</definition>
        <argsstring>(const std::string &amp;) const</argsstring>
        <name>distance</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Get distance from observer. </para>
        </briefdescription>
        <detaileddescription>
<para>In specified unit. Get distance from observer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="382" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1abbe7a679b861c54410b8460147d5b65d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::dMax</definition>
        <argsstring>() const</argsstring>
        <name>dMax</name>
        <briefdescription>
<para>Get maximum ray-tracing distance. </para>
        </briefdescription>
        <detaileddescription>
<para>In geometrical units. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="388" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a5cb143136e6b5be8581038c1102cc114" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::inclination</definition>
        <argsstring>() const</argsstring>
        <name>inclination</name>
        <briefdescription>
<para>Get inclination relative to line-of-sight. </para>
        </briefdescription>
        <detaileddescription>
<para>Inclination of z-axis relative to line-of-sight, or inclination of equatorial plane relative to plane of the sky, in radians. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="395" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1afe808b65f296506f8f6a5f6ce33d56b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::inclination</definition>
        <argsstring>(const std::string &amp;) const</argsstring>
        <name>inclination</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Get inclination relative to line-of-sight. </para>
        </briefdescription>
        <detaileddescription>
<para>Inclination of z-axis relative to line-of-sight, or inclination of equatorial plane relative to plane of the sky, in specified unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="402" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a80b4539f8503b202f1e5390d917efb35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::PALN</definition>
        <argsstring>() const</argsstring>
        <name>PALN</name>
        <briefdescription>
<para>Get position angle of the line of nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="404" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a02df86989766df90d21648ff2ff2e598" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::PALN</definition>
        <argsstring>(const std::string &amp;) const</argsstring>
        <name>PALN</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Get position angle of the line of nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="405" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a31dd1c28b3a455ceb8e8ff6e8dde4049" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::argument</definition>
        <argsstring>() const</argsstring>
        <name>argument</name>
        <briefdescription>
<para>Get angle between line of nodes and X axis of object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="406" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a704a91aa29ba29f117c5426425805c46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::argument</definition>
        <argsstring>(const std::string &amp;) const</argsstring>
        <name>argument</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Get angle between line of nodes and X axis of object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="407" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a1407419c822f724399206a4d242d58ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_metric_1_1_generic" kindref="compound">Metric::Generic</ref> &gt;</type>
        <definition>SmartPointer&lt;Metric::Generic&gt; Gyoto::Screen::metric</definition>
        <argsstring>() const</argsstring>
        <name>metric</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_screen_1a011767f8a5b9db586c12c01f31970556" kindref="member">Screen::gg_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="409" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ae3f6f58a48826f3aaa02416881052a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::metric</definition>
        <argsstring>(SmartPointer&lt; Metric::Generic &gt; gg)</argsstring>
        <name>metric</name>
        <param>
          <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_metric_1_1_generic" kindref="compound">Metric::Generic</ref> &gt;</type>
          <declname>gg</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_screen_1a011767f8a5b9db586c12c01f31970556" kindref="member">Screen::gg_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="410" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a5dbc5df4fa324ac907a8ca1da41bc294" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::time</definition>
        <argsstring>() const</argsstring>
        <name>time</name>
        <briefdescription>
<para>Get observing date in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="413" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a49cdd35ce8192c3239a8fd37ce70a3d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::time</definition>
        <argsstring>(const std::string &amp;) const</argsstring>
        <name>time</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Get observing date in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="416" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a5889ce87531078d37976ad6ae5141249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::time</definition>
        <argsstring>(double, const std::string &amp;)</argsstring>
        <name>time</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Set observing date in specified unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="419" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a79eb0a8b53104639b55a56d4118d29fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::time</definition>
        <argsstring>(double)</argsstring>
        <name>time</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set observing date in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="422" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a98c5dddc8210a162ebea3e24016defbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::fieldOfView</definition>
        <argsstring>() const</argsstring>
        <name>fieldOfView</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_screen_1a05676dadaa657bdc43c36b3e5dca58dc" kindref="member">Screen::fov_</ref> in radians. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="425" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aa209fe1f0d8743de6ea043dddfe68f82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::fieldOfView</definition>
        <argsstring>(std::string const &amp;unit) const</argsstring>
        <name>fieldOfView</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_screen_1a05676dadaa657bdc43c36b3e5dca58dc" kindref="member">Screen::fov_</ref> in specified unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="428" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a4225900cd8522dccd1a5fdbcbb880758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::fieldOfView</definition>
        <argsstring>(double)</argsstring>
        <name>fieldOfView</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_screen_1a05676dadaa657bdc43c36b3e5dca58dc" kindref="member">Screen::fov_</ref> in radians. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="431" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1adf0b511778c832f3d19cf3222cb3a7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::fieldOfView</definition>
        <argsstring>(double, const std::string &amp;unit)</argsstring>
        <name>fieldOfView</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_screen_1a05676dadaa657bdc43c36b3e5dca58dc" kindref="member">Screen::fov_</ref> in specified unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="434" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a16d474f38095d0e8572a5b72a5868e03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::azimuthalFieldOfView</definition>
        <argsstring>() const</argsstring>
        <name>azimuthalFieldOfView</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_screen_1a3bf1a87d30f464a041179bb24ff9d8a1" kindref="member">Screen::azimuthal_fov_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="437" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ab02ca170914a86f04a9499e34036c0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::azimuthalFieldOfView</definition>
        <argsstring>(double ff)</argsstring>
        <name>azimuthalFieldOfView</name>
        <param>
          <type>double</type>
          <declname>ff</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_screen_1a3bf1a87d30f464a041179bb24ff9d8a1" kindref="member">Screen::azimuthal_fov_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="440" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ac39692312f15a033dc76dbecfe312f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::dangle1</definition>
        <argsstring>(double)</argsstring>
        <name>dangle1</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set increment to first position angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="443" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a6c5f4cfd7f0c67bf1db6682a98ef85fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::dangle1</definition>
        <argsstring>(double, const std::string &amp;unit)</argsstring>
        <name>dangle1</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set increment to first position angle in specified unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="445" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aa5069262e8644cd8ea002b1d3c6ea848" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::dangle1</definition>
        <argsstring>() const</argsstring>
        <name>dangle1</name>
        <briefdescription>
<para>Get increment to first position angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="447" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a208f6e53aaff96defa11e7321b47e258" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::dangle1</definition>
        <argsstring>(std::string const &amp;unit) const</argsstring>
        <name>dangle1</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get increment to first position angle in specified unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="449" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a66ad14d834a9a54120b0d55c07ea5371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::dangle2</definition>
        <argsstring>(double)</argsstring>
        <name>dangle2</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set increment to second position angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="451" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a823fede8d6c133e6059abe471ffd79bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::dangle2</definition>
        <argsstring>(double, const std::string &amp;unit)</argsstring>
        <name>dangle2</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set increment to second position angle in specified unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="453" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ad5a3d67902a86bdddeba0dda3064cf77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::dangle2</definition>
        <argsstring>() const</argsstring>
        <name>dangle2</name>
        <briefdescription>
<para>Get increment to second position angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="455" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ab42b28eb9de074ecd3b6488a61cb3552" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Screen::dangle2</definition>
        <argsstring>(std::string const &amp;unit) const</argsstring>
        <name>dangle2</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get increment to second position angle in specified unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="457" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1abf443845495bb3c4a44bb42db8fbbf34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::anglekind</definition>
        <argsstring>(int)</argsstring>
        <name>anglekind</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_screen_1a5fe8cfa532a7ff58970519cf25040710" kindref="member">Screen::anglekind_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="460" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a819bcf53da664d3779a94b91cc56e318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::anglekind</definition>
        <argsstring>(std::string const &amp;)</argsstring>
        <name>anglekind</name>
        <param>
          <type>std::string const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="461" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1af7f616453c23f8490728033d517b019f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gyoto::Screen::anglekind</definition>
        <argsstring>() const</argsstring>
        <name>anglekind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="462" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aff7c6c6a235408bbaafff591d5fdf100" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        <definition>size_t Gyoto::Screen::resolution</definition>
        <argsstring>() const</argsstring>
        <name>resolution</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_screen_1a1ad9755611f0442d1c9fe58a2998d133" kindref="member">Screen::npix_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="465" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aec5dbe603e61f05836e2dec202a96040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::resolution</definition>
        <argsstring>(size_t)</argsstring>
        <name>resolution</name>
        <param>
          <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_screen_1a1ad9755611f0442d1c9fe58a2998d133" kindref="member">Screen::npix_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="467" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ae05314bd4dd6dd39d372f6abe4c695d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::mask</definition>
        <argsstring>(double const *const mm, size_t resolution=0)</argsstring>
        <name>mask</name>
        <param>
          <type>double const *const</type>
          <declname>mm</declname>
        </param>
        <param>
          <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
          <declname>resolution</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set mask_ from array. </para>
        </briefdescription>
        <detaileddescription>
<para>mm will be copied. mm must be a square resolution x resolution array. If mm==NULL, just deallocate mask_. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="474" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a329fda678b4d3df978741ab813f3df93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double const  *</type>
        <definition>double const* Gyoto::Screen::mask</definition>
        <argsstring>() const</argsstring>
        <name>mask</name>
        <briefdescription>
<para>Retrieve const pointer to mask_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="477" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1afd1385de8586a147707dd21a24cdcb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::maskFile</definition>
        <argsstring>(std::string const &amp;fname)</argsstring>
        <name>maskFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="478" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a83d2dbcf7402fac831126ca8298a14f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gyoto::Screen::maskFile</definition>
        <argsstring>() const</argsstring>
        <name>maskFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="479" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ab6a2c480414850b30659855936493140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gyoto::Screen::operator()</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        </param>
        <param>
          <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        </param>
        <briefdescription>
<para>Whether this pixel should be ray-traced. </para>
        </briefdescription>
        <detaileddescription>
<para>If mask_ is not set, always true. Else, true for non-zero cells in mask_. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="494" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a9668c6a836d0773248f9a3c0fa41ecf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::getObserverPos</definition>
        <argsstring>(double dest[4]) const</argsstring>
        <name>getObserverPos</name>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>4-Position of the observer relative to the metric </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> is positioned relative to the observer with four elements: <ref refid="class_gyoto_1_1_screen_1ae1a1645e79ee8897fa8a95c12cabb98b" kindref="member">Screen::distance</ref>, <ref refid="class_gyoto_1_1_screen_1a76e6f8eafa8bc1a7e3d600b9aac28a4f" kindref="member">Screen::inclination</ref>, Screen::paln and <ref refid="class_gyoto_1_1_screen_1a520d6c146be00f52481bcbec17ec77d7" kindref="member">Screen::argument</ref>.</para>
<para>This function returns the position of the observer relative to the metric system in <ref refid="class_gyoto_1_1_screen_1a011767f8a5b9db586c12c01f31970556" kindref="member">Screen::gg_</ref>, using these parameters. The output parameter is coord.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">coord</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the observer. Must be preallocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="509" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a91b9bc67e492948511a88b41f52da794" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::getFourVel</definition>
        <argsstring>(double dest[4]) const</argsstring>
        <name>getFourVel</name>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Get copy of <ref refid="class_gyoto_1_1_screen_1ab46edd61cb5363d03d906c02926696f5" kindref="member">Screen::fourvel_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">fourvel</parametername>
</parameternamelist>
<parameterdescription>
<para>preallocated 4-element array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="515" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1af2b69ca19ed10d73a0e20f4fb083d048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::fourVel</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;)</argsstring>
        <name>fourVel</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="517" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a4ce2092b4b1ae097aac30b10c37fe97e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Gyoto::Screen::fourVel</definition>
        <argsstring>() const</argsstring>
        <name>fourVel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="518" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1af57850c1f467fc65e44470304360e8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::screenVector1</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;)</argsstring>
        <name>screenVector1</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="519" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a5b2b0c72b9c5370130cb1b6aa4474353" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Gyoto::Screen::screenVector1</definition>
        <argsstring>() const</argsstring>
        <name>screenVector1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="520" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ad668c4960a87c0b11b284f16fed6daba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::screenVector2</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;)</argsstring>
        <name>screenVector2</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="521" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a09600813e1705f08c213819a2aefbe92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Gyoto::Screen::screenVector2</definition>
        <argsstring>() const</argsstring>
        <name>screenVector2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="522" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a79675cd53ec834fa7f499453a771a515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::screenVector3</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;)</argsstring>
        <name>screenVector3</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="523" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a428082917bc87e85a0bfaeb07a5af6c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Gyoto::Screen::screenVector3</definition>
        <argsstring>() const</argsstring>
        <name>screenVector3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="524" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a5e2e54d9c2fa7d1123c1229812736788" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::getScreen1</definition>
        <argsstring>(double dest[4]) const</argsstring>
        <name>getScreen1</name>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Get copy of <ref refid="class_gyoto_1_1_screen_1a879052ef3c52f2a84c42bcb1383a9ba0" kindref="member">Screen::screen1_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>preallocated 4-element array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="530" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a1ba625dd52784a24803e7aa26f32fc12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::getScreen2</definition>
        <argsstring>(double dest[4]) const</argsstring>
        <name>getScreen2</name>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Get copy of <ref refid="class_gyoto_1_1_screen_1addcecd0b24324e73d880af9813ff55ae" kindref="member">Screen::screen2_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>preallocated 4-element array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="536" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a98afecb20824bbd141c2236198d68a22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::getScreen3</definition>
        <argsstring>(double dest[4]) const</argsstring>
        <name>getScreen3</name>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Get copy of <ref refid="class_gyoto_1_1_screen_1a10ce21458df390989b7b89621cd29fc7" kindref="member">Screen::screen3_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>preallocated 4-element array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="542" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a8de2b660ee2bb8f3aa706a529638daa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::getRayTriad</definition>
        <argsstring>(double x, double y, double dest[8], bool compute_polar_basis=false, double Ephi[4]=NULL, double Etheta[4]=NULL) const</argsstring>
        <name>getRayTriad</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>compute_polar_basis</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Ephi</declname>
          <array>[4]</array>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Etheta</declname>
          <array>[4]</array>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Get 8-coordinate of <ref refid="class_gyoto_1_1_photon" kindref="compound">Photon</ref> hitting screen from a given direction and polarization basis if needed. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="class_gyoto_1_1_screen_1a9668c6a836d0773248f9a3c0fa41ecf7" kindref="member">Screen::getObserverPos()</ref> but will return in addition the 4-velocity of a photon corresponding to the sky direction given by x and y. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>RA (d_alpha*cos(delta)) offset in radians; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Dec offset (d_delta) in radians; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>position-velocity of the observer <ref refid="class_gyoto_1_1_photon" kindref="compound">Photon</ref>. Preallocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">compute_polar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>True if polarization basis Ephi,Etheta is needed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Ephi</parametername>
</parameternamelist>
<parameterdescription>
<para>first polarisation direction. Preallocated. Default: NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Etheta</parametername>
</parameternamelist>
<parameterdescription>
<para>second polarisation direction. Preallocated. Default: NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="557" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a5b4e7ce6c9731b530e4af289dc5e902d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::getRayTriad</definition>
        <argsstring>(const size_t i, const size_t j, double dest[8], bool compute_polar_basis=false, double Ephi[4]=NULL, double Etheta[4]=NULL) const</argsstring>
        <name>getRayTriad</name>
        <param>
          <type>const <ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>compute_polar_basis</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Ephi</declname>
          <array>[4]</array>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Etheta</declname>
          <array>[4]</array>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Get 8-coordinate of <ref refid="class_gyoto_1_1_photon" kindref="compound">Photon</ref> hitting screen pixel and polarization basis if needed. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="class_gyoto_1_1_screen_1a9668c6a836d0773248f9a3c0fa41ecf7" kindref="member">Screen::getObserverPos()</ref> but will return in addition the 4-velocity of a photon corresponding to the sky direction given by x and y. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>pixel coordinates <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>position-velocity of the <ref refid="class_gyoto_1_1_photon" kindref="compound">Photon</ref>. Preallocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">compute_polar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>True if polarization basis Ephi,Etheta is needed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Ephi</parametername>
</parameternamelist>
<parameterdescription>
<para>first polarisation direction. Preallocated. Default: NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Etheta</parametername>
</parameternamelist>
<parameterdescription>
<para>second polarisation direction. Preallocated. Default: NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="574" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a77a079f922c02a64d8050eef15029dbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::coordToSky</definition>
        <argsstring>(const double pos[4], double dest[3], bool geometrical=false) const</argsstring>
        <name>coordToSky</name>
        <param>
          <type>const double</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>geometrical</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert metric 4-position to sky 3-position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position in metric coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>3-position in plane of the sky: Cartesian East, North, front. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">geometrical</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, #dest will be in geometrical units instead of meters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="585" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aa6e2f7ea7592507047318568b7282190" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::skyToCoord</definition>
        <argsstring>(const double sky[3], double dest[4], bool geometrical=false) const</argsstring>
        <name>skyToCoord</name>
        <param>
          <type>const double</type>
          <declname>sky</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>geometrical</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert sky 3-position to metric 4-position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sky</parametername>
</parameternamelist>
<parameterdescription>
<para>3-position in plane of the sky. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position in metric coordinates (dest[0] is not modified). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">geometrical</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true if #sky is in geometrical units instead of meters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="593" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1ad1c98038ca13ea2bbfa6b0908cc0eb2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::coordToXYZ</definition>
        <argsstring>(const double pos[4], double dest[3]) const</argsstring>
        <name>coordToXYZ</name>
        <param>
          <type>const double</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dest</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Convert 4-position to 3-cartesian coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="595" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1af0257ec0a28ae5ebc2d6dfbe82ccd874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::computeBaseVectors</definition>
        <argsstring>()</argsstring>
        <name>computeBaseVectors</name>
        <briefdescription>
<para>Compute base vectors according to projection parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="598" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a9e77872fc01b8f58e270a1254acd5bc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; Gyoto::Screen::print</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <briefdescription>
<para>Display. </para>
        </briefdescription>
        <detaileddescription>
<para>Debug helper </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="603" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a820e48cf8a982f699f9d769befcc8e54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; Gyoto::Screen::printBaseVectors</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>printBaseVectors</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <briefdescription>
<para>Debug helper. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="604" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_screen_1a50f80add154ec088fc9509ba22ef0032" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gyoto::Screen::fillProperty</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp, Property const &amp;p) const</argsstring>
        <name>fillProperty</name>
        <reimplements refid="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b">fillProperty</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Output a single <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> to XML. </para>
        </briefdescription>
        <detaileddescription>
<para>The base implementation decides what to do based on the <emphasis>p.type</emphasis>. The format matches how <ref refid="class_gyoto_1_1_object_1aa0a8b119e7aa95b21be081f8c97e1626" kindref="member">setParameters()</ref> an <ref refid="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b" kindref="member">setParameter()</ref> would interpret the XML descition.</para>
<para>Overriding this method should be avoided, but makes sense in some cases (for instance <ref refid="class_gyoto_1_1_screen_1a50f80add154ec088fc9509ba22ef0032" kindref="member">Screen::fillProperty()</ref> selects a different unit for <emphasis>Distance</emphasis> based on its magnitude, so that stellar sizes are expressed in solar radii while smaller sizes can be expressed in meters and larger sizes in parsecs).</para>
<para>Overriding implementation should fall-back on calling the implementation in the direct parent class: <programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>void<sp/>fillProperty(Gyoto::FactoryMessenger<sp/>*fmp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property<sp/>const<sp/>&amp;p)<sp/>const<sp/>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">void<sp/>B::fillProperty(Gyoto::FactoryMessenger<sp/>*fmp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property<sp/>const<sp/>&amp;p)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>fmp-&gt;doSomething();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>A::fillProperty(fmp,<sp/>p);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="629" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a9ec09c51fd18dde7c13ef3b03fac1fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::SmartPointee::incRefCount</definition>
        <argsstring>()</argsstring>
        <name>incRefCount</name>
        <briefdescription>
<para>Increment the reference counter. Warning: Don&apos;t mess with the counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="96" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a22a67609fb4690ee8ec0e95e4060e387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::decRefCount</definition>
        <argsstring>()</argsstring>
        <name>decRefCount</name>
        <briefdescription>
<para>Decrement the reference counter and return current value. Warning: Don&apos;t mess with the counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="97" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a9a9cb35cd161bf19ce652f76e0a5bec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::getRefCount</definition>
        <argsstring>()</argsstring>
        <name>getRefCount</name>
        <briefdescription>
<para>Get the current number of references. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="98" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a06ea95dc396053466cdd63d419d1688c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Gyoto::Object::isThreadSafe</definition>
        <argsstring>() const</argsstring>
        <name>isThreadSafe</name>
        <briefdescription>
<para>Whether this class is thread-safe. </para>
        </briefdescription>
        <detaileddescription>
<para>Return True if this object is thread-safe, i.e. if an instance and its clone can be used in parallel threads (in the context of Scenery::raytrace()). Known objects which are not thread-safe include Lorene metrics and everything from the <ref refid="namespace_gyoto_1_1_python" kindref="compound">Python</ref> plug-in.</para>
<para>The default implementation considers that the class itself is thread safe and recurses into the declared properties to check whether they are safe too. Classes that abide to the Object/Property paradigm and are themselves thread-safe have nothing special to do.</para>
<para>Objects that clone children in their copy constructor that are not declared as properties must take these children into account.</para>
<para>Classes that are never thread-safe must declare it. It acn be easily done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="197" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a58c4ecdaae1873dc6912e164b61826e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(Property const &amp;p, Value val)</argsstring>
        <name>set</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="237" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1aa063e0df7c2e4b22207a784c76c6681f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(Property const &amp;p, Value val, std::string const &amp;unit)</argsstring>
        <name>set</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> (expressed in unit) of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="240" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1aba6d35c5bbf814912ed84549109e117a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(std::string const &amp;pname, Value val)</argsstring>
        <name>set</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="243" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1abed03e16a8013699534b802e06751ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(std::string const &amp;pname, Value val, std::string const &amp;unit)</argsstring>
        <name>set</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> (expressed in unit) of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="246" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a8232112e660216a61caa15fab27b889f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(Property const &amp;p) const</argsstring>
        <name>get</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="249" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1ad61a061d2073c841e9911be0395d4494" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(std::string const &amp;pname) const</argsstring>
        <name>get</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="252" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1ad4189c2c103030e9d91ee0f29ebcf13d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(Property const &amp;p, std::string const &amp;unit) const</argsstring>
        <name>get</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>, converted to unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="255" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a99544282b6c383b8570a5bc51bed1ecf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(std::string const &amp;pname, std::string const &amp;unit) const</argsstring>
        <name>get</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>, converted to unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="258" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a424ef3538c714adfafad7eda249e0d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const  *</type>
        <definition>Property const* Gyoto::Object::property</definition>
        <argsstring>(std::string const pname) const</argsstring>
        <name>property</name>
        <param>
          <type>std::string const</type>
          <declname>pname</declname>
        </param>
        <briefdescription>
<para>Find property by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Look into the <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> list for a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> whose <emphasis>name</emphasis> (or <emphasis>name_false</emphasis>, for a boolean <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>) is <emphasis>pname</emphasis>. Return a const pointer to the first such property found, or NULL if none is found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="267" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::fillElement</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp) const</argsstring>
        <name>fillElement</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_complex_1a88d6f38c5fa5401a860291fbb21526d5">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_complex_1ada5f1fb56b87c56ff64113a49c76cca0">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_spectrometer_1_1_complex_1a0d73e5fd77b0e920af44894abfc96a99">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_scenery_1a63501e86c47ea6b67e0c564c706a72f1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <briefdescription>
<para>Fill the XML element for this <ref refid="class_gyoto_1_1_object" kindref="compound">Object</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The base implementation simply calls <ref refid="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b" kindref="member">fillProperty()</ref> for each <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> defined for the <ref refid="class_gyoto_1_1_object" kindref="compound">Object</ref>.</para>
<para>Derived classes should avoid overriding <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref>. It may make sense occasionally, e.g. to make sure that the metric is output first.</para>
<para>To customize how a given <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> is rendered, it is better to override <ref refid="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b" kindref="member">fillProperty()</ref>.</para>
<para>If this method is overridden, the implementation should in general call <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> on the direct base. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="316" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1aa0a8b119e7aa95b21be081f8c97e1626" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::setParameters</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp)</argsstring>
        <name>setParameters</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_generic_1a1872b827525ccb1fdedb614474992a6a">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_complex_1a635b0ea47d78c02a999d932eec8b16c5">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_complex_1a5607f9166dc2c1a0a7bd61cde6a71c57">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_spectrometer_1_1_complex_1a008340295dbb21fbddfa6ad7612da80e">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_equatorial_hot_spot_1a931ca188ae49a0d8e9764a151edd3553">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_photon_1a7a6664a5de91b1c59ba1b57d54ba1dd9">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_shift_1a81a5f0f4f32f5be884a4445f1d1d5b17">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_star_1ad1ad60d3ce8861dfa8626ca908e5789e">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aaca1850f712a089a6c5e0188aec0e5a4">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_oscil_torus_1a0e4df99b42b3d3722d6ea39972d1421d">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a84ea2cab6209f1ed0de3a73223c6a5e8">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a84ea2cab6209f1ed0de3a73223c6a5e8">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a84ea2cab6209f1ed0de3a73223c6a5e8">setParameters</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a84ea2cab6209f1ed0de3a73223c6a5e8">setParameters</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <briefdescription>
<para>Main loop for parsing Properties from XML description. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim> This function queries the FactoryMessenger for elements to parse,
 and tries to matche each element to a Property to set it
 accordingly.

 Any class that tries to be buildable from XML must supply a
 subcontractor (for base classes such as Metric, Astrobj, Spectrum
 and Spectrometer, it is done as a template that must be
 specialized for each class).

 This subcontractor typically looks somewhat like this:
</verbatim> <programlisting><codeline><highlight class="normal">SmartPointer&lt;Metric::Generic&gt;</highlight></codeline>
<codeline><highlight class="normal">Gyoto::Metric::MyKind::Subcontractor(FactoryMessenger*<sp/>fmp)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SmartPointer&lt;MyKind&gt;<sp/>gg<sp/>=<sp/>new<sp/>MyKind();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gg<sp/>-&gt;<sp/>setParameters(fmp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>gg;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <verbatim> Although this is discouraged, it is possible to override the
 following functions to customize how XML entities are parsed:
   - setParameters() if low-level access to the
     FactoryMessenger is required;
   - setParameter(std::string name,
                  std::string content,
                  std::string unit)
     to interpret an entity that does not match a Property
     (e.g. alternative name);
   - setParameter(Gyoto::Property const &amp;p,
                  std::string const &amp;name,
                  std::string const &amp;content,
                  std::string const &amp;unit)
     to change how a Property is interpreted.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="355" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Object::setParameter</definition>
        <argsstring>(std::string name, std::string content, std::string unit)</argsstring>
        <name>setParameter</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_equatorial_hot_spot_1a0c6f1aee4a478c5ef695348d64eae2d4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_k_s_1a4c9d3a51c5d1478908516a0b96a42135">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_star_1a628aa18277af464450896efd63206527">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rot_star3__1_1ac2fbf2bb5796e3d7c7eb80dccfe20af7">setParameter</reimplementedby>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>content</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set parameter by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used when parsing an XML description, if no <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> of this <emphasis>name</emphasis> is found. Overriding implementation should fall-back on calling the direct&apos;s parent implementation:</para>
<para><programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>int<sp/>setParameter(std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">int<sp/>B::setParameter(std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>doSomething(content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>return<sp/>A::setParameter(name,<sp/>content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>0;<sp/><sp/>//<sp/>name<sp/>was<sp/>known</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>XML name of the parameter (XML entity). This may have a path component, e.g. &quot;Astrobj::Radius&quot;, in which case a property named &quot;Astrobj&quot; will be sought in the current object, and setParameter will be called recusrively on this <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref> with Radius as name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the unit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if this parameter is known, 1 if it is not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="390" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a43fe041144add66155668ca88a99fd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::setParameter</definition>
        <argsstring>(Gyoto::Property const &amp;p, std::string const &amp;name, std::string const &amp;content, std::string const &amp;unit)</argsstring>
        <name>setParameter</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_polish_doughnut_1a13a8a59bd3738f5739db0550dbb42003">setParameter</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Gyoto::Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>content</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set parameter by <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> (and name) </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used when parsing an XML description, if <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> (<emphasis>p</emphasis>) of this <emphasis>name</emphasis> is found (i.e. either <emphasis>p.name</emphasis> or <emphasis>p.name_false</emphasis> is equal to <emphasis>name</emphasis>). Implementation should fall-back on calling the direct&apos;s parent implementation:</para>
<para><programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>void<sp/>setParameter(Gyoto::Property<sp/>const<sp/>&amp;p,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">void<sp/>B::setParameter(Gyoto::Property<sp/>const<sp/>&amp;p,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>doSomething(content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>A::setParameter(p,<sp/>name,<sp/>content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> that matches <emphasis>name</emphasis> (<emphasis>p.name</emphasis> == <emphasis>name</emphasis> or <emphasis>p.name_false</emphasis> == <emphasis>name</emphasis>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>XML name of the parameter (XML entity) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the unit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="426" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a741ba678188d7d167ff2e3bb13dd924f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gyoto::Object::describeProperty</definition>
        <argsstring>(Gyoto::Property const &amp;p) const</argsstring>
        <name>describeProperty</name>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Gyoto::Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Format desrciption for a property. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a string containing the name(s) and type of the property, as well as whether it supports unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="437" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a13843618d84c49d47bd37ddfa31160c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Object::help</definition>
        <argsstring>() const</argsstring>
        <name>help</name>
        <briefdescription>
<para>Print (to stdout) some help on this class. </para>
        </briefdescription>
        <detaileddescription>
<para>Describe all properties that this instance supports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="444" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a9f46de678c67e9050cf3a8b9677e1d73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Gyoto::Object::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <reimplementedby refid="class_gyoto_1_1_spectrometer_1_1_uniform_1af6c1082ac163e833fff9e934b417b194">kind</reimplementedby>
        <briefdescription>
<para>Get kind_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="456" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gyoto_1_1_screen_1aed37ff18e75ac7dd135de624db80428e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> &gt;</type>
        <definition>static SmartPointer&lt;Screen&gt; Gyoto::Screen::Subcontractor</definition>
        <argsstring>(FactoryMessenger *fmp)</argsstring>
        <name>Subcontractor</name>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <briefdescription>
<para>Instanciate a <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> from XML entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="632" column="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gyoto::Object::kind_</definition>
        <argsstring></argsstring>
        <name>kind_</name>
        <briefdescription>
<para>The &quot;kind&quot; that is output in the XML entity. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. for an <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref>, <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> will ensure <programlisting><codeline><highlight class="normal">&lt;Astrobj<sp/>kind=&quot;kind_&quot;<sp/>...&gt;...&lt;/Astrobj&gt;</highlight></codeline>
</programlisting> is written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="162" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoObject.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_object_1a01832761cd5f0a12319e3e24ce9a9fba" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; Gyoto::Object::plugins_</definition>
        <argsstring></argsstring>
        <name>plugins_</name>
        <briefdescription>
<para>The plug-ins that needs to be loaded to access this instance&apos;s class. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. for an <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref>, <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> will ensure <programlisting><codeline><highlight class="normal">&lt;Astrobj<sp/>...<sp/>plugin=&quot;plugins_&quot;&gt;...&lt;/Astrobj&gt;</highlight></codeline>
</programlisting> is written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="172" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoObject.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::kind</definition>
        <argsstring>(const std::string)</argsstring>
        <name>kind</name>
        <param>
          <type>const std::string</type>
        </param>
        <briefdescription>
<para>Set kind_. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" kindref="member">kind(const std::string)</ref> is protected because, for most Objects, it should not be changed in runtime. Set kind_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="453" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The camera with which the <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref> is observed. </para>
    </briefdescription>
    <detaileddescription>
<para>In the observer-centric point-of-view, the center of the <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>&apos;s coordinate system is positioned relatively to the observing <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> using three Euler angles and the distance (in meters). The three Euler angles are:<itemizedlist>
<listitem><para>position angle of the line of nodes (North of East);</para>
</listitem><listitem><para>inclination (0 = face-on);</para>
</listitem><listitem><para>argument of the X axis of the <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>&apos;s coordinate system. We use the z-x-z convention. See <ulink url="http://en.wikipedia.org/wiki/Euler_angles">http://en.wikipedia.org/wiki/Euler_angles</ulink></para>
</listitem></itemizedlist>
</para>
<para>In addition, the <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> conveys:<itemizedlist>
<listitem><para>the observing date (in geometrical units, but expect it to change to seconds in a future version);</para>
</listitem><listitem><para>the field-of-view of the image;</para>
</listitem><listitem><para>the resolution of the camera: number of pixels on each side (the camera is square);</para>
</listitem><listitem><para>the observing frequency.</para>
</listitem></itemizedlist>
</para>
<para>The scalar FreqObs defines the observing frequency for <ref refid="class_gyoto_1_1_scenery" kindref="compound">Scenery</ref> quantity Intensity.</para>
<para>Likewise, a <ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Gyoto::Spectrometer</ref> defines for which frequencies spectra are computed (when the Quantity <ref refid="namespace_gyoto_1_1_spectrum" kindref="compound">Spectrum</ref> is requested in the <ref refid="class_gyoto_1_1_scenery" kindref="compound">Scenery</ref>).</para>
<para>For the sake of theoreticians, there is an alternate way of specifying the relative position of the <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> and <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>, by specifying the 4-coordinates of the <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> in the <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>&apos;s coordinate system (in that case, eerything is specified in geometrical units).</para>
<para>So an XML stanza for a <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> may look like that: <programlisting><codeline><highlight class="normal">&lt;Screen&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Time&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000.<sp/><sp/><sp/><sp/><sp/><sp/>&lt;/Time&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;FieldOfView&gt;<sp/><sp/><sp/>0.3141592653589793<sp/>&lt;/FieldOfView&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Resolution&gt;<sp/><sp/>128<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/Resolution&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Distance&gt;<sp/><sp/><sp/><sp/><sp/><sp/>1e30<sp/><sp/><sp/><sp/>&lt;/Distance&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;PALN&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.14159<sp/>&lt;/PALN&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Inclination&gt;<sp/><sp/><sp/>2.0944<sp/><sp/>&lt;/Inclination&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Argument&gt;<sp/><sp/><sp/><sp/><sp/>-2.0944<sp/><sp/>&lt;/Argument&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Spectrometer<sp/>kind=&quot;freqlog&quot;<sp/>nsamples=&quot;10&quot;&gt;<sp/>17.<sp/>23.<sp/>&lt;/Spectrometer&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;FreqObs&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e20<sp/><sp/><sp/><sp/>&lt;/FreqObs&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/Screen&gt;</highlight></codeline>
</programlisting></para>
<para>or like that:</para>
<para><programlisting><codeline><highlight class="normal">&lt;Screen&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Position&gt;<sp/>1000.<sp/>1000.<sp/>0.15.<sp/>0.&lt;/Position&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;FieldOfView&gt;<sp/><sp/><sp/>0.3141592653589793<sp/>&lt;/FieldOfView&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Resolution&gt;<sp/><sp/>128<sp/>&lt;/Resolution&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;Spectrometer<sp/>kind=&quot;freqlog&quot;<sp/>nsamples=&quot;10&quot;&gt;<sp/>17.<sp/>23.<sp/>&lt;/Spectrometer&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;FreqObs&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e20<sp/><sp/><sp/><sp/>&lt;/FreqObs&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/Screen&gt;</highlight></codeline>
</programlisting></para>
<para><ref refid="namespace_gyoto_1_1_units" kindref="compound">Units</ref> can be specified using the unit attribute in the XML file, for instance:</para>
<para><programlisting><codeline><highlight class="normal">&lt;Distance<sp/>unit=&quot;kpc&quot;&gt;<sp/>8<sp/>&lt;/Distance&gt;</highlight></codeline>
</programlisting></para>
<para>Possible units are (with [] noting the default):<itemizedlist>
<listitem><para>distance: [m], geometrical, cm, km, AU, ly, pc, kpc, Mpc;</para>
</listitem><listitem><para>PALN, inclination, argument: [rad], deg.</para>
</listitem><listitem><para>frequency: [Hz], µm, GeV...</para>
</listitem></itemizedlist>
</para>
<para>When the distance is really large and most of the ray-tracing would happen de facto in flat space, the camera is transported to a location at a reasonable distance from the metric and the images are scaled accordingly. The default value for this distance should be fine, but it can be customized using the &quot;dmax&quot; attribute of the &quot;Distance&quot; element. &quot;dmax&quot; is always expressed in geometrical units:</para>
<para><programlisting><codeline><highlight class="normal">&lt;Distance<sp/>unit=&quot;kpc&quot;<sp/>dmax=&quot;1e7&quot;&gt;<sp/>8<sp/>&lt;/Distance&gt;</highlight></codeline>
</programlisting></para>
<para>Symptoms when dmax is too large include pixelization of the image (neighbouring photons are numerically identical) and other numerical overflows. dmax is too small when it is apparent that changing it yields projection effects. dmax must be large compared to rmax in the <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref> and ideally, changing it by an order of magnitude should not yield significant changes in the ray-traced image.</para>
<para>A mask may be used to limit ray-tracing to only some portions of the field. The <ref refid="class_gyoto_1_1_scenery" kindref="compound">Scenery</ref> checks whether a mask is to be used using <ref refid="class_gyoto_1_1_screen_1ab6a2c480414850b30659855936493140" kindref="member">Screen::operator()(size_t i, size_t j)</ref>. The mask can be loaded from a FITS file as a square image of doubles: <programlisting><codeline><highlight class="normal">&lt;Mask&gt;maskfile.fits&lt;/Mask&gt;</highlight></codeline>
</programlisting> The mask needs to be have the same size as the <ref refid="class_gyoto_1_1_screen" kindref="compound">Screen</ref> itself, so loading a mask also sets the resolution, and changing the resolution after setting a mask also removes the mask. The content of the Mask entity is parsed by <ref refid="class_gyoto_1_1_factory_1a1adf0078f2541926fcfeac0221a21206" kindref="member">Factory::fullPath()</ref>, so it can be an absolute path, a path relative to where the XML file is stored, or relative to the current working directory if prefixed with &quot;`pwd`/&quot;. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Gyoto::Object</label>
        <link refid="class_gyoto_1_1_object"/>
      </node>
      <node id="2">
        <label>Gyoto::SmartPointee</label>
        <link refid="class_gyoto_1_1_smart_pointee"/>
      </node>
      <node id="1">
        <label>Gyoto::Screen</label>
        <link refid="class_gyoto_1_1_screen"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Gyoto::Property</label>
        <link refid="class_gyoto_1_1_property"/>
        <childnode refid="5" relation="usage">
          <edgelabel>getter_unit</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>getter</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>setter</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>setter_unit</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Gyoto::SmartPointer&lt; Gyoto::Astrobj::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="11">
        <label>Gyoto::SmartPointer&lt; Gyoto::Screen &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="7">
        <label>Gyoto::SmartPointer&lt; Gyoto::Spectrometer::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="3">
        <label>Gyoto::Object</label>
        <link refid="class_gyoto_1_1_object"/>
        <childnode refid="4" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>Gyoto::SmartPointer&lt; Gyoto::Metric::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="2">
        <label>Gyoto::SmartPointee</label>
        <link refid="class_gyoto_1_1_smart_pointee"/>
      </node>
      <node id="12">
        <label>Gyoto::Property::setter_t</label>
        <link refid="union_gyoto_1_1_property_1_1setter__t"/>
        <childnode refid="7" relation="usage">
          <edgelabel>set_spectrometer</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>set_metric</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>set_spectrum</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>set_astrobj</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>set_screen</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>Gyoto::Property::setter_unit_t</label>
        <link refid="union_gyoto_1_1_property_1_1setter__unit__t"/>
      </node>
      <node id="9">
        <label>Gyoto::SmartPointer&lt; Gyoto::Spectrum::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="1">
        <label>Gyoto::Screen</label>
        <link refid="class_gyoto_1_1_screen"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>spectro_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>gg_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Gyoto::Property::getter_unit_t</label>
        <link refid="union_gyoto_1_1_property_1_1getter__unit__t"/>
      </node>
      <node id="6">
        <label>Gyoto::Property::getter_t</label>
        <link refid="union_gyoto_1_1_property_1_1getter__t"/>
        <childnode refid="7" relation="usage">
          <edgelabel>get_spectrometer</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>get_metric</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>get_spectrum</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>get_astrobj</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>get_screen</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/junichi/Gyoto/include/GyotoScreen.h" line="173" column="1" bodyfile="/home/junichi/Gyoto/include/GyotoScreen.h" bodystart="176" bodyend="815"/>
    <listofallmembers>
      <member refid="class_gyoto_1_1_screen_1a3d039508310efe3dcbf50204a3619b2fab11967a242ab4a6a6bd1596ca1dfc0b0" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>angle</name></member>
      <member refid="class_gyoto_1_1_screen_1abf443845495bb3c4a44bb42db8fbbf34" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>anglekind</name></member>
      <member refid="class_gyoto_1_1_screen_1a819bcf53da664d3779a94b91cc56e318" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>anglekind</name></member>
      <member refid="class_gyoto_1_1_screen_1af7f616453c23f8490728033d517b019f" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>anglekind</name></member>
      <member refid="class_gyoto_1_1_screen_1a5fe8cfa532a7ff58970519cf25040710" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>anglekind_</name></member>
      <member refid="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbc" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>anglekind_e</name></member>
      <member refid="class_gyoto_1_1_screen_1a7ca3191ddb07c0bdc6ecfb50ae8efe27" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>anglekind_t</name></member>
      <member refid="class_gyoto_1_1_screen_1a520d6c146be00f52481bcbec17ec77d7" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>argument</name></member>
      <member refid="class_gyoto_1_1_screen_1a582d1c316a2d4c0fbf678b52426dc21c" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>argument</name></member>
      <member refid="class_gyoto_1_1_screen_1a31dd1c28b3a455ceb8e8ff6e8dde4049" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>argument</name></member>
      <member refid="class_gyoto_1_1_screen_1a704a91aa29ba29f117c5426425805c46" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>argument</name></member>
      <member refid="class_gyoto_1_1_screen_1a3bf1a87d30f464a041179bb24ff9d8a1" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>azimuthal_fov_</name></member>
      <member refid="class_gyoto_1_1_screen_1a16d474f38095d0e8572a5b72a5868e03" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>azimuthalFieldOfView</name></member>
      <member refid="class_gyoto_1_1_screen_1ab02ca170914a86f04a9499e34036c0b4" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>azimuthalFieldOfView</name></member>
      <member refid="class_gyoto_1_1_screen_1a78863fb072cf8fee8db3014b26ef8907" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>clone</name></member>
      <member refid="class_gyoto_1_1_screen_1af0257ec0a28ae5ebc2d6dfbe82ccd874" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>computeBaseVectors</name></member>
      <member refid="class_gyoto_1_1_screen_1a7a7a34bea4741958a822f58f2cd01e47" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>coordKind</name></member>
      <member refid="class_gyoto_1_1_screen_1a77a079f922c02a64d8050eef15029dbb" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>coordToSky</name></member>
      <member refid="class_gyoto_1_1_screen_1ad1c98038ca13ea2bbfa6b0908cc0eb2d" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>coordToXYZ</name></member>
      <member refid="class_gyoto_1_1_screen_1a3d039508310efe3dcbf50204a3619b2f" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>CoordType_e</name></member>
      <member refid="class_gyoto_1_1_screen_1ac39692312f15a033dc76dbecfe312f3b" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle1</name></member>
      <member refid="class_gyoto_1_1_screen_1a6c5f4cfd7f0c67bf1db6682a98ef85fc" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle1</name></member>
      <member refid="class_gyoto_1_1_screen_1aa5069262e8644cd8ea002b1d3c6ea848" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle1</name></member>
      <member refid="class_gyoto_1_1_screen_1a208f6e53aaff96defa11e7321b47e258" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle1</name></member>
      <member refid="class_gyoto_1_1_screen_1abf6bd370ee528d28c5b33afc56a1cb4b" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle1_</name></member>
      <member refid="class_gyoto_1_1_screen_1a66ad14d834a9a54120b0d55c07ea5371" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle2</name></member>
      <member refid="class_gyoto_1_1_screen_1a823fede8d6c133e6059abe471ffd79bc" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle2</name></member>
      <member refid="class_gyoto_1_1_screen_1ad5a3d67902a86bdddeba0dda3064cf77" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle2</name></member>
      <member refid="class_gyoto_1_1_screen_1ab42b28eb9de074ecd3b6488a61cb3552" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle2</name></member>
      <member refid="class_gyoto_1_1_screen_1aa20af9c764d367b86c6135cf402c226b" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dangle2_</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a22a67609fb4690ee8ec0e95e4060e387" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>decRefCount</name></member>
      <member refid="class_gyoto_1_1_object_1a741ba678188d7d167ff2e3bb13dd924f" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>describeProperty</name></member>
      <member refid="class_gyoto_1_1_screen_1ae1a1645e79ee8897fa8a95c12cabb98b" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>distance</name></member>
      <member refid="class_gyoto_1_1_screen_1a980a3e6f7f81fdcf81aa9fd063a1cd27" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>distance</name></member>
      <member refid="class_gyoto_1_1_screen_1a4c49e20ef041790a0ba62cb8e8fda521" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>distance</name></member>
      <member refid="class_gyoto_1_1_screen_1a5b304a11f3aefb290dd48d8ce39c83b7" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>distance</name></member>
      <member refid="class_gyoto_1_1_screen_1a30c30ba3daebc04ede4a1a7fd700543b" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>distance_</name></member>
      <member refid="class_gyoto_1_1_screen_1a7e57ddb7fae5b89ae7b59859b9b68ccb" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dMax</name></member>
      <member refid="class_gyoto_1_1_screen_1abbe7a679b861c54410b8460147d5b65d" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dMax</name></member>
      <member refid="class_gyoto_1_1_screen_1ada4d6e039ed2e51d688c97421af91b96" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>dmax_</name></member>
      <member refid="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbca2dc93de4c64d1eedc5997e985b66e1ca" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>equatorial_angles</name></member>
      <member refid="class_gyoto_1_1_screen_1a78512e2b290966a9324a63a18ccde5dc" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>euler_</name></member>
      <member refid="class_gyoto_1_1_screen_1a12c1dcc108221467b4610bd1e9d1bfd5" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>ex_</name></member>
      <member refid="class_gyoto_1_1_screen_1a23faaa0e30354203435ba5321fab87a3" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>ey_</name></member>
      <member refid="class_gyoto_1_1_screen_1a1301fa88db90b65e1c7076fced77dc93" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>ez_</name></member>
      <member refid="class_gyoto_1_1_screen_1a98c5dddc8210a162ebea3e24016defbd" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fieldOfView</name></member>
      <member refid="class_gyoto_1_1_screen_1aa209fe1f0d8743de6ea043dddfe68f82" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fieldOfView</name></member>
      <member refid="class_gyoto_1_1_screen_1a4225900cd8522dccd1a5fdbcbb880758" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fieldOfView</name></member>
      <member refid="class_gyoto_1_1_screen_1adf0b511778c832f3d19cf3222cb3a7f2" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fieldOfView</name></member>
      <member refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>fillElement</name></member>
      <member refid="class_gyoto_1_1_screen_1a50f80add154ec088fc9509ba22ef0032" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>fillProperty</name></member>
      <member refid="class_gyoto_1_1_screen_1af2b69ca19ed10d73a0e20f4fb083d048" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fourVel</name></member>
      <member refid="class_gyoto_1_1_screen_1a4ce2092b4b1ae097aac30b10c37fe97e" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fourVel</name></member>
      <member refid="class_gyoto_1_1_screen_1ab46edd61cb5363d03d906c02926696f5" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fourvel_</name></member>
      <member refid="class_gyoto_1_1_screen_1a05676dadaa657bdc43c36b3e5dca58dc" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>fov_</name></member>
      <member refid="class_gyoto_1_1_screen_1a02accc43491f2b87dc96f779f42a2a75" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>freq_obs_</name></member>
      <member refid="class_gyoto_1_1_screen_1a631c6f6c831dfb1ed35a3f7d81079d09" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>freqObs</name></member>
      <member refid="class_gyoto_1_1_screen_1a22d6664c292b69b2f0984a17592313a2" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>freqObs</name></member>
      <member refid="class_gyoto_1_1_screen_1a4a24c8f8b8fedf796630337c25be5b1c" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>freqObs</name></member>
      <member refid="class_gyoto_1_1_screen_1a3f8d6737fe0a3a73fbad975eca93ca45" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>freqObs</name></member>
      <member refid="class_gyoto_1_1_object_1a8232112e660216a61caa15fab27b889f" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_object_1ad61a061d2073c841e9911be0395d4494" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_object_1ad4189c2c103030e9d91ee0f29ebcf13d" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_object_1a99544282b6c383b8570a5bc51bed1ecf" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_screen_1a91b9bc67e492948511a88b41f52da794" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getFourVel</name></member>
      <member refid="class_gyoto_1_1_screen_1a9668c6a836d0773248f9a3c0fa41ecf7" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getObserverPos</name></member>
      <member refid="class_gyoto_1_1_screen_1a636e5e881825a8835d4f962b9f0d1b47" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>getProperties</name></member>
      <member refid="class_gyoto_1_1_screen_1a8de2b660ee2bb8f3aa706a529638daa3" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getRayTriad</name></member>
      <member refid="class_gyoto_1_1_screen_1a5b4e7ce6c9731b530e4af289dc5e902d" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getRayTriad</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a9a9cb35cd161bf19ce652f76e0a5bec0" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getRefCount</name></member>
      <member refid="class_gyoto_1_1_screen_1a5e2e54d9c2fa7d1123c1229812736788" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getScreen1</name></member>
      <member refid="class_gyoto_1_1_screen_1a1ba625dd52784a24803e7aa26f32fc12" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getScreen2</name></member>
      <member refid="class_gyoto_1_1_screen_1a98afecb20824bbd141c2236198d68a22" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>getScreen3</name></member>
      <member refid="class_gyoto_1_1_screen_1a011767f8a5b9db586c12c01f31970556" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>gg_</name></member>
      <member refid="class_gyoto_1_1_screen_1aa3d99a09ebfd623e66cb8cad4732c0ad" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Gyoto::SmartPointer&lt; Gyoto::Screen &gt;</name></member>
      <member refid="class_gyoto_1_1_screen_1a587c5d275234369eb01eab64f4cce18c" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>GYOTO_OBJECT_THREAD_SAFETY</name></member>
      <member refid="class_gyoto_1_1_object_1a13843618d84c49d47bd37ddfa31160c5" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>help</name></member>
      <member refid="class_gyoto_1_1_screen_1a76e6f8eafa8bc1a7e3d600b9aac28a4f" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>inclination</name></member>
      <member refid="class_gyoto_1_1_screen_1a9cd7ecfd7426b2b2567ea1f65a5d9b9e" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>inclination</name></member>
      <member refid="class_gyoto_1_1_screen_1a5cb143136e6b5be8581038c1102cc114" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>inclination</name></member>
      <member refid="class_gyoto_1_1_screen_1afe808b65f296506f8f6a5f6ce33d56b6" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>inclination</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a9ec09c51fd18dde7c13ef3b03fac1fad" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>incRefCount</name></member>
      <member refid="class_gyoto_1_1_object_1a06ea95dc396053466cdd63d419d1688c" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>isThreadSafe</name></member>
      <member refid="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" prot="protected" virt="virtual"><scope>Gyoto::Screen</scope><name>kind</name></member>
      <member refid="class_gyoto_1_1_object_1a9f46de678c67e9050cf3a8b9677e1d73" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>kind</name></member>
      <member refid="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" prot="protected" virt="non-virtual"><scope>Gyoto::Screen</scope><name>kind_</name></member>
      <member refid="class_gyoto_1_1_screen_1ae05314bd4dd6dd39d372f6abe4c695d8" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>mask</name></member>
      <member refid="class_gyoto_1_1_screen_1a329fda678b4d3df978741ab813f3df93" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>mask</name></member>
      <member refid="class_gyoto_1_1_screen_1ac3bf86898ecf9aac143b995d98c8df52" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>mask_</name></member>
      <member refid="class_gyoto_1_1_screen_1a4992e92935ebc335973ca93957fcc648" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>mask_filename_</name></member>
      <member refid="class_gyoto_1_1_screen_1afd1385de8586a147707dd21a24cdcb8e" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>maskFile</name></member>
      <member refid="class_gyoto_1_1_screen_1a83d2dbcf7402fac831126ca8298a14f6" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>maskFile</name></member>
      <member refid="class_gyoto_1_1_screen_1a1407419c822f724399206a4d242d58ff" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>metric</name></member>
      <member refid="class_gyoto_1_1_screen_1ae3f6f58a48826f3aaa02416881052a67" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>metric</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1abf1c1e431cdd4f08f13de581cccb6770" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>mutex_</name></member>
      <member refid="class_gyoto_1_1_screen_1a1ad9755611f0442d1c9fe58a2998d133" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>npix_</name></member>
      <member refid="class_gyoto_1_1_object_1a5173d279a53bbc9850771e344d6b79b0" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_object_1a5834e83ca1482a379c7ddefb1919457f" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_object_1a1fbd53bedaf8d18f67b12ec0660b8aa7" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_screen_1a318640d216032ccc48098ed0211a7691" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>observerKind</name></member>
      <member refid="class_gyoto_1_1_screen_1a8b87259ba714cdcb7e46ffde8b811ec0" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>observerKind</name></member>
      <member refid="class_gyoto_1_1_screen_1a6a700fec56bcef3ca6088b1421259a2b" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>observerkind_</name></member>
      <member refid="class_gyoto_1_1_screen_1ab6a2c480414850b30659855936493140" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>operator()</name></member>
      <member refid="class_gyoto_1_1_screen_1a3533fce8d94b1678634e00d6c5e908e7" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>PALN</name></member>
      <member refid="class_gyoto_1_1_screen_1a41d61e848badc884f04b9448072d93da" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>PALN</name></member>
      <member refid="class_gyoto_1_1_screen_1a80b4539f8503b202f1e5390d917efb35" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>PALN</name></member>
      <member refid="class_gyoto_1_1_screen_1a02df86989766df90d21648ff2ff2e598" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>PALN</name></member>
      <member refid="class_gyoto_1_1_screen_1a3d039508310efe3dcbf50204a3619b2fa99b9b3f7c47c9ac374f88bfd1293eaa7" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>pixel</name></member>
      <member refid="class_gyoto_1_1_object_1a01832761cd5f0a12319e3e24ce9a9fba" prot="protected" virt="non-virtual"><scope>Gyoto::Screen</scope><name>plugins_</name></member>
      <member refid="class_gyoto_1_1_screen_1a9e77872fc01b8f58e270a1254acd5bc1" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>print</name></member>
      <member refid="class_gyoto_1_1_screen_1a820e48cf8a982f699f9d769befcc8e54" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>printBaseVectors</name></member>
      <member refid="class_gyoto_1_1_screen_1ae8b15135924b213a8c0169b45b4b448d" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>properties</name></member>
      <member refid="class_gyoto_1_1_object_1a424ef3538c714adfafad7eda249e0d58" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>property</name></member>
      <member refid="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbca04b68dd9f071b27d920329f14e3fbc3b" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>rectilinear</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1aaaf212a70fb1880b70e4d357e843cc85" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>refCount</name></member>
      <member refid="class_gyoto_1_1_screen_1aff7c6c6a235408bbaafff591d5fdf100" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>resolution</name></member>
      <member refid="class_gyoto_1_1_screen_1aec5dbe603e61f05836e2dec202a96040" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>resolution</name></member>
      <member refid="class_gyoto_1_1_screen_1a3e8ee3fae738eebcd30ec468effd446a" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Screen</name></member>
      <member refid="class_gyoto_1_1_screen_1a1d163cecc0ac373f5b7553e8b03e6366" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Screen</name></member>
      <member refid="class_gyoto_1_1_screen_1a879052ef3c52f2a84c42bcb1383a9ba0" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screen1_</name></member>
      <member refid="class_gyoto_1_1_screen_1addcecd0b24324e73d880af9813ff55ae" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screen2_</name></member>
      <member refid="class_gyoto_1_1_screen_1a10ce21458df390989b7b89621cd29fc7" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screen3_</name></member>
      <member refid="class_gyoto_1_1_screen_1af57850c1f467fc65e44470304360e8d0" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screenVector1</name></member>
      <member refid="class_gyoto_1_1_screen_1a5b2b0c72b9c5370130cb1b6aa4474353" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screenVector1</name></member>
      <member refid="class_gyoto_1_1_screen_1ad668c4960a87c0b11b284f16fed6daba" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screenVector2</name></member>
      <member refid="class_gyoto_1_1_screen_1a09600813e1705f08c213819a2aefbe92" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screenVector2</name></member>
      <member refid="class_gyoto_1_1_screen_1a79675cd53ec834fa7f499453a771a515" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screenVector3</name></member>
      <member refid="class_gyoto_1_1_screen_1a428082917bc87e85a0bfaeb07a5af6c0" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>screenVector3</name></member>
      <member refid="class_gyoto_1_1_object_1a58c4ecdaae1873dc6912e164b61826e0" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1aa063e0df7c2e4b22207a784c76c6681f" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1aba6d35c5bbf814912ed84549109e117a" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1abed03e16a8013699534b802e06751ef8" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_screen_1a6d64a13dc2178e2b12c70e31f56d3b81" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>setFourVel</name></member>
      <member refid="class_gyoto_1_1_screen_1ac4738c59529e7a8ea0c5a0300866978e" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>setObserverPos</name></member>
      <member refid="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>setParameter</name></member>
      <member refid="class_gyoto_1_1_object_1a43fe041144add66155668ca88a99fd98" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>setParameter</name></member>
      <member refid="class_gyoto_1_1_object_1aa0a8b119e7aa95b21be081f8c97e1626" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>setParameters</name></member>
      <member refid="class_gyoto_1_1_screen_1aac0b885b8967104ee65c494a88158f57" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>setProjection</name></member>
      <member refid="class_gyoto_1_1_screen_1ad457be9c39ee196d2a252aaa29d96c69" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>setProjection</name></member>
      <member refid="class_gyoto_1_1_screen_1ad348a1f0eed557f45ba8ef885d150f18" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>setScreen1</name></member>
      <member refid="class_gyoto_1_1_screen_1a44a010e55ce14224f7bd3e254ff3a666" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>setScreen2</name></member>
      <member refid="class_gyoto_1_1_screen_1aba397f13ceda3b3dd0139caf9f1ed29a" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>setScreen3</name></member>
      <member refid="class_gyoto_1_1_screen_1aa6e2f7ea7592507047318568b7282190" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>skyToCoord</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a7d212bcd7d3ac4147e18683c47ca910d" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>SmartPointee</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1adc075b08ca5d3c0635bc97f843835f8a" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>SmartPointee</name></member>
      <member refid="class_gyoto_1_1_screen_1ad0e0a42a7b99e8d5f8d2eb9748dee978" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>spectro_</name></member>
      <member refid="class_gyoto_1_1_screen_1ac4655e7c8f5b30d0e66d917006c6f262" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>spectrometer</name></member>
      <member refid="class_gyoto_1_1_screen_1aa04bcd493cf3cb4e48023f7fd52ef087" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>spectrometer</name></member>
      <member refid="class_gyoto_1_1_screen_1adba440392f0fbee999c9df47c9b5fbbcaa083f0d394cfa9d7550051d2c8d0130e" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>spherical_angles</name></member>
      <member refid="class_gyoto_1_1_screen_1aed37ff18e75ac7dd135de624db80428e" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Subcontractor</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>Subcontractor_t</name></member>
      <member refid="class_gyoto_1_1_screen_1a5dbc5df4fa324ac907a8ca1da41bc294" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>time</name></member>
      <member refid="class_gyoto_1_1_screen_1a49cdd35ce8192c3239a8fd37ce70a3d5" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>time</name></member>
      <member refid="class_gyoto_1_1_screen_1a5889ce87531078d37976ad6ae5141249" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>time</name></member>
      <member refid="class_gyoto_1_1_screen_1a79eb0a8b53104639b55a56d4118d29fd" prot="public" virt="non-virtual"><scope>Gyoto::Screen</scope><name>time</name></member>
      <member refid="class_gyoto_1_1_screen_1a8ed940061d9e8c6e0e235d76412b0908" prot="private" virt="non-virtual"><scope>Gyoto::Screen</scope><name>tobs_</name></member>
      <member refid="class_gyoto_1_1_object_1ab6f302f93bfd1f07ae2a6a48b3c74932" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>~Object</name></member>
      <member refid="class_gyoto_1_1_screen_1a25bf668b384b47043f5c802c9d7ea427" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>~Screen</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a4301d456d1d36ed7912d073b742c74e1" prot="public" virt="virtual"><scope>Gyoto::Screen</scope><name>~SmartPointee</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
