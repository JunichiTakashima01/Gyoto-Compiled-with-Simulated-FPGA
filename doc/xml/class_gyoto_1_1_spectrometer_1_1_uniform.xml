<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_gyoto_1_1_spectrometer_1_1_uniform" kind="class" language="C++" prot="public">
    <compoundname>Gyoto::Spectrometer::Uniform</compoundname>
    <basecompoundref refid="class_gyoto_1_1_spectrometer_1_1_generic" prot="public" virt="non-virtual">Gyoto::Spectrometer::Generic</basecompoundref>
    <includes refid="_gyoto_uniform_spectrometer_8h" local="no">GyotoUniformSpectrometer.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gyoto_1_1_spectrometer_1_1_uniform_1af8f5b7a1d3e55f6a123de7d73af4cff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Gyoto::SmartPointer&lt; Gyoto::Spectrometer::Uniform &gt;</definition>
        <argsstring></argsstring>
        <name>Gyoto::SmartPointer&lt; Gyoto::Spectrometer::Uniform &gt;</name>
        <param>
          <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">Gyoto::SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform" kindref="compound">Gyoto::Spectrometer::Uniform</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="1" column="0" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a7812d8396c0f489b21ed63e643f96f54" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Spectrometer::Uniform::band_[2]</definition>
        <argsstring>[2]</argsstring>
        <name>band_</name>
        <briefdescription>
<para>boundaries of the spectro. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the kind, band_ is stored in Hz, log10(Hz), m or log10(m). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="76" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_generic_1aae47201273f20c8fb3a0761c5e631336" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref></type>
        <definition>kind_t Gyoto::Spectrometer::Generic::kindid_</definition>
        <argsstring></argsstring>
        <name>kindid_</name>
        <briefdescription>
<para><ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Spectrometer</ref> kind ID. </para>
        </briefdescription>
        <detaileddescription>
<para>The content is not copied. kindid_ should be set (as a parameter to the <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a171359b9e05d91b191735545b10a7d51" kindref="member">Generic()</ref> constructor or using <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1ab1a9738c5823db9c79d685b3cd2d1d86" kindref="member">kindid()</ref>) to the address of a static variable holding the name. This allows checking the kind using pointer comparison rather than string comparison. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="197" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoSpectrometer.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gyoto::Object::kind_</definition>
        <argsstring></argsstring>
        <name>kind_</name>
        <briefdescription>
<para>The &quot;kind&quot; that is output in the XML entity. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. for an <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref>, <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> will ensure <programlisting><codeline><highlight class="normal">&lt;Astrobj<sp/>kind=&quot;kind_&quot;<sp/>...&gt;...&lt;/Astrobj&gt;</highlight></codeline>
</programlisting> is written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="162" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoObject.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_object_1a01832761cd5f0a12319e3e24ce9a9fba" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; Gyoto::Object::plugins_</definition>
        <argsstring></argsstring>
        <name>plugins_</name>
        <briefdescription>
<para>The plug-ins that needs to be loaded to access this instance&apos;s class. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. for an <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref>, <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> will ensure <programlisting><codeline><highlight class="normal">&lt;Astrobj<sp/>...<sp/>plugin=&quot;plugins_&quot;&gt;...&lt;/Astrobj&gt;</highlight></codeline>
</programlisting> is written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="172" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoObject.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_uniform_1ab9e0b69c354e9a0cf0f3d5b35ed3fdf1" prot="public" static="yes" mutable="no">
        <type><ref refid="_gyoto_object_8h_1a750e7a43779f63bdb13111eaf0271203" kindref="member">GYOTO_OBJECT</ref> <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const</type>
        <definition>GYOTO_OBJECT Property const Gyoto::Spectrometer::Uniform::properties[]</definition>
        <argsstring>[]</argsstring>
        <name>properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="81" column="42" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_uniform_1aa2b46ae8e24c9ca0385e4133c287cf90" prot="public" static="yes" mutable="no">
        <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref> const</type>
        <definition>kind_t const Gyoto::Spectrometer::Uniform::WaveKind</definition>
        <argsstring></argsstring>
        <name>WaveKind</name>
        <briefdescription>
<para>&quot;wave&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Use this static member attribute to check whether a <ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Spectrometer</ref> object spectro is of this kind: <programlisting><codeline><highlight class="normal">if<sp/>(spectro-&gt;kind()<sp/>==<sp/>Uniform::WaveKind)<sp/>...<sp/>;</highlight></codeline>
</programlisting> &quot;wave&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="156" column="25" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a6e1f7329a824883bcca2ec61dc559e19" prot="public" static="yes" mutable="no">
        <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref> const</type>
        <definition>kind_t const Gyoto::Spectrometer::Uniform::WaveLogKind</definition>
        <argsstring></argsstring>
        <name>WaveLogKind</name>
        <briefdescription>
<para>&quot;wavelog&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Use this static member attribute to check whether a <ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Spectrometer</ref> object spectro is of this kind: <programlisting><codeline><highlight class="normal">if<sp/>(spectro-&gt;kind()<sp/>==<sp/>Uniform::WaveLogKind)<sp/>...<sp/>;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="168" column="25" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_uniform_1afdacaa50d0fc60b5fd27f350d2e10247" prot="public" static="yes" mutable="no">
        <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref> const</type>
        <definition>kind_t const Gyoto::Spectrometer::Uniform::FreqKind</definition>
        <argsstring></argsstring>
        <name>FreqKind</name>
        <briefdescription>
<para>&quot;freq&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Use this static member attribute to check whether a <ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Spectrometer</ref> object spectro is of this kind: <programlisting><codeline><highlight class="normal">if<sp/>(spectro-&gt;kind()<sp/>==<sp/>Uniform::FreqKind)<sp/>...<sp/>;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="180" column="25" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a3994f7cdb5f7b77c6a436a1e6dfbf921" prot="public" static="yes" mutable="no">
        <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref> const</type>
        <definition>kind_t const Gyoto::Spectrometer::Uniform::FreqLogKind</definition>
        <argsstring></argsstring>
        <name>FreqLogKind</name>
        <briefdescription>
<para>&quot;freqlog&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Use this static member attribute to check whether a <ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Spectrometer</ref> object spectro is of this kind: <programlisting><codeline><highlight class="normal">if<sp/>(spectro-&gt;kind()<sp/>==<sp/>Uniform::FreqLogKind)<sp/>...<sp/>;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="192" column="25" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a7346df12df2f17eb9713ceabbd68b7e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::reset_</definition>
        <argsstring>()</argsstring>
        <name>reset_</name>
        <briefdescription>
<para>Computes boundaries_, midpoints_ and widths_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="78" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::kind</definition>
        <argsstring>(const std::string)</argsstring>
        <name>kind</name>
        <param>
          <type>const std::string</type>
        </param>
        <briefdescription>
<para>Set kind_. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" kindref="member">kind(const std::string)</ref> is protected because, for most Objects, it should not be changed in runtime. Set kind_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="453" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_hook_1_1_teller_1af9a1daa629900f00538096987e398a13" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Hook::Teller::tellListeners</definition>
        <argsstring>()</argsstring>
        <name>tellListeners</name>
        <briefdescription>
<para>Call tell() on each hooked <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Whenever a <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref> mutates, it should warn any <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref> hooked to it using <ref refid="class_gyoto_1_1_hook_1_1_teller_1af9a1daa629900f00538096987e398a13" kindref="member">tellListeners()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="138" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a4529fb36ec7d5793aec5dfde7315116c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const  *</type>
        <definition>virtual Property const* Gyoto::Spectrometer::Uniform::getProperties</definition>
        <argsstring>() const</argsstring>
        <name>getProperties</name>
        <reimplements refid="class_gyoto_1_1_spectrometer_1_1_generic_1afe4eca833e1f41126d186253fe097aec">getProperties</reimplements>
        <briefdescription>
<para>Get list of properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is declared automatically by the <ref refid="_gyoto_object_8h_1a750e7a43779f63bdb13111eaf0271203" kindref="member">GYOTO_OBJECT</ref> macro and defined automatically by the <ref refid="_gyoto_property_8h_1a1356435ea7ee0e18d07201a80e034dcc" kindref="member">GYOTO_PROPERTY_END</ref> macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="81" column="79"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1abfafcfdab5e0d979e5ab4393f022c9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Spectrometer::Uniform::Uniform</definition>
        <argsstring>()</argsstring>
        <name>Uniform</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="82" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1ad8341ff804490c91645d3da388ea89bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Spectrometer::Uniform::Uniform</definition>
        <argsstring>(size_t nsamples, double band_min, double band_max, kind_t kind)</argsstring>
        <name>Uniform</name>
        <param>
          <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
          <declname>nsamples</declname>
        </param>
        <param>
          <type>double</type>
          <declname>band_min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>band_max</declname>
        </param>
        <param>
          <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Constructor setting everything. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="83" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1ab5663871d8ff3626e6c0837ed5608bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Spectrometer::Uniform::Uniform</definition>
        <argsstring>(const Uniform &amp;)</argsstring>
        <name>Uniform</name>
        <param>
          <type>const <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform" kindref="compound">Uniform</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="85" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1af8790f480a1fef59d74e58a2c7e29a98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_spectrometer_1_1_generic" kindref="compound">Generic</ref> *</type>
        <definition>Generic* Gyoto::Spectrometer::Uniform::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="class_gyoto_1_1_spectrometer_1_1_generic_1a8a63025581f96f463e2fc24932783981">clone</reimplements>
        <briefdescription>
<para>Cloner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="86" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a25281b85332bc356b410e85324150091" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Gyoto::Spectrometer::Uniform::~Uniform</definition>
        <argsstring>()</argsstring>
        <name>~Uniform</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="87" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a5d0246b0be80169490507d9a61f77f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::kindid</definition>
        <argsstring>(kind_t)</argsstring>
        <name>kindid</name>
        <reimplements refid="class_gyoto_1_1_spectrometer_1_1_generic_1a63c8212b30359dd8588359b9201b275c">kindid</reimplements>
        <param>
          <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref></type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1aae47201273f20c8fb3a0761c5e631336" kindref="member">Generic::kindid_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This should rarely be used as the <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1aae47201273f20c8fb3a0761c5e631336" kindref="member">Generic::kindid_</ref> attribute usually is set in the constructor and doesn&apos;t change after that.</para>
<para>Always set to the address of a static variable, not to a temporary. Usually your class should have a static member for that purpose: <programlisting><codeline><highlight class="normal">class<sp/>MyKind<sp/>:<sp/>public<sp/>Spectrometer::Generic</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>kind_t<sp/>Kindid;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">kind_t<sp/>MyKind::Kind<sp/>=<sp/>&quot;MyKind&quot;;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">SmartPointer&lt;MyKind&gt;<sp/>sp();</highlight></codeline>
<codeline><highlight class="normal">sp-&gt;kindid(MyKind::Kindid)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="90" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a3e0ab877874e6bfda6469b5dffc598af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::kind</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>kind</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" kindref="member">Generic::kind_</ref> from a std::string. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" kindref="member">Generic::kind_</ref> will actually be set to one of <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aa2b46ae8e24c9ca0385e4133c287cf90" kindref="member">Uniform::WaveKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a6e1f7329a824883bcca2ec61dc559e19" kindref="member">Uniform::WaveLogKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1afdacaa50d0fc60b5fd27f350d2e10247" kindref="member">Uniform::FreqKind</ref> or <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a3994f7cdb5f7b77c6a436a1e6dfbf921" kindref="member">Uniform::FreqLogKind</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>std::string, one of &quot;wave&quot;, &quot;wavelog&quot;, &quot;freq&quot; or &quot;freqlog&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="101" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1af6c1082ac163e833fff9e934b417b194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Gyoto::Spectrometer::Uniform::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <reimplements refid="class_gyoto_1_1_object_1a9f46de678c67e9050cf3a8b9677e1d73">kind</reimplements>
        <briefdescription>
<para>Get kind_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="102" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1aeb738401aac04f15c0dc97d3ce55ea7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::nSamples</definition>
        <argsstring>(size_t n)</argsstring>
        <name>nSamples</name>
        <param>
          <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a787ad3d8cd46683e34d964310cca163e" kindref="member">Generic::nsamples_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="108" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a66c3212a78816708f2d3665fea2058bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::band</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;nu)</argsstring>
        <name>band</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="110" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1aa138ad9636c93f9272fe1c391c66ce3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::band</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;nu, std::string const &amp;unit)</argsstring>
        <name>band</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="111" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1aeb9e0952c9ba73d79a7703d0328c701c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Gyoto::Spectrometer::Uniform::band</definition>
        <argsstring>() const</argsstring>
        <name>band</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="112" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a2cdd0d554de30662db8aebeed8d6bef6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Gyoto::Spectrometer::Uniform::band</definition>
        <argsstring>(std::string const &amp;unit) const</argsstring>
        <name>band</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="113" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a5bd0e6704f2aaff705b1325fc59f858f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::band</definition>
        <argsstring>(double nu[2])</argsstring>
        <name>band</name>
        <param>
          <type>double</type>
          <declname>nu</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a7812d8396c0f489b21ed63e643f96f54" kindref="member">Uniform::band_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>2-element vector, in Hz, m, log10(Hz) or log10(m) depending on <ref refid="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" kindref="member">Generic::kind_</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="121" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1afb7d5c161de19a181ce49ac57e46ac6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::band</definition>
        <argsstring>(double nu[2], std::string const &amp;unit, std::string const &amp;kind)</argsstring>
        <name>band</name>
        <param>
          <type>double</type>
          <declname>nu</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Set the spectral band boundaries in specified unit. </para>
        </briefdescription>
        <detaileddescription>
<para>If kind is not specified, member kind_ is used. Else kind_ is updated.</para>
<para>unit is actually the unit for 10^nu for freqlog and wavelog. Defaults:<itemizedlist>
<listitem><para>kind==freq: nu in Hz</para>
</listitem><listitem><para>kind==freqlog: 10^nu in Hz</para>
</listitem><listitem><para>kind==wave: nu in meters</para>
</listitem><listitem><para>kind==wavelog: 10^nu in meters </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="135" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a1ac43972ed3d296a1d0caed20a729f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::band</definition>
        <argsstring>(double nu[], std::string const &amp;unit)</argsstring>
        <name>band</name>
        <param>
          <type>double</type>
          <declname>nu</declname>
          <array>[]</array>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="136" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a2885af35601021e4f1c99e7f7be35dc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double const  *</type>
        <definition>double const* Gyoto::Spectrometer::Uniform::getBand</definition>
        <argsstring>() const</argsstring>
        <name>getBand</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a7812d8396c0f489b21ed63e643f96f54" kindref="member">Uniform::band_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="138" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1af5ccaceb5c188a7a0ea11791885919bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gyoto::Spectrometer::Uniform::fillProperty</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp, Property const &amp;p) const</argsstring>
        <name>fillProperty</name>
        <reimplements refid="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b">fillProperty</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Output a single <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> to XML. </para>
        </briefdescription>
        <detaileddescription>
<para>The base implementation decides what to do based on the <emphasis>p.type</emphasis>. The format matches how <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aaca1850f712a089a6c5e0188aec0e5a4" kindref="member">setParameters()</ref> an <ref refid="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b" kindref="member">setParameter()</ref> would interpret the XML descition.</para>
<para>Overriding this method should be avoided, but makes sense in some cases (for instance <ref refid="class_gyoto_1_1_screen_1a50f80add154ec088fc9509ba22ef0032" kindref="member">Screen::fillProperty()</ref> selects a different unit for <emphasis>Distance</emphasis> based on its magnitude, so that stellar sizes are expressed in solar radii while smaller sizes can be expressed in meters and larger sizes in parsecs).</para>
<para>Overriding implementation should fall-back on calling the implementation in the direct parent class: <programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>void<sp/>fillProperty(Gyoto::FactoryMessenger<sp/>*fmp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property<sp/>const<sp/>&amp;p)<sp/>const<sp/>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">void<sp/>B::fillProperty(Gyoto::FactoryMessenger<sp/>*fmp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property<sp/>const<sp/>&amp;p)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>fmp-&gt;doSomething();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>A::fillProperty(fmp,<sp/>p);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="141" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1aaca1850f712a089a6c5e0188aec0e5a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Spectrometer::Uniform::setParameters</definition>
        <argsstring>(FactoryMessenger *fmp)</argsstring>
        <name>setParameters</name>
        <reimplements refid="class_gyoto_1_1_object_1aa0a8b119e7aa95b21be081f8c97e1626">setParameters</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <briefdescription>
<para>Main loop for parsing Properties from XML description. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim> This function queries the FactoryMessenger for elements to parse,
 and tries to matche each element to a Property to set it
 accordingly.

 Any class that tries to be buildable from XML must supply a
 subcontractor (for base classes such as Metric, Astrobj, Spectrum
 and Spectrometer, it is done as a template that must be
 specialized for each class).

 This subcontractor typically looks somewhat like this:
</verbatim> <programlisting><codeline><highlight class="normal">SmartPointer&lt;Metric::Generic&gt;</highlight></codeline>
<codeline><highlight class="normal">Gyoto::Metric::MyKind::Subcontractor(FactoryMessenger*<sp/>fmp)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SmartPointer&lt;MyKind&gt;<sp/>gg<sp/>=<sp/>new<sp/>MyKind();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gg<sp/>-&gt;<sp/>setParameters(fmp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>gg;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <verbatim> Although this is discouraged, it is possible to override the
 following functions to customize how XML entities are parsed:
   - setParameters() if low-level access to the
     FactoryMessenger is required;
   - setParameter(std::string name,
                  std::string content,
                  std::string unit)
     to interpret an entity that does not match a Property
     (e.g. alternative name);
   - setParameter(Gyoto::Property const &amp;p,
                  std::string const &amp;name,
                  std::string const &amp;content,
                  std::string const &amp;unit)
     to change how a Property is interpreted.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="143" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1ab1a9738c5823db9c79d685b3cd2d1d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref></type>
        <definition>virtual kind_t Gyoto::Spectrometer::Generic::kindid</definition>
        <argsstring>() const</argsstring>
        <name>kindid</name>
        <briefdescription>
<para>Get kindid_. </para>
        </briefdescription>
        <detaileddescription>
<para>You can check whether the <ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Spectrometer</ref> sp is of a given kind MyKind with something like:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(sp-&gt;kind())<sp/>==<sp/>MyKind::Kindid;</highlight></codeline>
</programlisting></para>
<para>See <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aa2b46ae8e24c9ca0385e4133c287cf90" kindref="member">Uniform::WaveKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a6e1f7329a824883bcca2ec61dc559e19" kindref="member">Uniform::WaveLogKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1afdacaa50d0fc60b5fd27f350d2e10247" kindref="member">Uniform::FreqKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a3994f7cdb5f7b77c6a436a1e6dfbf921" kindref="member">Uniform::FreqLogKind</ref> and <ref refid="class_gyoto_1_1_spectrometer_1_1_complex_1aa7bab80bd7478784d9c49e1208bf6b0a" kindref="member">Complex::Kind</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="89" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a63c8212b30359dd8588359b9201b275c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Spectrometer::Generic::kindid</definition>
        <argsstring>(kind_t)</argsstring>
        <name>kindid</name>
        <param>
          <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref></type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1aae47201273f20c8fb3a0761c5e631336" kindref="member">Generic::kindid_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This should rarely be used as the <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1aae47201273f20c8fb3a0761c5e631336" kindref="member">Generic::kindid_</ref> attribute usually is set in the constructor and doesn&apos;t change after that.</para>
<para>Always set to the address of a static variable, not to a temporary. Usually your class should have a static member for that purpose: <programlisting><codeline><highlight class="normal">class<sp/>MyKind<sp/>:<sp/>public<sp/>Spectrometer::Generic</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>kind_t<sp/>Kindid;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">kind_t<sp/>MyKind::Kind<sp/>=<sp/>&quot;MyKind&quot;;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">SmartPointer&lt;MyKind&gt;<sp/>sp();</highlight></codeline>
<codeline><highlight class="normal">sp-&gt;kindid(MyKind::Kindid)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="89" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_uniform_1a65f7a6762e3c2b629a5991910f36ba98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        <definition>virtual size_t Gyoto::Spectrometer::Generic::nSamples</definition>
        <argsstring>() const</argsstring>
        <name>nSamples</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a787ad3d8cd46683e34d964310cca163e" kindref="member">Generic::nsamples_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="104" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1ab1a9738c5823db9c79d685b3cd2d1d86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_gyoto_1_1_spectrometer_1a3d95097c93312ff6df68f56b4fe829ee" kindref="member">kind_t</ref></type>
        <definition>virtual kind_t Gyoto::Spectrometer::Generic::kindid</definition>
        <argsstring>() const</argsstring>
        <name>kindid</name>
        <briefdescription>
<para>Get kindid_. </para>
        </briefdescription>
        <detaileddescription>
<para>You can check whether the <ref refid="namespace_gyoto_1_1_spectrometer" kindref="compound">Spectrometer</ref> sp is of a given kind MyKind with something like:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(sp-&gt;kind())<sp/>==<sp/>MyKind::Kindid;</highlight></codeline>
</programlisting></para>
<para>See <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aa2b46ae8e24c9ca0385e4133c287cf90" kindref="member">Uniform::WaveKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a6e1f7329a824883bcca2ec61dc559e19" kindref="member">Uniform::WaveLogKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1afdacaa50d0fc60b5fd27f350d2e10247" kindref="member">Uniform::FreqKind</ref>, <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a3994f7cdb5f7b77c6a436a1e6dfbf921" kindref="member">Uniform::FreqLogKind</ref> and <ref refid="class_gyoto_1_1_spectrometer_1_1_complex_1aa7bab80bd7478784d9c49e1208bf6b0a" kindref="member">Complex::Kind</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="315" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1a65f7a6762e3c2b629a5991910f36ba98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        <definition>virtual size_t Gyoto::Spectrometer::Generic::nSamples</definition>
        <argsstring>() const</argsstring>
        <name>nSamples</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a787ad3d8cd46683e34d964310cca163e" kindref="member">Generic::nsamples_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="339" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1a2824f6a0258c7cb29caa5b5ed6811068" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        <definition>virtual size_t Gyoto::Spectrometer::Generic::getNBoundaries</definition>
        <argsstring>() const</argsstring>
        <name>getNBoundaries</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a9205cc1114c7acddf96d115a9f03cc57" kindref="member">Generic::nboundaries_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="340" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1a20157612af1f51e4d3f8d5d5390ce6f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double const  *</type>
        <definition>virtual double const* Gyoto::Spectrometer::Generic::getMidpoints</definition>
        <argsstring>() const</argsstring>
        <name>getMidpoints</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a3939be859b97c8e4c352da02e00170d9" kindref="member">Generic::midpoints_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="341" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1aad78f9b4e02974d2b569333010951876" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Spectrometer::Generic::getMidpoints</definition>
        <argsstring>(double data[], std::string unit)</argsstring>
        <name>getMidpoints</name>
        <param>
          <type>double</type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>std::string</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Copy <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a3939be859b97c8e4c352da02e00170d9" kindref="member">Generic::midpoints_</ref>, converting to unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a787ad3d8cd46683e34d964310cca163e" kindref="member">Generic::nsamples_</ref> doubles to fill with result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="347" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1a3f2229fb10aeac14b362065350ac33e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Spectrometer::Generic::getChannelBoundaries</definition>
        <argsstring>(double data[], std::string unit)</argsstring>
        <name>getChannelBoundaries</name>
        <param>
          <type>double</type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>std::string</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Copy <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a5275ae247243743e2847852da44d4399" kindref="member">Generic::boundaries_</ref>, converting to unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a9205cc1114c7acddf96d115a9f03cc57" kindref="member">Generic::nboundaries_</ref> doubles to fill with result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="353" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1a0b08629005046f228db9db987ec8f05a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double const  *</type>
        <definition>virtual double const* Gyoto::Spectrometer::Generic::getChannelBoundaries</definition>
        <argsstring>() const</argsstring>
        <name>getChannelBoundaries</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a5275ae247243743e2847852da44d4399" kindref="member">Generic::boundaries_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="354" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1a7752fe757512a5970a1d5251b6f1b19f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref> const  *</type>
        <definition>virtual size_t const* Gyoto::Spectrometer::Generic::getChannelIndices</definition>
        <argsstring>() const</argsstring>
        <name>getChannelIndices</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1aa1af0adc2e534f7bb517f880d2b66bfd" kindref="member">Generic::chanind_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="355" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1af76be4b12e7bba26d0954075fefecdce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double const  *</type>
        <definition>virtual double const* Gyoto::Spectrometer::Generic::getWidths</definition>
        <argsstring>() const</argsstring>
        <name>getWidths</name>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1ac1eebc615915693215c1a7f8a6086e7a" kindref="member">Generic::widths_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="356" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_spectrometer_1_1_generic_1a6d53073cf96fe552175c7dcd9379acae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Spectrometer::Generic::getWidths</definition>
        <argsstring>(double data[], std::string unit)</argsstring>
        <name>getWidths</name>
        <param>
          <type>double</type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>std::string</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Copy <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1ac1eebc615915693215c1a7f8a6086e7a" kindref="member">Generic::widths_</ref>, converting to unit. </para>
        </briefdescription>
        <detaileddescription>
<para>Think carefully before using: widths are often used to convert spectral flux density to flux. If flux density is per Herz, you don&apos;t need to convert widths.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="class_gyoto_1_1_spectrometer_1_1_generic_1a9205cc1114c7acddf96d115a9f03cc57" kindref="member">Generic::nboundaries_</ref> doubles to fill with result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="367" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a9ec09c51fd18dde7c13ef3b03fac1fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::SmartPointee::incRefCount</definition>
        <argsstring>()</argsstring>
        <name>incRefCount</name>
        <briefdescription>
<para>Increment the reference counter. Warning: Don&apos;t mess with the counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="96" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a22a67609fb4690ee8ec0e95e4060e387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::decRefCount</definition>
        <argsstring>()</argsstring>
        <name>decRefCount</name>
        <briefdescription>
<para>Decrement the reference counter and return current value. Warning: Don&apos;t mess with the counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="97" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a9a9cb35cd161bf19ce652f76e0a5bec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::getRefCount</definition>
        <argsstring>()</argsstring>
        <name>getRefCount</name>
        <briefdescription>
<para>Get the current number of references. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="98" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a06ea95dc396053466cdd63d419d1688c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Gyoto::Object::isThreadSafe</definition>
        <argsstring>() const</argsstring>
        <name>isThreadSafe</name>
        <briefdescription>
<para>Whether this class is thread-safe. </para>
        </briefdescription>
        <detaileddescription>
<para>Return True if this object is thread-safe, i.e. if an instance and its clone can be used in parallel threads (in the context of Scenery::raytrace()). Known objects which are not thread-safe include Lorene metrics and everything from the <ref refid="namespace_gyoto_1_1_python" kindref="compound">Python</ref> plug-in.</para>
<para>The default implementation considers that the class itself is thread safe and recurses into the declared properties to check whether they are safe too. Classes that abide to the Object/Property paradigm and are themselves thread-safe have nothing special to do.</para>
<para>Objects that clone children in their copy constructor that are not declared as properties must take these children into account.</para>
<para>Classes that are never thread-safe must declare it. It acn be easily done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="197" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a58c4ecdaae1873dc6912e164b61826e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(Property const &amp;p, Value val)</argsstring>
        <name>set</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8">set</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="237" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1aa063e0df7c2e4b22207a784c76c6681f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(Property const &amp;p, Value val, std::string const &amp;unit)</argsstring>
        <name>set</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718">set</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> (expressed in unit) of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="240" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1aba6d35c5bbf814912ed84549109e117a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(std::string const &amp;pname, Value val)</argsstring>
        <name>set</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82">set</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="243" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1abed03e16a8013699534b802e06751ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(std::string const &amp;pname, Value val, std::string const &amp;unit)</argsstring>
        <name>set</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> (expressed in unit) of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="246" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a8232112e660216a61caa15fab27b889f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(Property const &amp;p) const</argsstring>
        <name>get</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871">get</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="249" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1ad61a061d2073c841e9911be0395d4494" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(std::string const &amp;pname) const</argsstring>
        <name>get</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926">get</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="252" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1ad4189c2c103030e9d91ee0f29ebcf13d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(Property const &amp;p, std::string const &amp;unit) const</argsstring>
        <name>get</name>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4">get</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>, converted to unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="255" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a99544282b6c383b8570a5bc51bed1ecf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(std::string const &amp;pname, std::string const &amp;unit) const</argsstring>
        <name>get</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>, converted to unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="258" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a424ef3538c714adfafad7eda249e0d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const  *</type>
        <definition>Property const* Gyoto::Object::property</definition>
        <argsstring>(std::string const pname) const</argsstring>
        <name>property</name>
        <param>
          <type>std::string const</type>
          <declname>pname</declname>
        </param>
        <briefdescription>
<para>Find property by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Look into the <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> list for a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> whose <emphasis>name</emphasis> (or <emphasis>name_false</emphasis>, for a boolean <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>) is <emphasis>pname</emphasis>. Return a const pointer to the first such property found, or NULL if none is found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="267" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::fillElement</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp) const</argsstring>
        <name>fillElement</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_complex_1a88d6f38c5fa5401a860291fbb21526d5">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_complex_1ada5f1fb56b87c56ff64113a49c76cca0">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_spectrometer_1_1_complex_1a0d73e5fd77b0e920af44894abfc96a99">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_scenery_1a63501e86c47ea6b67e0c564c706a72f1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1">fillElement</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <briefdescription>
<para>Fill the XML element for this <ref refid="class_gyoto_1_1_object" kindref="compound">Object</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The base implementation simply calls <ref refid="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b" kindref="member">fillProperty()</ref> for each <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> defined for the <ref refid="class_gyoto_1_1_object" kindref="compound">Object</ref>.</para>
<para>Derived classes should avoid overriding <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref>. It may make sense occasionally, e.g. to make sure that the metric is output first.</para>
<para>To customize how a given <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> is rendered, it is better to override <ref refid="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b" kindref="member">fillProperty()</ref>.</para>
<para>If this method is overridden, the implementation should in general call <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> on the direct base. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="316" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Object::setParameter</definition>
        <argsstring>(std::string name, std::string content, std::string unit)</argsstring>
        <name>setParameter</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_equatorial_hot_spot_1a0c6f1aee4a478c5ef695348d64eae2d4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_k_s_1a4c9d3a51c5d1478908516a0b96a42135">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_star_1a628aa18277af464450896efd63206527">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4">setParameter</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rot_star3__1_1ac2fbf2bb5796e3d7c7eb80dccfe20af7">setParameter</reimplementedby>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>content</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set parameter by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used when parsing an XML description, if no <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> of this <emphasis>name</emphasis> is found. Overriding implementation should fall-back on calling the direct&apos;s parent implementation:</para>
<para><programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>int<sp/>setParameter(std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">int<sp/>B::setParameter(std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>doSomething(content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>return<sp/>A::setParameter(name,<sp/>content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>0;<sp/><sp/>//<sp/>name<sp/>was<sp/>known</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>XML name of the parameter (XML entity). This may have a path component, e.g. &quot;Astrobj::Radius&quot;, in which case a property named &quot;Astrobj&quot; will be sought in the current object, and setParameter will be called recusrively on this <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref> with Radius as name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the unit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if this parameter is known, 1 if it is not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="390" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a43fe041144add66155668ca88a99fd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::setParameter</definition>
        <argsstring>(Gyoto::Property const &amp;p, std::string const &amp;name, std::string const &amp;content, std::string const &amp;unit)</argsstring>
        <name>setParameter</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_polish_doughnut_1a13a8a59bd3738f5739db0550dbb42003">setParameter</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Gyoto::Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>content</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set parameter by <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> (and name) </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used when parsing an XML description, if <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> (<emphasis>p</emphasis>) of this <emphasis>name</emphasis> is found (i.e. either <emphasis>p.name</emphasis> or <emphasis>p.name_false</emphasis> is equal to <emphasis>name</emphasis>). Implementation should fall-back on calling the direct&apos;s parent implementation:</para>
<para><programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>void<sp/>setParameter(Gyoto::Property<sp/>const<sp/>&amp;p,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">void<sp/>B::setParameter(Gyoto::Property<sp/>const<sp/>&amp;p,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>doSomething(content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>A::setParameter(p,<sp/>name,<sp/>content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> that matches <emphasis>name</emphasis> (<emphasis>p.name</emphasis> == <emphasis>name</emphasis> or <emphasis>p.name_false</emphasis> == <emphasis>name</emphasis>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>XML name of the parameter (XML entity) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the unit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="426" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a741ba678188d7d167ff2e3bb13dd924f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gyoto::Object::describeProperty</definition>
        <argsstring>(Gyoto::Property const &amp;p) const</argsstring>
        <name>describeProperty</name>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Gyoto::Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Format desrciption for a property. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a string containing the name(s) and type of the property, as well as whether it supports unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="437" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a13843618d84c49d47bd37ddfa31160c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Object::help</definition>
        <argsstring>() const</argsstring>
        <name>help</name>
        <briefdescription>
<para>Print (to stdout) some help on this class. </para>
        </briefdescription>
        <detaileddescription>
<para>Describe all properties that this instance supports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="444" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_hook_1_1_teller_1a55dca3f3b9707bd18ae4a0dd98befd70" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Hook::Teller::hook</definition>
        <argsstring>(Listener *listener)</argsstring>
        <name>hook</name>
        <param>
          <type>Listener *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Start listening. </para>
        </briefdescription>
        <detaileddescription>
<para>Use from a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Hook::Listener</ref> object method: <programlisting><codeline><highlight class="normal">teller-&gt;hook(this)</highlight></codeline>
</programlisting> where &quot;this&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref> and &quot;teller&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref>.</para>
<para>Use <ref refid="class_gyoto_1_1_hook_1_1_teller_1a8bcbb785f92fefe4e76afe76eb175f8a" kindref="member">unhook()</ref> later to stop listening to a given <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the new listener </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="114" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_hook_1_1_teller_1a8bcbb785f92fefe4e76afe76eb175f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Hook::Teller::unhook</definition>
        <argsstring>(Listener *listener)</argsstring>
        <name>unhook</name>
        <param>
          <type>Listener *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Stop listening. </para>
        </briefdescription>
        <detaileddescription>
<para>Use from a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Hook::Listener</ref> object method: <programlisting><codeline><highlight class="normal">teller-&gt;unhook(this)</highlight></codeline>
</programlisting></para>
<para>where &quot;this&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref>, &quot;teller&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref>, and &quot;this&quot; has called teller-&gt;hook(this) previously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the listener </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="129" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_generic_1a787ad3d8cd46683e34d964310cca163e" prot="public" static="no" mutable="no">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        <definition>size_t Gyoto::Spectrometer::Generic::nsamples_</definition>
        <argsstring></argsstring>
        <name>nsamples_</name>
        <briefdescription>
<para>Number of spectral elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="199" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoSpectrometer.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_generic_1a9205cc1114c7acddf96d115a9f03cc57" prot="public" static="no" mutable="no">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref></type>
        <definition>size_t Gyoto::Spectrometer::Generic::nboundaries_</definition>
        <argsstring></argsstring>
        <name>nboundaries_</name>
        <briefdescription>
<para>Size of the boundaries_ array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="200" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoSpectrometer.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_generic_1a5275ae247243743e2847852da44d4399" prot="public" static="no" mutable="no">
        <type>double *</type>
        <definition>double* Gyoto::Spectrometer::Generic::boundaries_</definition>
        <argsstring></argsstring>
        <name>boundaries_</name>
        <briefdescription>
<para>Frequency (in Hz) at the boundaries of the spectral channels. </para>
        </briefdescription>
        <detaileddescription>
<para>Array of size nboundaries_</para>
<para>Spectral channel i extends from <programlisting><codeline><highlight class="normal">boundaries_[chanind_[2*i]]</highlight></codeline>
</programlisting> to <programlisting><codeline><highlight class="normal">boundaries_[chanind_[2*i+1]]</highlight></codeline>
</programlisting>. Channels may or may not be contiguous or ordered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="217" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoSpectrometer.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_generic_1aa1af0adc2e534f7bb517f880d2b66bfd" prot="public" static="no" mutable="no">
        <type><ref refid="_gyoto_config_8h_1a43b4547e12226fef871eed8afe191ad7" kindref="member">size_t</ref> *</type>
        <definition>size_t* Gyoto::Spectrometer::Generic::chanind_</definition>
        <argsstring></argsstring>
        <name>chanind_</name>
        <briefdescription>
<para>Indices in boundaries_. </para>
        </briefdescription>
        <detaileddescription>
<para>Array of size 2*nsamples_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="224" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoSpectrometer.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_generic_1a3939be859b97c8e4c352da02e00170d9" prot="public" static="no" mutable="no">
        <type>double *</type>
        <definition>double* Gyoto::Spectrometer::Generic::midpoints_</definition>
        <argsstring></argsstring>
        <name>midpoints_</name>
        <briefdescription>
<para>Effective frequency (in Hz) of each spectral channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Array of size nsamples_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="231" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoSpectrometer.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_spectrometer_1_1_generic_1ac1eebc615915693215c1a7f8a6086e7a" prot="public" static="no" mutable="no">
        <type>double *</type>
        <definition>double* Gyoto::Spectrometer::Generic::widths_</definition>
        <argsstring></argsstring>
        <name>widths_</name>
        <briefdescription>
<para>Width of each channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Array of size nsamples_ (in Hz) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSpectrometer.h" line="238" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoSpectrometer.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" prot="public" static="no">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">Gyoto::SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_smart_pointee" kindref="compound">Gyoto::SmartPointee</ref> &gt;</type>
        <definition>typedef Gyoto::SmartPointer&lt;Gyoto::SmartPointee&gt; Gyoto::SmartPointee::Subcontractor_t(Gyoto::FactoryMessenger *, std::vector&lt; std::string &gt; const &amp;)</definition>
        <argsstring>(Gyoto::FactoryMessenger *, std::vector&lt; std::string &gt; const &amp;)</argsstring>
        <name>Subcontractor_t</name>
        <briefdescription>
<para>A subcontractor builds an object upon order from the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Various classes need to provide a subcontractor to be able to instantiate themselves upon order from the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref>. A subcontractor is a function (often a static member function) which accepts a pointer to a <ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">FactoryMessenger</ref> as unique parameter, communicates with the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref> using this messenger to read an XML description of the object to build, and returns this objet. <ref refid="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" kindref="member">SmartPointee::Subcontractor_t</ref>* is just generic enough a typedef to cast to and from other subcontractor types: <ref refid="namespace_gyoto_1_1_astrobj_1aa53c7ada58c8c8f3799c3485b7d8f3bb" kindref="member">Astrobj::Subcontractor_t</ref>, <ref refid="namespace_gyoto_1_1_metric_1ad6b33a642cc94ad67855184d2adb95df" kindref="member">Metric::Subcontractor_t</ref>, <ref refid="namespace_gyoto_1_1_spectrum_1a163055eef14aee22dd8fa5188812d889" kindref="member">Spectrum::Subcontractor_t</ref>. A subcontractor needs to be registered using the relevant <ref refid="namespace_gyoto_1_1_astrobj_1abb6caf3023a51cb77b5f6793ac03b188" kindref="member">Register()</ref> function: <ref refid="namespace_gyoto_1_1_astrobj_1abb6caf3023a51cb77b5f6793ac03b188" kindref="member">Astrobj::Register()</ref>, <ref refid="namespace_gyoto_1_1_metric_1a602cba49b001e7470f3d439d1ab3e8f7" kindref="member">Metric::Register()</ref>, <ref refid="namespace_gyoto_1_1_spectrum_1a517874749d838d7121880e7d9d14c626" kindref="member">Spectrum::Register()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="114" column="5" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_smart_pointee_1aaaf212a70fb1880b70e4d357e843cc85" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::refCount</definition>
        <argsstring></argsstring>
        <name>refCount</name>
        <briefdescription>
<para>Reference counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="83" column="7" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_smart_pointee_1abf1c1e431cdd4f08f13de581cccb6770" prot="private" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t Gyoto::SmartPointee::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
<para>A mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>When compiled with libpthread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="89" column="19" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_hook_1_1_teller_1ae336573bbbf1b8a5b71d8fbac1408030" prot="private" static="no" mutable="no">
        <type><ref refid="class_listener_item" kindref="compound">ListenerItem</ref> *</type>
        <definition>ListenerItem* Gyoto::Hook::Teller::listeners_</definition>
        <argsstring></argsstring>
        <name>listeners_</name>
        <briefdescription>
<para>Linked list of <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref> items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="94" column="16" bodyfile="/home/junichi/Gyoto/include/GyotoHooks.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Uniformly spaced spectrometers. </para>
    </briefdescription>
    <detaileddescription>
<para>Spectral channels are contiguous and uniformly spaced in either wavelength, frequency or log10 of either. <ref refid="class_gyoto_1_1_spectrometer_1_1_uniform" kindref="compound">Gyoto::Spectrometer::Uniform</ref> is registered four times in the factory: as kind=&quot;wave&quot;, &quot;wavelog&quot;, &quot;freq&quot; and &quot;freqlog&quot;. Example XML entity: <programlisting><codeline><highlight class="normal">&lt;Spectrometer<sp/>kind=&quot;wave&quot;<sp/>unit=&quot;µm&quot;<sp/>nsamples=10&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>2.0<sp/>2.4</highlight></codeline>
<codeline><highlight class="normal">&lt;/Spectrometer&gt;</highlight></codeline>
</programlisting></para>
<para>The content of the entity yields the band pass expressed in &quot;unit&quot; or in log10(unit). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>Gyoto::Object</label>
        <link refid="class_gyoto_1_1_object"/>
      </node>
      <node id="3">
        <label>Gyoto::SmartPointee</label>
        <link refid="class_gyoto_1_1_smart_pointee"/>
      </node>
      <node id="5">
        <label>Gyoto::Hook::Teller</label>
        <link refid="class_gyoto_1_1_hook_1_1_teller"/>
      </node>
      <node id="2">
        <label>Gyoto::Spectrometer::Generic</label>
        <link refid="class_gyoto_1_1_spectrometer_1_1_generic"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Gyoto::Spectrometer::Uniform</label>
        <link refid="class_gyoto_1_1_spectrometer_1_1_uniform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>Gyoto::Property</label>
        <link refid="class_gyoto_1_1_property"/>
        <childnode refid="6" relation="usage">
          <edgelabel>getter_unit</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>getter</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>setter</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>setter_unit</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>Gyoto::SmartPointer&lt; Gyoto::Astrobj::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="16">
        <label>ListenerItem</label>
        <link refid="class_listener_item"/>
      </node>
      <node id="12">
        <label>Gyoto::SmartPointer&lt; Gyoto::Screen &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="8">
        <label>Gyoto::SmartPointer&lt; Gyoto::Spectrometer::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="4">
        <label>Gyoto::Object</label>
        <link refid="class_gyoto_1_1_object"/>
        <childnode refid="5" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>Gyoto::SmartPointer&lt; Gyoto::Metric::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="3">
        <label>Gyoto::SmartPointee</label>
        <link refid="class_gyoto_1_1_smart_pointee"/>
      </node>
      <node id="13">
        <label>Gyoto::Property::setter_t</label>
        <link refid="union_gyoto_1_1_property_1_1setter__t"/>
        <childnode refid="8" relation="usage">
          <edgelabel>set_spectrometer</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>set_metric</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>set_spectrum</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>set_astrobj</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>set_screen</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>Gyoto::Property::setter_unit_t</label>
        <link refid="union_gyoto_1_1_property_1_1setter__unit__t"/>
      </node>
      <node id="10">
        <label>Gyoto::SmartPointer&lt; Gyoto::Spectrum::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="15">
        <label>Gyoto::Hook::Teller</label>
        <link refid="class_gyoto_1_1_hook_1_1_teller"/>
        <childnode refid="16" relation="usage">
          <edgelabel>listeners_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Gyoto::Spectrometer::Generic</label>
        <link refid="class_gyoto_1_1_spectrometer_1_1_generic"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Gyoto::Spectrometer::Uniform</label>
        <link refid="class_gyoto_1_1_spectrometer_1_1_uniform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Gyoto::Property::getter_unit_t</label>
        <link refid="union_gyoto_1_1_property_1_1getter__unit__t"/>
      </node>
      <node id="7">
        <label>Gyoto::Property::getter_t</label>
        <link refid="union_gyoto_1_1_property_1_1getter__t"/>
        <childnode refid="8" relation="usage">
          <edgelabel>get_spectrometer</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>get_metric</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>get_spectrum</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>get_astrobj</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>get_screen</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" line="68" column="1" bodyfile="/home/junichi/Gyoto/include/GyotoUniformSpectrometer.h" bodystart="68" bodyend="195"/>
    <listofallmembers>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a66c3212a78816708f2d3665fea2058bd" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aa138ad9636c93f9272fe1c391c66ce3e" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aeb9e0952c9ba73d79a7703d0328c701c" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a2cdd0d554de30662db8aebeed8d6bef6" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a5bd0e6704f2aaff705b1325fc59f858f" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1afb7d5c161de19a181ce49ac57e46ac6a" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a1ac43972ed3d296a1d0caed20a729f8b" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a7812d8396c0f489b21ed63e643f96f54" prot="protected" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>band_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a5275ae247243743e2847852da44d4399" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>boundaries_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1aa1af0adc2e534f7bb517f880d2b66bfd" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>chanind_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1af8790f480a1fef59d74e58a2c7e29a98" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>clone</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a22a67609fb4690ee8ec0e95e4060e387" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>decRefCount</name></member>
      <member refid="class_gyoto_1_1_object_1a741ba678188d7d167ff2e3bb13dd924f" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>describeProperty</name></member>
      <member refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>fillElement</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1af5ccaceb5c188a7a0ea11791885919bc" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>fillProperty</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1afdacaa50d0fc60b5fd27f350d2e10247" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>FreqKind</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a3994f7cdb5f7b77c6a436a1e6dfbf921" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>FreqLogKind</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a171359b9e05d91b191735545b10a7d51" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Generic</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a52a4e2654922d75c2a5926e2f76f793e" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Generic</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1ae3fdc433c381812fa05701d365a557e8" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Generic</name></member>
      <member refid="class_gyoto_1_1_object_1a8232112e660216a61caa15fab27b889f" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_object_1ad61a061d2073c841e9911be0395d4494" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_object_1ad4189c2c103030e9d91ee0f29ebcf13d" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_object_1a99544282b6c383b8570a5bc51bed1ecf" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a2885af35601021e4f1c99e7f7be35dc8" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getBand</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a3f2229fb10aeac14b362065350ac33e6" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getChannelBoundaries</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a0b08629005046f228db9db987ec8f05a" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getChannelBoundaries</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a7752fe757512a5970a1d5251b6f1b19f" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getChannelIndices</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a20157612af1f51e4d3f8d5d5390ce6f3" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getMidpoints</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1aad78f9b4e02974d2b569333010951876" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getMidpoints</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a2824f6a0258c7cb29caa5b5ed6811068" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getNBoundaries</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a4529fb36ec7d5793aec5dfde7315116c" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getProperties</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a9a9cb35cd161bf19ce652f76e0a5bec0" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getRefCount</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1af76be4b12e7bba26d0954075fefecdce" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getWidths</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a6d53073cf96fe552175c7dcd9379acae" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>getWidths</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1af8f5b7a1d3e55f6a123de7d73af4cff4" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Gyoto::SmartPointer&lt; Gyoto::Spectrometer::Uniform &gt;</name></member>
      <member refid="class_gyoto_1_1_object_1a13843618d84c49d47bd37ddfa31160c5" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>help</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1a55dca3f3b9707bd18ae4a0dd98befd70" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>hook</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a9ec09c51fd18dde7c13ef3b03fac1fad" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>incRefCount</name></member>
      <member refid="class_gyoto_1_1_object_1a06ea95dc396053466cdd63d419d1688c" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>isThreadSafe</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a3e0ab877874e6bfda6469b5dffc598af" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>kind</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1af6c1082ac163e833fff9e934b417b194" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>kind</name></member>
      <member refid="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" prot="protected" virt="virtual" ambiguityscope="Gyoto::Spectrometer::Generic::"><scope>Gyoto::Spectrometer::Uniform</scope><name>kind</name></member>
      <member refid="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" prot="protected" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>kind_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a5d0246b0be80169490507d9a61f77f52" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>kindid</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1ab1a9738c5823db9c79d685b3cd2d1d86" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>kindid</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a63c8212b30359dd8588359b9201b275c" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>kindid</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1ab1a9738c5823db9c79d685b3cd2d1d86" prot="public" virt="virtual" ambiguityscope="Gyoto::Spectrometer::Generic::"><scope>Gyoto::Spectrometer::Uniform</scope><name>kindid</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1aae47201273f20c8fb3a0761c5e631336" prot="protected" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>kindid_</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1ae336573bbbf1b8a5b71d8fbac1408030" prot="private" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>listeners_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a3939be859b97c8e4c352da02e00170d9" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>midpoints_</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1abf1c1e431cdd4f08f13de581cccb6770" prot="private" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>mutex_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a9205cc1114c7acddf96d115a9f03cc57" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>nboundaries_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aeb738401aac04f15c0dc97d3ce55ea7d" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>nSamples</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a65f7a6762e3c2b629a5991910f36ba98" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>nSamples</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a65f7a6762e3c2b629a5991910f36ba98" prot="public" virt="virtual" ambiguityscope="Gyoto::Spectrometer::Generic::"><scope>Gyoto::Spectrometer::Uniform</scope><name>nSamples</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a787ad3d8cd46683e34d964310cca163e" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>nsamples_</name></member>
      <member refid="class_gyoto_1_1_object_1a5173d279a53bbc9850771e344d6b79b0" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_object_1a5834e83ca1482a379c7ddefb1919457f" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_object_1a1fbd53bedaf8d18f67b12ec0660b8aa7" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_object_1a01832761cd5f0a12319e3e24ce9a9fba" prot="protected" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>plugins_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1ab9e0b69c354e9a0cf0f3d5b35ed3fdf1" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>properties</name></member>
      <member refid="class_gyoto_1_1_object_1a424ef3538c714adfafad7eda249e0d58" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>property</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1aaaf212a70fb1880b70e4d357e843cc85" prot="private" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>refCount</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a7346df12df2f17eb9713ceabbd68b7e4" prot="protected" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>reset_</name></member>
      <member refid="class_gyoto_1_1_object_1a58c4ecdaae1873dc6912e164b61826e0" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1aa063e0df7c2e4b22207a784c76c6681f" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1aba6d35c5bbf814912ed84549109e117a" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1abed03e16a8013699534b802e06751ef8" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>setParameter</name></member>
      <member refid="class_gyoto_1_1_object_1a43fe041144add66155668ca88a99fd98" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>setParameter</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aaca1850f712a089a6c5e0188aec0e5a4" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>setParameters</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a7d212bcd7d3ac4147e18683c47ca910d" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>SmartPointee</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1adc075b08ca5d3c0635bc97f843835f8a" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>SmartPointee</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Subcontractor_t</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1adb1af4c097a95ac19070cb452e280abb" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Teller</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1add28f0a06265233ccacf5e9ac8537bf2" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Teller</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1af9a1daa629900f00538096987e398a13" prot="protected" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>tellListeners</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1a8bcbb785f92fefe4e76afe76eb175f8a" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>unhook</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1abfafcfdab5e0d979e5ab4393f022c9f9" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Uniform</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1ad8341ff804490c91645d3da388ea89bc" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Uniform</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1ab5663871d8ff3626e6c0837ed5608bd4" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>Uniform</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1aa2b46ae8e24c9ca0385e4133c287cf90" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>WaveKind</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a6e1f7329a824883bcca2ec61dc559e19" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>WaveLogKind</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1ac1eebc615915693215c1a7f8a6086e7a" prot="public" virt="non-virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>widths_</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_generic_1a3962a12d3d34bedf16708a6ad6c6530b" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>~Generic</name></member>
      <member refid="class_gyoto_1_1_object_1ab6f302f93bfd1f07ae2a6a48b3c74932" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>~Object</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a4301d456d1d36ed7912d073b742c74e1" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>~SmartPointee</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1a7228f637ed7a007a0c6a810a89f3b188" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>~Teller</name></member>
      <member refid="class_gyoto_1_1_spectrometer_1_1_uniform_1a25281b85332bc356b410e85324150091" prot="public" virt="virtual"><scope>Gyoto::Spectrometer::Uniform</scope><name>~Uniform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
