<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_gyoto_1_1_metric_1_1_python" kind="class" language="C++" prot="public">
    <compoundname>Gyoto::Metric::Python</compoundname>
    <basecompoundref refid="class_gyoto_1_1_python_1_1_object" prot="public" virt="non-virtual">Gyoto::Python::Object&lt; Gyoto::Metric::Generic &gt;</basecompoundref>
    <includes refid="_gyoto_python_8h" local="no">GyotoPython.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gyoto_1_1_metric_1_1_python_1ab0e9b408fe0c57afa6337de288e7d37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Gyoto::SmartPointer&lt; Gyoto::Metric::Python &gt;</definition>
        <argsstring></argsstring>
        <name>Gyoto::SmartPointer&lt; Gyoto::Metric::Python &gt;</name>
        <param>
          <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">Gyoto::SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Gyoto::Metric::Python</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="565" column="18" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a5566b08ef5a6a5df3b25fe948080f726" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pGmunu_</definition>
        <argsstring></argsstring>
        <name>pGmunu_</name>
        <briefdescription>
<para>Reference to the gmunu method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="598" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a4a6ab253097db26c0329db8b97e778e2" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pChristoffel_</definition>
        <argsstring></argsstring>
        <name>pChristoffel_</name>
        <briefdescription>
<para>Reference to the christoffel method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="603" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a20796d553e25f9bbefc0bb5559678eff" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pGetRmb_</definition>
        <argsstring></argsstring>
        <name>pGetRmb_</name>
        <briefdescription>
<para>Reference to the getRmb method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="608" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a3de6396e84b76cdda6638fab8660c95a" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pGetRms_</definition>
        <argsstring></argsstring>
        <name>pGetRms_</name>
        <briefdescription>
<para>Reference to the getRms method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="613" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1ab64d9da5d486a9d3c7ac41a80cd9be1b" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pGetSpecificAngularMomentum_</definition>
        <argsstring></argsstring>
        <name>pGetSpecificAngularMomentum_</name>
        <briefdescription>
<para>Reference to the method getSpecificAngularMomentum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="618" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a0dbf2773363eb46c2225e5156efb5798" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pGetPotential_</definition>
        <argsstring></argsstring>
        <name>pGetPotential_</name>
        <briefdescription>
<para>Reference to the getPotential method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="623" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a43469e16d95967540744c2be9bf8ef8c" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pIsStopCondition_</definition>
        <argsstring></argsstring>
        <name>pIsStopCondition_</name>
        <briefdescription>
<para>Reference to the isStopCondition method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="628" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a905ed0c6a9c077afaed3bc5161c3a32e" prot="private" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Metric::Python::pCircularVelocity_</definition>
        <argsstring></argsstring>
        <name>pCircularVelocity_</name>
        <briefdescription>
<para>Reference to the circularVelocity method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="633" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_generic_1ae0da95aa14ef7aa8df1af598d34d2efa" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::mass_</definition>
        <argsstring></argsstring>
        <name>mass_</name>
        <briefdescription>
<para>Mass yielding geometrical unit (in kg). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="166" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoMetric.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_generic_1a691390867f76f4aaaef6848bb5366fc7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Gyoto::Metric::Generic::coordkind_</definition>
        <argsstring></argsstring>
        <name>coordkind_</name>
        <briefdescription>
<para>Kind of coordinates (cartesian-like, spherical-like, unspecified) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="167" column="7" bodyfile="/home/junichi/Gyoto/include/GyotoMetric.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_generic_1a9d17cce6d1615f47e9e30ba1fe6e88ca" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Gyoto::Metric::Generic::__defaultfeatures</definition>
        <argsstring></argsstring>
        <name>__defaultfeatures</name>
        <briefdescription>
<para>Whether some virtual methods are implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementations of some methods call one-another. This member is used internally to avoid infinite recursion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="176" column="7" bodyfile="/home/junichi/Gyoto/include/GyotoMetric.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_smart_pointee_1aaaf212a70fb1880b70e4d357e843cc85" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::refCount</definition>
        <argsstring></argsstring>
        <name>refCount</name>
        <briefdescription>
<para>Reference counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="83" column="7" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_smart_pointee_1abf1c1e431cdd4f08f13de581cccb6770" prot="private" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t Gyoto::SmartPointee::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
<para>A mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>When compiled with libpthread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="89" column="19" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_hook_1_1_teller_1ae336573bbbf1b8a5b71d8fbac1408030" prot="private" static="no" mutable="no">
        <type><ref refid="class_listener_item" kindref="compound">ListenerItem</ref> *</type>
        <definition>ListenerItem* Gyoto::Hook::Teller::listeners_</definition>
        <argsstring></argsstring>
        <name>listeners_</name>
        <briefdescription>
<para>Linked list of <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref> items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="94" column="16" bodyfile="/home/junichi/Gyoto/include/GyotoHooks.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1a20eda5413e201eb833b7437b547be6f6" prot="public" static="yes" mutable="no">
        <type><ref refid="_gyoto_object_8h_1a750e7a43779f63bdb13111eaf0271203" kindref="member">GYOTO_OBJECT</ref> <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const</type>
        <definition>GYOTO_OBJECT Property const Gyoto::Metric::Python::properties[]</definition>
        <argsstring>[]</argsstring>
        <name>properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="636" column="42" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_python_1aa5926e77df4fada67a71d01913f8f80c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Gyoto::Metric::Python::GYOTO_OBJECT_THREAD_SAFETY</definition>
        <argsstring></argsstring>
        <name>GYOTO_OBJECT_THREAD_SAFETY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="637" column="3" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="637" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1af4c7119b0a717a18531d5910bbd10b7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const  *</type>
        <definition>virtual Property const* Gyoto::Metric::Python::getProperties</definition>
        <argsstring>() const</argsstring>
        <name>getProperties</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1a0cc1a0a93d1d49b83ba88e613d5bd9d3">getProperties</reimplements>
        <briefdescription>
<para>Get list of properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is declared automatically by the <ref refid="_gyoto_object_8h_1a750e7a43779f63bdb13111eaf0271203" kindref="member">GYOTO_OBJECT</ref> macro and defined automatically by the <ref refid="_gyoto_property_8h_1a1356435ea7ee0e18d07201a80e034dcc" kindref="member">GYOTO_PROPERTY_END</ref> macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="636" column="79"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a1ec4f1ba5ab7c41389a8ed8ef9cacc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Metric::Python::Python</definition>
        <argsstring>()</argsstring>
        <name>Python</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="638" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1af5a79286d43efb245d2cb4c3c7b2de5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Metric::Python::Python</definition>
        <argsstring>(const Python &amp;)</argsstring>
        <name>Python</name>
        <param>
          <type>const <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="639" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a807d5a6002579edb065625d268a4bf9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyoto::Metric::Python::~Python</definition>
        <argsstring>()</argsstring>
        <name>~Python</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="640" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1abecbc101a5656af8643901d67e7bffc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> *</type>
        <definition>virtual Python* Gyoto::Metric::Python::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1a2bb06777240b34baf3e1b7390674ae4f">clone</reimplements>
        <briefdescription>
<para>Virtual copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="641" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1ad764d306db65b99b2b99847290735c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Python::spherical</definition>
        <argsstring>(bool)</argsstring>
        <name>spherical</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="646" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1afc3d0c76e925d53fda44cafae5607e69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gyoto::Metric::Python::spherical</definition>
        <argsstring>() const</argsstring>
        <name>spherical</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="647" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a1e19d7037aeee1bffb119b8f2c5e5f00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Gyoto::Metric::Python::module</definition>
        <argsstring>() const</argsstring>
        <name>module</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1a9a814881f2741b5ccdf8ca91d1b4ebf7">module</reimplements>
        <briefdescription>
<para>Return module_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="648" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a3718604728f0dce0a8927e45921a7ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Python::module</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>module</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1a4cb3d486914da158dafcd1e562827fed">module</reimplements>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_python_1_1_base_1a7f6558bf7597b6e6c8f1bd198895b077" kindref="member">module_</ref> and import the <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> module. </para>
        </briefdescription>
        <detaileddescription>
<para>Side effects:<itemizedlist>
<listitem><para>sets <ref refid="class_gyoto_1_1_python_1_1_base_1ae0c6e2e9b883adaa081e7a3b402d3bb2" kindref="member">inline_module_</ref> to &quot;&quot;;</para>
</listitem><listitem><para>calls <ref refid="class_gyoto_1_1_metric_1_1_python_1a9708bdef837a896e529accc4e1720655" kindref="member">klass</ref>(<ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref>) if <ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref> is already known, so <ref refid="class_gyoto_1_1_python_1_1_base_1a7f6558bf7597b6e6c8f1bd198895b077" kindref="member">module_</ref> can be set (or reset) after <ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref>. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="649" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a5aa16fe612f6ed1e9f7a7172cbe07241" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Gyoto::Metric::Python::inlineModule</definition>
        <argsstring>() const</argsstring>
        <name>inlineModule</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1a79f704f70a42edf5f37d1e28ee88037a">inlineModule</reimplements>
        <briefdescription>
<para>Return inline_module_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="650" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a2faed173e725f3192666abb0ad1a054c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Python::inlineModule</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>inlineModule</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1a3436f643ba19cb9e53d8a7e95b64f0df">inlineModule</reimplements>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_python_1_1_base_1ae0c6e2e9b883adaa081e7a3b402d3bb2" kindref="member">inline_module_</ref> and import the <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> module. </para>
        </briefdescription>
        <detaileddescription>
<para>Side effects:<itemizedlist>
<listitem><para>sets <ref refid="class_gyoto_1_1_python_1_1_base_1a7f6558bf7597b6e6c8f1bd198895b077" kindref="member">module_</ref> to &quot;&quot;;</para>
</listitem><listitem><para>calls <ref refid="class_gyoto_1_1_metric_1_1_python_1a9708bdef837a896e529accc4e1720655" kindref="member">klass</ref>(<ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref>) if <ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref> is already known, so <ref refid="class_gyoto_1_1_python_1_1_base_1a7f6558bf7597b6e6c8f1bd198895b077" kindref="member">module_</ref> can be set (or reset) after <ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref>. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="651" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a9708bdef837a896e529accc4e1720655" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Gyoto::Metric::Python::klass</definition>
        <argsstring>() const</argsstring>
        <name>klass</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1a894cfd1e8f4424b4a27b79020bc95a95">klass</reimplements>
        <briefdescription>
<para>Retrieve <ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="652" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a41b59b3d5e8f36d0d7d0865ae2efceb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Python::klass</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>klass</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1acce1645b213fe517f73483a99e7789be">klass</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" kindref="member">class_</ref> and instantiate the <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets <ref refid="class_gyoto_1_1_python_1_1_base_1aab2145b455aa9848024b643d06016b35" kindref="member">pInstance_</ref>.</para>
<para>This generic implementation takes care of the common ground, but does not set &apos;this&apos; or call <ref refid="class_gyoto_1_1_metric_1_1_python_1a97c57b0c9a8c22375d8668d1e1b189a8" kindref="member">parameters</ref>(<ref refid="class_gyoto_1_1_python_1_1_base_1aa033dfe530617afb7c7a27e6536bb88c" kindref="member">parameters_</ref>). Therefore, all the derived classes should reimplement this method and at least call Python::Base::klass(c) and <ref refid="class_gyoto_1_1_metric_1_1_python_1a97c57b0c9a8c22375d8668d1e1b189a8" kindref="member">parameters</ref>(<ref refid="class_gyoto_1_1_python_1_1_base_1aa033dfe530617afb7c7a27e6536bb88c" kindref="member">parameters_</ref>). Between the two is the right moment to check that the <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> class implements the required API and to cache PyObject* pointers to class methods. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="653" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a97c57b0c9a8c22375d8668d1e1b189a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; Gyoto::Metric::Python::parameters</definition>
        <argsstring>() const</argsstring>
        <name>parameters</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1a1f83483692c3f761777f5a8a863d0a83">parameters</reimplements>
        <briefdescription>
<para>Retrieve <ref refid="class_gyoto_1_1_python_1_1_base_1aa033dfe530617afb7c7a27e6536bb88c" kindref="member">parameters_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="654" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a0116ead0d5baed6dbe02f18e7e4a31df" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Python::parameters</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;)</argsstring>
        <name>parameters</name>
        <reimplements refid="class_gyoto_1_1_python_1_1_base_1ad60df11071a344829956610aa8015a58">parameters</reimplements>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_python_1_1_base_1aa033dfe530617afb7c7a27e6536bb88c" kindref="member">parameters_</ref> and send them to <ref refid="class_gyoto_1_1_python_1_1_base_1aab2145b455aa9848024b643d06016b35" kindref="member">pInstance_</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameters are sent to the class instance using the <bold>setitem</bold> method with numerical keys. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="655" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a935d32b21af382aeabf85908d1b51517" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Python::mass</definition>
        <argsstring>(double m)</argsstring>
        <name>mass</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1aa3dbb89d1eee82617b1632f2f1e35b60">mass</reimplements>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Set mass used in <ref refid="class_gyoto_1_1_metric_1_1_generic_1abd6bfc4aef563b64318b5168f83a49fb" kindref="member">unitLength()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="657" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a442678531583930ab12a3497e01e6145" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Python::gmunu</definition>
        <argsstring>(double g[4][4], const double *x) const</argsstring>
        <name>gmunu</name>
        <param>
          <type>double</type>
          <declname>g</declname>
          <array>[4][4]</array>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="660" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1aed1a335f58893cecb163f374bd9944f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::Metric::Python::christoffel</definition>
        <argsstring>(double dst[4][4][4], const double *x) const</argsstring>
        <name>christoffel</name>
        <param>
          <type>double</type>
          <declname>dst</declname>
          <array>[4][4][4]</array>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="661" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1abf1781d71384204e5fd98bf6e8e43298" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Python::getRmb</definition>
        <argsstring>() const</argsstring>
        <name>getRmb</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1a9b3e894772e2bce0cf107fa632ed4496">getRmb</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the marginally bound radius Should be implemented in derived classes if useful If called on the base class, returns an error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="664" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a8e052561441fa18973a80d50bef31b8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Python::getRms</definition>
        <argsstring>() const</argsstring>
        <name>getRms</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1a4dab1e5dadbafd87992d52e731e1c9f2">getRms</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the marginally stable (ISCO) radius Should be implemented in derived classes if useful If called on the base class, returns an error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="665" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a1beb709ce0880ad1c42c4876914c7c47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Python::getSpecificAngularMomentum</definition>
        <argsstring>(double rr) const</argsstring>
        <name>getSpecificAngularMomentum</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1a745db8f6377b8b9e1ced42ea174de938">getSpecificAngularMomentum</reimplements>
        <param>
          <type>double</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the specific angular momentum l=-u_phi/u_t Should be implemented in derived classes if useful If called on the base class, returns an error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="666" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a80c01908629bcddb1cbd6ddca98e54d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Python::getPotential</definition>
        <argsstring>(double const pos[4], double l_cst) const</argsstring>
        <name>getPotential</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1ab045442f6aa20bec44cb7017bac91103">getPotential</reimplements>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>l_cst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns potential W=-ln(|u_t|) for a cst specific angular momentum l_cst Should be implemented in derived classes if useful If called on the base class, returns an error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="667" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1af7db3499d2f44b060254681bcde4c278" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int Gyoto::Metric::Python::isStopCondition</definition>
        <argsstring>(double const coord[8]) const</argsstring>
        <name>isStopCondition</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1a67db9a833cd77098dc602ee6521c7770">isStopCondition</reimplements>
        <param>
          <type>double const</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Check whether integration should stop. </para>
        </briefdescription>
        <detaileddescription>
<para>The integrating loop will ask this the <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> through this method whether or not it is happy to continue the integration. Typically, the <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> should answer 0 when everything is fine, 1 when too close to the event horizon, inside the BH...</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>8-coordinate vector to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="668" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_python_1a278525ef1d038566b143af16b5ae59fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Python::circularVelocity</definition>
        <argsstring>(double const pos[4], double vel[4], double dir=1.) const</argsstring>
        <name>circularVelocity</name>
        <reimplements refid="class_gyoto_1_1_metric_1_1_generic_1afcaf16029a21fff9c110b4171956f079">circularVelocity</reimplements>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>vel</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dir</declname>
          <defval>1.</defval>
        </param>
        <briefdescription>
<para>Yield circular velocity at a given position. </para>
        </briefdescription>
        <detaileddescription>
<para>Give the velocity of a massive particle in circular orbit at the given position projected onto the equatorial plane. Such a velocity may not exist everywhere (or anywhere) for a given metric. This method is intended to be used by <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref> classes such as Torus or ThinDisk.</para>
<para>If keplerian_ is set to true, this method should return the Keplerian velcity instead (derived classes should ensure this, see <ref refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a553b15f36f209215cffe92be812629e6" kindref="member">KerrBL::circularVelocity()</ref> for instance).</para>
<para>The default implementation throws an error if keplerian_ is set to false.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>input: position, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>output: velocity, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>1 for corotating, -1 for counterrotating. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="669" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::set</definition>
        <argsstring>(std::string const &amp;key, Value val)</argsstring>
        <name>set</name>
        <reimplements refid="class_gyoto_1_1_object_1aba6d35c5bbf814912ed84549109e117a">set</reimplements>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="329" column="16" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="329" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::set</definition>
        <argsstring>(Property const &amp;p, Value val)</argsstring>
        <name>set</name>
        <reimplements refid="class_gyoto_1_1_object_1a58c4ecdaae1873dc6912e164b61826e0">set</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="341" column="16" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="341" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::set</definition>
        <argsstring>(Property const &amp;p, Value val, std::string const &amp;unit)</argsstring>
        <name>set</name>
        <reimplements refid="class_gyoto_1_1_object_1aa063e0df7c2e4b22207a784c76c6681f">set</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="352" column="16" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="352" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1abed03e16a8013699534b802e06751ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::set</definition>
        <argsstring>(std::string const &amp;pname, Value val, std::string const &amp;unit)</argsstring>
        <name>set</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> (expressed in unit) of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="246" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::get</definition>
        <argsstring>(std::string const &amp;key) const</argsstring>
        <name>get</name>
        <reimplements refid="class_gyoto_1_1_object_1ad61a061d2073c841e9911be0395d4494">get</reimplements>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="366" column="17" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="366" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::get</definition>
        <argsstring>(Property const &amp;p, std::string const &amp;unit) const</argsstring>
        <name>get</name>
        <reimplements refid="class_gyoto_1_1_object_1ad4189c2c103030e9d91ee0f29ebcf13d">get</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="375" column="9" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="375" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::get</definition>
        <argsstring>(Property const &amp;p) const</argsstring>
        <name>get</name>
        <reimplements refid="class_gyoto_1_1_object_1a8232112e660216a61caa15fab27b889f">get</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="384" column="9" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="384" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a99544282b6c383b8570a5bc51bed1ecf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Object::get</definition>
        <argsstring>(std::string const &amp;pname, std::string const &amp;unit) const</argsstring>
        <name>get</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>, converted to unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="258" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::setParameter</definition>
        <argsstring>(std::string name, std::string content, std::string unit)</argsstring>
        <name>setParameter</name>
        <reimplements refid="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b">setParameter</reimplements>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>content</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="394" column="15" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="394" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a43fe041144add66155668ca88a99fd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::setParameter</definition>
        <argsstring>(Gyoto::Property const &amp;p, std::string const &amp;name, std::string const &amp;content, std::string const &amp;unit)</argsstring>
        <name>setParameter</name>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_polish_doughnut_1a13a8a59bd3738f5739db0550dbb42003">setParameter</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Gyoto::Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>content</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set parameter by <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> (and name) </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used when parsing an XML description, if <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> (<emphasis>p</emphasis>) of this <emphasis>name</emphasis> is found (i.e. either <emphasis>p.name</emphasis> or <emphasis>p.name_false</emphasis> is equal to <emphasis>name</emphasis>). Implementation should fall-back on calling the direct&apos;s parent implementation:</para>
<para><programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>void<sp/>setParameter(Gyoto::Property<sp/>const<sp/>&amp;p,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">void<sp/>B::setParameter(Gyoto::Property<sp/>const<sp/>&amp;p,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>content,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>doSomething(content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>A::setParameter(p,<sp/>name,<sp/>content,<sp/>unit);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> that matches <emphasis>name</emphasis> (<emphasis>p.name</emphasis> == <emphasis>name</emphasis> or <emphasis>p.name_false</emphasis> == <emphasis>name</emphasis>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>XML name of the parameter (XML entity) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of the unit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="426" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::fillElement</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp) const</argsstring>
        <name>fillElement</name>
        <reimplements refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3">fillElement</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="409" column="16" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="409" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_object_1a84ea2cab6209f1ed0de3a73223c6a5e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Gyoto::Python::Object&lt; Gyoto::Metric::Generic  &gt;::setParameters</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp)</argsstring>
        <name>setParameters</name>
        <reimplements refid="class_gyoto_1_1_object_1aa0a8b119e7aa95b21be081f8c97e1626">setParameters</reimplements>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="425" column="8" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="425" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1af77fb58e4ed3399aece00dbcbcdb821b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::Metric::Generic::coordKind</definition>
        <argsstring>() const</argsstring>
        <name>coordKind</name>
        <briefdescription>
<para>Get coordinate kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="229" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a795ec4f876df5d582df28a9923fd6411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::Metric::Generic::getRefCount</definition>
        <argsstring>()</argsstring>
        <name>getRefCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="211" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1af61769eacdd15f6d6c411214b575c62b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::mass</definition>
        <argsstring>(const double, const std::string &amp;unit)</argsstring>
        <name>mass</name>
        <param>
          <type>const double</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Set mass used in <ref refid="class_gyoto_1_1_metric_1_1_generic_1abd6bfc4aef563b64318b5168f83a49fb" kindref="member">unitLength()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="225" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a9ae43ad3fcad9bb2ee21a5d8de104eda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::mass</definition>
        <argsstring>() const</argsstring>
        <name>mass</name>
        <briefdescription>
<para>Get mass used in <ref refid="class_gyoto_1_1_metric_1_1_generic_1abd6bfc4aef563b64318b5168f83a49fb" kindref="member">unitLength()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="231" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a3f71a0587fd43e8446cab025bfdd327c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::mass</definition>
        <argsstring>(const std::string &amp;unit) const</argsstring>
        <name>mass</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Get mass used in <ref refid="class_gyoto_1_1_metric_1_1_generic_1abd6bfc4aef563b64318b5168f83a49fb" kindref="member">unitLength()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="232" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1abd6bfc4aef563b64318b5168f83a49fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::unitLength</definition>
        <argsstring>() const</argsstring>
        <name>unitLength</name>
        <briefdescription>
<para>M * G / c^2, M is in kg, unitLength in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>Metrics implementations are free to express lengths and distances in whatever unit they see fit (presumably most often geometrical units). This function returns this unit in SI (meters). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="239" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a74c7861961278d587a15b067c43069f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::unitLength</definition>
        <argsstring>(const std::string &amp;unit) const</argsstring>
        <name>unitLength</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>unitLength expressed in specified unit </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a809e6419cb528829c8afa30430b710ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::deltaMin</definition>
        <argsstring>() const</argsstring>
        <name>deltaMin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get delta_min_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="273" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a7b4a5908eb4ed3ed255947966f6faf50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::deltaMin</definition>
        <argsstring>(double h1)</argsstring>
        <name>deltaMin</name>
        <param>
          <type>double</type>
          <declname>h1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set delta_min_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="278" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a0747da4b348993a84c958d0a6e669c62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::deltaMax</definition>
        <argsstring>() const</argsstring>
        <name>deltaMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get delta_max_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="283" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a1d349921ec1e0549b47bbdd3c31e8bc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double Gyoto::Metric::Generic::deltaMax</definition>
        <argsstring>(double const pos[8], double delta_max_external) const</argsstring>
        <name>deltaMax</name>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>double</type>
          <declname>delta_max_external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get delta max at a given position</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[optional]</parametername>
</parameternamelist>
<parameterdescription>
<para>delta_max_external external constraint on delta_max </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the smallest value between delta_max_, delta_max_external, and R*delta_max_over_r_ where R is pos[1] in spherical coordinates and max(x1, x2, x3) in Cartesian coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="295" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a17791da16af037e2acb7c6ace2cfd5a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::deltaMax</definition>
        <argsstring>(double h1)</argsstring>
        <name>deltaMax</name>
        <param>
          <type>double</type>
          <declname>h1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set delta_max_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="300" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1abe2328a722fb2dc37d55c6ae98bd659a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::deltaMaxOverR</definition>
        <argsstring>() const</argsstring>
        <name>deltaMaxOverR</name>
        <briefdescription>
<para>Get delta_max_over_r_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="302" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a2c9ed9d165040f96e72136043a674b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::deltaMaxOverR</definition>
        <argsstring>(double t)</argsstring>
        <name>deltaMaxOverR</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set delta_max_over_r_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="303" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a3b60d77fac2903c94c3ae5fbd6566668" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gyoto::Metric::Generic::keplerian</definition>
        <argsstring>() const</argsstring>
        <name>keplerian</name>
        <briefdescription>
<para>Get keplerian_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="305" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a5aad6a8c1cf296ef0ad276b23614d35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::keplerian</definition>
        <argsstring>(bool)</argsstring>
        <name>keplerian</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
<para>Set keplerian_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="306" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1ab0b9d853d673f621c960e1290db5e3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::cartesianVelocity</definition>
        <argsstring>(double const coord[8], double vel[3])</argsstring>
        <name>cartesianVelocity</name>
        <param>
          <type>double const</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>double</type>
          <declname>vel</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Compute xprime, yprime and zprime from 8-coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="308" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a0077ac6a240b042dbe3487298eac4ef0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double Gyoto::Metric::Generic::SysPrimeToTdot</definition>
        <argsstring>(const double coord[4], const double v[3]) const</argsstring>
        <name>SysPrimeToTdot</name>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Compute tdot as a function of dr/dt, dtheta/dt and dphi/dt. Everything is in geometrical units. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position (geometrical units); </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>3-velocity dx1/dx0, dx2/dx0, dx3/dx0; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tdot = dx0/dtau. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="316" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a325f414c1c393c7142b42889e2be8257" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::zamoVelocity</definition>
        <argsstring>(double const pos[4], double vel[4]) const</argsstring>
        <name>zamoVelocity</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a944a39adafbf76b4804929589a618b01">zamoVelocity</reimplementedby>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>vel</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Yield ZAMO velocity at a given position. </para>
        </briefdescription>
        <detaileddescription>
<para>Give the velocity of a zero angular momentul observer (whatever is closest to &quot;at rest&quot;). The default implementation simply projects (1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring that vel is orthogonal to ephi.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>input: position, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>output: velocity, </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="353" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1adaf7d03d118b4625447d20746857cdc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::nullifyCoord</definition>
        <argsstring>(double coord[8]) const</argsstring>
        <name>nullifyCoord</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a4b1d76722686bc76988eaac1a8923947">nullifyCoord</reimplementedby>
        <param>
          <type>double</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Set tdot (coord[4]) such that coord is light-like. Everything is in geometrical units. </para>
        </briefdescription>
        <detaileddescription>
<para>Set coord[4] so that the 4-velocity coord[4:7] is lightlike, i.e. of norm 0. There may be up to two solutions. coord[4] is set to the hightest. The lowest can be retrieved using <ref refid="class_gyoto_1_1_metric_1_1_generic_1ab1c920d3c040b73dc0c12197b0a430e5" kindref="member">nullifyCoord(double coord[8], double&amp; tdot2) const</ref>. Everything is expressed in geometrical units.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">coord</parametername>
</parameternamelist>
<parameterdescription>
<para>8-position, coord[4] will be set according to the other elements; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="365" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1ab1c920d3c040b73dc0c12197b0a430e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::nullifyCoord</definition>
        <argsstring>(double coord[8], double &amp;tdot2) const</argsstring>
        <name>nullifyCoord</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a24367da4de2e399f00ba3e3bca6919f8">nullifyCoord</reimplementedby>
        <param>
          <type>double</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tdot2</declname>
        </param>
        <briefdescription>
<para>Set tdot (coord[4]) such that coord is light-like and return other possible tdot. </para>
        </briefdescription>
        <detaileddescription>
<para>Set coord[4] so that the 4-velocity coord[4:7] is lightlike, i.e. of norm 0. There may be up to two solutions. coord[4] is set to the hightest. The lowest can be retrieved in tdot2. Everything is expressed in geometrical units.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">coord</parametername>
</parameternamelist>
<parameterdescription>
<para>8-position, coord[4] will be set according to the other elements; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tdot2</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to the smallest solution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="378" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1aa8b34cc32bd8e324e7852f87d08cf6b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::normalizeFourVel</definition>
        <argsstring>(double coord[8]) const</argsstring>
        <name>normalizeFourVel</name>
        <param>
          <type>double</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Normalize fourvelvel to -1. </para>
        </briefdescription>
        <detaileddescription>
<para>First computes threevel as xiprime=xidot/x0dot for i in {1, 2, 3}, then computes x0dot using SyPrimeToTdot, then computes again xidot as xidot=xiprime*x0dot.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">coord</parametername>
</parameternamelist>
<parameterdescription>
<para>8-position, coord[4-7] will be set according to the other elements; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="391" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a029c3c5e8851e218e2b77315cd6e9ab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::normalizeFourVel</definition>
        <argsstring>(double const pos[4], double fourvel[4]) const</argsstring>
        <name>normalizeFourVel</name>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>fourvel</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Normalize fourvelvel to -1. </para>
        </briefdescription>
        <detaileddescription>
<para>First computes threevel as xiprime=xidot/x0dot for i in {1, 2, 3}, then computes x0dot using SyPrimeToTdot, then computes again xidot as xidot=xiprime*x0dot.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">fourvel</parametername>
</parameternamelist>
<parameterdescription>
<para>4-velocity, will be renormalized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="403" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1ac5bfd30a216cb6654cd992c1a42d6075" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double Gyoto::Metric::Generic::ScalarProd</definition>
        <argsstring>(const double pos[4], const double u1[4], const double u2[4]) const</argsstring>
        <name>ScalarProd</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_hayward_1a73722ddfcd3783aed6ddcdd265ba78c8">ScalarProd</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a5dd3b6d8c6bfb98a72ed2c9950613ebf">ScalarProd</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rot_star3__1_1a3266ed42094d9b8395fe1681aeb56983">ScalarProd</reimplementedby>
        <param>
          <type>const double</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>u1</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>u2</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Scalar product. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute the scalarproduct of the two quadrivectors u1 and u2 in this <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>, at point pos expressed in coordinate system sys. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st quadrivector; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u2</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd quadrivector; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>u1*u2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="414" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a4cf28a145ecb21cf674e967a0a937d7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::norm</definition>
        <argsstring>(const double pos[4], const double u1[4]) const</argsstring>
        <name>norm</name>
        <param>
          <type>const double</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>u1</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Scalar product. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute the norm of the quadrivector u1 in this <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>, at point pos expressed in coordinate system sys. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">u1</parametername>
</parameternamelist>
<parameterdescription>
<para>quadrivector; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>||u1|| </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="424" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a706491b96fc929a9b04632a8fe5bc974" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::multiplyFourVect</definition>
        <argsstring>(double vect[4], double a) const</argsstring>
        <name>multiplyFourVect</name>
        <param>
          <type>double</type>
          <declname>vect</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>multiply vector by scalar </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="428" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a65842e339bb17e7270c630ee6d3c6bb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::addFourVect</definition>
        <argsstring>(double u1[4], double const u2[4]) const</argsstring>
        <name>addFourVect</name>
        <param>
          <type>double</type>
          <declname>u1</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double const</type>
          <declname>u2</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>add second vector to first one </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="431" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a7801b41c8686f337356de47a3a054f10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::projectFourVect</definition>
        <argsstring>(double const pos[4], double u1[4], double const u2[4]) const</argsstring>
        <name>projectFourVect</name>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>u1</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double const</type>
          <declname>u2</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>project u1 orthogonally to u2 at pos </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="434" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a397ca9eae8d37bf02f401e16fdfa6724" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::dualOneForm</definition>
        <argsstring>(double const IN_ARRAY1_1[4], double const IN_ARRAY1_2[4], double ARGOUT_ARRAY1[4]) const</argsstring>
        <name>dualOneForm</name>
        <param>
          <type>double const</type>
          <declname>IN_ARRAY1_1</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double const</type>
          <declname>IN_ARRAY1_2</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>ARGOUT_ARRAY1</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Computes dual 1-form Compute the dual 1-form of 4-vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>IN_ARRAY1_1</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IN_ARRAY1_2</parametername>
</parameternamelist>
<parameterdescription>
<para>quadrivector; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ARGOUT_ARRAY1</parametername>
</parameternamelist>
<parameterdescription>
<para>output 1-form </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="443" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a2a558c51175c19722fe733f7919b0a11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::observerTetrad</definition>
        <argsstring>(obskind_t obskind, double const pos[4], double fourvel[4], double screen1[4], double screen2[4], double screen3[4]) const</argsstring>
        <name>observerTetrad</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_minkowski_1a6e736715f33da07a47d4e314a99cd614">observerTetrad</reimplementedby>
        <param>
          <type><ref refid="_gyoto_defs_8h_1abdc37c8fde52ef588246ff7da367d65c" kindref="member">obskind_t</ref></type>
          <declname>obskind</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>fourvel</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>screen1</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>screen2</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>screen3</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Computes the orthonormal local tetrad of the observer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obskind</parametername>
</parameternamelist>
<parameterdescription>
<para>input: kind of observer (eg: &quot;ZAMO&quot;,&quot;KeplerianObserver&quot;...) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>input: position, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fourvel</parametername>
</parameternamelist>
<parameterdescription>
<para>output: observer 4-velocity (norm -1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>screen1</parametername>
</parameternamelist>
<parameterdescription>
<para>output: first vector in the screen plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>screen2</parametername>
</parameternamelist>
<parameterdescription>
<para>output: second vector in the screen plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>screen3</parametername>
</parameternamelist>
<parameterdescription>
<para>output: vector normal to the screen </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="455" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1aa2eed2cdff07431271fa056f84ed7afd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::observerTetrad</definition>
        <argsstring>(double const pos[4], double fourvel[4], double screen1[4], double screen2[4], double screen3[4]) const</argsstring>
        <name>observerTetrad</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1ac9a334295a48a70a7c873c9c64d0f37d">observerTetrad</reimplementedby>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>fourvel</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>screen1</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>screen2</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>screen3</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Computes the orthonormal local tetrad of the observer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fourvel</parametername>
</parameternamelist>
<parameterdescription>
<para>observer 4-velocity (norm -1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">screen1</parametername>
</parameternamelist>
<parameterdescription>
<para>first vector in the screen plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">screen2</parametername>
</parameternamelist>
<parameterdescription>
<para>second vector in the screen plane </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">screen3</parametername>
</parameternamelist>
<parameterdescription>
<para>vector normal to the screen </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="469" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1ad49c73bfe5b1996c634d73e8714dce95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::GramSchmidt</definition>
        <argsstring>(double const pos[4], double u0[4], double u1[4], double u2[4], double u3[4]) const</argsstring>
        <name>GramSchmidt</name>
        <param>
          <type>double const</type>
          <declname>pos</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>u0</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>u1</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>u2</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>u3</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Apply Gram-Schmidt orthonormalization to a basis. </para>
        </briefdescription>
        <detaileddescription>
<para>On input, u0 to u3 must be four non-zero norm, independent 4-vectors. On output, they will form an orthonormal basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">u0</parametername>
</parameternamelist>
<parameterdescription>
<para>basis vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">u1</parametername>
</parameternamelist>
<parameterdescription>
<para>basis vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">u2</parametername>
</parameternamelist>
<parameterdescription>
<para>basis vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">u3</parametername>
</parameternamelist>
<parameterdescription>
<para>basis vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="485" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a763b7fd883fb049973df233d92264600" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double Gyoto::Metric::Generic::gmunu</definition>
        <argsstring>(double const x[4], int mu, int nu) const</argsstring>
        <name>gmunu</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_minkowski_1a18a6cc7959f5d35d0848a2785f273e1c">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1aeccd860908d6b8f05fba36bf542cc390">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_k_s_1ad2126b926c38ee9d10380de3785fb399">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_chern_simons_1a5a3d3405f7b99ccea8eb4d477a4388fb">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_hayward_1a36ca2ffee58cd7a3e48b5812a4f87361">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a4086d34cfc556a54a5f2cc5c45ae7dc6">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rezzolla_zhidenko_1a99ceaf31e70d177d333dc77a4f2b0262">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rot_star3__1_1a0cc2f00de0c63cf5d237d75c887f799b">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_schwarzschild_harmonic_1af90182cf66c8baa4f4ec66aebddc7934">gmunu</reimplementedby>
        <param>
          <type>double const</type>
          <declname>x</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>int</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation calls <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>:: gmunu(double g[4][4], const double * pos) const</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position at which to compute the coefficient; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>1st index of coefficient, 0<le/><mu/><le/>3; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd index of coefficient, 0<le/><nu/><le/>3; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> coefficient g<subscript><mu/>,<nu/></subscript> at point x </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="499" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a299bbfa89f2bbd5afc94f6eec68a7818" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::gmunu</definition>
        <argsstring>(double ARGOUT_ARRAY2[4][4], double const IN_ARRAY1[4]) const</argsstring>
        <name>gmunu</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_complex_1ae5222ee2f591545d5982b8e71f2e52c4">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_hayward_1ada32a695e229fb476a09c32087171547">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a6f26deffe86f65bf37153eae7fdf5ec1">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_k_s_1a8caf34c338a76b0063b8a5292cf640df">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_minkowski_1a96ceaf525b0e1ea8a723d218438d70f0">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_shift_1af299b4291cae77fc9b54da25705e0c77">gmunu</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_chern_simons_1ac42eb8ebbde278bba27b9bec4459a177">gmunu</reimplementedby>
        <param>
          <type>double</type>
          <declname>ARGOUT_ARRAY2</declname>
          <array>[4][4]</array>
        </param>
        <param>
          <type>double const</type>
          <declname>IN_ARRAY1</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation calls double gmunu(const double * x, int mu, int nu) const.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ARGOUT_ARRAY2</parametername>
</parameternamelist>
<parameterdescription>
<para>(g) 4x4 array to store the coeefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">IN_ARRAY1</parametername>
</parameternamelist>
<parameterdescription>
<para>(x) 4-position at which to compute the coefficients; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> coefficient g<subscript><mu/>,<nu/></subscript> at point x </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="511" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1acdd26facb907606d51ba1e1bb17c3474" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double Gyoto::Metric::Generic::gmunu_up</definition>
        <argsstring>(double const x[4], int mu, int nu) const</argsstring>
        <name>gmunu_up</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_chern_simons_1a365f4edcfd2f9a87a8624d6b143eac7d">gmunu_up</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_hayward_1a522465c8e3a6b9e6bd4d21a8dc68eb2a">gmunu_up</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1abc0a1a5e212728672ffba464704134ab">gmunu_up</reimplementedby>
        <param>
          <type>double const</type>
          <declname>x</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>int</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> contravariant coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation calls <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref>:: gmunu_up(double g[4][4], const double * pos) const</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>4-position at which to compute the coefficient; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>1st index of coefficient, 0<le/><mu/><le/>3; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd index of coefficient, 0<le/><nu/><le/>3; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> coefficient g<superscript><mu/>,<nu/></superscript> at point x </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="523" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a87740431cdee0939eaaca6445b222863" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::gmunu_up</definition>
        <argsstring>(double ARGOUT_ARRAY2[4][4], const double IN_ARRAY1[4]) const</argsstring>
        <name>gmunu_up</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_hayward_1a7cc3fe0aa9695182b6abfd56db74c2b3">gmunu_up</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a0b9caec2a0c4d3b9f3f510f5f477e24b">gmunu_up</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_k_s_1a89569a9452927caafaffc3ae62f35f01">gmunu_up</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1a895992a8c0a433475cfb629006d6de96">gmunu_up</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_shift_1a688bab90f07a9abcf8dc89f48a504bf2">gmunu_up</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_chern_simons_1ad3bc552ab1bc26c468cfb70db0fc41ab">gmunu_up</reimplementedby>
        <param>
          <type>double</type>
          <declname>ARGOUT_ARRAY2</declname>
          <array>[4][4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>IN_ARRAY1</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> contravariant coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation inverts the covariant coefficients matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="531" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1af399d0bc46c9f42d38fae679e3f02e10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::jacobian</definition>
        <argsstring>(double ARGOUT_ARRAY3[4][4][4], const double IN_ARRAY1[4]) const</argsstring>
        <name>jacobian</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_complex_1a9fff8be760b6b735e15256f6e94567ae">jacobian</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1a2ac21205ecebe01aa79fd106ea9c8a3e">jacobian</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_shift_1ae35d576be6edbde6800c368a44be67f4">jacobian</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_k_s_1a6ca50bf0eeb9c07ce4fde05f0823ca84">jacobian</reimplementedby>
        <param>
          <type>double</type>
          <declname>ARGOUT_ARRAY3</declname>
          <array>[4][4][4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>IN_ARRAY1</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Derivatives of the metric covariant coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation evaluates them numerically. The gmunu matrix is assumed to be symmetrical but no other assumptions are made at the moment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="541" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1ac52fb670eabffbeee285d21cc7ac2116" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::gmunu_up_and_jacobian</definition>
        <argsstring>(double ARGOUT_ARRAY2[4][4], double ARGOUT_ARRAY3[4][4][4], const double IN_ARRAY1[4]) const</argsstring>
        <name>gmunu_up_and_jacobian</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_k_s_1af90128992cec313b61fd8e0ded65deff">gmunu_up_and_jacobian</reimplementedby>
        <param>
          <type>double</type>
          <declname>ARGOUT_ARRAY2</declname>
          <array>[4][4]</array>
        </param>
        <param>
          <type>double</type>
          <declname>ARGOUT_ARRAY3</declname>
          <array>[4][4][4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>IN_ARRAY1</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para><ref refid="class_gyoto_1_1_metric_1_1_generic_1acdd26facb907606d51ba1e1bb17c3474" kindref="member">gmunu_up()</ref> and <ref refid="class_gyoto_1_1_metric_1_1_generic_1af399d0bc46c9f42d38fae679e3f02e10" kindref="member">jacobian()</ref> in one go </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="547" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a6749f8cf44dfd15cf81cf2a3295fa3d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::computeNBeta</definition>
        <argsstring>(const double coord[4], double &amp;NN, double beta[3]) const</argsstring>
        <name>computeNBeta</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1aad82cb55f24d37892fac0120f31da50b">computeNBeta</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1a2a9d44edb0c23a76872e875e97995010">computeNBeta</reimplementedby>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>NN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Computes lapse scalar and shift vector at coord. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="553" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a596d2b3773e278f95ea362ec43ed9667" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double Gyoto::Metric::Generic::christoffel</definition>
        <argsstring>(const double coord[4], const int alpha, const int mu, const int nu) const</argsstring>
        <name>christoffel</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_chern_simons_1a807841063bd13d39a13f70f632c5008a">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_minkowski_1a13567edab6e3d18d078ce9cf7038dfc6">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1a5e1cc9cbc9ac8152f2d5ecc7bf09abbd">christoffel</reimplementedby>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Chistoffel symbol. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of Christoffel symbol <Gamma/><superscript><alpha/></superscript><subscript><mu/><nu/></subscript> at point (x<subscript>1</subscript>, x<subscript>2</subscript>, x<subscript>3</subscript>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="562" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1aa011ca4f331ef9b56223ed52c8e5a665" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::christoffel</definition>
        <argsstring>(double dst[4][4][4], const double coord[4]) const</argsstring>
        <name>christoffel</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1a45efde00a13fabe4dd5d37fef0873242">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_hayward_1ac861de2db8008150f4f0ebf06d80302e">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a07a2acdef806dd959f34be13b979e653">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_minkowski_1a694461e266b287af1290da72a97e53db">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rezzolla_zhidenko_1aec01ecaa5b6ff0e774e1bd735f409d38">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_schwarzschild_harmonic_1ade44e95ee4e450b7ce6d008ea9b61be6">christoffel</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_chern_simons_1a05b5e96a2f60e170c9f553b693731b48">christoffel</reimplementedby>
        <param>
          <type>double</type>
          <declname>dst</declname>
          <array>[4][4][4]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Chistoffel symbol. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref> of Christoffel symbol <Gamma/><superscript><alpha/></superscript><subscript><mu/><nu/></subscript> at point (x<subscript>1</subscript>, x<subscript>2</subscript>, x<subscript>3</subscript>).</para>
<para><simplesect kind="return"><para>1 on error, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="574" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1aaff73c866dd220ab4c5dbac8743ffb48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::myrk4</definition>
        <argsstring>(Worldline *line, state_t const &amp;coord, double h, state_t &amp;res) const</argsstring>
        <name>myrk4</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1abc1ef0b81ecae48c75857a857859d51b">myrk4</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_worldline" kindref="compound">Worldline</ref> *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>state_t const &amp;</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h</declname>
        </param>
        <param>
          <type>state_t &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>RK4 integrator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="581" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a8123ba5985a21ea8f8e26c7645667fc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::myrk4</definition>
        <argsstring>(Worldline *line, const double coord[8], double h, double res[8]) const =delete</argsstring>
        <name>myrk4</name>
        <param>
          <type><ref refid="class_gyoto_1_1_worldline" kindref="compound">Worldline</ref> *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>double</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double</type>
          <declname>res</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Obsolete, update your code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="583" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1abe3fd89e28cbcd6a584f24275001c2fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::myrk4_adaptive</definition>
        <argsstring>(Gyoto::Worldline *line, state_t const &amp;coord, double lastnorm, double normref, state_t &amp;coordnew, double h0, double &amp;h1, double deltamax=GYOTO_DEFAULT_DELTA_MAX) const</argsstring>
        <name>myrk4_adaptive</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a094bddd0ffbc736cf39c10533efa23a8">myrk4_adaptive</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rot_star3__1_1a864c8be72765a4235e864f6a8369a8ae">myrk4_adaptive</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_worldline" kindref="compound">Gyoto::Worldline</ref> *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>state_t const &amp;</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lastnorm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>normref</declname>
        </param>
        <param>
          <type>state_t &amp;</type>
          <declname>coordnew</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h0</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>deltamax</declname>
          <defval><ref refid="_gyoto_defs_8h_1a61e9f37f6e15229a442c03e3928c2ace" kindref="member">GYOTO_DEFAULT_DELTA_MAX</ref></defval>
        </param>
        <briefdescription>
<para>RK4 integrator with adaptive step. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="588" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1aca8ee9239d0502c6e311589b01c9c74f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::myrk4_adaptive</definition>
        <argsstring>(Gyoto::Worldline *line, const double coord[8], double lastnorm, double normref, double coordnew[8], double h0, double &amp;h1, double deltamax=GYOTO_DEFAULT_DELTA_MAX) const =delete</argsstring>
        <name>myrk4_adaptive</name>
        <param>
          <type><ref refid="class_gyoto_1_1_worldline" kindref="compound">Gyoto::Worldline</ref> *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>double</type>
          <declname>lastnorm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>normref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>coordnew</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>double</type>
          <declname>h0</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>deltamax</declname>
          <defval><ref refid="_gyoto_defs_8h_1a61e9f37f6e15229a442c03e3928c2ace" kindref="member">GYOTO_DEFAULT_DELTA_MAX</ref></defval>
        </param>
        <briefdescription>
<para>Obsolete, update your code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="593" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a9b17fec10be1b3c3862079ba0871a18a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::diff</definition>
        <argsstring>(state_t const &amp;x, state_t &amp;dxdt, double mass) const</argsstring>
        <name>diff</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1aabd3b34960ee07865a2afb2addf862c0">diff</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_rot_star3__1_1a002cce8a5a1eb83d617ee9bc637b30c8">diff</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_minkowski_1a66613ee25f8f2734fcdc3802431f35aa">diff</reimplementedby>
        <param>
          <type>state_t const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>state_t &amp;</type>
          <declname>dxdt</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>F function such as dx/dt=F(x,cst) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="614" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a09fda57a1008370aea06c93df40ff911" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::diff</definition>
        <argsstring>(state_t const &amp;x, state_t &amp;dxdt) const =delete</argsstring>
        <name>diff</name>
        <param>
          <type>state_t const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>state_t &amp;</type>
          <declname>dxdt</declname>
        </param>
        <briefdescription>
<para>Obsolete, update your code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="616" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a6949e18630b1d61dd800c8531f44587a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::diff</definition>
        <argsstring>(const double y[8], double res[8]) const =delete</argsstring>
        <name>diff</name>
        <param>
          <type>const double</type>
          <declname>y</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>double</type>
          <declname>res</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="617" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a9093f4cdb46360edabcbec4a1bd108fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Metric::Generic::diff31</definition>
        <argsstring>(state_t const &amp;x, state_t &amp;dxdt, double mass) const</argsstring>
        <name>diff31</name>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_kerr_b_l_1a41a2a6b37183dfb1042aa5612b5c91ea">diff31</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_numerical_metric_lorene_1ac25e55887eb7cf8fef2303812b7eef7d">diff31</reimplementedby>
        <param>
          <type>state_t const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>state_t &amp;</type>
          <declname>dxdt</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>F function such as dx/dt=F(x,cst) for 3+1 case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="622" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a6b818df2f1494dd35d4d4f230a721712" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Metric::Generic::setParticleProperties</definition>
        <argsstring>(Gyoto::Worldline *line, double const coord[8]) const</argsstring>
        <name>setParticleProperties</name>
        <param>
          <type><ref refid="class_gyoto_1_1_worldline" kindref="compound">Gyoto::Worldline</ref> *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>coord</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Set Metric-specific constants of motion. Used e.g. in <ref refid="class_gyoto_1_1_metric_1_1_kerr_b_l" kindref="compound">KerrBL</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="627" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a9ec09c51fd18dde7c13ef3b03fac1fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::SmartPointee::incRefCount</definition>
        <argsstring>()</argsstring>
        <name>incRefCount</name>
        <briefdescription>
<para>Increment the reference counter. Warning: Don&apos;t mess with the counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="96" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_smart_pointee_1a22a67609fb4690ee8ec0e95e4060e387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gyoto::SmartPointee::decRefCount</definition>
        <argsstring>()</argsstring>
        <name>decRefCount</name>
        <briefdescription>
<para>Decrement the reference counter and return current value. Warning: Don&apos;t mess with the counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="97" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a06ea95dc396053466cdd63d419d1688c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Gyoto::Object::isThreadSafe</definition>
        <argsstring>() const</argsstring>
        <name>isThreadSafe</name>
        <briefdescription>
<para>Whether this class is thread-safe. </para>
        </briefdescription>
        <detaileddescription>
<para>Return True if this object is thread-safe, i.e. if an instance and its clone can be used in parallel threads (in the context of Scenery::raytrace()). Known objects which are not thread-safe include Lorene metrics and everything from the <ref refid="namespace_gyoto_1_1_python" kindref="compound">Python</ref> plug-in.</para>
<para>The default implementation considers that the class itself is thread safe and recurses into the declared properties to check whether they are safe too. Classes that abide to the Object/Property paradigm and are themselves thread-safe have nothing special to do.</para>
<para>Objects that clone children in their copy constructor that are not declared as properties must take these children into account.</para>
<para>Classes that are never thread-safe must declare it. It acn be easily done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="197" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a424ef3538c714adfafad7eda249e0d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const  *</type>
        <definition>Property const* Gyoto::Object::property</definition>
        <argsstring>(std::string const pname) const</argsstring>
        <name>property</name>
        <param>
          <type>std::string const</type>
          <declname>pname</declname>
        </param>
        <briefdescription>
<para>Find property by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Look into the <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> list for a <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> whose <emphasis>name</emphasis> (or <emphasis>name_false</emphasis>, for a boolean <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref>) is <emphasis>pname</emphasis>. Return a const pointer to the first such property found, or NULL if none is found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="267" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::fillProperty</definition>
        <argsstring>(Gyoto::FactoryMessenger *fmp, Property const &amp;p) const</argsstring>
        <name>fillProperty</name>
        <reimplementedby refid="class_gyoto_1_1_scenery_1a9bc2f2025deb97a71f21f2be5c0f5022">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_directional_disk_1a42a558bc44010a73986909dd9a2fdd41">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_disk3_d_1a160d18feeb44b24f396c1001abec7bd6">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_dynamical_disk_1abbc14f98531888e96547665a8a6a20ca">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_equatorial_hot_spot_1a5acba2e137e389070bb5f7c71ea31ed5">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_neutron_star_model_atmosphere_1a65604453c31dac828adeaeb7c35ca23d">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_pattern_disk_1acc548bda88d62932275e8d0fcd630ca9">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_polish_doughnut_1acbe2c229f702905204ea0d822b94e17c">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_screen_1a50f80add154ec088fc9509ba22ef0032">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_metric_1_1_shift_1a234a2d08bb7918e1bc62e4a710a4df77">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_star_1a152074fdddb29950936d3193d3aea55d">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_spectrometer_1_1_uniform_1af5ccaceb5c188a7a0ea11791885919bc">fillProperty</reimplementedby>
        <reimplementedby refid="class_gyoto_1_1_astrobj_1_1_xillver_reflection_1a9e8bc6375f3c981042b74d99ee7adf91">fillProperty</reimplementedby>
        <param>
          <type><ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">Gyoto::FactoryMessenger</ref> *</type>
          <declname>fmp</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Output a single <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> to XML. </para>
        </briefdescription>
        <detaileddescription>
<para>The base implementation decides what to do based on the <emphasis>p.type</emphasis>. The format matches how <ref refid="class_gyoto_1_1_object_1aa0a8b119e7aa95b21be081f8c97e1626" kindref="member">setParameters()</ref> an <ref refid="class_gyoto_1_1_object_1a45969ac469cf6979037229c2741b226b" kindref="member">setParameter()</ref> would interpret the XML descition.</para>
<para>Overriding this method should be avoided, but makes sense in some cases (for instance <ref refid="class_gyoto_1_1_screen_1a50f80add154ec088fc9509ba22ef0032" kindref="member">Screen::fillProperty()</ref> selects a different unit for <emphasis>Distance</emphasis> based on its magnitude, so that stellar sizes are expressed in solar radii while smaller sizes can be expressed in meters and larger sizes in parsecs).</para>
<para>Overriding implementation should fall-back on calling the implementation in the direct parent class: <programlisting><codeline><highlight class="normal">class<sp/>A:<sp/>public<sp/>Object<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>B:<sp/>public<sp/>A<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>using<sp/>B::setParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/>virtual<sp/>void<sp/>fillProperty(Gyoto::FactoryMessenger<sp/>*fmp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property<sp/>const<sp/>&amp;p)<sp/>const<sp/>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">void<sp/>B::fillProperty(Gyoto::FactoryMessenger<sp/>*fmp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Property<sp/>const<sp/>&amp;p)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(name==&quot;Duff&quot;)<sp/>fmp-&gt;doSomething();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>A::fillProperty(fmp,<sp/>p);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="298" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a741ba678188d7d167ff2e3bb13dd924f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gyoto::Object::describeProperty</definition>
        <argsstring>(Gyoto::Property const &amp;p) const</argsstring>
        <name>describeProperty</name>
        <param>
          <type><ref refid="class_gyoto_1_1_property" kindref="compound">Gyoto::Property</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Format desrciption for a property. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a string containing the name(s) and type of the property, as well as whether it supports unit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="437" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a13843618d84c49d47bd37ddfa31160c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Object::help</definition>
        <argsstring>() const</argsstring>
        <name>help</name>
        <briefdescription>
<para>Print (to stdout) some help on this class. </para>
        </briefdescription>
        <detaileddescription>
<para>Describe all properties that this instance supports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="444" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1a9f46de678c67e9050cf3a8b9677e1d73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Gyoto::Object::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <reimplementedby refid="class_gyoto_1_1_spectrometer_1_1_uniform_1af6c1082ac163e833fff9e934b417b194">kind</reimplementedby>
        <briefdescription>
<para>Get kind_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="456" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_hook_1_1_teller_1a55dca3f3b9707bd18ae4a0dd98befd70" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Hook::Teller::hook</definition>
        <argsstring>(Listener *listener)</argsstring>
        <name>hook</name>
        <param>
          <type>Listener *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Start listening. </para>
        </briefdescription>
        <detaileddescription>
<para>Use from a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Hook::Listener</ref> object method: <programlisting><codeline><highlight class="normal">teller-&gt;hook(this)</highlight></codeline>
</programlisting> where &quot;this&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref> and &quot;teller&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref>.</para>
<para>Use <ref refid="class_gyoto_1_1_hook_1_1_teller_1a8bcbb785f92fefe4e76afe76eb175f8a" kindref="member">unhook()</ref> later to stop listening to a given <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the new listener </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="114" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_hook_1_1_teller_1a8bcbb785f92fefe4e76afe76eb175f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Hook::Teller::unhook</definition>
        <argsstring>(Listener *listener)</argsstring>
        <name>unhook</name>
        <param>
          <type>Listener *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Stop listening. </para>
        </briefdescription>
        <detaileddescription>
<para>Use from a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Hook::Listener</ref> object method: <programlisting><codeline><highlight class="normal">teller-&gt;unhook(this)</highlight></codeline>
</programlisting></para>
<para>where &quot;this&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref>, &quot;teller&quot; is a <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref>, and &quot;this&quot; has called teller-&gt;hook(this) previously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the listener </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="129" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_base_1af62c327a27345056f6012b771fa970b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Gyoto::Python::Base::hasPythonProperty</definition>
        <argsstring>(std::string const &amp;key) const</argsstring>
        <name>hasPythonProperty</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="305" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_base_1a888b32520799d6f002536e153060b6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Python::Base::setPythonProperty</definition>
        <argsstring>(std::string const &amp;key, Value val)</argsstring>
        <name>setPythonProperty</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="306" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_base_1abea99a3924aca45cd00c543fab7bd155" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gyoto_1_1_value" kindref="compound">Value</ref></type>
        <definition>virtual Value Gyoto::Python::Base::getPythonProperty</definition>
        <argsstring>(std::string const &amp;key) const</argsstring>
        <name>getPythonProperty</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="307" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_python_1_1_base_1a02a869483c7dd153661b7867c892f505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int Gyoto::Python::Base::pythonPropertyType</definition>
        <argsstring>(std::string const &amp;key) const</argsstring>
        <name>pythonPropertyType</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="308" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_generic_1a546e231862e8bb473845cfa18b086378" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::delta_min_</definition>
        <argsstring></argsstring>
        <name>delta_min_</name>
        <briefdescription>
<para>Minimum integration step for the adaptive integrator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="179" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoMetric.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_generic_1a53722a985ed8e0b4f7947cd88c032a13" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::delta_max_</definition>
        <argsstring></argsstring>
        <name>delta_max_</name>
        <briefdescription>
<para>Maximum integration step for the adaptive integrator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="180" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoMetric.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_generic_1a87c5eb06a56f68905ebc7ff17ed2a24c" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Gyoto::Metric::Generic::delta_max_over_r_</definition>
        <argsstring></argsstring>
        <name>delta_max_over_r_</name>
        <briefdescription>
<para>Numerical tuning parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Ensure that delta (the numerical integration step) is never larger than a fraction of the distance between the current location and the center of the coordinate system.</para>
<para>For investigations close to the event horizon, 0.5 is usually fine. If high accuracy is needed long after deflection (weak lensing), then this must be smaller. A good test is to look at a MinDistance map for a FixedStar: it must be smooth. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="194" column="10" bodyfile="/home/junichi/Gyoto/include/GyotoMetric.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_metric_1_1_generic_1a39b87eec8135757dc1b5b5f5729da5c4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gyoto::Metric::Generic::keplerian_</definition>
        <argsstring></argsstring>
        <name>keplerian_</name>
        <briefdescription>
<para>1 if circularVelocity should return the Newtonian Keplerian velocity, in r^-3/2 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="196" column="8" bodyfile="/home/junichi/Gyoto/include/GyotoMetric.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gyoto::Object::kind_</definition>
        <argsstring></argsstring>
        <name>kind_</name>
        <briefdescription>
<para>The &quot;kind&quot; that is output in the XML entity. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. for an <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref>, <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> will ensure <programlisting><codeline><highlight class="normal">&lt;Astrobj<sp/>kind=&quot;kind_&quot;<sp/>...&gt;...&lt;/Astrobj&gt;</highlight></codeline>
</programlisting> is written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="162" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoObject.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_object_1a01832761cd5f0a12319e3e24ce9a9fba" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; Gyoto::Object::plugins_</definition>
        <argsstring></argsstring>
        <name>plugins_</name>
        <briefdescription>
<para>The plug-ins that needs to be loaded to access this instance&apos;s class. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. for an <ref refid="namespace_gyoto_1_1_astrobj" kindref="compound">Astrobj</ref>, <ref refid="class_gyoto_1_1_object_1a0ffc3f84b4c2372d639eb848605fb1f3" kindref="member">fillElement()</ref> will ensure <programlisting><codeline><highlight class="normal">&lt;Astrobj<sp/>...<sp/>plugin=&quot;plugins_&quot;&gt;...&lt;/Astrobj&gt;</highlight></codeline>
</programlisting> is written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="172" column="15" bodyfile="/home/junichi/Gyoto/include/GyotoObject.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1a7f6558bf7597b6e6c8f1bd198895b077" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gyoto::Python::Base::module_</definition>
        <argsstring></argsstring>
        <name>module_</name>
        <briefdescription>
<para>Name of the <ref refid="namespace_gyoto_1_1_python" kindref="compound">Python</ref> module that holds the class. </para>
        </briefdescription>
        <detaileddescription>
<para>For instance, if the class is implemented in toto.py, the module name is &quot;toto&quot;. <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> name: Module. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="200" column="15" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1ae0c6e2e9b883adaa081e7a3b402d3bb2" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gyoto::Python::Base::inline_module_</definition>
        <argsstring></argsstring>
        <name>inline_module_</name>
        <briefdescription>
<para><ref refid="namespace_gyoto_1_1_python" kindref="compound">Python</ref> source code for module that holds the class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="206" column="15" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gyoto::Python::Base::class_</definition>
        <argsstring></argsstring>
        <name>class_</name>
        <briefdescription>
<para>Name of the <ref refid="namespace_gyoto_1_1_python" kindref="compound">Python</ref> class that we want to expose. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> name: Class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="213" column="15" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1aa033dfe530617afb7c7a27e6536bb88c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Gyoto::Python::Base::parameters_</definition>
        <argsstring></argsstring>
        <name>parameters_</name>
        <briefdescription>
<para>Parameters that this class needs. </para>
        </briefdescription>
        <detaileddescription>
<para>A list of parameters (doubles) can be passed in the <ref refid="class_gyoto_1_1_property" kindref="compound">Property</ref> Parameters. They will be sent to the <ref refid="namespace_gyoto_1_1_python" kindref="compound">Python</ref> instance using <bold>setitem</bold>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="222" column="15" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1af652cb4b7a2f473e9a86a4bf1e47e973" prot="protected" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Python::Base::pModule_</definition>
        <argsstring></argsstring>
        <name>pModule_</name>
        <briefdescription>
<para>Reference to the python module once it has been loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="227" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1aab2145b455aa9848024b643d06016b35" prot="protected" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Python::Base::pInstance_</definition>
        <argsstring></argsstring>
        <name>pInstance_</name>
        <briefdescription>
<para>Reference to the python instance once it has been instantiated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="232" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1a7e9289775df2ec09ca222ba290cf35c7" prot="protected" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Python::Base::pProperties_</definition>
        <argsstring></argsstring>
        <name>pProperties_</name>
        <briefdescription>
<para>Reference to the properties member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="237" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1a8f1ddee73aaa84dcdc1b1d2b0b3d8f7c" prot="protected" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Python::Base::pSet_</definition>
        <argsstring></argsstring>
        <name>pSet_</name>
        <briefdescription>
<para>Reference to the (optional) Set method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="242" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gyoto_1_1_python_1_1_base_1a758de1b2cdd3d9cd55506b5c599290f1" prot="protected" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* Gyoto::Python::Base::pGet_</definition>
        <argsstring></argsstring>
        <name>pGet_</name>
        <briefdescription>
<para>Reference to the (optional) Get method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="247" column="13" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_gyoto_1_1_metric_1_1_generic_1a1789582ce7d0d3c204d6d5cfa59b3e7a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gyoto::Metric::Generic::coordKind</definition>
        <argsstring>(int coordkind)</argsstring>
        <name>coordKind</name>
        <param>
          <type>int</type>
          <declname>coordkind</declname>
        </param>
        <briefdescription>
<para>Set coordkind_. </para>
        </briefdescription>
        <detaileddescription>
<para>coordkind(int coordkind) is protected because, for most Metrics, it should not be changed in runtime. Set coordinate kind </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoMetric.h" line="205" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Object::kind</definition>
        <argsstring>(const std::string)</argsstring>
        <name>kind</name>
        <param>
          <type>const std::string</type>
        </param>
        <briefdescription>
<para>Set kind_. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" kindref="member">kind(const std::string)</ref> is protected because, for most Objects, it should not be changed in runtime. Set kind_ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoObject.h" line="453" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_gyoto_1_1_hook_1_1_teller_1af9a1daa629900f00538096987e398a13" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Gyoto::Hook::Teller::tellListeners</definition>
        <argsstring>()</argsstring>
        <name>tellListeners</name>
        <briefdescription>
<para>Call tell() on each hooked <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Whenever a <ref refid="class_gyoto_1_1_hook_1_1_teller" kindref="compound">Teller</ref> mutates, it should warn any <ref refid="class_gyoto_1_1_hook_1_1_listener" kindref="compound">Listener</ref> hooked to it using <ref refid="class_gyoto_1_1_hook_1_1_teller_1af9a1daa629900f00538096987e398a13" kindref="member">tellListeners()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoHooks.h" line="138" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" prot="public" static="no">
        <type><ref refid="class_gyoto_1_1_smart_pointer" kindref="compound">Gyoto::SmartPointer</ref>&lt; <ref refid="class_gyoto_1_1_smart_pointee" kindref="compound">Gyoto::SmartPointee</ref> &gt;</type>
        <definition>typedef Gyoto::SmartPointer&lt;Gyoto::SmartPointee&gt; Gyoto::SmartPointee::Subcontractor_t(Gyoto::FactoryMessenger *, std::vector&lt; std::string &gt; const &amp;)</definition>
        <argsstring>(Gyoto::FactoryMessenger *, std::vector&lt; std::string &gt; const &amp;)</argsstring>
        <name>Subcontractor_t</name>
        <briefdescription>
<para>A subcontractor builds an object upon order from the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Various classes need to provide a subcontractor to be able to instantiate themselves upon order from the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref>. A subcontractor is a function (often a static member function) which accepts a pointer to a <ref refid="class_gyoto_1_1_factory_messenger" kindref="compound">FactoryMessenger</ref> as unique parameter, communicates with the <ref refid="class_gyoto_1_1_factory" kindref="compound">Factory</ref> using this messenger to read an XML description of the object to build, and returns this objet. <ref refid="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" kindref="member">SmartPointee::Subcontractor_t</ref>* is just generic enough a typedef to cast to and from other subcontractor types: <ref refid="namespace_gyoto_1_1_astrobj_1aa53c7ada58c8c8f3799c3485b7d8f3bb" kindref="member">Astrobj::Subcontractor_t</ref>, <ref refid="namespace_gyoto_1_1_metric_1ad6b33a642cc94ad67855184d2adb95df" kindref="member">Metric::Subcontractor_t</ref>, <ref refid="namespace_gyoto_1_1_spectrum_1a163055eef14aee22dd8fa5188812d889" kindref="member">Spectrum::Subcontractor_t</ref>. A subcontractor needs to be registered using the relevant <ref refid="namespace_gyoto_1_1_astrobj_1abb6caf3023a51cb77b5f6793ac03b188" kindref="member">Register()</ref> function: <ref refid="namespace_gyoto_1_1_astrobj_1abb6caf3023a51cb77b5f6793ac03b188" kindref="member">Astrobj::Register()</ref>, <ref refid="namespace_gyoto_1_1_metric_1a602cba49b001e7470f3d439d1ab3e8f7" kindref="member">Metric::Register()</ref>, <ref refid="namespace_gyoto_1_1_spectrum_1a517874749d838d7121880e7d9d14c626" kindref="member">Spectrum::Register()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/junichi/Gyoto/include/GyotoSmartPointer.h" line="114" column="5" bodyfile="/home/junichi/Gyoto/include/GyotoSmartPointer.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> coded in <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Loader for <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> <ref refid="namespace_gyoto_1_1_metric" kindref="compound">Metric</ref> classes. It interfaces with a <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> class which must implement at least the gmunu and christoffel methods.</para>
<para>Other methods are optional: getRmb, getRms, getSpecificAngularMomentum, getPotential.</para>
<para>Use &lt;Cartesian&gt; or &lt;/Spherical&gt; to select the coordinate system kind.</para>
<para>Sample XML file: <programlisting filename="example-python.xml"><codeline><highlight class="normal">&lt;?</highlight><highlight class="keyword">xml</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">version</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">encoding</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">standalone</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;</highlight><highlight class="keywordtype">Scenery</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">The</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">goal</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">of</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">example</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">to</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">exhibit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">a</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">Metric</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">a</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">Spectrum</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">coded</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">in</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">Python.</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">It</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">functionaly</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">equivalent</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">to</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">example-fixed-star-minkowski-cartesian.xml</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">in</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">the</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">main</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">Gyoto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">example</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">An</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">optically</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">thin</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">blob</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">centered</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">on</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">the</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">origin</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">of</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">the</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">system</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">in</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">flat</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">space-time.</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">Computation</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">uses</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">the</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">Cartesian</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Metric</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">kind</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Python&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Mass</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">unit</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;sunmass&quot;</highlight><highlight class="normal">&gt;<sp/>4</highlight><highlight class="keyword">e6</highlight><highlight class="normal"><sp/>&lt;/</highlight><highlight class="keywordtype">Mass</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Cartesian</highlight><highlight class="normal">/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Module</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">gyoto_sample_metrics</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">Module</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Class</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">Minkowski</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">Class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/</highlight><highlight class="keywordtype">Metric</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Screen</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Distance</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">unit</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;kpc&quot;</highlight><highlight class="normal">&gt;<sp/>8<sp/>&lt;/</highlight><highlight class="keywordtype">Distance</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Time</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">unit</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;yr&quot;</highlight><highlight class="normal">&gt;<sp/>30</highlight><highlight class="keyword">e3</highlight><highlight class="normal"><sp/>&lt;/</highlight><highlight class="keywordtype">Time</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">FieldOfView</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">unit</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;microas&quot;</highlight><highlight class="normal">&gt;<sp/>150<sp/>&lt;/</highlight><highlight class="keywordtype">FieldOfView</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">In</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">UTF-8</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">locales</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;microas&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">may</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">be</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">written</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;µas&quot;</highlight><highlight class="normal">.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Inclination</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">unit</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;degree&quot;</highlight><highlight class="normal">&gt;<sp/>90<sp/>&lt;/</highlight><highlight class="keywordtype">Inclination</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">In</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">UTF-8</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">locales</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;degree&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">may</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">be</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">written</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;°&quot;</highlight><highlight class="normal">.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">PALN</highlight><highlight class="normal">&gt;<sp/>0<sp/>&lt;/</highlight><highlight class="keywordtype">PALN</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Argument</highlight><highlight class="normal">&gt;<sp/>0<sp/>&lt;/</highlight><highlight class="keywordtype">Argument</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Resolution</highlight><highlight class="normal">&gt;<sp/>32<sp/>&lt;/</highlight><highlight class="keywordtype">Resolution</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/</highlight><highlight class="keywordtype">Screen</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Astrobj</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">kind</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FixedStar&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Radius</highlight><highlight class="normal">&gt;<sp/>12<sp/>&lt;/</highlight><highlight class="keywordtype">Radius</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Position</highlight><highlight class="normal">&gt;<sp/>0<sp/>0<sp/>0<sp/>&lt;/</highlight><highlight class="keywordtype">Position</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">UseGenericImpact</highlight><highlight class="normal">/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Spectrum</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">kind</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;Python&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Module</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">gyoto_sample_spectra</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">Module</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Class</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">PowerLaw</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">Class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Constant</highlight><highlight class="normal">&gt;0.001&lt;/</highlight><highlight class="keywordtype">Constant</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Exponent</highlight><highlight class="normal">&gt;0.&lt;/</highlight><highlight class="keywordtype">Exponent</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/</highlight><highlight class="keywordtype">Spectrum</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Opacity</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">kind</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;Python&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Module</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">gyoto_sample_spectra</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">Module</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Class</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">PowerLaw</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">Class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Constant</highlight><highlight class="normal">&gt;0.001&lt;/</highlight><highlight class="keywordtype">Constant</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Exponent</highlight><highlight class="normal">&gt;0.&lt;/</highlight><highlight class="keywordtype">Exponent</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/</highlight><highlight class="keywordtype">Opacity</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">OpticallyThin</highlight><highlight class="normal">/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/</highlight><highlight class="keywordtype">Astrobj</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Delta</highlight><highlight class="normal">&gt;<sp/>1</highlight><highlight class="keyword">e0</highlight><highlight class="normal"><sp/>&lt;/</highlight><highlight class="keywordtype">Delta</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">MinimumTime</highlight><highlight class="normal">&gt;<sp/>0.<sp/>&lt;/</highlight><highlight class="keywordtype">MinimumTime</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">Quantities</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">Intensity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/</highlight><highlight class="keywordtype">Quantities</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">One</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">can</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">also</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">specify</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">a</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">unit</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">Gyoto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">was</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">compiled</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>--</highlight><highlight class="keyword">with-udunits</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">Intensity</highlight><highlight class="normal">[</highlight><highlight class="keyword">mJy</highlight><highlight class="normal">/</highlight><highlight class="keyword">pix²</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">Intensity</highlight><highlight class="normal">[</highlight><highlight class="keyword">mJy</highlight><highlight class="normal">/</highlight><highlight class="keyword">µas²</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">Intensity</highlight><highlight class="normal">[</highlight><highlight class="keyword">J.m-2.s-1.sr-1.Hz-1</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">Intensity</highlight><highlight class="normal">[</highlight><highlight class="keyword">erg.cm-2.s-1.sr-1.Hz-1</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">Intensity</highlight><highlight class="normal">[</highlight><highlight class="keyword">mJy.sr-1</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">Intensity</highlight><highlight class="normal">[</highlight><highlight class="keyword">Jy.sr-1</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">Scenery</highlight><highlight class="normal">&gt;</highlight></codeline>
</programlisting> Sample <ref refid="class_gyoto_1_1_metric_1_1_python" kindref="compound">Python</ref> module: <programlisting filename="gyoto_sample_metrics.py"><codeline><highlight class="stringliteral">&apos;&apos;&apos;Sample<sp/>metrics<sp/>for<sp/>using<sp/>with<sp/>Gyoto<sp/>Python<sp/>plug-in</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>Those<sp/>classes<sp/>demonstrate<sp/>how<sp/>to<sp/>use<sp/>Python<sp/>classes<sp/>as<sp/>Gyoto</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>Metric<sp/>implementations<sp/>using<sp/>Gyoto&apos;s<sp/>&quot;python&quot;<sp/>plug-in.<sp/>Note<sp/>that</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>this<sp/>plug-in<sp/>can<sp/>be<sp/>renamed<sp/>to<sp/>whatever<sp/>matches<sp/>the<sp/>particular</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>version<sp/>of<sp/>Python<sp/>it<sp/>has<sp/>been<sp/>built<sp/>against<sp/>(e.g.<sp/>python3.4).</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>The<sp/>goal<sp/>is<sp/>to<sp/>be<sp/>able<sp/>to<sp/>instantiate<sp/>these<sp/>from<sp/>XML,<sp/>from</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>Yorick...<sp/>and<sp/>even<sp/>from<sp/>Python<sp/>using<sp/>the<sp/>gyoto<sp/>extension...</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>Synopsis:</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>import<sp/>gyoto.core</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>gyoto.core.requirePlugin(&quot;python&quot;)<sp/>#<sp/>or<sp/>python2.7<sp/>or<sp/>python3.4...</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>gg=gyoto.core.Metric(&quot;Python&quot;)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>gg.set(&quot;Module&quot;,<sp/>&quot;gyoto_sample_metric&quot;)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>gg.set(&quot;Class&quot;,<sp/>&quot;Minkowski&quot;)</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>Classes<sp/>that<sp/>aim<sp/>at<sp/>implementing<sp/>the<sp/>Gyoto::Metric::Generic</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>interface<sp/>do<sp/>so<sp/>by<sp/>providing<sp/>the<sp/>following<sp/>methods:</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>gmunu(self,<sp/>dst,<sp/>pos):<sp/>mandatory;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>christoffel(self,<sp/>dst,<sp/>pos):<sp/>mandatory;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>getRms(self):<sp/>optional</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>getRmb(self):<sp/>optional</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>getSpecificAngularMomentum(self,<sp/>rr):<sp/>optional</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>getPotential(self,<sp/>pos,<sp/>l_cst):<sp/>optional</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>__setattr__(self,<sp/>key,<sp/>value):<sp/>optional,<sp/>useful<sp/>to<sp/>react</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>when<sp/>the<sp/>C++<sp/>Metric<sp/>object<sp/>sets<sp/>attributes:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this:<sp/>if<sp/>the<sp/>Python<sp/>extension<sp/>&quot;gyoto.core&quot;<sp/>can<sp/>be<sp/>imported,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>set<sp/>to<sp/>a<sp/>gyoto.core.Metric<sp/>instance</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointing<sp/>to<sp/>the<sp/>C++-side<sp/>instance.<sp/>If<sp/>the<sp/>&quot;gyoto.core&quot;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extension<sp/>cannot<sp/>be<sp/>loaded,<sp/>this<sp/>will<sp/>be<sp/>set<sp/>to<sp/>None.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spherical:<sp/>when<sp/>the<sp/>spherical(bool<sp/>t)<sp/>method<sp/>is<sp/>called<sp/>in</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>C++<sp/>layer,<sp/>it<sp/>sets<sp/>the<sp/>spherical<sp/>attribute<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Python<sp/>side.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass:<sp/>when<sp/>the<sp/>mass(double<sp/>m)<sp/>method<sp/>is<sp/>called<sp/>in<sp/>the<sp/>C++</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side,<sp/>it<sp/>sets<sp/>the<sp/>spherical<sp/>attribute<sp/>in<sp/>the<sp/>Python</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>__setitem__(self,<sp/>key,<sp/>value):<sp/>optional,<sp/>mandatory<sp/>to<sp/>support<sp/>the</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>&quot;Parameters&quot;<sp/>Property<sp/>to<sp/>set<sp/>arbitrary<sp/>parameters<sp/>for<sp/>this</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>metric.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/>set(self,<sp/>key,<sp/>val)<sp/>and<sp/>get(self,<sp/>key):<sp/>optional,<sp/>both<sp/>need<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>implemented<sp/>in<sp/>order<sp/>to<sp/>support<sp/>additional<sp/>&quot;Properties&quot;<sp/>with</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>arbitrary<sp/>names.<sp/>In<sp/>addition,<sp/>member<sp/>self.properties<sp/>must<sp/>be<sp/>set</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>to<sp/>a<sp/>dictionary<sp/>listing<sp/>key:datatype<sp/>pairs,<sp/>where<sp/>both<sp/>key<sp/>and</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>datatype<sp/>are<sp/>strings.<sp/>As<sp/>of<sp/>writing,<sp/>only<sp/>&quot;double&quot;<sp/>is<sp/>supported</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>as<sp/>a<sp/>datatype.</highlight></codeline>
<codeline><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>gyoto.core</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Minkowski:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Flat<sp/>space<sp/>metric</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Implemented<sp/>for<sp/>both<sp/>Cartesian<sp/>and<sp/>spherical<sp/>coordinates.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__setattr__(self,<sp/>key,<sp/>value):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>attributes.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Optional.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C++<sp/>will<sp/>set<sp/>several<sp/>attributes.<sp/>By<sp/>overloading<sp/>__setattr__,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>can<sp/>react<sp/>when<sp/>that<sp/>occurs,<sp/>in<sp/>particular<sp/>to<sp/>make<sp/>sure<sp/>`this&apos;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>knows<sp/>the<sp/>coordinate<sp/>kind<sp/>as<sp/>in<sp/>this<sp/>example.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attributes<sp/>set<sp/>by<sp/>the<sp/>C++<sp/>layer:</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this:<sp/>if<sp/>the<sp/>Python<sp/>extension<sp/>&quot;gyoto.core&quot;<sp/>can<sp/>be<sp/>imported,<sp/>it</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>be<sp/>set<sp/>to<sp/>a<sp/>gyoto.core.Metric<sp/>instance<sp/>pointing<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C++-side<sp/>instance.<sp/>If<sp/>the<sp/>&quot;gyoto.core&quot;<sp/>extension<sp/>cannot<sp/>be</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loaded,<sp/>this<sp/>will<sp/>be<sp/>set<sp/>to<sp/>None.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spherical:<sp/>when<sp/>the<sp/>spherical(bool<sp/>t)<sp/>method<sp/>is<sp/>called<sp/>in</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>C++<sp/>layer,<sp/>it<sp/>sets<sp/>the<sp/>spherical<sp/>attribute<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Python<sp/>side.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass:<sp/>when<sp/>the<sp/>mass(double<sp/>m)<sp/>method<sp/>is<sp/>called<sp/>in<sp/>the<sp/>C++</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side,<sp/>it<sp/>sets<sp/>the<sp/>spherical<sp/>attribute<sp/>in<sp/>the<sp/>Python</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>example<sp/>initializes<sp/>coordKind<sp/>in<sp/>the<sp/>C++<sp/>side<sp/>if<sp/>it<sp/>is</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>already<sp/>set,<sp/>since<sp/>this<sp/>Minkowski<sp/>class<sp/>can<sp/>work<sp/>in</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>either.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>First,<sp/>actually<sp/>store<sp/>the<sp/>attribute.<sp/>This<sp/>is<sp/>what<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>happen<sp/>if<sp/>we<sp/>did<sp/>not<sp/>overload<sp/>__setattr__.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__dict__[key]=value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Then,<sp/>if<sp/>key<sp/>is<sp/>&quot;this&quot;,<sp/>ensure<sp/>this<sp/>knows<sp/>a<sp/>valid<sp/>coordKind.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;this&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cK=value.coordKind()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>cK<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>gyoto.core.GYOTO_COORDKIND_UNSPECIFIED:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.set(</highlight><highlight class="stringliteral">&quot;Spherical&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>could<sp/>do<sp/>without<sp/>this,<sp/>since<sp/>this<sp/>will<sp/>tell<sp/>us<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.spherical<sp/>=<sp/>(cK<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>gyoto.core.GYOTO_COORDKIND_SPHERICAL)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">gmunu(self,<sp/>g,<sp/>x):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;<sp/>Gyoto::Metric::Generic::gmunu(double<sp/>dst[4][4],<sp/>const<sp/>double<sp/>pos[4])</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mandatory.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C++<sp/>will<sp/>send<sp/>two<sp/>NumPy<sp/>arrays.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>nu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[mu][nu]=g[nu][mu]=0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[0][0]=-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.spherical:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[mu][mu]=1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=x[1]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta=x[2]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=r*math.sin(theta)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[1][1]=1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[2][2]=r*r</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[3][3]=tmp*tmp</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">christoffel(self,<sp/>dst,<sp/>x):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Gyoto::Metric::Generic::christoffel(double<sp/>dst[4][4][4],<sp/>const<sp/>double<sp/>pos[4])</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mandatory.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C++<sp/>will<sp/>send<sp/>two<sp/>NumPy<sp/>arrays.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>alpha<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>nu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[alpha][mu][nu]=0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.spherical:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=x[1]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta=x[2]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sth=math.sin(theta)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cth=math.cos(theta)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][2][2]=-r</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][3][3]=-r*sth*sth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][1][2]=dst[2][2][1]=<sp/>1./r</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][3][3]=-sth*cth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[3][1][3]=dst[3][3][1]=<sp/>dst[2][1][2]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[3][2][3]=dst[3][3][2]=<sp/>math.tan(math.pi*0.5<sp/>-<sp/>x[2])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KerrBL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;A<sp/>Python<sp/>implementation<sp/>of<sp/>Gyoto::Metric::KerrBL</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Spin<sp/>and<sp/>HorizonSecurity<sp/>may<sp/>be<sp/>set<sp/>either<sp/>using<sp/>the<sp/>Parameters</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Property,<sp/>as<sp/>in:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Parameters&gt;<sp/>O.5<sp/>0.01<sp/>&lt;/Parameters&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>or<sp/>using<sp/>two<sp/>distinct<sp/>ad<sp/>hoc<sp/>&quot;properties&quot;:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Spin&gt;<sp/>0.5<sp/>&lt;/Spin&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;HorizonSecurity&gt;<sp/>0.01<sp/>&lt;/HorizonSecurity&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>various<sp/>methods<sp/>are<sp/>essentially<sp/>cut-and-paste<sp/>from<sp/>the<sp/>C++<sp/>class.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Only<sp/>gmunu<sp/>and<sp/>christoffel<sp/>absolutely<sp/>need<sp/>to<sp/>be<sp/>implemented,<sp/>but</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>various<sp/>Astrobj<sp/>require<sp/>more.<sp/>See<sp/>below.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>is<sp/>for<sp/>educational<sp/>and<sp/>testing<sp/>purposes.<sp/>For<sp/>all<sp/>practical<sp/>uses,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>C++<sp/>implementation<sp/>is<sp/>much<sp/>faster.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>is<sp/>needed<sp/>to<sp/>support<sp/>setting<sp/>Spin<sp/>and<sp/>HorizonSecurity<sp/>by<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>set<sp/>and<sp/>get<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>properties={</highlight><highlight class="stringliteral">&quot;Spin&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;HorizonSecurity&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spin=0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>drhor=gyoto.core.GYOTO_KERR_HORIZON_SECURITY</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rsink=2.+gyoto.core.GYOTO_KERR_HORIZON_SECURITY</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__setitem__(self,<sp/>key,<sp/>value):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>parameters</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Optional,<sp/>one<sp/>way<sp/>to<sp/>handle<sp/>parameters</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>how<sp/>Gyoto<sp/>sends<sp/>the<sp/>&lt;Parameters/&gt;<sp/>XML<sp/>entity:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metric[key]=value</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key=0:<sp/>set<sp/>spin<sp/>(0.)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key=1:<sp/>set<sp/>drhor,<sp/>thickness<sp/>of<sp/>sink<sp/>layer<sp/>around<sp/>horizon<sp/>(0.01)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key==0):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.spin<sp/>=<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(key==1):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.drhor<sp/>=<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>IndexError</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">set(self,<sp/>key,<sp/>value):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>parameters<sp/>by<sp/>name</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Optional,<sp/>one<sp/>way<sp/>to<sp/>handle<sp/>parameters</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>how<sp/>Gyoto<sp/>sends<sp/>custom<sp/><sp/>XML<sp/>entities,<sp/>e.g.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;MyEntity&gt;value&lt;/MyEntity&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metric.set(&quot;MyEntity&quot;,<sp/>value)</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Here:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key=&quot;Spin&quot;:<sp/>set<sp/>spin<sp/>(0.)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key=&quot;HorizonSecurity&quot;:<sp/>set<sp/>drhor,<sp/>thickness<sp/>of<sp/>sink<sp/>layer</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>around<sp/>horizon<sp/>(0.01)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key==</highlight><highlight class="stringliteral">&quot;Spin&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.spin<sp/>=<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(key==</highlight><highlight class="stringliteral">&quot;HorizonSecurity&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.drhor<sp/>=<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>IndexError</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get(self,<sp/>key):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Get<sp/>parameters<sp/>by<sp/>name</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Optional,<sp/>mandatory<sp/>if<sp/>&quot;properties&quot;<sp/>and<sp/>&quot;set&quot;<sp/>are<sp/>defined.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key==</highlight><highlight class="stringliteral">&quot;Spin&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.spin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(key==</highlight><highlight class="stringliteral">&quot;HorizonSecurity&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.drhor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>IndexError</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__setattr__(self,<sp/>key,<sp/>value):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>attributes.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Optional.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C++<sp/>will<sp/>set<sp/>several<sp/>attributes.<sp/>By<sp/>overloading<sp/>__setattr__,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>can<sp/>react<sp/>when<sp/>that<sp/>occurs,<sp/>in<sp/>particular<sp/>to<sp/>make<sp/>sure</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`this&apos;<sp/>knows<sp/>the<sp/>coordinate<sp/>kind<sp/>as<sp/>in<sp/>this<sp/>example.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>addition,<sp/>update<sp/>self.rsink<sp/>each<sp/>time<sp/>self.spin<sp/>or</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.drhor<sp/>change.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>First,<sp/>actually<sp/>store<sp/>the<sp/>attribute.<sp/>This<sp/>is<sp/>what<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>happen<sp/>if<sp/>we<sp/>did<sp/>not<sp/>overload<sp/>__setattr__.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__dict__[key]=value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Then,<sp/>if<sp/>key<sp/>is<sp/>&quot;this&quot;,<sp/>ensure<sp/>`this&apos;<sp/>knows<sp/>a<sp/>valid<sp/>coordKind.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;this&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.this.set(</highlight><highlight class="stringliteral">&quot;Spherical&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;spin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;drhor&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.spin<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.rsink=drhor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.rsink=1.+math.sqrt(1.-self.spin**2)+self.drhor</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">gmunu(self,<sp/>g,<sp/>x):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;<sp/>Gyoto::Metric::Generic::gmunu(double<sp/>g[4],<sp/>const<sp/>double<sp/>pos[4])</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mandatory.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C++<sp/>will<sp/>send<sp/>two<sp/>NumPy<sp/>arrays.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>the<sp/>user<sp/>will<sp/>not<sp/>be<sp/>able<sp/>to<sp/>call<sp/>this<sp/>method<sp/>directly<sp/>but</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>through<sp/>self.this.gmunu<sp/>which<sp/>has<sp/>a<sp/>different<sp/>calling<sp/>sequence:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g=self.this.gmunu(x)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_=self.spin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2_=spin_**2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=x[1]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sth2=math.sin(x[2])**2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cth2=math.cos(x[2])**2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2=r*r</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma=r2+a2_*cth2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta=r2-2.*r+a2_</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>nu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[mu][nu]=g[nu][mu]=0</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[0][0]<sp/>=<sp/>-1.+2.*r/sigma;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[1][1]<sp/>=<sp/>sigma/delta;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[2][2]<sp/>=<sp/>sigma;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[3][3]<sp/>=<sp/>(r2+a2_+2.*r*a2_*sth2/sigma)*sth2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[0][3]<sp/>=<sp/>g[3][0]<sp/>=<sp/>-2*spin_*r*sth2/sigma;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">christoffel(self,<sp/>dst,<sp/>x):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Gyoto::Metric::Generic::christoffel(double<sp/>dst[4][4][4],<sp/>const<sp/>double<sp/>pos[4])</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mandatory.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C++<sp/>will<sp/>send<sp/>two<sp/>NumPy<sp/>arrays.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Like<sp/>gmunu,<sp/>the<sp/>call<sp/>will<sp/>actually<sp/>be:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst=metric.gmunu(x)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>`metric&apos;<sp/>is<sp/>self.this.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>alpha<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>nu<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>4):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[alpha][mu][nu]=0.</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_=self.spin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2_=spin_**2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=x[1]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sth=math.sin(x[2])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cth=math.cos(x[2])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sth2<sp/>=<sp/>sth*sth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cth2<sp/>=<sp/>cth*cth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sth4=sth2*sth2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2th<sp/>=<sp/>2.*sth*cth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2th=cth2-sth2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s4th<sp/>=<sp/>2.*s2th*c2th</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2th2=<sp/>s2th*s2th</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctgth=cth/sth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2=r*r</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r4=r2*r2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r6=r4*r2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sigma=r2+a2_*cth2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sigma2=Sigma*Sigma</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Delta=r2-2.*r+a2_</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deltam1=1./Delta</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sigmam1=1./Sigma</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sigmam2=Sigmam1*Sigmam1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sigmam3=Sigmam2*Sigmam1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2cthsth=a2_*cth*sth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rSigmam1=r*Sigmam1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deltam1Sigmam2=Deltam1*Sigmam2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2plusa2<sp/>=<sp/>r2+a2_</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][1][1]=(1.-r)*Deltam1+rSigmam1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][2][1]=dst[1][1][2]=-a2cthsth*Sigmam1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][2][2]=-Delta*rSigmam1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][3][3]=-Delta*sth2*(r+(a2_*(-2.*r2+Sigma)*sth2)/Sigma2)/Sigma;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][3][0]=dst[1][0][3]=spin_*Delta*(-2*r2+Sigma)*sth2*Sigmam3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1][0][0]=-Delta*(-2.*r2+Sigma)*Sigmam3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][1][1]=a2cthsth*Deltam1*Sigmam1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][2][1]=dst[2][1][2]=rSigmam1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][2][2]=-a2cthsth*Sigmam1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][3][3]=-sth*cth*Sigmam3<sp/>*<sp/>(Delta*Sigma2<sp/>+<sp/>2.*r*r2plusa2*r2plusa2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][0][3]=dst[2][3][0]=spin_*r*r2plusa2*s2th*Sigmam3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2][0][0]=-2.*a2cthsth*r*Sigmam3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[3][3][1]=dst[3][1][3]=Deltam1*Sigmam2<sp/>*<sp/>(r*Sigma*(Sigma-2.*r)<sp/>+<sp/>a2_*(Sigma-2.*r2)*sth2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[3][3][2]=dst[3][2][3]=Sigmam2*ctgth<sp/>*<sp/>(-(Sigma+Delta)*a2_*sth2<sp/>+<sp/>r2plusa2*r2plusa2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[3][0][1]=dst[3][1][0]=spin_*(2.*r2-Sigma)*Deltam1Sigmam2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[3][0][2]=dst[3][2][0]=-2.*spin_*r*ctgth*Sigmam2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[0][3][1]=dst[0][1][3]=-spin_*sth2*Deltam1Sigmam2<sp/>*<sp/>(2.*r2*r2plusa2<sp/>+<sp/>Sigma*(r2-a2_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[0][3][2]=dst[0][2][3]=Sigmam2*spin_*a2_*r*sth2*s2th;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[0][0][1]=dst[0][1][0]=(a2_+r2)*(2.*r2-Sigma)*Deltam1Sigmam2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[0][0][2]=dst[0][2][0]=-a2_*r*s2th*Sigmam2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getRms(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aa=self.spin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2_=aa*aa</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>1.<sp/>+<sp/>pow((1.<sp/>-<sp/>a2_),1./3.)*(pow((1.<sp/>+<sp/>aa),1./3.)<sp/>+<sp/>pow((1.<sp/>-<sp/>aa),1./3.))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>pow(3.*a2_<sp/>+<sp/>z1*z1,1./2.);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(3.<sp/>+<sp/>z2<sp/>-<sp/>pow((3.<sp/>-<sp/>z1)*(3.<sp/>+<sp/>z1<sp/>+<sp/>2.*z2),1./2.));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getRmb(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_=self.spin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2.-spin_+2.*math.sqrt(1.-spin_);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getSpecificAngularMomentum(self,<sp/>rr):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aa=self.spin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqrtr=math.sqrt(rr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rr*rr-2.*aa*sqrtr+aa*aa)/(rr**1.5-2.*sqrtr+aa);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getPotential(self,<sp/>pos,<sp/>l_cst):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>this<sp/>is<sp/>W<sp/>=<sp/>-ln(|u_t|)<sp/>for<sp/>a<sp/>circular<sp/>equatorial<sp/>4-velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>try<sp/>to<sp/>call<sp/>directly<sp/>gmunu<sp/>from<sp/>`self&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Call<sp/>it<sp/>through<sp/>`this&apos;,<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>C++<sp/>instance<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Gyoto::Metric::Python</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Note<sp/>that<sp/>the<sp/>calling<sp/>sequence<sp/>is<sp/>not<sp/>gmunu(self,<sp/>gg,<sp/>pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gg=self.this.gmunu(pos)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtt<sp/>=<sp/>gg[0,0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtp<sp/>=<sp/>gg[0,3];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpp<sp/>=<sp/>gg[3,3];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Omega<sp/>=<sp/>-(gtp<sp/>+<sp/>l_cst<sp/>*<sp/>gtt)/(gpp<sp/>+<sp/>l_cst<sp/>*<sp/>gtp)<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W<sp/>=<sp/>(0.5<sp/>*<sp/>math.log(abs(gtt<sp/>+<sp/>2.<sp/>*<sp/>Omega<sp/>*<sp/>gtp<sp/>+<sp/>Omega*Omega<sp/>*<sp/>gpp))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>math.log(abs(gtt<sp/>+<sp/>Omega<sp/>*<sp/>gtp)))<sp/>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>W<sp/>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">isStopCondition(self,<sp/>coord):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coord[1]<sp/>&lt;<sp/>self.rsink</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">circularVelocity(self,<sp/>coor,<sp/>vel,<sp/>d):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Velocity<sp/>of<sp/>a<sp/>particle<sp/>in<sp/>circular<sp/>motion<sp/>at<sp/>point</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note:<sp/>this<sp/>is<sp/>called<sp/>only<sp/>if<sp/>this-&gt;keplerian_<sp/>is<sp/>False.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sinth<sp/>=<sp/>math.sin(coor[2]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coord<sp/>=<sp/>[coor[0],<sp/>coor[1]*sinth,<sp/>math.pi*0.5,<sp/>coor[3]];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel[1]<sp/>=<sp/>vel[2]<sp/>=<sp/>0.;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#vel[3]<sp/>=<sp/>1./((d*pow(coord[1],<sp/>1.5)<sp/>+<sp/>spin_)*sinth);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel[3]<sp/>=<sp/>1./((d*pow(coord[1],<sp/>1.5)<sp/>+<sp/>self.spin));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel[0]<sp/>=<sp/>self.this.SysPrimeToTdot(coor,<sp/>vel[1:]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel[3]<sp/>*=<sp/>vel[0];</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7">
        <label>Gyoto::Python::Base</label>
        <link refid="class_gyoto_1_1_python_1_1_base"/>
      </node>
      <node id="2">
        <label>Gyoto::Python::Object&lt; Gyoto::Metric::Generic &gt;</label>
        <link refid="class_gyoto_1_1_python_1_1_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Gyoto::Object</label>
        <link refid="class_gyoto_1_1_object"/>
      </node>
      <node id="4">
        <label>Gyoto::SmartPointee</label>
        <link refid="class_gyoto_1_1_smart_pointee"/>
      </node>
      <node id="6">
        <label>Gyoto::Hook::Teller</label>
        <link refid="class_gyoto_1_1_hook_1_1_teller"/>
      </node>
      <node id="1">
        <label>Gyoto::Metric::Python</label>
        <link refid="class_gyoto_1_1_metric_1_1_python"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Gyoto::Metric::Generic</label>
        <link refid="class_gyoto_1_1_metric_1_1_generic"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>Gyoto::Property</label>
        <link refid="class_gyoto_1_1_property"/>
        <childnode refid="7" relation="usage">
          <edgelabel>getter_unit</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>getter</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>setter</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>setter_unit</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>Gyoto::Python::Base</label>
        <link refid="class_gyoto_1_1_python_1_1_base"/>
      </node>
      <node id="2">
        <label>Gyoto::Python::Object&lt; Gyoto::Metric::Generic &gt;</label>
        <link refid="class_gyoto_1_1_python_1_1_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>Gyoto::SmartPointer&lt; Gyoto::Astrobj::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="17">
        <label>ListenerItem</label>
        <link refid="class_listener_item"/>
      </node>
      <node id="13">
        <label>Gyoto::SmartPointer&lt; Gyoto::Screen &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="9">
        <label>Gyoto::SmartPointer&lt; Gyoto::Spectrometer::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="5">
        <label>Gyoto::Object</label>
        <link refid="class_gyoto_1_1_object"/>
        <childnode refid="6" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Gyoto::SmartPointer&lt; Gyoto::Metric::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="4">
        <label>Gyoto::SmartPointee</label>
        <link refid="class_gyoto_1_1_smart_pointee"/>
      </node>
      <node id="14">
        <label>Gyoto::Property::setter_t</label>
        <link refid="union_gyoto_1_1_property_1_1setter__t"/>
        <childnode refid="9" relation="usage">
          <edgelabel>set_spectrometer</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>set_metric</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>set_spectrum</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>set_astrobj</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>set_screen</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>Gyoto::Property::setter_unit_t</label>
        <link refid="union_gyoto_1_1_property_1_1setter__unit__t"/>
      </node>
      <node id="11">
        <label>Gyoto::SmartPointer&lt; Gyoto::Spectrum::Generic &gt;</label>
        <link refid="class_gyoto_1_1_smart_pointer"/>
      </node>
      <node id="16">
        <label>Gyoto::Hook::Teller</label>
        <link refid="class_gyoto_1_1_hook_1_1_teller"/>
        <childnode refid="17" relation="usage">
          <edgelabel>listeners_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Gyoto::Metric::Python</label>
        <link refid="class_gyoto_1_1_metric_1_1_python"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Gyoto::Metric::Generic</label>
        <link refid="class_gyoto_1_1_metric_1_1_generic"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>Gyoto::Property::getter_unit_t</label>
        <link refid="union_gyoto_1_1_property_1_1getter__unit__t"/>
      </node>
      <node id="8">
        <label>Gyoto::Property::getter_t</label>
        <link refid="union_gyoto_1_1_property_1_1getter__t"/>
        <childnode refid="9" relation="usage">
          <edgelabel>get_spectrometer</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>get_metric</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>get_spectrum</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>get_astrobj</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>get_screen</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" line="588" column="1" bodyfile="/home/junichi/Gyoto/plugins/python/include/GyotoPython.h" bodystart="590" bodyend="672"/>
    <listofallmembers>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a9d17cce6d1615f47e9e30ba1fe6e88ca" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>__defaultfeatures</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a65842e339bb17e7270c630ee6d3c6bb8" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>addFourVect</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1abfc27f1504c6c5342ad9ff4efe5566b2" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Base</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1ae3b870fd182c26b7923db3e0473c703b" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Base</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1ab0b9d853d673f621c960e1290db5e3c7" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>cartesianVelocity</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1aed1a335f58893cecb163f374bd9944f3" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>christoffel</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a596d2b3773e278f95ea362ec43ed9667" prot="public" virt="virtual" ambiguityscope="Object&lt; Gyoto::Metric::Generic &gt;::"><scope>Gyoto::Metric::Python</scope><name>christoffel</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1aa011ca4f331ef9b56223ed52c8e5a665" prot="public" virt="virtual" ambiguityscope="Object&lt; Gyoto::Metric::Generic &gt;::"><scope>Gyoto::Metric::Python</scope><name>christoffel</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a278525ef1d038566b143af16b5ae59fc" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>circularVelocity</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a69af6b343cb744e7e34022d395f93ab4" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>class_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1abecbc101a5656af8643901d67e7bffc9" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>clone</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a6749f8cf44dfd15cf81cf2a3295fa3d7" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>computeNBeta</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a1789582ce7d0d3c204d6d5cfa59b3e7a" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>coordKind</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1af77fb58e4ed3399aece00dbcbcdb821b" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>coordKind</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a691390867f76f4aaaef6848bb5366fc7" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>coordkind_</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a22a67609fb4690ee8ec0e95e4060e387" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>decRefCount</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a53722a985ed8e0b4f7947cd88c032a13" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>delta_max_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a87c5eb06a56f68905ebc7ff17ed2a24c" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>delta_max_over_r_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a546e231862e8bb473845cfa18b086378" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>delta_min_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a0747da4b348993a84c958d0a6e669c62" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>deltaMax</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a1d349921ec1e0549b47bbdd3c31e8bc2" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>deltaMax</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a17791da16af037e2acb7c6ace2cfd5a0" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>deltaMax</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1abe2328a722fb2dc37d55c6ae98bd659a" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>deltaMaxOverR</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a2c9ed9d165040f96e72136043a674b3c" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>deltaMaxOverR</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a809e6419cb528829c8afa30430b710ab" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>deltaMin</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a7b4a5908eb4ed3ed255947966f6faf50" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>deltaMin</name></member>
      <member refid="class_gyoto_1_1_object_1a741ba678188d7d167ff2e3bb13dd924f" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>describeProperty</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a9b17fec10be1b3c3862079ba0871a18a" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>diff</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a09fda57a1008370aea06c93df40ff911" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>diff</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a6949e18630b1d61dd800c8531f44587a" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>diff</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a9093f4cdb46360edabcbec4a1bd108fe" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>diff31</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a397ca9eae8d37bf02f401e16fdfa6724" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>dualOneForm</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1a7524ab9c2d51d32f7de7177df5b544a1" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>fillElement</name></member>
      <member refid="class_gyoto_1_1_object_1a11892ef308d6f40add51eaea653a394b" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>fillProperty</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a980eca855ee3606bfef4fcb080f241f5" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Generic</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1afd4ff54aea9d5c88a3b88b2d9b8a2c67" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Generic</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a5fbc128b5c83dc294ead5da577528f03" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Generic</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1aa91e924b2c7c3e58764f8aee6b174926" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1a042952734a5d4bd00b73a4c03cc23af4" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1abeaf3c1bd632fda3a48118d30105c871" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_object_1a99544282b6c383b8570a5bc51bed1ecf" prot="public" virt="virtual" ambiguityscope="Gyoto::Metric::Generic::"><scope>Gyoto::Metric::Python</scope><name>get</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a80c01908629bcddb1cbd6ddca98e54d2" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>getPotential</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1af4c7119b0a717a18531d5910bbd10b7d" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>getProperties</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1abea99a3924aca45cd00c543fab7bd155" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>getPythonProperty</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a795ec4f876df5d582df28a9923fd6411" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>getRefCount</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1abf1781d71384204e5fd98bf6e8e43298" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>getRmb</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a8e052561441fa18973a80d50bef31b8f" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>getRms</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a1beb709ce0880ad1c42c4876914c7c47" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>getSpecificAngularMomentum</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a442678531583930ab12a3497e01e6145" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>gmunu</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a763b7fd883fb049973df233d92264600" prot="public" virt="virtual" ambiguityscope="Object&lt; Gyoto::Metric::Generic &gt;::"><scope>Gyoto::Metric::Python</scope><name>gmunu</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a299bbfa89f2bbd5afc94f6eec68a7818" prot="public" virt="virtual" ambiguityscope="Object&lt; Gyoto::Metric::Generic &gt;::"><scope>Gyoto::Metric::Python</scope><name>gmunu</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1acdd26facb907606d51ba1e1bb17c3474" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>gmunu_up</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a87740431cdee0939eaaca6445b222863" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>gmunu_up</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1ac52fb670eabffbeee285d21cc7ac2116" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>gmunu_up_and_jacobian</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1ad49c73bfe5b1996c634d73e8714dce95" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>GramSchmidt</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1ab0e9b408fe0c57afa6337de288e7d37c" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Gyoto::SmartPointer&lt; Gyoto::Metric::Python &gt;</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1aa5926e77df4fada67a71d01913f8f80c" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>GYOTO_OBJECT_THREAD_SAFETY</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1af62c327a27345056f6012b771fa970b8" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>hasPythonProperty</name></member>
      <member refid="class_gyoto_1_1_object_1a13843618d84c49d47bd37ddfa31160c5" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>help</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1a55dca3f3b9707bd18ae4a0dd98befd70" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>hook</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a9ec09c51fd18dde7c13ef3b03fac1fad" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>incRefCount</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1ae0c6e2e9b883adaa081e7a3b402d3bb2" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>inline_module_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a5aa16fe612f6ed1e9f7a7172cbe07241" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>inlineModule</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a2faed173e725f3192666abb0ad1a054c" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>inlineModule</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1af7db3499d2f44b060254681bcde4c278" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>isStopCondition</name></member>
      <member refid="class_gyoto_1_1_object_1a06ea95dc396053466cdd63d419d1688c" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>isThreadSafe</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1af399d0bc46c9f42d38fae679e3f02e10" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>jacobian</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a3b60d77fac2903c94c3ae5fbd6566668" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>keplerian</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a5aad6a8c1cf296ef0ad276b23614d35d" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>keplerian</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a39b87eec8135757dc1b5b5f5729da5c4" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>keplerian_</name></member>
      <member refid="class_gyoto_1_1_object_1aae3b80667884c6620c4796a1b8ef74e5" prot="protected" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>kind</name></member>
      <member refid="class_gyoto_1_1_object_1a9f46de678c67e9050cf3a8b9677e1d73" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>kind</name></member>
      <member refid="class_gyoto_1_1_object_1ac48ad88e3ef229ba0d0fe68a94a7118f" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>kind_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a9708bdef837a896e529accc4e1720655" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>klass</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a41b59b3d5e8f36d0d7d0865ae2efceb1" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>klass</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1ae336573bbbf1b8a5b71d8fbac1408030" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>listeners_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a935d32b21af382aeabf85908d1b51517" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>mass</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1af61769eacdd15f6d6c411214b575c62b" prot="public" virt="virtual" ambiguityscope="Object&lt; Gyoto::Metric::Generic &gt;::"><scope>Gyoto::Metric::Python</scope><name>mass</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a9ae43ad3fcad9bb2ee21a5d8de104eda" prot="public" virt="non-virtual" ambiguityscope="Object&lt; Gyoto::Metric::Generic &gt;::"><scope>Gyoto::Metric::Python</scope><name>mass</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a3f71a0587fd43e8446cab025bfdd327c" prot="public" virt="non-virtual" ambiguityscope="Object&lt; Gyoto::Metric::Generic &gt;::"><scope>Gyoto::Metric::Python</scope><name>mass</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1ae0da95aa14ef7aa8df1af598d34d2efa" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>mass_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a1e19d7037aeee1bffb119b8f2c5e5f00" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>module</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a3718604728f0dce0a8927e45921a7ed8" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>module</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a7f6558bf7597b6e6c8f1bd198895b077" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>module_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a706491b96fc929a9b04632a8fe5bc974" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>multiplyFourVect</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1abf1c1e431cdd4f08f13de581cccb6770" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>mutex_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1aaff73c866dd220ab4c5dbac8743ffb48" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>myrk4</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a8123ba5985a21ea8f8e26c7645667fc2" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>myrk4</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1abe3fd89e28cbcd6a584f24275001c2fa" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>myrk4_adaptive</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1aca8ee9239d0502c6e311589b01c9c74f" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>myrk4_adaptive</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a4cf28a145ecb21cf674e967a0a937d7b" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>norm</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1aa8b34cc32bd8e324e7852f87d08cf6b2" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>normalizeFourVel</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a029c3c5e8851e218e2b77315cd6e9ab2" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>normalizeFourVel</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1adaf7d03d118b4625447d20746857cdc8" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>nullifyCoord</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1ab1c920d3c040b73dc0c12197b0a430e5" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>nullifyCoord</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1a9ebdd38ce6f787942688ab460c1b3aa9" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1a323886ea8a4ec42ca658794a89d0294b" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_object_1a5173d279a53bbc9850771e344d6b79b0" prot="public" virt="non-virtual" ambiguityscope="Gyoto::Metric::Generic::"><scope>Gyoto::Metric::Python</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_object_1a1fbd53bedaf8d18f67b12ec0660b8aa7" prot="public" virt="non-virtual" ambiguityscope="Gyoto::Metric::Generic::"><scope>Gyoto::Metric::Python</scope><name>Object</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a2a558c51175c19722fe733f7919b0a11" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>observerTetrad</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1aa2eed2cdff07431271fa056f84ed7afd" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>observerTetrad</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a97c57b0c9a8c22375d8668d1e1b189a8" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>parameters</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a0116ead0d5baed6dbe02f18e7e4a31df" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>parameters</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1aa033dfe530617afb7c7a27e6536bb88c" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>parameters_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a4a6ab253097db26c0329db8b97e778e2" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pChristoffel_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a905ed0c6a9c077afaed3bc5161c3a32e" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pCircularVelocity_</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a758de1b2cdd3d9cd55506b5c599290f1" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pGet_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a0dbf2773363eb46c2225e5156efb5798" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pGetPotential_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a20796d553e25f9bbefc0bb5559678eff" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pGetRmb_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a3de6396e84b76cdda6638fab8660c95a" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pGetRms_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1ab64d9da5d486a9d3c7ac41a80cd9be1b" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pGetSpecificAngularMomentum_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a5566b08ef5a6a5df3b25fe948080f726" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pGmunu_</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1aab2145b455aa9848024b643d06016b35" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pInstance_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a43469e16d95967540744c2be9bf8ef8c" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pIsStopCondition_</name></member>
      <member refid="class_gyoto_1_1_object_1a01832761cd5f0a12319e3e24ce9a9fba" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>plugins_</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1af652cb4b7a2f473e9a86a4bf1e47e973" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pModule_</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a7e9289775df2ec09ca222ba290cf35c7" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pProperties_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a7801b41c8686f337356de47a3a054f10" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>projectFourVect</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a20eda5413e201eb833b7437b547be6f6" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>properties</name></member>
      <member refid="class_gyoto_1_1_object_1a424ef3538c714adfafad7eda249e0d58" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>property</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a8f1ddee73aaa84dcdc1b1d2b0b3d8f7c" prot="protected" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>pSet_</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a1ec4f1ba5ab7c41389a8ed8ef9cacc54" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Python</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1af5a79286d43efb245d2cb4c3c7b2de5b" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Python</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a02a869483c7dd153661b7867c892f505" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>pythonPropertyType</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1aaaf212a70fb1880b70e4d357e843cc85" prot="private" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>refCount</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1ac5bfd30a216cb6654cd992c1a42d6075" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>ScalarProd</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1ad4aff23562b0ae6a36e05741eb631c82" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1ab3aa615a6b576b663f9ee524831280c8" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1ab601136e5837e6bd99c4bf3b0beee718" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_object_1abed03e16a8013699534b802e06751ef8" prot="public" virt="virtual" ambiguityscope="Gyoto::Metric::Generic::"><scope>Gyoto::Metric::Python</scope><name>set</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1ab4fd3efea9c85b8f8c1aaafa2597dfa4" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>setParameter</name></member>
      <member refid="class_gyoto_1_1_object_1a43fe041144add66155668ca88a99fd98" prot="public" virt="virtual" ambiguityscope="Gyoto::Metric::Generic::"><scope>Gyoto::Metric::Python</scope><name>setParameter</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1a84ea2cab6209f1ed0de3a73223c6a5e8" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>setParameters</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a6b818df2f1494dd35d4d4f230a721712" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>setParticleProperties</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a888b32520799d6f002536e153060b6fe" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>setPythonProperty</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a7d212bcd7d3ac4147e18683c47ca910d" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>SmartPointee</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1adc075b08ca5d3c0635bc97f843835f8a" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>SmartPointee</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1ad764d306db65b99b2b99847290735c89" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>spherical</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1afc3d0c76e925d53fda44cafae5607e69" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>spherical</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1afe17bea3c33e2187940cfdd5543c1d14" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Subcontractor_t</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a0077ac6a240b042dbe3487298eac4ef0" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>SysPrimeToTdot</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1adb1af4c097a95ac19070cb452e280abb" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Teller</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1add28f0a06265233ccacf5e9ac8537bf2" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>Teller</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1af9a1daa629900f00538096987e398a13" prot="protected" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>tellListeners</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1a8bcbb785f92fefe4e76afe76eb175f8a" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>unhook</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1abd6bfc4aef563b64318b5168f83a49fb" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>unitLength</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a74c7861961278d587a15b067c43069f0" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>unitLength</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a325f414c1c393c7142b42889e2be8257" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>zamoVelocity</name></member>
      <member refid="class_gyoto_1_1_python_1_1_base_1a1ef2825c473f7ad7c48fe8822eda8c16" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>~Base</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_generic_1a0531d5721cac74104d511994de69bb10" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>~Generic</name></member>
      <member refid="class_gyoto_1_1_python_1_1_object_1af0760f1ceb18207d2e3678295b23af2b" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>~Object</name></member>
      <member refid="class_gyoto_1_1_metric_1_1_python_1a807d5a6002579edb065625d268a4bf9f" prot="public" virt="non-virtual"><scope>Gyoto::Metric::Python</scope><name>~Python</name></member>
      <member refid="class_gyoto_1_1_smart_pointee_1a4301d456d1d36ed7912d073b742c74e1" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>~SmartPointee</name></member>
      <member refid="class_gyoto_1_1_hook_1_1_teller_1a7228f637ed7a007a0c6a810a89f3b188" prot="public" virt="virtual"><scope>Gyoto::Metric::Python</scope><name>~Teller</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
