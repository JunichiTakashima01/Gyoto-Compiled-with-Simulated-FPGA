/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

#ifdef METH_NOARGS
static PyObject*
SwigPyObject_disown2(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_disown(v);
}

static PyObject*
SwigPyObject_acquire2(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_acquire(v);
}
#endif

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown2, METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire2,METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr2,   METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Eigen__Matrix4d swig_types[0]
#define SWIGTYPE_p_Gyoto__Astrobj__Blob swig_types[1]
#define SWIGTYPE_p_Gyoto__Astrobj__Complex swig_types[2]
#define SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus swig_types[3]
#define SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk swig_types[4]
#define SWIGTYPE_p_Gyoto__Astrobj__Disk3D swig_types[5]
#define SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk swig_types[6]
#define SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D swig_types[7]
#define SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric swig_types[8]
#define SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot swig_types[9]
#define SWIGTYPE_p_Gyoto__Astrobj__FixedStar swig_types[10]
#define SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron swig_types[11]
#define SWIGTYPE_p_Gyoto__Astrobj__FreeStar swig_types[12]
#define SWIGTYPE_p_Gyoto__Astrobj__Generic swig_types[13]
#define SWIGTYPE_p_Gyoto__Astrobj__InflateStar swig_types[14]
#define SWIGTYPE_p_Gyoto__Astrobj__Jet swig_types[15]
#define SWIGTYPE_p_Gyoto__Astrobj__OscilTorus swig_types[16]
#define SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk swig_types[17]
#define SWIGTYPE_p_Gyoto__Astrobj__PatternDisk swig_types[18]
#define SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB swig_types[19]
#define SWIGTYPE_p_Gyoto__Astrobj__Plasmoid swig_types[20]
#define SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut swig_types[21]
#define SWIGTYPE_p_Gyoto__Astrobj__Properties swig_types[22]
#define SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion swig_types[23]
#define SWIGTYPE_p_Gyoto__Astrobj__Standard swig_types[24]
#define SWIGTYPE_p_Gyoto__Astrobj__Star swig_types[25]
#define SWIGTYPE_p_Gyoto__Astrobj__StarTrace swig_types[26]
#define SWIGTYPE_p_Gyoto__Astrobj__ThickDisk swig_types[27]
#define SWIGTYPE_p_Gyoto__Astrobj__ThinDisk swig_types[28]
#define SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity swig_types[29]
#define SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine swig_types[30]
#define SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL swig_types[31]
#define SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile swig_types[32]
#define SWIGTYPE_p_Gyoto__Astrobj__Torus swig_types[33]
#define SWIGTYPE_p_Gyoto__Astrobj__UniformSphere swig_types[34]
#define SWIGTYPE_p_Gyoto__Astrobj__XillverReflection swig_types[35]
#define SWIGTYPE_p_Gyoto__FactoryMessenger swig_types[36]
#define SWIGTYPE_p_Gyoto__FitsRW swig_types[37]
#define SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray swig_types[38]
#define SWIGTYPE_p_Gyoto__GridData2D swig_types[39]
#define SWIGTYPE_p_Gyoto__Hook__Listener swig_types[40]
#define SWIGTYPE_p_Gyoto__Hook__Teller swig_types[41]
#define SWIGTYPE_p_Gyoto__Metric__ChernSimons swig_types[42]
#define SWIGTYPE_p_Gyoto__Metric__Complex swig_types[43]
#define SWIGTYPE_p_Gyoto__Metric__Generic swig_types[44]
#define SWIGTYPE_p_Gyoto__Metric__Hayward swig_types[45]
#define SWIGTYPE_p_Gyoto__Metric__KerrBL swig_types[46]
#define SWIGTYPE_p_Gyoto__Metric__KerrKS swig_types[47]
#define SWIGTYPE_p_Gyoto__Metric__Minkowski swig_types[48]
#define SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko swig_types[49]
#define SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic swig_types[50]
#define SWIGTYPE_p_Gyoto__Metric__Shift swig_types[51]
#define SWIGTYPE_p_Gyoto__Object swig_types[52]
#define SWIGTYPE_p_Gyoto__Photon swig_types[53]
#define SWIGTYPE_p_Gyoto__Property swig_types[54]
#define SWIGTYPE_p_Gyoto__Scenery swig_types[55]
#define SWIGTYPE_p_Gyoto__Screen swig_types[56]
#define SWIGTYPE_p_Gyoto__SmartPointee swig_types[57]
#define SWIGTYPE_p_Gyoto__Spectrometer__Complex swig_types[58]
#define SWIGTYPE_p_Gyoto__Spectrometer__Generic swig_types[59]
#define SWIGTYPE_p_Gyoto__Spectrometer__Uniform swig_types[60]
#define SWIGTYPE_p_Gyoto__Spectrum__BlackBody swig_types[61]
#define SWIGTYPE_p_Gyoto__Spectrum__Generic swig_types[62]
#define SWIGTYPE_p_Gyoto__Spectrum__PowerLaw swig_types[63]
#define SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron swig_types[64]
#define SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung swig_types[65]
#define SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron swig_types[66]
#define SWIGTYPE_p_Gyoto__Units__Converter swig_types[67]
#define SWIGTYPE_p_Gyoto__Units__Unit swig_types[68]
#define SWIGTYPE_p_Gyoto__WIP swig_types[69]
#define SWIGTYPE_p_Gyoto__Worldline swig_types[70]
#define SWIGTYPE_p_Handler_t swig_types[71]
#define SWIGTYPE_p_Subcontractor_t swig_types[72]
#define SWIGTYPE_p_allocator_type swig_types[73]
#define SWIGTYPE_p_array_double swig_types[74]
#define SWIGTYPE_p_array_size_t swig_types[75]
#define SWIGTYPE_p_array_unsigned_long swig_types[76]
#define SWIGTYPE_p_char swig_types[77]
#define SWIGTYPE_p_difference_type swig_types[78]
#define SWIGTYPE_p_double swig_types[79]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t swig_types[80]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t swig_types[81]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t swig_types[82]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t swig_types[83]
#define SWIGTYPE_p_get_astrobj_t swig_types[84]
#define SWIGTYPE_p_get_bool_t swig_types[85]
#define SWIGTYPE_p_get_double_t swig_types[86]
#define SWIGTYPE_p_get_double_unit_t swig_types[87]
#define SWIGTYPE_p_get_fname_t swig_types[88]
#define SWIGTYPE_p_get_long_t swig_types[89]
#define SWIGTYPE_p_get_metric_t swig_types[90]
#define SWIGTYPE_p_get_screen_t swig_types[91]
#define SWIGTYPE_p_get_size_t_t swig_types[92]
#define SWIGTYPE_p_get_spectrometer_t swig_types[93]
#define SWIGTYPE_p_get_spectrum_t swig_types[94]
#define SWIGTYPE_p_get_string_t swig_types[95]
#define SWIGTYPE_p_get_unsigned_long_t swig_types[96]
#define SWIGTYPE_p_get_vector_double_t swig_types[97]
#define SWIGTYPE_p_get_vector_double_unit_t swig_types[98]
#define SWIGTYPE_p_get_vector_unsigned_long_t swig_types[99]
#define SWIGTYPE_p_myCplxIdxExcept swig_types[100]
#define SWIGTYPE_p_p_array_double swig_types[101]
#define SWIGTYPE_p_p_double swig_types[102]
#define SWIGTYPE_p_set_astrobj_t swig_types[103]
#define SWIGTYPE_p_set_bool_t swig_types[104]
#define SWIGTYPE_p_set_double_t swig_types[105]
#define SWIGTYPE_p_set_double_unit_t swig_types[106]
#define SWIGTYPE_p_set_fname_t swig_types[107]
#define SWIGTYPE_p_set_long_t swig_types[108]
#define SWIGTYPE_p_set_metric_t swig_types[109]
#define SWIGTYPE_p_set_screen_t swig_types[110]
#define SWIGTYPE_p_set_size_t_t swig_types[111]
#define SWIGTYPE_p_set_spectrometer_t swig_types[112]
#define SWIGTYPE_p_set_spectrum_t swig_types[113]
#define SWIGTYPE_p_set_string_t swig_types[114]
#define SWIGTYPE_p_set_unsigned_long_t swig_types[115]
#define SWIGTYPE_p_set_vector_double_t swig_types[116]
#define SWIGTYPE_p_set_vector_double_unit_t swig_types[117]
#define SWIGTYPE_p_set_vector_unsigned_long_t swig_types[118]
#define SWIGTYPE_p_size_t swig_types[119]
#define SWIGTYPE_p_size_type swig_types[120]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[121]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[122]
#define SWIGTYPE_p_unsigned_int swig_types[123]
#define SWIGTYPE_p_value_type swig_types[124]
static swig_type_info *swig_types[126];
static swig_module_info swig_module = {swig_types, 125, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _std.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__std

#else
#  define SWIG_init    init_std

#endif
#define SWIG_name    "_std"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}



#define GYOTO_NO_DEPRECATED
#include "gyoto_swig.h"
#include "gyoto_std_swig.h"

using namespace Gyoto;



typedef double array_double;


typedef unsigned long array_unsigned_long;


typedef size_t array_size_t;


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    

  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_FORTRANORDER);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }



SWIGINTERN Gyoto::Astrobj::UniformSphere *new_Gyoto_Astrobj_UniformSphere__SWIG_0(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::UniformSphere * res = dynamic_cast< Gyoto::Astrobj::UniformSphere * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "102" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""UniformSphere" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::UniformSphere *new_Gyoto_Astrobj_UniformSphere__SWIG_1(long address){
    Gyoto::Astrobj::UniformSphere * res = (Gyoto::Astrobj::UniformSphere *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }

  class myCplxIdxExcept {};


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}

SWIGINTERN Gyoto::SmartPointer< Gyoto::Astrobj::Generic > Gyoto_Astrobj_Complex___getitem__(Gyoto::Astrobj::Complex *self,size_t i){
    if (i >= (self)->getCardinal()) {
      throw myCplxIdxExcept();
    }
    Gyoto::SmartPointer<Gyoto::Astrobj::Generic> res = (self)->operator[](i);
    return res;
  }

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN void Gyoto_Astrobj_Complex___setitem__(Gyoto::Astrobj::Complex *self,int i,Gyoto::Astrobj::Generic *p){
    (self)->operator[](i)=p;
  }
SWIGINTERN Gyoto::Astrobj::Complex *new_Gyoto_Astrobj_Complex__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Complex * res = dynamic_cast< Gyoto::Astrobj::Complex * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "130" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Complex" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Complex *new_Gyoto_Astrobj_Complex__SWIG_3(long address){
    Gyoto::Astrobj::Complex * res = (Gyoto::Astrobj::Complex *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }

namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN Gyoto::Astrobj::Star *new_Gyoto_Astrobj_Star__SWIG_3(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Star * res = dynamic_cast< Gyoto::Astrobj::Star * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "133" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Star" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Star *new_Gyoto_Astrobj_Star__SWIG_4(long address){
    Gyoto::Astrobj::Star * res = (Gyoto::Astrobj::Star *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::StarTrace *new_Gyoto_Astrobj_StarTrace__SWIG_4(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::StarTrace * res = dynamic_cast< Gyoto::Astrobj::StarTrace * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "134" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""StarTrace" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::StarTrace *new_Gyoto_Astrobj_StarTrace__SWIG_5(long address){
    Gyoto::Astrobj::StarTrace * res = (Gyoto::Astrobj::StarTrace *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::FixedStar *new_Gyoto_Astrobj_FixedStar__SWIG_3(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::FixedStar * res = dynamic_cast< Gyoto::Astrobj::FixedStar * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "135" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""FixedStar" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::FixedStar *new_Gyoto_Astrobj_FixedStar__SWIG_4(long address){
    Gyoto::Astrobj::FixedStar * res = (Gyoto::Astrobj::FixedStar *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::FreeStar *new_Gyoto_Astrobj_FreeStar__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::FreeStar * res = dynamic_cast< Gyoto::Astrobj::FreeStar * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "136" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""FreeStar" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::FreeStar *new_Gyoto_Astrobj_FreeStar__SWIG_3(long address){
    Gyoto::Astrobj::FreeStar * res = (Gyoto::Astrobj::FreeStar *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::InflateStar *new_Gyoto_Astrobj_InflateStar__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::InflateStar * res = dynamic_cast< Gyoto::Astrobj::InflateStar * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "137" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""InflateStar" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::InflateStar *new_Gyoto_Astrobj_InflateStar__SWIG_3(long address){
    Gyoto::Astrobj::InflateStar * res = (Gyoto::Astrobj::InflateStar *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Torus *new_Gyoto_Astrobj_Torus__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Torus * res = dynamic_cast< Gyoto::Astrobj::Torus * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "138" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Torus" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Torus *new_Gyoto_Astrobj_Torus__SWIG_3(long address){
    Gyoto::Astrobj::Torus * res = (Gyoto::Astrobj::Torus *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::OscilTorus *new_Gyoto_Astrobj_OscilTorus__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::OscilTorus * res = dynamic_cast< Gyoto::Astrobj::OscilTorus * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "139" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""OscilTorus" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::OscilTorus *new_Gyoto_Astrobj_OscilTorus__SWIG_3(long address){
    Gyoto::Astrobj::OscilTorus * res = (Gyoto::Astrobj::OscilTorus *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN Gyoto::Astrobj::PageThorneDisk *new_Gyoto_Astrobj_PageThorneDisk__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::PageThorneDisk * res = dynamic_cast< Gyoto::Astrobj::PageThorneDisk * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "140" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""PageThorneDisk" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::PageThorneDisk *new_Gyoto_Astrobj_PageThorneDisk__SWIG_3(long address){
    Gyoto::Astrobj::PageThorneDisk * res = (Gyoto::Astrobj::PageThorneDisk *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskPL *new_Gyoto_Astrobj_ThinDiskPL__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::ThinDiskPL * res = dynamic_cast< Gyoto::Astrobj::ThinDiskPL * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "141" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""ThinDiskPL" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskPL *new_Gyoto_Astrobj_ThinDiskPL__SWIG_3(long address){
    Gyoto::Astrobj::ThinDiskPL * res = (Gyoto::Astrobj::ThinDiskPL *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::PolishDoughnut *new_Gyoto_Astrobj_PolishDoughnut__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::PolishDoughnut * res = dynamic_cast< Gyoto::Astrobj::PolishDoughnut * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "142" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""PolishDoughnut" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::PolishDoughnut *new_Gyoto_Astrobj_PolishDoughnut__SWIG_3(long address){
    Gyoto::Astrobj::PolishDoughnut * res = (Gyoto::Astrobj::PolishDoughnut *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskIronLine *new_Gyoto_Astrobj_ThinDiskIronLine__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::ThinDiskIronLine * res = dynamic_cast< Gyoto::Astrobj::ThinDiskIronLine * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "143" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""ThinDiskIronLine" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskIronLine *new_Gyoto_Astrobj_ThinDiskIronLine__SWIG_3(long address){
    Gyoto::Astrobj::ThinDiskIronLine * res = (Gyoto::Astrobj::ThinDiskIronLine *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::PatternDisk *new_Gyoto_Astrobj_PatternDisk__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::PatternDisk * res = dynamic_cast< Gyoto::Astrobj::PatternDisk * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "144" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""PatternDisk" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::PatternDisk *new_Gyoto_Astrobj_PatternDisk__SWIG_3(long address){
    Gyoto::Astrobj::PatternDisk * res = (Gyoto::Astrobj::PatternDisk *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::PatternDiskBB *new_Gyoto_Astrobj_PatternDiskBB__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::PatternDiskBB * res = dynamic_cast< Gyoto::Astrobj::PatternDiskBB * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "145" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""PatternDiskBB" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::PatternDiskBB *new_Gyoto_Astrobj_PatternDiskBB__SWIG_3(long address){
    Gyoto::Astrobj::PatternDiskBB * res = (Gyoto::Astrobj::PatternDiskBB *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DynamicalDisk *new_Gyoto_Astrobj_DynamicalDisk__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::DynamicalDisk * res = dynamic_cast< Gyoto::Astrobj::DynamicalDisk * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "146" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""DynamicalDisk" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DynamicalDisk *new_Gyoto_Astrobj_DynamicalDisk__SWIG_3(long address){
    Gyoto::Astrobj::DynamicalDisk * res = (Gyoto::Astrobj::DynamicalDisk *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DynamicalDiskBolometric *new_Gyoto_Astrobj_DynamicalDiskBolometric__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::DynamicalDiskBolometric * res = dynamic_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "147" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""DynamicalDiskBolometric" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DynamicalDiskBolometric *new_Gyoto_Astrobj_DynamicalDiskBolometric__SWIG_3(long address){
    Gyoto::Astrobj::DynamicalDiskBolometric * res = (Gyoto::Astrobj::DynamicalDiskBolometric *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Disk3D *new_Gyoto_Astrobj_Disk3D__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Disk3D * res = dynamic_cast< Gyoto::Astrobj::Disk3D * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "148" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Disk3D" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Disk3D *new_Gyoto_Astrobj_Disk3D__SWIG_3(long address){
    Gyoto::Astrobj::Disk3D * res = (Gyoto::Astrobj::Disk3D *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DynamicalDisk3D *new_Gyoto_Astrobj_DynamicalDisk3D__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::DynamicalDisk3D * res = dynamic_cast< Gyoto::Astrobj::DynamicalDisk3D * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "149" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""DynamicalDisk3D" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DynamicalDisk3D *new_Gyoto_Astrobj_DynamicalDisk3D__SWIG_3(long address){
    Gyoto::Astrobj::DynamicalDisk3D * res = (Gyoto::Astrobj::DynamicalDisk3D *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DirectionalDisk *new_Gyoto_Astrobj_DirectionalDisk__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::DirectionalDisk * res = dynamic_cast< Gyoto::Astrobj::DirectionalDisk * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "150" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""DirectionalDisk" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DirectionalDisk *new_Gyoto_Astrobj_DirectionalDisk__SWIG_3(long address){
    Gyoto::Astrobj::DirectionalDisk * res = (Gyoto::Astrobj::DirectionalDisk *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DeformedTorus *new_Gyoto_Astrobj_DeformedTorus__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::DeformedTorus * res = dynamic_cast< Gyoto::Astrobj::DeformedTorus * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "151" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""DeformedTorus" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::DeformedTorus *new_Gyoto_Astrobj_DeformedTorus__SWIG_3(long address){
    Gyoto::Astrobj::DeformedTorus * res = (Gyoto::Astrobj::DeformedTorus *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::EquatorialHotSpot *new_Gyoto_Astrobj_EquatorialHotSpot__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::EquatorialHotSpot * res = dynamic_cast< Gyoto::Astrobj::EquatorialHotSpot * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "152" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""EquatorialHotSpot" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::EquatorialHotSpot *new_Gyoto_Astrobj_EquatorialHotSpot__SWIG_3(long address){
    Gyoto::Astrobj::EquatorialHotSpot * res = (Gyoto::Astrobj::EquatorialHotSpot *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::XillverReflection *new_Gyoto_Astrobj_XillverReflection__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::XillverReflection * res = dynamic_cast< Gyoto::Astrobj::XillverReflection * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "153" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""XillverReflection" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::XillverReflection *new_Gyoto_Astrobj_XillverReflection__SWIG_3(long address){
    Gyoto::Astrobj::XillverReflection * res = (Gyoto::Astrobj::XillverReflection *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Jet *new_Gyoto_Astrobj_Jet__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Jet * res = dynamic_cast< Gyoto::Astrobj::Jet * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "154" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Jet" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Jet *new_Gyoto_Astrobj_Jet__SWIG_3(long address){
    Gyoto::Astrobj::Jet * res = (Gyoto::Astrobj::Jet *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Blob *new_Gyoto_Astrobj_Blob__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Blob * res = dynamic_cast< Gyoto::Astrobj::Blob * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "155" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Blob" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Blob *new_Gyoto_Astrobj_Blob__SWIG_3(long address){
    Gyoto::Astrobj::Blob * res = (Gyoto::Astrobj::Blob *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Plasmoid *new_Gyoto_Astrobj_Plasmoid__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Plasmoid * res = dynamic_cast< Gyoto::Astrobj::Plasmoid * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "156" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Plasmoid" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Plasmoid *new_Gyoto_Astrobj_Plasmoid__SWIG_3(long address){
    Gyoto::Astrobj::Plasmoid * res = (Gyoto::Astrobj::Plasmoid *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::FlaredDiskSynchrotron *new_Gyoto_Astrobj_FlaredDiskSynchrotron__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::FlaredDiskSynchrotron * res = dynamic_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "157" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""FlaredDiskSynchrotron" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::FlaredDiskSynchrotron *new_Gyoto_Astrobj_FlaredDiskSynchrotron__SWIG_3(long address){
    Gyoto::Astrobj::FlaredDiskSynchrotron * res = (Gyoto::Astrobj::FlaredDiskSynchrotron *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskGridIntensity *new_Gyoto_Astrobj_ThinDiskGridIntensity__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::ThinDiskGridIntensity * res = dynamic_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "158" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""ThinDiskGridIntensity" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskGridIntensity *new_Gyoto_Astrobj_ThinDiskGridIntensity__SWIG_3(long address){
    Gyoto::Astrobj::ThinDiskGridIntensity * res = (Gyoto::Astrobj::ThinDiskGridIntensity *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThickDisk *new_Gyoto_Astrobj_ThickDisk__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::ThickDisk * res = dynamic_cast< Gyoto::Astrobj::ThickDisk * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "159" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""ThickDisk" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThickDisk *new_Gyoto_Astrobj_ThickDisk__SWIG_3(long address){
    Gyoto::Astrobj::ThickDisk * res = (Gyoto::Astrobj::ThickDisk *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::SphericalAccretion *new_Gyoto_Astrobj_SphericalAccretion__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::SphericalAccretion * res = dynamic_cast< Gyoto::Astrobj::SphericalAccretion * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "160" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""SphericalAccretion" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::SphericalAccretion *new_Gyoto_Astrobj_SphericalAccretion__SWIG_3(long address){
    Gyoto::Astrobj::SphericalAccretion * res = (Gyoto::Astrobj::SphericalAccretion *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskProfile *new_Gyoto_Astrobj_ThinDiskProfile__SWIG_2(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::ThinDiskProfile * res = dynamic_cast< Gyoto::Astrobj::ThinDiskProfile * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "161" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""ThinDiskProfile" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDiskProfile *new_Gyoto_Astrobj_ThinDiskProfile__SWIG_3(long address){
    Gyoto::Astrobj::ThinDiskProfile * res = (Gyoto::Astrobj::ThinDiskProfile *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::SmartPointer< Gyoto::Metric::Generic > Gyoto_Metric_Complex___getitem__(Gyoto::Metric::Complex *self,size_t i){
    if (i >= (self)->getCardinal()) {
      throw myCplxIdxExcept();
    }
    Gyoto::SmartPointer<Gyoto::Metric::Generic> res = (self)->operator[](i);
    return res;
  }
SWIGINTERN void Gyoto_Metric_Complex___setitem__(Gyoto::Metric::Complex *self,int i,Gyoto::Metric::Generic *p){
    (self)->operator[](i)=p;
  }
SWIGINTERN Gyoto::Metric::Complex *new_Gyoto_Metric_Complex__SWIG_2(Gyoto::Metric::Generic *base){
    Gyoto::Metric::Complex * res = dynamic_cast< Gyoto::Metric::Complex * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "186" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""Complex" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::Complex *new_Gyoto_Metric_Complex__SWIG_3(long address){
    Gyoto::Metric::Complex * res = (Gyoto::Metric::Complex *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN void Gyoto_Metric_Shift_circularVelocity(Gyoto::Metric::Shift *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_Shift_zamoVelocity(Gyoto::Metric::Shift *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN double Gyoto_Metric_Shift_christoffel__SWIG_0_0(Gyoto::Metric::Shift const *self,double const coord[4],int const alpha,int const mu,int const nu){ return self->Gyoto::Metric::Generic::christoffel(coord,alpha,mu,nu); }
SWIGINTERN int Gyoto_Metric_Shift_christoffel__SWIG_0_1(Gyoto::Metric::Shift const *self,double dst[4][4][4],double const coord[4]){ return self->Gyoto::Metric::Generic::christoffel(dst,coord); }
SWIGINTERN void Gyoto_Metric_Shift_christoffel__SWIG_1(Gyoto::Metric::Shift *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::Shift *new_Gyoto_Metric_Shift__SWIG_1(Gyoto::Metric::Generic *base){
    Gyoto::Metric::Shift * res = dynamic_cast< Gyoto::Metric::Shift * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "189" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""Shift" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::Shift *new_Gyoto_Metric_Shift__SWIG_2(long address){
    Gyoto::Metric::Shift * res = (Gyoto::Metric::Shift *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN void Gyoto_Metric_KerrBL_circularVelocity__SWIG_2(Gyoto::Metric::KerrBL *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_KerrBL_zamoVelocity__SWIG_1(Gyoto::Metric::KerrBL *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_KerrBL_christoffel__SWIG_3(Gyoto::Metric::KerrBL *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::KerrBL *new_Gyoto_Metric_KerrBL__SWIG_1(Gyoto::Metric::Generic *base){
    Gyoto::Metric::KerrBL * res = dynamic_cast< Gyoto::Metric::KerrBL * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "190" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""KerrBL" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::KerrBL *new_Gyoto_Metric_KerrBL__SWIG_2(long address){
    Gyoto::Metric::KerrBL * res = (Gyoto::Metric::KerrBL *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN void Gyoto_Metric_KerrKS_circularVelocity__SWIG_2(Gyoto::Metric::KerrKS *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_KerrKS_zamoVelocity(Gyoto::Metric::KerrKS *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN double Gyoto_Metric_KerrKS_christoffel__SWIG_0_0(Gyoto::Metric::KerrKS const *self,double const coord[4],int const alpha,int const mu,int const nu){ return self->Gyoto::Metric::Generic::christoffel(coord,alpha,mu,nu); }
SWIGINTERN int Gyoto_Metric_KerrKS_christoffel__SWIG_0_1(Gyoto::Metric::KerrKS const *self,double dst[4][4][4],double const coord[4]){ return self->Gyoto::Metric::Generic::christoffel(dst,coord); }
SWIGINTERN void Gyoto_Metric_KerrKS_christoffel__SWIG_1(Gyoto::Metric::KerrKS *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::KerrKS *new_Gyoto_Metric_KerrKS__SWIG_1(Gyoto::Metric::Generic *base){
    Gyoto::Metric::KerrKS * res = dynamic_cast< Gyoto::Metric::KerrKS * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "191" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""KerrKS" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::KerrKS *new_Gyoto_Metric_KerrKS__SWIG_2(long address){
    Gyoto::Metric::KerrKS * res = (Gyoto::Metric::KerrKS *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN void Gyoto_Metric_Minkowski_circularVelocity(Gyoto::Metric::Minkowski *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_Minkowski_zamoVelocity(Gyoto::Metric::Minkowski *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_Minkowski_christoffel__SWIG_3(Gyoto::Metric::Minkowski *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::Minkowski *new_Gyoto_Metric_Minkowski__SWIG_1(Gyoto::Metric::Generic *base){
    Gyoto::Metric::Minkowski * res = dynamic_cast< Gyoto::Metric::Minkowski * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "192" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""Minkowski" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::Minkowski *new_Gyoto_Metric_Minkowski__SWIG_2(long address){
    Gyoto::Metric::Minkowski * res = (Gyoto::Metric::Minkowski *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN void Gyoto_Metric_ChernSimons_circularVelocity__SWIG_2(Gyoto::Metric::ChernSimons *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_ChernSimons_zamoVelocity(Gyoto::Metric::ChernSimons *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_ChernSimons_christoffel__SWIG_3(Gyoto::Metric::ChernSimons *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::ChernSimons *new_Gyoto_Metric_ChernSimons__SWIG_2(Gyoto::Metric::Generic *base){
    Gyoto::Metric::ChernSimons * res = dynamic_cast< Gyoto::Metric::ChernSimons * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "193" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""ChernSimons" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::ChernSimons *new_Gyoto_Metric_ChernSimons__SWIG_3(long address){
    Gyoto::Metric::ChernSimons * res = (Gyoto::Metric::ChernSimons *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN void Gyoto_Metric_RezzollaZhidenko_circularVelocity__SWIG_2(Gyoto::Metric::RezzollaZhidenko *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_RezzollaZhidenko_zamoVelocity(Gyoto::Metric::RezzollaZhidenko *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_RezzollaZhidenko_christoffel__SWIG_3(Gyoto::Metric::RezzollaZhidenko *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::RezzollaZhidenko *new_Gyoto_Metric_RezzollaZhidenko__SWIG_2(Gyoto::Metric::Generic *base){
    Gyoto::Metric::RezzollaZhidenko * res = dynamic_cast< Gyoto::Metric::RezzollaZhidenko * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "194" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""RezzollaZhidenko" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::RezzollaZhidenko *new_Gyoto_Metric_RezzollaZhidenko__SWIG_3(long address){
    Gyoto::Metric::RezzollaZhidenko * res = (Gyoto::Metric::RezzollaZhidenko *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN void Gyoto_Metric_Hayward_circularVelocity__SWIG_1(Gyoto::Metric::Hayward *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_Hayward_zamoVelocity(Gyoto::Metric::Hayward *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_Hayward_christoffel__SWIG_3(Gyoto::Metric::Hayward *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::Hayward *new_Gyoto_Metric_Hayward__SWIG_1(Gyoto::Metric::Generic *base){
    Gyoto::Metric::Hayward * res = dynamic_cast< Gyoto::Metric::Hayward * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "195" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""Hayward" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::Hayward *new_Gyoto_Metric_Hayward__SWIG_2(long address){
    Gyoto::Metric::Hayward * res = (Gyoto::Metric::Hayward *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN void Gyoto_Metric_SchwarzschildHarmonic_circularVelocity__SWIG_1(Gyoto::Metric::SchwarzschildHarmonic *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_SchwarzschildHarmonic_zamoVelocity(Gyoto::Metric::SchwarzschildHarmonic *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_SchwarzschildHarmonic_christoffel__SWIG_3(Gyoto::Metric::SchwarzschildHarmonic *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    Gyoto::SmartPointer<Gyoto::Metric::Generic>(self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::SchwarzschildHarmonic *new_Gyoto_Metric_SchwarzschildHarmonic__SWIG_2(Gyoto::Metric::Generic *base){
    Gyoto::Metric::SchwarzschildHarmonic * res = dynamic_cast< Gyoto::Metric::SchwarzschildHarmonic * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "196" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Metric" "::""SchwarzschildHarmonic" "*'");
    return res;
  }
SWIGINTERN Gyoto::Metric::SchwarzschildHarmonic *new_Gyoto_Metric_SchwarzschildHarmonic__SWIG_3(long address){
    Gyoto::Metric::SchwarzschildHarmonic * res = (Gyoto::Metric::SchwarzschildHarmonic *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrum::PowerLaw *new_Gyoto_Spectrum_PowerLaw__SWIG_3(Gyoto::Spectrum::Generic *base){
    Gyoto::Spectrum::PowerLaw * res = dynamic_cast< Gyoto::Spectrum::PowerLaw * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "198" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Spectrum" "::""PowerLaw" "*'");
    return res;
  }
SWIGINTERN Gyoto::Spectrum::PowerLaw *new_Gyoto_Spectrum_PowerLaw__SWIG_4(long address){
    Gyoto::Spectrum::PowerLaw * res = (Gyoto::Spectrum::PowerLaw *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrum::BlackBody *new_Gyoto_Spectrum_BlackBody__SWIG_3(Gyoto::Spectrum::Generic *base){
    Gyoto::Spectrum::BlackBody * res = dynamic_cast< Gyoto::Spectrum::BlackBody * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "199" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Spectrum" "::""BlackBody" "*'");
    return res;
  }
SWIGINTERN Gyoto::Spectrum::BlackBody *new_Gyoto_Spectrum_BlackBody__SWIG_4(long address){
    Gyoto::Spectrum::BlackBody * res = (Gyoto::Spectrum::BlackBody *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrum::ThermalBremsstrahlung *new_Gyoto_Spectrum_ThermalBremsstrahlung__SWIG_2(Gyoto::Spectrum::Generic *base){
    Gyoto::Spectrum::ThermalBremsstrahlung * res = dynamic_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "200" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Spectrum" "::""ThermalBremsstrahlung" "*'");
    return res;
  }
SWIGINTERN Gyoto::Spectrum::ThermalBremsstrahlung *new_Gyoto_Spectrum_ThermalBremsstrahlung__SWIG_3(long address){
    Gyoto::Spectrum::ThermalBremsstrahlung * res = (Gyoto::Spectrum::ThermalBremsstrahlung *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrum::ThermalSynchrotron *new_Gyoto_Spectrum_ThermalSynchrotron__SWIG_2(Gyoto::Spectrum::Generic *base){
    Gyoto::Spectrum::ThermalSynchrotron * res = dynamic_cast< Gyoto::Spectrum::ThermalSynchrotron * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "201" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Spectrum" "::""ThermalSynchrotron" "*'");
    return res;
  }
SWIGINTERN Gyoto::Spectrum::ThermalSynchrotron *new_Gyoto_Spectrum_ThermalSynchrotron__SWIG_3(long address){
    Gyoto::Spectrum::ThermalSynchrotron * res = (Gyoto::Spectrum::ThermalSynchrotron *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrum::PowerLawSynchrotron *new_Gyoto_Spectrum_PowerLawSynchrotron__SWIG_2(Gyoto::Spectrum::Generic *base){
    Gyoto::Spectrum::PowerLawSynchrotron * res = dynamic_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto_std.i" ":" "202" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Spectrum" "::""PowerLawSynchrotron" "*'");
    return res;
  }
SWIGINTERN Gyoto::Spectrum::PowerLawSynchrotron *new_Gyoto_Spectrum_PowerLawSynchrotron__SWIG_3(long address){
    Gyoto::Spectrum::PowerLawSynchrotron * res = (Gyoto::Spectrum::PowerLawSynchrotron *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }

  namespace GyotoStd {
    extern int __class__;
  }
  int GyotoStd::__class__ = 0;

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int Swig_var_UniformSphere_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSphere_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSphere_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::UniformSphere::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_UniformSphere_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::UniformSphere const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_UniformSphere_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSphere_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSphere_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::UniformSphere::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_UniformSphere_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSphere_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSphere_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::UniformSphere const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSphere_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::UniformSphere::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UniformSphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UniformSphere",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UniformSphere" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_className" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::UniformSphere const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_className_l" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::UniformSphere const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_spectrum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_spectrum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_spectrum" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrum::Generic" "*'");
    }
    Gyoto::Spectrum::Generic * kp=reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(kp);
  }
  {
    try {
      (arg1)->spectrum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_spectrum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_spectrum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_spectrum" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::UniformSphere const *)arg1)->spectrum();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_spectrum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_spectrum__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSphere_spectrum__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_spectrum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::spectrum(Gyoto::SmartPointer< Gyoto::Spectrum::Generic >)\n"
    "    Gyoto::Astrobj::UniformSphere::spectrum() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSphere_opacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_opacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_opacity" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrum::Generic" "*'");
    }
    Gyoto::Spectrum::Generic * kp=reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(kp);
  }
  {
    try {
      (arg1)->opacity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_opacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_opacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_opacity" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::UniformSphere const *)arg1)->opacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_opacity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_opacity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSphere_opacity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_opacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::opacity(Gyoto::SmartPointer< Gyoto::Spectrum::Generic >)\n"
    "    Gyoto::Astrobj::UniformSphere::opacity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSphere_radius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_radius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::UniformSphere const *)arg1)->radius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_radius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformSphere_radius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->radius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_radius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSphere_radius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSphere_radius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::UniformSphere const *)arg1)->radius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_radius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UniformSphere_radius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformSphere_radius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UniformSphere_radius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSphere_radius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->radius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_radius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_radius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSphere_radius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSphere_radius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UniformSphere_radius__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_radius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::radius() const\n"
    "    Gyoto::Astrobj::UniformSphere::radius(double)\n"
    "    Gyoto::Astrobj::UniformSphere::radius(std::string const &) const\n"
    "    Gyoto::Astrobj::UniformSphere::radius(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSphere_deltaMaxOverRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_deltaMaxOverRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_deltaMaxOverRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::UniformSphere const *)arg1)->deltaMaxOverRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_deltaMaxOverRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_deltaMaxOverRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_deltaMaxOverRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformSphere_deltaMaxOverRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMaxOverRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_deltaMaxOverRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_deltaMaxOverRadius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSphere_deltaMaxOverRadius__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_deltaMaxOverRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::deltaMaxOverRadius() const\n"
    "    Gyoto::Astrobj::UniformSphere::deltaMaxOverRadius(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSphere_deltaMaxOverDistance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_deltaMaxOverDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_deltaMaxOverDistance" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::UniformSphere const *)arg1)->deltaMaxOverDistance();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_deltaMaxOverDistance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_deltaMaxOverDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_deltaMaxOverDistance" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformSphere_deltaMaxOverDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMaxOverDistance(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_deltaMaxOverDistance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_deltaMaxOverDistance__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSphere_deltaMaxOverDistance__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_deltaMaxOverDistance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::deltaMaxOverDistance() const\n"
    "    Gyoto::Astrobj::UniformSphere::deltaMaxOverDistance(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSphere_isotropic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_isotropic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_isotropic" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::UniformSphere const *)arg1)->isotropic();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_isotropic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_isotropic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_isotropic" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformSphere_isotropic" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->isotropic(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_isotropic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_isotropic__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSphere_isotropic__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_isotropic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::isotropic() const\n"
    "    Gyoto::Astrobj::UniformSphere::isotropic(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSphere_alpha__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSphere_alpha",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_alpha" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::UniformSphere const *)arg1)->alpha();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_alpha__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_alpha",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_alpha" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformSphere_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->alpha(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_alpha(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSphere_alpha__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSphere_alpha__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSphere_alpha'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::alpha() const\n"
    "    Gyoto::Astrobj::UniformSphere::alpha(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSphere___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSphere_deltaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::UniformSphere *arg1 = (Gyoto::Astrobj::UniformSphere *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSphere_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSphere_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::UniformSphere *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::UniformSphere * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSphere_deltaMax" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      result = (double)(arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformSphere__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::UniformSphere *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UniformSphere",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformSphere" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::UniformSphere *)new_Gyoto_Astrobj_UniformSphere__SWIG_0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformSphere__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::UniformSphere *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UniformSphere",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UniformSphere" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::UniformSphere *)new_Gyoto_Astrobj_UniformSphere__SWIG_1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformSphere(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UniformSphere__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UniformSphere__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UniformSphere'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::UniformSphere::UniformSphere(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::UniformSphere::UniformSphere(long)\n");
  return 0;
}


SWIGINTERN PyObject *UniformSphere_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__UniformSphere, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_myCplxIdxExcept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  myCplxIdxExcept *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_myCplxIdxExcept")) SWIG_fail;
  {
    try {
      result = (myCplxIdxExcept *)new myCplxIdxExcept();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_myCplxIdxExcept, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_myCplxIdxExcept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  myCplxIdxExcept *arg1 = (myCplxIdxExcept *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_myCplxIdxExcept",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_myCplxIdxExcept, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_myCplxIdxExcept" "', argument " "1"" of type '" "myCplxIdxExcept *""'"); 
  }
  arg1 = reinterpret_cast< myCplxIdxExcept * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *myCplxIdxExcept_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_myCplxIdxExcept, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ComplexAstrobj_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexAstrobj_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Complex const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexAstrobj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexAstrobj")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Complex *)new Gyoto::Astrobj::Complex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexAstrobj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexAstrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Complex,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexAstrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ComplexAstrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Complex *)new Gyoto::Astrobj::Complex((Gyoto::Astrobj::Complex const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexAstrobj_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Complex *)((Gyoto::Astrobj::Complex const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Complex, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_deltaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_rMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexAstrobj_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    try {
      result = (double)(arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComplexAstrobj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexAstrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexAstrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_append" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    try {
      (arg1)->append(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_remove" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexAstrobj_remove" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->remove(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_getCardinal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexAstrobj_getCardinal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_getCardinal" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Complex const *)arg1)->getCardinal();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexAstrobj_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Complex const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ComplexAstrobj_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexAstrobj_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexAstrobj_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ComplexAstrobj_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::Complex::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_fillElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj_fillElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_fillElement" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexAstrobj_fillElement" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      ((Gyoto::Astrobj::Complex const *)arg1)->fillElement(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_setParameters" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexAstrobj_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_Impact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ComplexAstrobj_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexAstrobj_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComplexAstrobj_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComplexAstrobj_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_Impact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComplexAstrobj_Impact",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexAstrobj_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComplexAstrobj_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj_Impact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ComplexAstrobj_Impact__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ComplexAstrobj_Impact__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ComplexAstrobj_Impact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Complex::Impact(Gyoto::Photon *,size_t,Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Astrobj::Complex::Impact(Gyoto::Photon *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexAstrobj___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj___getitem__" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexAstrobj___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = Gyoto_Astrobj_Complex___getitem__(arg1,arg2); ;
    } catch (myCplxIdxExcept e) {
      SWIG_exception_fail(SWIG_IndexError, "Index out of bounds");
    }
  }
  {
    Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexAstrobj___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Complex *arg1 = (Gyoto::Astrobj::Complex *) 0 ;
  int arg2 ;
  Gyoto::Astrobj::Generic *arg3 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComplexAstrobj___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexAstrobj___setitem__" "', argument " "1"" of type '" "Gyoto::Astrobj::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Complex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexAstrobj___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComplexAstrobj___setitem__" "', argument " "3"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp3);
  {
    try {
      Gyoto_Astrobj_Complex___setitem__(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexAstrobj__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexAstrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexAstrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Complex *)new_Gyoto_Astrobj_Complex__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexAstrobj__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexAstrobj",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ComplexAstrobj" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Complex *)new_Gyoto_Astrobj_Complex__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexAstrobj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ComplexAstrobj__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ComplexAstrobj__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexAstrobj__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexAstrobj__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ComplexAstrobj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Complex::Complex()\n"
    "    Gyoto::Astrobj::Complex::Complex(Gyoto::Astrobj::Complex const &)\n"
    "    Gyoto::Astrobj::Complex::Complex(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Complex::Complex(long)\n");
  return 0;
}


SWIGINTERN PyObject *ComplexAstrobj_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Complex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Star_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Star_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Star_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Star::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Star_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Star const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Star_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Star_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Star_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Star::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Star_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Star::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Star__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  double val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gyoto::Astrobj::Star *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Star",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Star" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (Gyoto::Astrobj::Star *)new Gyoto::Astrobj::Star(arg1,arg2,(double const (*))arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_POINTER_NEW |  0 );
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Star__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Star")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Star *)new Gyoto::Astrobj::Star();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Star__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Star *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Star",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Star,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Star" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Star" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Star *)new Gyoto::Astrobj::Star((Gyoto::Astrobj::Star const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Star *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Star *)((Gyoto::Astrobj::Star const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Star(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Star",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Star" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_className" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_className_l" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star_metric__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star_metric__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::Star::metric() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star_getMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_getMass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_getMass" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->getMass();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_rMax__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_rMax__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)(arg1)->rMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_rMax__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->rMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_rMax__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star_rMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_rMax__SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Star_rMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star_rMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Star_rMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star_rMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->rMax(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_rMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)(arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_rMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star_rMax__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star_rMax__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star_rMax__SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star_rMax__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star_rMax__SWIG_0_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Star_rMax__SWIG_0_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star_rMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rMax() const\n"
    "    rMax(std::string const &)\n"
    "    rMax(std::string const &) const\n"
    "    rMax(double)\n"
    "    rMax(double,std::string const &)\n"
    "    Gyoto::Astrobj::Star::rMax()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star_setInitialCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_setInitialCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setInitialCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_setParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Star_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_setParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Star_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Star_setParameter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Star_setParameter" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (int)(arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_setParameters" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Star_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Star_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::Star const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_delta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Star__delta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Star__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_delta(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__delta__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_delta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__delta__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_delta((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__delta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__delta__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__delta__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star__delta__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Star__delta__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_delta(double const)\n"
    "    Gyoto::Astrobj::Star::_delta(double,std::string const &)\n"
    "    Gyoto::Astrobj::Star::_delta() const\n"
    "    Gyoto::Astrobj::Star::_delta(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__tMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_tMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__tMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Star__tMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Star__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_tMin(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__tMin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__tMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_tMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__tMin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_tMin((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__tMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__tMin__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__tMin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star__tMin__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Star__tMin__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__tMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_tMin(double const)\n"
    "    Gyoto::Astrobj::Star::_tMin(double,std::string const &)\n"
    "    Gyoto::Astrobj::Star::_tMin() const\n"
    "    Gyoto::Astrobj::Star::_tMin(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__adaptive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__adaptive" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__adaptive" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_adaptive(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__adaptive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__adaptive" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Star const *)arg1)->_adaptive();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__adaptive__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__adaptive__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_adaptive(bool)\n"
    "    Gyoto::Astrobj::Star::_adaptive() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__secondary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__secondary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__secondary" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__secondary" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_secondary(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__secondary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__secondary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__secondary" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Star const *)arg1)->_secondary();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__secondary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__secondary__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__secondary__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__secondary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_secondary(bool)\n"
    "    Gyoto::Astrobj::Star::_secondary() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__integ31__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__integ31",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__integ31" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__integ31" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_integ31(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__integ31__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__integ31",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__integ31" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Star const *)arg1)->_integ31();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__integ31(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__integ31__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__integ31__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__integ31'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_integ31(bool)\n"
    "    Gyoto::Astrobj::Star::_integ31() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__parallelTransport__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__parallelTransport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__parallelTransport" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__parallelTransport" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_parallelTransport(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__parallelTransport__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__parallelTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__parallelTransport" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Star const *)arg1)->_parallelTransport();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__parallelTransport(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__parallelTransport__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__parallelTransport__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__parallelTransport'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_parallelTransport(bool)\n"
    "    Gyoto::Astrobj::Star::_parallelTransport() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__maxiter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__maxiter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__maxiter" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__maxiter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->_maxiter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__maxiter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__maxiter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__maxiter" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->_maxiter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__maxiter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__maxiter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__maxiter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__maxiter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_maxiter(size_t)\n"
    "    Gyoto::Astrobj::Star::_maxiter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__integrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__integrator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__integrator" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_integrator((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__integrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__integrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__integrator" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->_integrator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__integrator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__integrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star__integrator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__integrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_integrator(std::string const &)\n"
    "    Gyoto::Astrobj::Star::_integrator() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__deltaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__deltaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__deltaMin" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_deltaMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__deltaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__deltaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__deltaMin" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__deltaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__deltaMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__deltaMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__deltaMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__deltaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_deltaMin() const\n"
    "    Gyoto::Astrobj::Star::_deltaMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__absTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__absTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__absTol" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__absTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_absTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__absTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__absTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__absTol" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_absTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__absTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__absTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__absTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__absTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_absTol(double)\n"
    "    Gyoto::Astrobj::Star::_absTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__maxCrossEqplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__maxCrossEqplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__maxCrossEqplane" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_maxCrossEqplane(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__maxCrossEqplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__maxCrossEqplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_maxCrossEqplane();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__maxCrossEqplane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__maxCrossEqplane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__maxCrossEqplane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__maxCrossEqplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_maxCrossEqplane(double)\n"
    "    Gyoto::Astrobj::Star::_maxCrossEqplane() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__relTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__relTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__relTol" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__relTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_relTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__relTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__relTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__relTol" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_relTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__relTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__relTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__relTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__relTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_relTol(double)\n"
    "    Gyoto::Astrobj::Star::_relTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__deltaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__deltaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__deltaMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__deltaMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_deltaMax(double)\n"
    "    Gyoto::Astrobj::Star::_deltaMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__deltaMaxOverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__deltaMaxOverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->_deltaMaxOverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__deltaMaxOverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__deltaMaxOverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star__deltaMaxOverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMaxOverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__deltaMaxOverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__deltaMaxOverR__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__deltaMaxOverR__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__deltaMaxOverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_deltaMaxOverR() const\n"
    "    Gyoto::Astrobj::Star::_deltaMaxOverR(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->_initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_initCoord((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__initCoord__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star__initCoord__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_initCoord() const\n"
    "    Gyoto::Astrobj::Star::_initCoord(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star__metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star__metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->_metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star__metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star__metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Star const *)arg1)->_metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star__metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star__metric__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star__metric__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star__metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::Star::_metric() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star_deltaMax__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Star_deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_deltaMax__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Star_deltaMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Star_deltaMax" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Astrobj::Star const *)arg1)->deltaMax((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_deltaMax__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Star_deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_deltaMax__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Star_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star_deltaMax" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      result = (double)(arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Star_deltaMax__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Star_deltaMax__SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Star_deltaMax__SWIG_0_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Star_deltaMax__SWIG_0_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Star_deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    deltaMax() const\n"
    "    deltaMax(double const [8],double) const\n"
    "    deltaMax(double)\n"
    "    deltaMax(double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Star_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Star_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Star *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Star_radiativeQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = (Gyoto::Astrobj::Star *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  Eigen::Matrix4d *arg6 = (Eigen::Matrix4d *) 0 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  double arg9 ;
  Gyoto::state_t *arg10 = 0 ;
  double *arg11 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 = SWIG_OLDOBJ ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Star_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Star, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Star_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Star_radiativeQ" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Star_radiativeQ" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Star_radiativeQ" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Star_radiativeQ" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Star_radiativeQ" "', argument " "6"" of type '" "Eigen::Matrix4d *""'"); 
  }
  arg6 = reinterpret_cast< Eigen::Matrix4d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Star_radiativeQ" "', argument " "7"" of type '" "double const *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_size_t(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Star_radiativeQ" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Star_radiativeQ" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res10 = swig::asptr(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Star_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Star_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg10 = ptr;
  }
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Star_radiativeQ" "', argument " "11"" of type '" "double const *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  {
    try {
      ((Gyoto::Astrobj::Star const *)arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,(Gyoto::state_t const &)*arg10,(double const *)arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res10)) delete arg10;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res10)) delete arg10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Star__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Star *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Star",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Star" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Star *)new_Gyoto_Astrobj_Star__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Star__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Star *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Star",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Star" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Star *)new_Gyoto_Astrobj_Star__SWIG_4(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Star(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Star__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Star__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Star__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Star__SWIG_4(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            return _wrap_new_Star__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Star'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Star::Star(Gyoto::SmartPointer< Gyoto::Metric::Generic >,double,double const [4],double const [3])\n"
    "    Gyoto::Astrobj::Star::Star()\n"
    "    Gyoto::Astrobj::Star::Star(Gyoto::Astrobj::Star const &)\n"
    "    Gyoto::Astrobj::Star::Star(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Star::Star(long)\n");
  return 0;
}


SWIGINTERN PyObject *Star_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Star, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_StarTrace_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StarTrace_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_StarTrace_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::StarTrace::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_StarTrace_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::StarTrace const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_StarTrace_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StarTrace_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_StarTrace_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::StarTrace::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_StarTrace_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StarTrace_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StarTrace_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::StarTrace const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StarTrace_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StarTrace_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::StarTrace::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::StarTrace::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StarTrace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  double val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gyoto::Astrobj::StarTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_StarTrace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StarTrace" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (Gyoto::Astrobj::StarTrace *)new Gyoto::Astrobj::StarTrace(arg1,arg2,(double const (*))arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_NEW |  0 );
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StarTrace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StarTrace")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::StarTrace *)new Gyoto::Astrobj::StarTrace();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StarTrace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::StarTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StarTrace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__StarTrace,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StarTrace" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StarTrace" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::StarTrace *)new Gyoto::Astrobj::StarTrace((Gyoto::Astrobj::StarTrace const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StarTrace__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Star *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Astrobj::StarTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_StarTrace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Star,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StarTrace" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StarTrace" "', argument " "1"" of type '" "Gyoto::Astrobj::Star const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Star * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StarTrace" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StarTrace" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (Gyoto::Astrobj::StarTrace *)new Gyoto::Astrobj::StarTrace((Gyoto::Astrobj::Star const &)*arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::StarTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::StarTrace *)((Gyoto::Astrobj::StarTrace const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StarTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StarTrace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StarTrace" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_xAllocate__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_xAllocate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_xAllocate" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      (arg1)->xAllocate();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_xAllocate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_xAllocate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_xAllocate" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StarTrace_xAllocate" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->xAllocate(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_xAllocate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StarTrace_xAllocate__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StarTrace_xAllocate__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_xAllocate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xAllocate()\n"
    "    Gyoto::Astrobj::StarTrace::xAllocate(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StarTrace_xAllocateXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_xAllocateXYZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_xAllocateXYZ" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      (arg1)->xAllocateXYZ();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_xExpand__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double **arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StarTrace_xExpand",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_xExpand" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StarTrace_xExpand" "', argument " "2"" of type '" "double *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StarTrace_xExpand" "', argument " "2"" of type '" "double *&""'"); 
  }
  arg2 = reinterpret_cast< double ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StarTrace_xExpand" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->xExpand(*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_xExpand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_xExpand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_xExpand" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StarTrace_xExpand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->xExpand(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_xExpand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StarTrace_xExpand__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StarTrace_xExpand__SWIG_0_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_xExpand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xExpand(double *&,int)\n"
    "    Gyoto::Astrobj::StarTrace::xExpand(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StarTrace_computeXYZ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_computeXYZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_computeXYZ" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StarTrace_computeXYZ" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->computeXYZ(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_computeXYZ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_computeXYZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_computeXYZ" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      (arg1)->computeXYZ();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_computeXYZ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StarTrace_computeXYZ__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StarTrace_computeXYZ__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_computeXYZ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::StarTrace::computeXYZ(size_t)\n"
    "    Gyoto::Astrobj::StarTrace::computeXYZ()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StarTrace_setInitCoord__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double *arg2 ;
  int arg3 ;
  double *arg4 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:StarTrace_setInitCoord",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_setInitCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StarTrace_setInitCoord" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,arg3,(double const (*))arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_setInitCoord__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double *arg2 ;
  double *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StarTrace_setInitCoord",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_setInitCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StarTrace_setInitCoord" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_setInitCoord__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StarTrace_setInitCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_setInitCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_setInitCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double *arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StarTrace_setInitCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_setInitCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StarTrace_setInitCoord" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_setInitCoord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_setInitCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_setInitCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_setInitCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StarTrace_setInitCoord__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StarTrace_setInitCoord__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_StarTrace_setInitCoord__SWIG_0_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StarTrace_setInitCoord__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_StarTrace_setInitCoord__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_setInitCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setInitCoord(double const [8],int,double const [4],double const [4])\n"
    "    setInitCoord(double const [4],double const [3],int)\n"
    "    setInitCoord(double const [4],double const [3])\n"
    "    Gyoto::Astrobj::StarTrace::setInitCoord(double const [8],int)\n"
    "    Gyoto::Astrobj::StarTrace::setInitCoord(double const [8])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StarTrace_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::StarTrace const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StarTrace_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StarTrace_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StarTrace_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::StarTrace::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StarTrace_xStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  size_t arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StarTrace_xStore",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_xStore" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StarTrace_xStore" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StarTrace_xStore" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StarTrace_xStore" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StarTrace_xStore" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->xStore(arg2,(Gyoto::state_t const &)*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_className" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::StarTrace const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_className_l" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::StarTrace const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_TMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_TMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_TMin" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::StarTrace const *)arg1)->TMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_TMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_TMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_TMin" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StarTrace_TMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->TMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_TMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StarTrace_TMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StarTrace_TMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_TMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::StarTrace::TMin() const\n"
    "    Gyoto::Astrobj::StarTrace::TMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StarTrace_TMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StarTrace_TMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_TMax" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::StarTrace const *)arg1)->TMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_TMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_TMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_TMax" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StarTrace_TMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->TMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace_TMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StarTrace_TMax__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StarTrace_TMax__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StarTrace_TMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::StarTrace::TMax() const\n"
    "    Gyoto::Astrobj::StarTrace::TMax(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StarTrace_setInitialCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace_setInitialCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setInitialCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StarTrace___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::StarTrace *arg1 = (Gyoto::Astrobj::StarTrace *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StarTrace___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StarTrace___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::StarTrace *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::StarTrace * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StarTrace__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::StarTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StarTrace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StarTrace" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::StarTrace *)new_Gyoto_Astrobj_StarTrace__SWIG_4(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StarTrace__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::StarTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StarTrace",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StarTrace" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::StarTrace *)new_Gyoto_Astrobj_StarTrace__SWIG_5(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StarTrace(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StarTrace__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__StarTrace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StarTrace__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StarTrace__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StarTrace__SWIG_5(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Star, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_StarTrace__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            return _wrap_new_StarTrace__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StarTrace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::StarTrace::StarTrace(Gyoto::SmartPointer< Gyoto::Metric::Generic >,double,double const [4],double const [3])\n"
    "    Gyoto::Astrobj::StarTrace::StarTrace()\n"
    "    Gyoto::Astrobj::StarTrace::StarTrace(Gyoto::Astrobj::StarTrace const &)\n"
    "    Gyoto::Astrobj::StarTrace::StarTrace(Gyoto::Astrobj::Star const &,double,double)\n"
    "    Gyoto::Astrobj::StarTrace::StarTrace(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::StarTrace::StarTrace(long)\n");
  return 0;
}


SWIGINTERN PyObject *StarTrace_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__StarTrace, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_FixedStar_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FixedStar_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FixedStar_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::FixedStar::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FixedStar_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::FixedStar const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_FixedStar_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FixedStar_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FixedStar_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::FixedStar::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FixedStar_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedStar_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedStar_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FixedStar const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FixedStar_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FixedStar_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FixedStar_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FixedStar::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::FixedStar::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_FixedStar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FixedStar")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::FixedStar *)new Gyoto::Astrobj::FixedStar();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedStar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FixedStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FixedStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__FixedStar,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedStar" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FixedStar" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FixedStar *)new Gyoto::Astrobj::FixedStar((Gyoto::Astrobj::FixedStar const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FixedStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FixedStar *)((Gyoto::Astrobj::FixedStar const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedStar__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  double *arg2 ;
  double arg3 ;
  PyArrayObject *array2 = NULL ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Astrobj::FixedStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_FixedStar",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FixedStar" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (Gyoto::Astrobj::FixedStar *)new Gyoto::Astrobj::FixedStar(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FixedStar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FixedStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FixedStar" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_getPos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_getPos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_getPos" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::FixedStar const *)arg1)->getPos();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_getPos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_getPos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_getPos" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedStar_getPos" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      ((Gyoto::Astrobj::FixedStar const *)arg1)->getPos(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_getPos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FixedStar_getPos__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FixedStar_getPos__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FixedStar_getPos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FixedStar::getPos() const\n"
    "    Gyoto::Astrobj::FixedStar::getPos(double *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedStar_position__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_position" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FixedStar const *)arg1)->position();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_position__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_position",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_position" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedStar_position" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedStar_position" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->position((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_position(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FixedStar_position__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FixedStar_position__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FixedStar_position'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FixedStar::position() const\n"
    "    Gyoto::Astrobj::FixedStar::position(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedStar_rMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = (double)(arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_rotating__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_rotating",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_rotating" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::FixedStar const *)arg1)->rotating();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_rotating__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_rotating",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_rotating" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedStar_rotating" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->rotating(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_rotating(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FixedStar_rotating__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FixedStar_rotating__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FixedStar_rotating'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FixedStar::rotating() const\n"
    "    Gyoto::Astrobj::FixedStar::rotating(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedStar_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FixedStar const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FixedStar_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FixedStar_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FixedStar_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FixedStar_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::FixedStar::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedStar_radius__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FixedStar_radius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FixedStar const *)arg1)->radius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_radius__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedStar_radius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedStar_radius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::FixedStar const *)arg1)->radius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_radius__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FixedStar_radius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedStar_radius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedStar_radius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedStar_radius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->radius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_radius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedStar_radius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->radius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FixedStar_radius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FixedStar_radius__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FixedStar_radius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FixedStar_radius__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FixedStar_radius__SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FixedStar_radius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    radius() const\n"
    "    radius(std::string const &) const\n"
    "    radius(double,std::string const &)\n"
    "    Gyoto::Astrobj::FixedStar::radius(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FixedStar_setPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FixedStar *arg1 = (Gyoto::Astrobj::FixedStar *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FixedStar_setPos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedStar_setPos" "', argument " "1"" of type '" "Gyoto::Astrobj::FixedStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FixedStar * >(argp1);
  {
    npy_intp size[1] = {
      3 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setPos((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedStar__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FixedStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FixedStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedStar" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FixedStar *)new_Gyoto_Astrobj_FixedStar__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedStar__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FixedStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FixedStar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FixedStar" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::FixedStar *)new_Gyoto_Astrobj_FixedStar__SWIG_4(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FixedStar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FixedStar__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__FixedStar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FixedStar__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FixedStar__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FixedStar__SWIG_4(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FixedStar__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FixedStar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FixedStar::FixedStar()\n"
    "    Gyoto::Astrobj::FixedStar::FixedStar(Gyoto::Astrobj::FixedStar const &)\n"
    "    Gyoto::Astrobj::FixedStar::FixedStar(Gyoto::SmartPointer< Gyoto::Metric::Generic >,double [3],double)\n"
    "    Gyoto::Astrobj::FixedStar::FixedStar(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::FixedStar::FixedStar(long)\n");
  return 0;
}


SWIGINTERN PyObject *FixedStar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__FixedStar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_FreeStar_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FreeStar_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FreeStar_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::FreeStar::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FreeStar_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::FreeStar const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_FreeStar_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FreeStar_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FreeStar_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::FreeStar::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FreeStar_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FreeStar_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeStar_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FreeStar const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FreeStar_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FreeStar_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FreeStar_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FreeStar::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::FreeStar::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_FreeStar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FreeStar")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::FreeStar *)new Gyoto::Astrobj::FreeStar();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FreeStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FreeStar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FreeStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FreeStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__FreeStar,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeStar" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FreeStar" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FreeStar *)new Gyoto::Astrobj::FreeStar((Gyoto::Astrobj::FreeStar const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FreeStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FreeStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FreeStar *)((Gyoto::Astrobj::FreeStar const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FreeStar, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FreeStar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FreeStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeStar" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_className" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FreeStar const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_className_l" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FreeStar const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_initPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FreeStar_initPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_initPosition" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_initPosition" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeStar_initPosition" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->initPosition((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_initPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_initPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_initPosition" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FreeStar const *)arg1)->initPosition();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_initPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FreeStar_initPosition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FreeStar_initPosition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FreeStar_initPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FreeStar::initPosition(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::FreeStar::initPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FreeStar_initVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FreeStar_initVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_initVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_initVelocity" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeStar_initVelocity" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->initVelocity((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_initVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_initVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_initVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FreeStar const *)arg1)->initVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_initVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FreeStar_initVelocity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FreeStar_initVelocity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FreeStar_initVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FreeStar::initVelocity(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::FreeStar::initVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FreeStar_initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FreeStar_initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeStar_initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->initCoord((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FreeStar_initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FreeStar const *)arg1)->initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FreeStar_initCoord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FreeStar_initCoord__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FreeStar_initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FreeStar::initCoord(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::FreeStar::initCoord() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FreeStar_getCartesian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:FreeStar_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FreeStar_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FreeStar_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FreeStar_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FreeStar_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "FreeStar_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "FreeStar_getCartesian" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "FreeStar_getCartesian" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_getCartesian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:FreeStar_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FreeStar_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FreeStar_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FreeStar_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FreeStar_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "FreeStar_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "FreeStar_getCartesian" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_getCartesian__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:FreeStar_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FreeStar_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FreeStar_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FreeStar_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FreeStar_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "FreeStar_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_getCartesian__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:FreeStar_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeStar_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FreeStar_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FreeStar_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FreeStar_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FreeStar_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FreeStar_getCartesian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_FreeStar_getCartesian__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_FreeStar_getCartesian__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_FreeStar_getCartesian__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_FreeStar_getCartesian__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FreeStar_getCartesian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FreeStar::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Astrobj::FreeStar::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Astrobj::FreeStar::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Astrobj::FreeStar::getCartesian(double const *const,size_t const,double *const,double *const,double *const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FreeStar_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FreeStar *arg1 = (Gyoto::Astrobj::FreeStar *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FreeStar_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeStar_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::FreeStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FreeStar * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FreeStar__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FreeStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FreeStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeStar" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FreeStar *)new_Gyoto_Astrobj_FreeStar__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FreeStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FreeStar__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FreeStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FreeStar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FreeStar" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::FreeStar *)new_Gyoto_Astrobj_FreeStar__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FreeStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FreeStar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FreeStar__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__FreeStar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FreeStar__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FreeStar__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FreeStar__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FreeStar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FreeStar::FreeStar()\n"
    "    Gyoto::Astrobj::FreeStar::FreeStar(Gyoto::Astrobj::FreeStar const &)\n"
    "    Gyoto::Astrobj::FreeStar::FreeStar(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::FreeStar::FreeStar(long)\n");
  return 0;
}


SWIGINTERN PyObject *FreeStar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__FreeStar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_InflateStar_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InflateStar_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InflateStar_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::InflateStar::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_InflateStar_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::InflateStar const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_InflateStar_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InflateStar_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InflateStar_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::InflateStar::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_InflateStar_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InflateStar_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::InflateStar const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_InflateStar_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InflateStar_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::InflateStar::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_InflateStar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InflateStar")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::InflateStar *)new Gyoto::Astrobj::InflateStar();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__InflateStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InflateStar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::InflateStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InflateStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__InflateStar,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InflateStar" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InflateStar" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::InflateStar *)new Gyoto::Astrobj::InflateStar((Gyoto::Astrobj::InflateStar const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__InflateStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::InflateStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::InflateStar *)((Gyoto::Astrobj::InflateStar const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__InflateStar, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InflateStar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InflateStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InflateStar" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateInit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_timeInflateInit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateInit" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_timeInflateInit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->timeInflateInit(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateInit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_timeInflateInit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateInit" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->timeInflateInit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateInit__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InflateStar_timeInflateInit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateInit" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_timeInflateInit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InflateStar_timeInflateInit" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_timeInflateInit" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->timeInflateInit(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateInit__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_timeInflateInit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateInit" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InflateStar_timeInflateInit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_timeInflateInit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->timeInflateInit((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateInit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_InflateStar_timeInflateInit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InflateStar_timeInflateInit__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InflateStar_timeInflateInit__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InflateStar_timeInflateInit__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_timeInflateInit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateInit(double)\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateInit() const\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateInit(double,std::string const &)\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateInit(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateStop__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_timeInflateStop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_timeInflateStop" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->timeInflateStop(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateStop__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_timeInflateStop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->timeInflateStop();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateStop__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InflateStar_timeInflateStop",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_timeInflateStop" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InflateStar_timeInflateStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_timeInflateStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->timeInflateStop(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateStop__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_timeInflateStop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_timeInflateStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InflateStar_timeInflateStop" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_timeInflateStop" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->timeInflateStop((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_timeInflateStop(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_InflateStar_timeInflateStop__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InflateStar_timeInflateStop__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InflateStar_timeInflateStop__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InflateStar_timeInflateStop__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_timeInflateStop'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateStop(double)\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateStop() const\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateStop(double,std::string const &)\n"
    "    Gyoto::Astrobj::InflateStar::timeInflateStop(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusStop__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_radiusStop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radiusStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_radiusStop" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->radiusStop(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusStop__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_radiusStop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radiusStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->radiusStop();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusStop__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InflateStar_radiusStop",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radiusStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_radiusStop" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InflateStar_radiusStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_radiusStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->radiusStop(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusStop__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_radiusStop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radiusStop" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InflateStar_radiusStop" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_radiusStop" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->radiusStop((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusStop(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_InflateStar_radiusStop__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InflateStar_radiusStop__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InflateStar_radiusStop__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InflateStar_radiusStop__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_radiusStop'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::radiusStop(double)\n"
    "    Gyoto::Astrobj::InflateStar::radiusStop() const\n"
    "    Gyoto::Astrobj::InflateStar::radiusStop(double,std::string const &)\n"
    "    Gyoto::Astrobj::InflateStar::radiusStop(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InflateStar_radius_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_radius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->radius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radius_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_radius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->radius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radius_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InflateStar_radius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_radius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->radius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radius_SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InflateStar_radius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_radius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InflateStar_radius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_radius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->radius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_InflateStar_radius_SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InflateStar_radius_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InflateStar_radius_SWIG_0_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InflateStar_radius_SWIG_0_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_radius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    radius() const\n"
    "    radius(double)\n"
    "    radius(std::string const &) const\n"
    "    radius(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusAt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InflateStar_radiusAt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radiusAt" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_radiusAt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->radiusAt(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusAt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InflateStar_radiusAt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radiusAt" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_radiusAt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InflateStar_radiusAt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_radiusAt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->radiusAt(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusAt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:InflateStar_radiusAt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_radiusAt" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_radiusAt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InflateStar_radiusAt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_radiusAt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InflateStar_radiusAt" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_radiusAt" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->radiusAt(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_radiusAt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InflateStar_radiusAt__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InflateStar_radiusAt__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InflateStar_radiusAt__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_radiusAt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::radiusAt(double) const\n"
    "    Gyoto::Astrobj::InflateStar::radiusAt(double,std::string const &) const\n"
    "    Gyoto::Astrobj::InflateStar::radiusAt(double,std::string const &,std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InflateStar_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_className" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::InflateStar const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InflateStar_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_className_l" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::InflateStar const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_Impact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:InflateStar_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InflateStar_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InflateStar_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InflateStar_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_Impact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InflateStar_Impact",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InflateStar_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InflateStar_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_Impact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InflateStar_Impact__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InflateStar_Impact__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_Impact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::Impact(Gyoto::Photon *,size_t,Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Astrobj::InflateStar::Impact(Gyoto::Photon *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InflateStar_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:InflateStar_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InflateStar_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InflateStar_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::InflateStar *arg1 = (Gyoto::Astrobj::InflateStar *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:InflateStar_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InflateStar_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::InflateStar const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::InflateStar * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InflateStar_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InflateStar_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InflateStar_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InflateStar_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::InflateStar const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InflateStar_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InflateStar_emission__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_InflateStar_emission__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InflateStar_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::InflateStar::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_InflateStar__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::InflateStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InflateStar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InflateStar" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::InflateStar *)new_Gyoto_Astrobj_InflateStar__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__InflateStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InflateStar__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::InflateStar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InflateStar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InflateStar" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::InflateStar *)new_Gyoto_Astrobj_InflateStar__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__InflateStar, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InflateStar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InflateStar__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__InflateStar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InflateStar__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InflateStar__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InflateStar__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InflateStar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::InflateStar::InflateStar()\n"
    "    Gyoto::Astrobj::InflateStar::InflateStar(Gyoto::Astrobj::InflateStar const &)\n"
    "    Gyoto::Astrobj::InflateStar::InflateStar(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::InflateStar::InflateStar(long)\n");
  return 0;
}


SWIGINTERN PyObject *InflateStar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__InflateStar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Torus_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Torus_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Torus_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Torus::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Torus_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Torus const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Torus_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Torus_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Torus_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Torus::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Torus_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Torus_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Torus_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Torus const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Torus_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Torus_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Torus_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Torus::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Torus::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Torus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Torus")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Torus *)new Gyoto::Astrobj::Torus();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Torus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Torus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Torus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Torus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Torus,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Torus" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Torus" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Torus *)new Gyoto::Astrobj::Torus((Gyoto::Astrobj::Torus const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Torus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Torus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Torus *)((Gyoto::Astrobj::Torus const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Torus, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Torus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Torus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Torus" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_largeRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_largeRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Torus const *)arg1)->largeRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_largeRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_largeRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Torus_largeRadius" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Torus const *)arg1)->largeRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_smallRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_smallRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_smallRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Torus const *)arg1)->smallRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_smallRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_smallRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_smallRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Torus_smallRadius" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Torus const *)arg1)->smallRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_largeRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_largeRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Torus_largeRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->largeRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_smallRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_smallRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_smallRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Torus_smallRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->smallRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_largeRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Torus_largeRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Torus_largeRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Torus_largeRadius" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->largeRadius(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_largeRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Torus_largeRadius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Torus_largeRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Torus_largeRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Torus_largeRadius__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Torus_largeRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Torus::largeRadius() const\n"
    "    Gyoto::Astrobj::Torus::largeRadius(std::string) const\n"
    "    Gyoto::Astrobj::Torus::largeRadius(double)\n"
    "    Gyoto::Astrobj::Torus::largeRadius(double,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Torus_smallRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Torus_smallRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_smallRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Torus_smallRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Torus_smallRadius" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->smallRadius(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_smallRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Torus_smallRadius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Torus_smallRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Torus_smallRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Torus_smallRadius__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Torus_smallRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Torus::smallRadius() const\n"
    "    Gyoto::Astrobj::Torus::smallRadius(std::string) const\n"
    "    Gyoto::Astrobj::Torus::smallRadius(double)\n"
    "    Gyoto::Astrobj::Torus::smallRadius(double,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Torus_spectrum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_spectrum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_spectrum" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrum::Generic" "*'");
    }
    Gyoto::Spectrum::Generic * kp=reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(kp);
  }
  {
    try {
      (arg1)->spectrum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_spectrum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_spectrum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_spectrum" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Torus const *)arg1)->spectrum();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_spectrum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Torus_spectrum__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Torus_spectrum__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Torus_spectrum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Torus::spectrum(Gyoto::SmartPointer< Gyoto::Spectrum::Generic >)\n"
    "    Gyoto::Astrobj::Torus::spectrum() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Torus_opacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_opacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_opacity" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrum::Generic" "*'");
    }
    Gyoto::Spectrum::Generic * kp=reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(kp);
  }
  {
    try {
      (arg1)->opacity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_opacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_opacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_opacity" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Torus const *)arg1)->opacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_opacity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Torus_opacity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Torus_opacity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Torus_opacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Torus::opacity(Gyoto::SmartPointer< Gyoto::Spectrum::Generic >)\n"
    "    Gyoto::Astrobj::Torus::opacity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Torus_rMax__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Torus const *)arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_rMax__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Torus_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Torus_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)(arg1)->rMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_rMax__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Torus_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Torus_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Torus const *)arg1)->rMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_rMax__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Torus_rMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_rMax__SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Torus_rMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Torus_rMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Torus_rMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Torus_rMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->rMax(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_rMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Torus_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    try {
      result = (double)(arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_rMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Torus_rMax__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Torus_rMax__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Torus_rMax__SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Torus_rMax__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Torus_rMax__SWIG_0_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Torus_rMax__SWIG_0_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Torus_rMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rMax() const\n"
    "    rMax(std::string const &)\n"
    "    rMax(std::string const &) const\n"
    "    rMax(double)\n"
    "    rMax(double,std::string const &)\n"
    "    Gyoto::Astrobj::Torus::rMax()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Torus___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Torus_deltaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Torus *arg1 = (Gyoto::Astrobj::Torus *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Torus_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Torus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Torus_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Torus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Torus * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Torus_deltaMax" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      result = (double)(arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Torus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Torus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Torus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Torus" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Torus *)new_Gyoto_Astrobj_Torus__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Torus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Torus__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Torus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Torus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Torus" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Torus *)new_Gyoto_Astrobj_Torus__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Torus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Torus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Torus__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Torus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Torus__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Torus__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Torus__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Torus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Torus::Torus()\n"
    "    Gyoto::Astrobj::Torus::Torus(Gyoto::Astrobj::Torus const &)\n"
    "    Gyoto::Astrobj::Torus::Torus(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Torus::Torus(long)\n");
  return 0;
}


SWIGINTERN PyObject *Torus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Torus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_OscilTorus_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OscilTorus_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_OscilTorus_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::OscilTorus::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_OscilTorus_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::OscilTorus const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_OscilTorus_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OscilTorus_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_OscilTorus_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::OscilTorus::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_OscilTorus_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OscilTorus_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::OscilTorus const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OscilTorus_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::OscilTorus::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_OscilTorus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_OscilTorus")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::OscilTorus *)new Gyoto::Astrobj::OscilTorus();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OscilTorus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::OscilTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OscilTorus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OscilTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OscilTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::OscilTorus *)new Gyoto::Astrobj::OscilTorus((Gyoto::Astrobj::OscilTorus const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OscilTorus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OscilTorus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OscilTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::OscilTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::OscilTorus *)((Gyoto::Astrobj::OscilTorus const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_largeRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_largeRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_largeRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->largeRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_largeRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_largeRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::OscilTorus const *)arg1)->largeRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_largeRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OscilTorus_largeRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_largeRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OscilTorus_largeRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_largeRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->largeRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_largeRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_largeRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OscilTorus_largeRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_largeRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::OscilTorus const *)arg1)->largeRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_largeRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_largeRadius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OscilTorus_largeRadius__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OscilTorus_largeRadius__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OscilTorus_largeRadius__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_largeRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::largeRadius(double)\n"
    "    Gyoto::Astrobj::OscilTorus::largeRadius() const\n"
    "    Gyoto::Astrobj::OscilTorus::largeRadius(double,std::string const &)\n"
    "    Gyoto::Astrobj::OscilTorus::largeRadius(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_mode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_mode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_mode" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_mode" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    try {
      (arg1)->mode(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_mode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_mode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_mode" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (unsigned long)((Gyoto::Astrobj::OscilTorus const *)arg1)->mode();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_mode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_mode__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OscilTorus_mode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_mode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::mode(unsigned long)\n"
    "    Gyoto::Astrobj::OscilTorus::mode() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_polyCst__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_polyCst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_polyCst" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_polyCst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->polyCst(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_polyCst__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_polyCst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_polyCst" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::OscilTorus const *)arg1)->polyCst();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_polyCst(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_polyCst__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OscilTorus_polyCst__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_polyCst'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::polyCst(double)\n"
    "    Gyoto::Astrobj::OscilTorus::polyCst() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_polyIndex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_polyIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_polyIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_polyIndex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->polyIndex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_polyIndex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_polyIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_polyIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::OscilTorus const *)arg1)->polyIndex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_polyIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_polyIndex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OscilTorus_polyIndex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_polyIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::polyIndex(double)\n"
    "    Gyoto::Astrobj::OscilTorus::polyIndex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_centralDensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_centralDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_centralDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_centralDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->centralDensity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_centralDensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_centralDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_centralDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::OscilTorus const *)arg1)->centralDensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_centralDensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_centralDensity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OscilTorus_centralDensity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_centralDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::centralDensity(double)\n"
    "    Gyoto::Astrobj::OscilTorus::centralDensity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_perturbKind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_perturbKind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_perturbKind" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OscilTorus_perturbKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_perturbKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->perturbKind((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_perturbKind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_perturbKind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_perturbKind" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::OscilTorus const *)arg1)->perturbKind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_perturbKind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_perturbKind__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OscilTorus_perturbKind__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_perturbKind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::perturbKind(std::string const &)\n"
    "    Gyoto::Astrobj::OscilTorus::perturbKind() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_perturbIntens__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_perturbIntens",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_perturbIntens" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_perturbIntens" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->perturbIntens(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_perturbIntens__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_perturbIntens",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_perturbIntens" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::OscilTorus const *)arg1)->perturbIntens();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_perturbIntens(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_perturbIntens__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OscilTorus_perturbIntens__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_perturbIntens'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::perturbIntens(double)\n"
    "    Gyoto::Astrobj::OscilTorus::perturbIntens() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_emittingArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_emittingArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_emittingArea" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OscilTorus_emittingArea" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_emittingArea" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->emittingArea((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_emittingArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_emittingArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_emittingArea" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::OscilTorus const *)arg1)->emittingArea();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_emittingArea(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_emittingArea__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OscilTorus_emittingArea__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_emittingArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::emittingArea(std::string const &)\n"
    "    Gyoto::Astrobj::OscilTorus::emittingArea() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::OscilTorus const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_OscilTorus_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OscilTorus_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OscilTorus_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    Gyoto::Astrobj::OscilTorus::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OscilTorus___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OscilTorus_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_emission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:OscilTorus_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OscilTorus_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OscilTorus_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "OscilTorus_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "OscilTorus_emission" "', argument " "5"" of type '" "double const *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (double)((Gyoto::Astrobj::OscilTorus const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const *)arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_setParameters" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OscilTorus_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_updateCachedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OscilTorus_updateCachedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_updateCachedValues" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  {
    try {
      (arg1)->updateCachedValues();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_computeXbYb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OscilTorus_computeXbYb",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_computeXbYb" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OscilTorus_computeXbYb" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OscilTorus_computeXbYb" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_computeXbYb" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "OscilTorus_computeXbYb" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OscilTorus_computeXbYb" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      (arg1)->computeXbYb((double const *)arg2,*arg3,*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OscilTorus_tell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::OscilTorus *arg1 = (Gyoto::Astrobj::OscilTorus *) 0 ;
  Gyoto::Hook::Teller *arg2 = (Gyoto::Hook::Teller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OscilTorus_tell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OscilTorus_tell" "', argument " "1"" of type '" "Gyoto::Astrobj::OscilTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::OscilTorus * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Hook__Teller, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OscilTorus_tell" "', argument " "2"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Hook::Teller * >(argp2);
  {
    try {
      (arg1)->tell(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OscilTorus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::OscilTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OscilTorus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OscilTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::OscilTorus *)new_Gyoto_Astrobj_OscilTorus__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OscilTorus__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::OscilTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OscilTorus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OscilTorus" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::OscilTorus *)new_Gyoto_Astrobj_OscilTorus__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OscilTorus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_OscilTorus__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OscilTorus__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OscilTorus__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OscilTorus__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OscilTorus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::OscilTorus::OscilTorus()\n"
    "    Gyoto::Astrobj::OscilTorus::OscilTorus(Gyoto::Astrobj::OscilTorus const &)\n"
    "    Gyoto::Astrobj::OscilTorus::OscilTorus(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::OscilTorus::OscilTorus(long)\n");
  return 0;
}


SWIGINTERN PyObject *OscilTorus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__OscilTorus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PageThorneDisk_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PageThorneDisk_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PageThorneDisk_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::PageThorneDisk::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PageThorneDisk_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PageThorneDisk_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PageThorneDisk_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::PageThorneDisk::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PageThorneDisk_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PageThorneDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PageThorneDisk const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PageThorneDisk_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PageThorneDisk_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PageThorneDisk_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PageThorneDisk::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::PageThorneDisk::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PageThorneDisk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PageThorneDisk")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::PageThorneDisk *)new Gyoto::Astrobj::PageThorneDisk();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PageThorneDisk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PageThorneDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PageThorneDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PageThorneDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PageThorneDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PageThorneDisk *)new Gyoto::Astrobj::PageThorneDisk((Gyoto::Astrobj::PageThorneDisk const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PageThorneDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PageThorneDisk *)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PageThorneDisk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PageThorneDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PageThorneDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PageThorneDisk const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PageThorneDisk_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PageThorneDisk_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PageThorneDisk_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PageThorneDisk_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PageThorneDisk_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PageThorneDisk_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::PageThorneDisk::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_mdot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PageThorneDisk_mdot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_mdot" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PageThorneDisk_mdot" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->mdot(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_mdot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_mdot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_mdot" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->mdot();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_mdot(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PageThorneDisk_mdot__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PageThorneDisk_mdot__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PageThorneDisk_mdot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PageThorneDisk::mdot(double)\n"
    "    Gyoto::Astrobj::PageThorneDisk::mdot() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_uniFlux__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PageThorneDisk_uniFlux",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_uniFlux" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PageThorneDisk_uniFlux" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->uniFlux(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_uniFlux__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_uniFlux",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_uniFlux" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->uniFlux();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_uniFlux(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PageThorneDisk_uniFlux__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PageThorneDisk_uniFlux__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PageThorneDisk_uniFlux'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PageThorneDisk::uniFlux(bool)\n"
    "    Gyoto::Astrobj::PageThorneDisk::uniFlux() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PageThorneDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PageThorneDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PageThorneDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PageThorneDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PageThorneDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PageThorneDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:PageThorneDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PageThorneDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PageThorneDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::PageThorneDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:PageThorneDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PageThorneDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PageThorneDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::PageThorneDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PageThorneDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PageThorneDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PageThorneDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PageThorneDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PageThorneDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PageThorneDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PageThorneDisk_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PageThorneDisk_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_PageThorneDisk_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_PageThorneDisk_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_PageThorneDisk_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_PageThorneDisk_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PageThorneDisk_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::PageThorneDisk::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::PageThorneDisk::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_bolometricEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PageThorneDisk_bolometricEmission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_bolometricEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PageThorneDisk_bolometricEmission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PageThorneDisk_bolometricEmission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PageThorneDisk const *)arg1)->bolometricEmission(arg2,arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_processHitQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  Gyoto::Astrobj::Properties *arg6 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:PageThorneDisk_processHitQuantities",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_processHitQuantities" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PageThorneDisk_processHitQuantities" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PageThorneDisk_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PageThorneDisk_processHitQuantities" "', argument " "4"" of type '" "double const *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PageThorneDisk_processHitQuantities" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PageThorneDisk_processHitQuantities" "', argument " "6"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp6);
  {
    try {
      ((Gyoto::Astrobj::PageThorneDisk const *)arg1)->processHitQuantities(arg2,(Gyoto::state_t const &)*arg3,(double const *)arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_getDefaultQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Quantity_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PageThorneDisk_getDefaultQuantities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_getDefaultQuantities" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  {
    try {
      result = (Gyoto::Quantity_t)(arg1)->getDefaultQuantities();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_tell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  Gyoto::Hook::Teller *arg2 = (Gyoto::Hook::Teller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PageThorneDisk_tell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_tell" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Hook__Teller, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PageThorneDisk_tell" "', argument " "2"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Hook::Teller * >(argp2);
  {
    try {
      (arg1)->tell(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PageThorneDisk_radiativeQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PageThorneDisk *arg1 = (Gyoto::Astrobj::PageThorneDisk *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  Eigen::Matrix4d *arg6 = (Eigen::Matrix4d *) 0 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  double arg9 ;
  Gyoto::state_t *arg10 = 0 ;
  double *arg11 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 = SWIG_OLDOBJ ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:PageThorneDisk_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PageThorneDisk_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::PageThorneDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PageThorneDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PageThorneDisk_radiativeQ" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PageThorneDisk_radiativeQ" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PageThorneDisk_radiativeQ" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PageThorneDisk_radiativeQ" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PageThorneDisk_radiativeQ" "', argument " "6"" of type '" "Eigen::Matrix4d *""'"); 
  }
  arg6 = reinterpret_cast< Eigen::Matrix4d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PageThorneDisk_radiativeQ" "', argument " "7"" of type '" "double const *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_size_t(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PageThorneDisk_radiativeQ" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PageThorneDisk_radiativeQ" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res10 = swig::asptr(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "PageThorneDisk_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PageThorneDisk_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg10 = ptr;
  }
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "PageThorneDisk_radiativeQ" "', argument " "11"" of type '" "double const *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  {
    try {
      ((Gyoto::Astrobj::PageThorneDisk const *)arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,(Gyoto::state_t const &)*arg10,(double const *)arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res10)) delete arg10;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res10)) delete arg10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PageThorneDisk__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PageThorneDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PageThorneDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PageThorneDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PageThorneDisk *)new_Gyoto_Astrobj_PageThorneDisk__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PageThorneDisk__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PageThorneDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PageThorneDisk",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PageThorneDisk" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::PageThorneDisk *)new_Gyoto_Astrobj_PageThorneDisk__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PageThorneDisk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PageThorneDisk__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PageThorneDisk__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PageThorneDisk__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PageThorneDisk__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PageThorneDisk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PageThorneDisk::PageThorneDisk()\n"
    "    Gyoto::Astrobj::PageThorneDisk::PageThorneDisk(Gyoto::Astrobj::PageThorneDisk const &)\n"
    "    Gyoto::Astrobj::PageThorneDisk::PageThorneDisk(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::PageThorneDisk::PageThorneDisk(long)\n");
  return 0;
}


SWIGINTERN PyObject *PageThorneDisk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__PageThorneDisk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThinDiskPL_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskPL_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskPL_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::ThinDiskPL::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskPL_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThinDiskPL_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskPL_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskPL_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::ThinDiskPL::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskPL_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskPL_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskPL_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskPL_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDiskPL const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskPL_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskPL_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskPL_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskPL::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::ThinDiskPL::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskPL_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskPL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThinDiskPL")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskPL *)new Gyoto::Astrobj::ThinDiskPL();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskPL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskPL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskPL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskPL" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThinDiskPL" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskPL *)new Gyoto::Astrobj::ThinDiskPL((Gyoto::Astrobj::ThinDiskPL const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskPL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskPL_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskPL *)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThinDiskPL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThinDiskPL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThinDiskPL" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_Slope__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskPL_Slope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_Slope" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskPL_Slope" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->Slope(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_Slope__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskPL_Slope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_Slope" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->Slope();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_Slope(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskPL_Slope__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskPL_Slope__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskPL_Slope'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskPL::Slope(double)\n"
    "    Gyoto::Astrobj::ThinDiskPL::Slope() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_Tinner__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskPL_Tinner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_Tinner" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskPL_Tinner" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->Tinner(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_Tinner__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskPL_Tinner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_Tinner" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->Tinner();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_Tinner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskPL_Tinner__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskPL_Tinner__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskPL_Tinner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskPL::Tinner(double)\n"
    "    Gyoto::Astrobj::ThinDiskPL::Tinner() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThinDiskPL_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskPL_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskPL_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThinDiskPL_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskPL_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskPL_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ThinDiskPL_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThinDiskPL_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ThinDiskPL_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskPL_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::ThinDiskPL const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ThinDiskPL_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThinDiskPL_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ThinDiskPL_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskPL_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::ThinDiskPL const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThinDiskPL_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskPL_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskPL_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskPL *arg1 = (Gyoto::Astrobj::ThinDiskPL *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThinDiskPL_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskPL_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskPL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskPL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskPL_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskPL_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskPL_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskPL const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskPL_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThinDiskPL_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThinDiskPL_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_ThinDiskPL_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_ThinDiskPL_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ThinDiskPL_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_ThinDiskPL_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskPL_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::ThinDiskPL::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::ThinDiskPL::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskPL__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskPL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskPL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskPL" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskPL *)new_Gyoto_Astrobj_ThinDiskPL__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskPL__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskPL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskPL",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThinDiskPL" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskPL *)new_Gyoto_Astrobj_ThinDiskPL__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskPL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThinDiskPL__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThinDiskPL__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskPL__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskPL__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThinDiskPL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskPL::ThinDiskPL()\n"
    "    Gyoto::Astrobj::ThinDiskPL::ThinDiskPL(Gyoto::Astrobj::ThinDiskPL const &)\n"
    "    Gyoto::Astrobj::ThinDiskPL::ThinDiskPL(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::ThinDiskPL::ThinDiskPL(long)\n");
  return 0;
}


SWIGINTERN PyObject *ThinDiskPL_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__ThinDiskPL, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PolishDoughnut_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PolishDoughnut_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PolishDoughnut_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::PolishDoughnut::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PolishDoughnut_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PolishDoughnut_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PolishDoughnut_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::PolishDoughnut::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PolishDoughnut const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolishDoughnut_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::PolishDoughnut::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PolishDoughnut_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PolishDoughnut_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::PolishDoughnut const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PolishDoughnut__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PolishDoughnut")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::PolishDoughnut *)new Gyoto::Astrobj::PolishDoughnut();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PolishDoughnut__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PolishDoughnut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolishDoughnut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PolishDoughnut" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PolishDoughnut" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PolishDoughnut *)new Gyoto::Astrobj::PolishDoughnut((Gyoto::Astrobj::PolishDoughnut const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PolishDoughnut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PolishDoughnut *)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PolishDoughnut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PolishDoughnut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PolishDoughnut" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_getL0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_getL0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_getL0" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->getL0();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut__lambda__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut__lambda",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut__lambda" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->lambda();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut__lambda__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut__lambda",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut__lambda" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut__lambda" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->lambda(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut__lambda(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut__lambda__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut__lambda__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut__lambda'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::lambda() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::lambda(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_centralEnthalpyPerUnitVolume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->centralEnthalpyPerUnitVolume();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_centralEnthalpyPerUnitVolume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->centralEnthalpyPerUnitVolume((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_centralEnthalpyPerUnitVolume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->centralEnthalpyPerUnitVolume(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PolishDoughnut_centralEnthalpyPerUnitVolume",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_centralEnthalpyPerUnitVolume" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->centralEnthalpyPerUnitVolume(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralEnthalpyPerUnitVolume(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PolishDoughnut_centralEnthalpyPerUnitVolume__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_centralEnthalpyPerUnitVolume'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::centralEnthalpyPerUnitVolume() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::centralEnthalpyPerUnitVolume(std::string const &) const\n"
    "    Gyoto::Astrobj::PolishDoughnut::centralEnthalpyPerUnitVolume(double)\n"
    "    Gyoto::Astrobj::PolishDoughnut::centralEnthalpyPerUnitVolume(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralTemp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_centralTemp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_centralTemp" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->centralTemp();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralTemp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_centralTemp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_centralTemp" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_centralTemp" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->centralTemp(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_centralTemp(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_centralTemp__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_centralTemp__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_centralTemp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::centralTemp() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::centralTemp(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_beta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_beta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_beta" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->beta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_beta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_beta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_beta" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_beta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->beta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_beta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_beta__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_beta__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_beta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::beta() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::beta(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_magnetizationParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_magnetizationParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_magnetizationParameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->magnetizationParameter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_magnetizationParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_magnetizationParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->magnetizationParameter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_magnetizationParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_magnetizationParameter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_magnetizationParameter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_magnetizationParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::magnetizationParameter(double)\n"
    "    Gyoto::Astrobj::PolishDoughnut::magnetizationParameter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_spectralOversampling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_spectralOversampling",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_spectralOversampling" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_spectralOversampling" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->spectralOversampling(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_spectralOversampling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_spectralOversampling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_spectralOversampling" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PolishDoughnut const *)arg1)->spectralOversampling();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_spectralOversampling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_spectralOversampling__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_spectralOversampling__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_spectralOversampling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::spectralOversampling(size_t)\n"
    "    Gyoto::Astrobj::PolishDoughnut::spectralOversampling() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_changeCusp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_changeCusp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_changeCusp" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->changeCusp();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_changeCusp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_changeCusp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_changeCusp" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_changeCusp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->changeCusp(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_changeCusp(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_changeCusp__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_changeCusp__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_changeCusp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::changeCusp() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::changeCusp(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_bremsstrahlung__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_bremsstrahlung",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_bremsstrahlung" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->bremsstrahlung();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_bremsstrahlung__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_bremsstrahlung",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_bremsstrahlung" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_bremsstrahlung" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->bremsstrahlung(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_bremsstrahlung(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_bremsstrahlung__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_bremsstrahlung__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_bremsstrahlung'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::bremsstrahlung() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::bremsstrahlung(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_angleAveraged__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_angleAveraged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_angleAveraged" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->angleAveraged();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_angleAveraged__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_angleAveraged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_angleAveraged" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_angleAveraged" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->angleAveraged(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_angleAveraged(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_angleAveraged__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_angleAveraged__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_angleAveraged'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::angleAveraged() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::angleAveraged(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_nonThermalDeltaExpo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_nonThermalDeltaExpo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_nonThermalDeltaExpo" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_nonThermalDeltaExpo" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_nonThermalDeltaExpo" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->nonThermalDeltaExpo((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_nonThermalDeltaExpo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_nonThermalDeltaExpo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_nonThermalDeltaExpo" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PolishDoughnut const *)arg1)->nonThermalDeltaExpo();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_nonThermalDeltaExpo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_nonThermalDeltaExpo__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolishDoughnut_nonThermalDeltaExpo__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_nonThermalDeltaExpo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::nonThermalDeltaExpo(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::PolishDoughnut::nonThermalDeltaExpo() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_angmomrinner__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_angmomrinner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_angmomrinner" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_angmomrinner" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_angmomrinner" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->angmomrinner((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_angmomrinner__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_angmomrinner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_angmomrinner" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PolishDoughnut const *)arg1)->angmomrinner();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_angmomrinner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_angmomrinner__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolishDoughnut_angmomrinner__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_angmomrinner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::angmomrinner(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::PolishDoughnut::angmomrinner() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_adafparams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_adafparams",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_adafparams" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_adafparams" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_adafparams" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->adafparams((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_adafparams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_adafparams",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_adafparams" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PolishDoughnut const *)arg1)->adafparams();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_adafparams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_adafparams__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolishDoughnut_adafparams__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_adafparams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::adafparams(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::PolishDoughnut::adafparams() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_adaf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_adaf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_adaf" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolishDoughnut_adaf" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->adaf(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_adaf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_adaf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_adaf" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->adaf();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_adaf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_adaf__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_adaf__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_adaf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::adaf(bool)\n"
    "    Gyoto::Astrobj::PolishDoughnut::adaf() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_setParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  Gyoto::Property *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PolishDoughnut_setParameter",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_setParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_setParameter" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_setParameter" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PolishDoughnut_setParameter" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_setParameter" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PolishDoughnut_setParameter" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_setParameter" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PolishDoughnut_setParameter" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolishDoughnut_setParameter" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->setParameter((Gyoto::Property const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_getWsurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_getWsurface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_getWsurface" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->getWsurface();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_getWcentre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_getWcentre",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_getWcentre" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->getWcentre();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_getRcusp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_getRcusp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_getRcusp" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->getRcusp();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_getRcentre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_getRcentre",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_getRcentre" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PolishDoughnut const *)arg1)->getRcentre();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolishDoughnut_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PolishDoughnut const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PolishDoughnut_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolishDoughnut_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PolishDoughnut_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    Gyoto::Astrobj::PolishDoughnut::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut_Impact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PolishDoughnut_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolishDoughnut_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PolishDoughnut_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PolishDoughnut_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolishDoughnut___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PolishDoughnut *arg1 = (Gyoto::Astrobj::PolishDoughnut *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolishDoughnut___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolishDoughnut___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::PolishDoughnut *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PolishDoughnut * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PolishDoughnut__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PolishDoughnut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolishDoughnut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PolishDoughnut" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PolishDoughnut *)new_Gyoto_Astrobj_PolishDoughnut__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PolishDoughnut__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PolishDoughnut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolishDoughnut",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PolishDoughnut" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::PolishDoughnut *)new_Gyoto_Astrobj_PolishDoughnut__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PolishDoughnut(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PolishDoughnut__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PolishDoughnut__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PolishDoughnut__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PolishDoughnut__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PolishDoughnut'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PolishDoughnut::PolishDoughnut()\n"
    "    Gyoto::Astrobj::PolishDoughnut::PolishDoughnut(Gyoto::Astrobj::PolishDoughnut const &)\n"
    "    Gyoto::Astrobj::PolishDoughnut::PolishDoughnut(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::PolishDoughnut::PolishDoughnut(long)\n");
  return 0;
}


SWIGINTERN PyObject *PolishDoughnut_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__PolishDoughnut, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThinDiskIronLine_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskIronLine_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskIronLine_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::ThinDiskIronLine::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskIronLine_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThinDiskIronLine_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskIronLine_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskIronLine_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::ThinDiskIronLine::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskIronLine_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskIronLine_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskIronLine_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskIronLine_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskIronLine_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskIronLine_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskIronLine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThinDiskIronLine")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskIronLine *)new Gyoto::Astrobj::ThinDiskIronLine();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskIronLine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskIronLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskIronLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskIronLine" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThinDiskIronLine" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskIronLine *)new Gyoto::Astrobj::ThinDiskIronLine((Gyoto::Astrobj::ThinDiskIronLine const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThinDiskIronLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThinDiskIronLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThinDiskIronLine" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskIronLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskIronLine_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskIronLine *)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThinDiskIronLine_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskIronLine_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThinDiskIronLine_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskIronLine_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ThinDiskIronLine_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThinDiskIronLine_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ThinDiskIronLine_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ThinDiskIronLine_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThinDiskIronLine_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ThinDiskIronLine_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThinDiskIronLine_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskIronLine_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThinDiskIronLine_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskIronLine_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThinDiskIronLine_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThinDiskIronLine_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_ThinDiskIronLine_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_ThinDiskIronLine_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ThinDiskIronLine_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_ThinDiskIronLine_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskIronLine_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDiskIronLine_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_PowerLawIndex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskIronLine_PowerLawIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_PowerLawIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_PowerLawIndex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->PowerLawIndex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_PowerLawIndex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskIronLine_PowerLawIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_PowerLawIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->PowerLawIndex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_PowerLawIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskIronLine_PowerLawIndex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskIronLine_PowerLawIndex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskIronLine_PowerLawIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::PowerLawIndex(double)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::PowerLawIndex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_LineFreq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskIronLine_LineFreq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->LineFreq(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_LineFreq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskIronLine_LineFreq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->LineFreq();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_LineFreq__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDiskIronLine_LineFreq",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_LineFreq" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->LineFreq(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_LineFreq__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskIronLine_LineFreq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskIronLine_LineFreq" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_LineFreq" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->LineFreq((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_LineFreq(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskIronLine_LineFreq__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskIronLine_LineFreq__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskIronLine_LineFreq__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThinDiskIronLine_LineFreq__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskIronLine_LineFreq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::LineFreq(double)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::LineFreq() const\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::LineFreq(double,std::string const &)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::LineFreq(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_CutRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskIronLine_CutRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->CutRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_CutRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskIronLine_CutRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->CutRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_CutRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDiskIronLine_CutRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_CutRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->CutRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_CutRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskIronLine *arg1 = (Gyoto::Astrobj::ThinDiskIronLine *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskIronLine_CutRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskIronLine const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskIronLine * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskIronLine_CutRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskIronLine_CutRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskIronLine const *)arg1)->CutRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskIronLine_CutRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskIronLine_CutRadius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskIronLine_CutRadius__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskIronLine_CutRadius__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThinDiskIronLine_CutRadius__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskIronLine_CutRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::CutRadius(double)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::CutRadius() const\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::CutRadius(double,std::string const &)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::CutRadius(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskIronLine__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskIronLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskIronLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskIronLine" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskIronLine *)new_Gyoto_Astrobj_ThinDiskIronLine__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskIronLine__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskIronLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskIronLine",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThinDiskIronLine" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskIronLine *)new_Gyoto_Astrobj_ThinDiskIronLine__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskIronLine(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThinDiskIronLine__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThinDiskIronLine__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskIronLine__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskIronLine__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThinDiskIronLine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::ThinDiskIronLine()\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::ThinDiskIronLine(Gyoto::Astrobj::ThinDiskIronLine const &)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::ThinDiskIronLine(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::ThinDiskIronLine::ThinDiskIronLine(long)\n");
  return 0;
}


SWIGINTERN PyObject *ThinDiskIronLine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__ThinDiskIronLine, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PatternDisk_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PatternDisk_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PatternDisk_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::PatternDisk::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PatternDisk_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::PatternDisk const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PatternDisk_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PatternDisk_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PatternDisk_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::PatternDisk::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PatternDisk_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PatternDisk const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::PatternDisk::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PatternDisk_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::PatternDisk const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDisk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PatternDisk")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::PatternDisk *)new Gyoto::Astrobj::PatternDisk();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDisk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PatternDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PatternDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PatternDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDisk *)new Gyoto::Astrobj::PatternDisk((Gyoto::Astrobj::PatternDisk const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDisk *)((Gyoto::Astrobj::PatternDisk const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PatternDisk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PatternDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PatternDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_innerRadius__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_innerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->innerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_innerRadius__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_innerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_innerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_innerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->innerRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_innerRadius__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_innerRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_innerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PatternDisk_innerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_innerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->innerRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_innerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_innerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_innerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->innerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_innerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_innerRadius__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_innerRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_innerRadius__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PatternDisk_innerRadius__SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_innerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    innerRadius() const\n"
    "    innerRadius(std::string const &) const\n"
    "    innerRadius(double,std::string const &)\n"
    "    Gyoto::Astrobj::PatternDisk::innerRadius(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_outerRadius__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_outerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->outerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_outerRadius__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_outerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_outerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_outerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->outerRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_outerRadius__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_outerRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_outerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PatternDisk_outerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_outerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->outerRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_outerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_outerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_outerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->outerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_outerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_outerRadius__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_outerRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_outerRadius__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PatternDisk_outerRadius__SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_outerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    outerRadius() const\n"
    "    outerRadius(std::string const &) const\n"
    "    outerRadius(double,std::string const &)\n"
    "    Gyoto::Astrobj::PatternDisk::outerRadius(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_patternVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_patternVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_patternVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_patternVelocity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->patternVelocity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_patternVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_patternVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_patternVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->patternVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_patternVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_patternVelocity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_patternVelocity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_patternVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::patternVelocity(double)\n"
    "    Gyoto::Astrobj::PatternDisk::patternVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_file" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_file" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PatternDisk const *)arg1)->file();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_file__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_file__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::file(std::string const &)\n"
    "    Gyoto::Astrobj::PatternDisk::file() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_fitsRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_fitsRead",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_fitsRead" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PatternDisk_fitsRead" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsRead(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_fitsWrite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_fitsWrite",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_fitsWrite" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PatternDisk_fitsWrite" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsWrite(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_setEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_setEmission",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_setEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_setEmission" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->setEmission(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_setVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_setVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_setVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_setVelocity" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->setVelocity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_radius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_radius" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->radius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyIntensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_copyIntensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyIntensity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PatternDisk_copyIntensity" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyIntensity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyIntensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_copyIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyIntensity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyIntensity((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyIntensity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_copyIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      (arg1)->copyIntensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyIntensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_copyIntensity__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_copyIntensity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PatternDisk_copyIntensity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_copyIntensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::copyIntensity(double const *const,size_t const [3])\n"
    "    Gyoto::Astrobj::PatternDisk::copyIntensity(double const *const)\n"
    "    Gyoto::Astrobj::PatternDisk::copyIntensity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_getIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_getIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_getIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::PatternDisk const *)arg1)->getIntensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_getIntensityNaxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  size_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_getIntensityNaxes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_getIntensityNaxes" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_getIntensityNaxes" "', argument " "2"" of type '" "size_t [3]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  {
    try {
      ((Gyoto::Astrobj::PatternDisk const *)arg1)->getIntensityNaxes(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyOpacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_copyOpacity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyOpacity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyOpacity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PatternDisk_copyOpacity" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyOpacity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyOpacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_copyOpacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyOpacity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyOpacity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyOpacity((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyOpacity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_copyOpacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyOpacity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      (arg1)->copyOpacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyOpacity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_copyOpacity__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_copyOpacity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PatternDisk_copyOpacity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_copyOpacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::copyOpacity(double const *const,size_t const [3])\n"
    "    Gyoto::Astrobj::PatternDisk::copyOpacity(double const *const)\n"
    "    Gyoto::Astrobj::PatternDisk::copyOpacity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_opacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_opacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_opacity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::PatternDisk const *)arg1)->opacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_copyVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyVelocity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PatternDisk_copyVelocity" "', argument " "3"" of type '" "size_t const [2]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyVelocity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_copyVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyVelocity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyVelocity((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_copyVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      (arg1)->copyVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_copyVelocity__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_copyVelocity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PatternDisk_copyVelocity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_copyVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::copyVelocity(double const *const,size_t const [2])\n"
    "    Gyoto::Astrobj::PatternDisk::copyVelocity(double const *const)\n"
    "    Gyoto::Astrobj::PatternDisk::copyVelocity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_getVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_getVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::PatternDisk const *)arg1)->getVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyGridRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_copyGridRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyGridRadius" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDisk_copyGridRadius" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridRadius((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyGridRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_copyGridRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDisk_copyGridRadius" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridRadius((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyGridRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_copyGridRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_copyGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      (arg1)->copyGridRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_copyGridRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_copyGridRadius__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDisk_copyGridRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PatternDisk_copyGridRadius__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_copyGridRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::copyGridRadius(double const *const,size_t)\n"
    "    Gyoto::Astrobj::PatternDisk::copyGridRadius(double const *const)\n"
    "    Gyoto::Astrobj::PatternDisk::copyGridRadius()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_getGridRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_getGridRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_getGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::PatternDisk const *)arg1)->getGridRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_repeatPhi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_repeatPhi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_repeatPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_repeatPhi" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->repeatPhi(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_repeatPhi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_repeatPhi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_repeatPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PatternDisk const *)arg1)->repeatPhi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_repeatPhi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_repeatPhi__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_repeatPhi__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_repeatPhi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::repeatPhi(size_t)\n"
    "    Gyoto::Astrobj::PatternDisk::repeatPhi() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_nu0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_nu0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_nu0" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_nu0" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->nu0(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_nu0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_nu0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_nu0" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->nu0();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_nu0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_nu0__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_nu0__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_nu0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::nu0(double)\n"
    "    Gyoto::Astrobj::PatternDisk::nu0() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_dnu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_dnu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_dnu" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_dnu" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dnu(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_dnu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_dnu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_dnu" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->dnu();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_dnu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_dnu__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_dnu__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_dnu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::dnu(double)\n"
    "    Gyoto::Astrobj::PatternDisk::dnu() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_phimin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_phimin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_phimin" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_phimin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->phimin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_phimin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_phimin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_phimin" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->phimin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_phimin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_phimin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_phimin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_phimin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::phimin(double)\n"
    "    Gyoto::Astrobj::PatternDisk::phimin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_phimax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDisk_phimax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_phimax" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_phimax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->phimax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_phimax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDisk_phimax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_phimax" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->phimax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_phimax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_phimax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDisk_phimax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_phimax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::phimax(double)\n"
    "    Gyoto::Astrobj::PatternDisk::phimax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PatternDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PatternDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:PatternDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PatternDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PatternDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::PatternDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:PatternDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PatternDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PatternDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::PatternDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PatternDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PatternDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PatternDisk_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PatternDisk_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_PatternDisk_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_PatternDisk_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_PatternDisk_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_PatternDisk_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::PatternDisk::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::PatternDisk::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDisk_transmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PatternDisk_transmission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_transmission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDisk_transmission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDisk_transmission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDisk_transmission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDisk_transmission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDisk const *)arg1)->transmission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_getVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDisk *arg1 = (Gyoto::Astrobj::PatternDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PatternDisk_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDisk_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDisk * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDisk_getVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDisk_getVelocity__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_PatternDisk_getVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDisk_getVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::getVelocity() const\n"
    "    Gyoto::Astrobj::PatternDisk::getVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PatternDisk__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PatternDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PatternDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDisk *)new_Gyoto_Astrobj_PatternDisk__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDisk__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PatternDisk",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PatternDisk" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDisk *)new_Gyoto_Astrobj_PatternDisk__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDisk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PatternDisk__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PatternDisk__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PatternDisk__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PatternDisk__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PatternDisk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDisk::PatternDisk()\n"
    "    Gyoto::Astrobj::PatternDisk::PatternDisk(Gyoto::Astrobj::PatternDisk const &)\n"
    "    Gyoto::Astrobj::PatternDisk::PatternDisk(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::PatternDisk::PatternDisk(long)\n");
  return 0;
}


SWIGINTERN PyObject *PatternDisk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__PatternDisk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PatternDiskBB_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PatternDiskBB_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PatternDiskBB_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::PatternDiskBB::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDiskBB_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PatternDiskBB_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PatternDiskBB_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PatternDiskBB_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::PatternDiskBB::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDiskBB_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PatternDiskBB_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDiskBB_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDiskBB_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::PatternDiskBB const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDiskBB_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PatternDiskBB_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDiskBB_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDiskBB::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::PatternDiskBB::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDiskBB_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDiskBB__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PatternDiskBB")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::PatternDiskBB *)new Gyoto::Astrobj::PatternDiskBB();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDiskBB__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDiskBB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PatternDiskBB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PatternDiskBB" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PatternDiskBB" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDiskBB *)new Gyoto::Astrobj::PatternDiskBB((Gyoto::Astrobj::PatternDiskBB const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDiskBB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDiskBB_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDiskBB *)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PatternDiskBB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PatternDiskBB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PatternDiskBB" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_spectralEmission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatternDiskBB_spectralEmission",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_spectralEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->spectralEmission();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_spectralEmission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PatternDiskBB_spectralEmission",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_spectralEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDiskBB_spectralEmission" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->spectralEmission(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_spectralEmission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PatternDiskBB_spectralEmission__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PatternDiskBB_spectralEmission__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDiskBB_spectralEmission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDiskBB::spectralEmission() const\n"
    "    Gyoto::Astrobj::PatternDiskBB::spectralEmission(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PatternDiskBB_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDiskBB_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDiskBB_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PatternDiskBB_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDiskBB_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDiskBB_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:PatternDiskBB_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PatternDiskBB_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PatternDiskBB_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDiskBB_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::PatternDiskBB const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:PatternDiskBB_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PatternDiskBB_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PatternDiskBB_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDiskBB_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::PatternDiskBB const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PatternDiskBB_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDiskBB_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDiskBB_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::PatternDiskBB *arg1 = (Gyoto::Astrobj::PatternDiskBB *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PatternDiskBB_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatternDiskBB_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::PatternDiskBB const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::PatternDiskBB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PatternDiskBB_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PatternDiskBB_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternDiskBB_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::PatternDiskBB const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatternDiskBB_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PatternDiskBB_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PatternDiskBB_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_PatternDiskBB_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_PatternDiskBB_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_PatternDiskBB_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_PatternDiskBB_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PatternDiskBB_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::PatternDiskBB::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::PatternDiskBB::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PatternDiskBB__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDiskBB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PatternDiskBB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PatternDiskBB" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDiskBB *)new_Gyoto_Astrobj_PatternDiskBB__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDiskBB__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::PatternDiskBB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PatternDiskBB",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PatternDiskBB" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::PatternDiskBB *)new_Gyoto_Astrobj_PatternDiskBB__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatternDiskBB(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PatternDiskBB__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PatternDiskBB__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PatternDiskBB__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PatternDiskBB__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PatternDiskBB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::PatternDiskBB::PatternDiskBB()\n"
    "    Gyoto::Astrobj::PatternDiskBB::PatternDiskBB(Gyoto::Astrobj::PatternDiskBB const &)\n"
    "    Gyoto::Astrobj::PatternDiskBB::PatternDiskBB(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::PatternDiskBB::PatternDiskBB(long)\n");
  return 0;
}


SWIGINTERN PyObject *PatternDiskBB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__PatternDiskBB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DynamicalDisk_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DynamicalDisk_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DynamicalDisk_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::DynamicalDisk::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_DynamicalDisk_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DynamicalDisk_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DynamicalDisk_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::DynamicalDisk::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicalDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DynamicalDisk const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicalDisk_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::DynamicalDisk::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DynamicalDisk")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk *)new Gyoto::Astrobj::DynamicalDisk();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DynamicalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DynamicalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk *)new Gyoto::Astrobj::DynamicalDisk((Gyoto::Astrobj::DynamicalDisk const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk *)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DynamicalDisk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DynamicalDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_file" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DynamicalDisk const *)arg1)->file();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_file" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicalDisk_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk_file__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicalDisk_file__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk_file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk::file() const\n"
    "    Gyoto::Astrobj::DynamicalDisk::file(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_tinit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk_tinit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_tinit" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk_tinit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tinit(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_tinit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk_tinit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_tinit" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->tinit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_tinit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk_tinit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk_tinit__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk_tinit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk::tinit(double)\n"
    "    Gyoto::Astrobj::DynamicalDisk::tinit() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_dt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk_dt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_dt" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk_dt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dt(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_dt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk_dt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_dt" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->dt();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_dt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk_dt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk_dt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk_dt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk::dt(double)\n"
    "    Gyoto::Astrobj::DynamicalDisk::dt() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DynamicalDisk_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicalDisk_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicalDisk_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::DynamicalDisk const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DynamicalDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:DynamicalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DynamicalDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::DynamicalDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DynamicalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DynamicalDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::DynamicalDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DynamicalDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DynamicalDisk_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DynamicalDisk_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_DynamicalDisk_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_DynamicalDisk_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_DynamicalDisk_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_DynamicalDisk_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::DynamicalDisk::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::DynamicalDisk::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_getVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DynamicalDisk_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_getVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk *arg1 = (Gyoto::Astrobj::DynamicalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk_getVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::DynamicalDisk const *)arg1)->getVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk_getVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk_getVelocity__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_DynamicalDisk_getVelocity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk_getVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk::getVelocity(double const [4],double [4])\n"
    "    Gyoto::Astrobj::DynamicalDisk::getVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DynamicalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk *)new_Gyoto_Astrobj_DynamicalDisk__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDisk",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DynamicalDisk" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk *)new_Gyoto_Astrobj_DynamicalDisk__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DynamicalDisk__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DynamicalDisk__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DynamicalDisk__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DynamicalDisk__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DynamicalDisk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk::DynamicalDisk()\n"
    "    Gyoto::Astrobj::DynamicalDisk::DynamicalDisk(Gyoto::Astrobj::DynamicalDisk const &)\n"
    "    Gyoto::Astrobj::DynamicalDisk::DynamicalDisk(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::DynamicalDisk::DynamicalDisk(long)\n");
  return 0;
}


SWIGINTERN PyObject *DynamicalDisk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DynamicalDiskBolometric_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DynamicalDiskBolometric_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DynamicalDiskBolometric_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::DynamicalDiskBolometric::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDiskBolometric_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDiskBolometric_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::DynamicalDiskBolometric const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_DynamicalDiskBolometric_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DynamicalDiskBolometric_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DynamicalDiskBolometric_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::DynamicalDiskBolometric::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDiskBolometric_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDiskBolometric_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicalDiskBolometric_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDiskBolometric_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDiskBolometric_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDiskBolometric_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DynamicalDiskBolometric const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDiskBolometric_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicalDiskBolometric_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDiskBolometric_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDiskBolometric::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::DynamicalDiskBolometric::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDiskBolometric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DynamicalDiskBolometric")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDiskBolometric *)new Gyoto::Astrobj::DynamicalDiskBolometric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDiskBolometric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDiskBolometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDiskBolometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DynamicalDiskBolometric" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DynamicalDiskBolometric" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDiskBolometric *)new Gyoto::Astrobj::DynamicalDiskBolometric((Gyoto::Astrobj::DynamicalDiskBolometric const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDiskBolometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDiskBolometric_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDiskBolometric_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDiskBolometric *)((Gyoto::Astrobj::DynamicalDiskBolometric const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DynamicalDiskBolometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DynamicalDiskBolometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicalDiskBolometric" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_emission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDiskBolometric_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDiskBolometric_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDiskBolometric_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDiskBolometric_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDiskBolometric_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDiskBolometric_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDiskBolometric const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_bolometricEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  double arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DynamicalDiskBolometric_bolometricEmission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDiskBolometric_bolometricEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDiskBolometric_bolometricEmission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicalDiskBolometric_bolometricEmission" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDiskBolometric_bolometricEmission" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDiskBolometric const *)arg1)->bolometricEmission(arg2,(Gyoto::state_t const &)*arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDiskBolometric_processHitQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDiskBolometric *arg1 = (Gyoto::Astrobj::DynamicalDiskBolometric *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  Gyoto::Astrobj::Properties *arg6 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DynamicalDiskBolometric_processHitQuantities",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDiskBolometric_processHitQuantities" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDiskBolometric const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDiskBolometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicalDiskBolometric_processHitQuantities" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicalDiskBolometric_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDiskBolometric_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDiskBolometric_processHitQuantities" "', argument " "4"" of type '" "double const *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DynamicalDiskBolometric_processHitQuantities" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicalDiskBolometric_processHitQuantities" "', argument " "6"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp6);
  {
    try {
      ((Gyoto::Astrobj::DynamicalDiskBolometric const *)arg1)->processHitQuantities(arg2,(Gyoto::state_t const &)*arg3,(double const *)arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDiskBolometric__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDiskBolometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDiskBolometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DynamicalDiskBolometric" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDiskBolometric *)new_Gyoto_Astrobj_DynamicalDiskBolometric__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDiskBolometric__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDiskBolometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDiskBolometric",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DynamicalDiskBolometric" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDiskBolometric *)new_Gyoto_Astrobj_DynamicalDiskBolometric__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDiskBolometric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DynamicalDiskBolometric__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DynamicalDiskBolometric__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DynamicalDiskBolometric__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DynamicalDiskBolometric__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DynamicalDiskBolometric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDiskBolometric::DynamicalDiskBolometric()\n"
    "    Gyoto::Astrobj::DynamicalDiskBolometric::DynamicalDiskBolometric(Gyoto::Astrobj::DynamicalDiskBolometric const &)\n"
    "    Gyoto::Astrobj::DynamicalDiskBolometric::DynamicalDiskBolometric(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::DynamicalDiskBolometric::DynamicalDiskBolometric(long)\n");
  return 0;
}


SWIGINTERN PyObject *DynamicalDiskBolometric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__DynamicalDiskBolometric, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Disk3D_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Disk3D_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Disk3D_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Disk3D::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Disk3D_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Disk3D const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Disk3D_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Disk3D_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Disk3D_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Disk3D::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Disk3D_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Disk3D_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Disk3D const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Disk3D_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Disk3D::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Disk3D_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Disk3D_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Disk3D_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::Disk3D const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Disk3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Disk3D")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Disk3D *)new Gyoto::Astrobj::Disk3D();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Disk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Disk3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Disk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Disk3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Disk3D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Disk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Disk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Disk3D *)new Gyoto::Astrobj::Disk3D((Gyoto::Astrobj::Disk3D const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Disk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Disk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Disk3D *)((Gyoto::Astrobj::Disk3D const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Disk3D, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Disk3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Disk3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Disk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_fitsRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_fitsRead",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_fitsRead" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Disk3D_fitsRead" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsRead(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_fitsWrite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_fitsWrite",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_fitsWrite" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Disk3D_fitsWrite" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsWrite(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_file" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Disk3D_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_file" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Disk3D const *)arg1)->file();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_file__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Disk3D_file__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::file(std::string const &)\n"
    "    Gyoto::Astrobj::Disk3D::file() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_zsym__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_zsym",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_zsym" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_zsym" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->zsym(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_zsym__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_zsym",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_zsym" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Disk3D const *)arg1)->zsym();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_zsym(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_zsym__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_zsym__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_zsym'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::zsym(bool)\n"
    "    Gyoto::Astrobj::Disk3D::zsym() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_tPattern__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_tPattern",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_tPattern" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_tPattern" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tPattern(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_tPattern__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_tPattern",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_tPattern" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->tPattern();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_tPattern(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_tPattern__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_tPattern__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_tPattern'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::tPattern(double)\n"
    "    Gyoto::Astrobj::Disk3D::tPattern() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_omegaPattern__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_omegaPattern",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_omegaPattern" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_omegaPattern" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->omegaPattern(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_omegaPattern__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_omegaPattern",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_omegaPattern" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->omegaPattern();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_omegaPattern(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_omegaPattern__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_omegaPattern__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_omegaPattern'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::omegaPattern(double)\n"
    "    Gyoto::Astrobj::Disk3D::omegaPattern() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_setEmissquant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_setEmissquant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_setEmissquant" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_setEmissquant" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->setEmissquant(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_opacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_opacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_opacity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_opacity" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->opacity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_setVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_setVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_setVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_setVelocity" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->setVelocity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyEmissquant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Disk3D_copyEmissquant",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyEmissquant" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_copyEmissquant" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Disk3D_copyEmissquant" "', argument " "3"" of type '" "size_t const [4]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyEmissquant((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyEmissquant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_copyEmissquant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyEmissquant" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_copyEmissquant" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyEmissquant((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyEmissquant__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_copyEmissquant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyEmissquant" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      (arg1)->copyEmissquant();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyEmissquant(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_copyEmissquant__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Disk3D_copyEmissquant__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Disk3D_copyEmissquant__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_copyEmissquant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::copyEmissquant(double const *const,size_t const [4])\n"
    "    Gyoto::Astrobj::Disk3D::copyEmissquant(double const *const)\n"
    "    Gyoto::Astrobj::Disk3D::copyEmissquant()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_getEmissquant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_getEmissquant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_getEmissquant" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::Disk3D const *)arg1)->getEmissquant();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_getEmissquantNaxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  size_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_getEmissquantNaxes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_getEmissquantNaxes" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_getEmissquantNaxes" "', argument " "2"" of type '" "size_t [4]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  {
    try {
      ((Gyoto::Astrobj::Disk3D const *)arg1)->getEmissquantNaxes(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyOpacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Disk3D_copyOpacity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyOpacity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_copyOpacity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Disk3D_copyOpacity" "', argument " "3"" of type '" "size_t const [4]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyOpacity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyOpacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_copyOpacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyOpacity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_copyOpacity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyOpacity((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyOpacity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_copyOpacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyOpacity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      (arg1)->copyOpacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyOpacity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_copyOpacity__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Disk3D_copyOpacity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Disk3D_copyOpacity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_copyOpacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::copyOpacity(double const *const,size_t const [4])\n"
    "    Gyoto::Astrobj::Disk3D::copyOpacity(double const *const)\n"
    "    Gyoto::Astrobj::Disk3D::copyOpacity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_opacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_opacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_opacity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::Disk3D const *)arg1)->opacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_opacity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_opacity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Disk3D_opacity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_opacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::opacity(double *)\n"
    "    Gyoto::Astrobj::Disk3D::opacity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Disk3D_copyVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_copyVelocity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Disk3D_copyVelocity" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyVelocity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_copyVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_copyVelocity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyVelocity((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_copyVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_copyVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      (arg1)->copyVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_copyVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_copyVelocity__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Disk3D_copyVelocity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Disk3D_copyVelocity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_copyVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::copyVelocity(double const *const,size_t const [3])\n"
    "    Gyoto::Astrobj::Disk3D::copyVelocity(double const *const)\n"
    "    Gyoto::Astrobj::Disk3D::copyVelocity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_getVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_getVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::Disk3D const *)arg1)->getVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_repeatPhi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_repeatPhi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_repeatPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_repeatPhi" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->repeatPhi(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_repeatPhi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_repeatPhi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_repeatPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Disk3D const *)arg1)->repeatPhi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_repeatPhi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_repeatPhi__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_repeatPhi__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_repeatPhi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::repeatPhi(size_t)\n"
    "    Gyoto::Astrobj::Disk3D::repeatPhi() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_nu0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_nu0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_nu0" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_nu0" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->nu0(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_nu0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_nu0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_nu0" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->nu0();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_nu0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_nu0__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_nu0__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_nu0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::nu0(double)\n"
    "    Gyoto::Astrobj::Disk3D::nu0() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_dnu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_dnu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_dnu" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_dnu" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dnu(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_dnu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_dnu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_dnu" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->dnu();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_dnu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_dnu__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_dnu__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_dnu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::dnu(double)\n"
    "    Gyoto::Astrobj::Disk3D::dnu() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_rin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_rin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_rin" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_rin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_rin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_rin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_rin" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->rin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_rin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_rin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_rin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_rin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::rin(double)\n"
    "    Gyoto::Astrobj::Disk3D::rin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_rout__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_rout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_rout" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_rout" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rout(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_rout__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_rout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_rout" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->rout();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_rout(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_rout__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_rout__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_rout'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::rout(double)\n"
    "    Gyoto::Astrobj::Disk3D::rout() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_zmin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_zmin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_zmin" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_zmin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->zmin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_zmin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_zmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_zmin" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->zmin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_zmin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_zmin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_zmin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_zmin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::zmin(double)\n"
    "    Gyoto::Astrobj::Disk3D::zmin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_zmax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_zmax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_zmax" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_zmax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->zmax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_zmax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_zmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_zmax" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->zmax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_zmax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_zmax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_zmax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_zmax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::zmax(double)\n"
    "    Gyoto::Astrobj::Disk3D::zmax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_phimin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_phimin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_phimin" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_phimin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->phimin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_phimin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_phimin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_phimin" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->phimin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_phimin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_phimin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_phimin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_phimin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::phimin(double)\n"
    "    Gyoto::Astrobj::Disk3D::phimin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_phimax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Disk3D_phimax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_phimax" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Disk3D_phimax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->phimax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_phimax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Disk3D_phimax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_phimax" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Disk3D const *)arg1)->phimax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_phimax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_phimax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Disk3D_phimax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_phimax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::phimax(double)\n"
    "    Gyoto::Astrobj::Disk3D::phimax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Disk3D_Impact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Disk3D_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Disk3D_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Disk3D_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Disk3D_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_getVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Disk3D *arg1 = (Gyoto::Astrobj::Disk3D *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Disk3D_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Disk3D_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Disk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Disk3D * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Disk3D_getVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Disk3D_getVelocity__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_Disk3D_getVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Disk3D_getVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::getVelocity() const\n"
    "    Gyoto::Astrobj::Disk3D::getVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Disk3D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Disk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Disk3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Disk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Disk3D *)new_Gyoto_Astrobj_Disk3D__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Disk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Disk3D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Disk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Disk3D",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Disk3D" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Disk3D *)new_Gyoto_Astrobj_Disk3D__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Disk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Disk3D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Disk3D__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Disk3D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Disk3D__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Disk3D__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Disk3D__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Disk3D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Disk3D::Disk3D()\n"
    "    Gyoto::Astrobj::Disk3D::Disk3D(Gyoto::Astrobj::Disk3D const &)\n"
    "    Gyoto::Astrobj::Disk3D::Disk3D(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Disk3D::Disk3D(long)\n");
  return 0;
}


SWIGINTERN PyObject *Disk3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Disk3D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DynamicalDisk3D_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DynamicalDisk3D_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DynamicalDisk3D_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::DynamicalDisk3D::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_DynamicalDisk3D_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DynamicalDisk3D_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DynamicalDisk3D_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::DynamicalDisk3D::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicalDisk3D_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicalDisk3D_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DynamicalDisk3D")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk3D *)new Gyoto::Astrobj::DynamicalDisk3D();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDisk3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DynamicalDisk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DynamicalDisk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk3D *)new Gyoto::Astrobj::DynamicalDisk3D((Gyoto::Astrobj::DynamicalDisk3D const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk3D *)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DynamicalDisk3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DynamicalDisk3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicalDisk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_file" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicalDisk3D_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_file" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->file();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_file__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicalDisk3D_file__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::file(std::string const &)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::file() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_tinit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_tinit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_tinit" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_tinit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tinit(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_tinit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_tinit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_tinit" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->tinit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_tinit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_tinit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_tinit__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_tinit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::tinit(double)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::tinit() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_dt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_dt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_dt" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_dt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dt(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_dt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_dt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_dt" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->dt();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_dt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_dt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_dt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_dt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::dt(double)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::dt() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_PLindex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_PLindex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_PLindex" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_PLindex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->PLindex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_PLindex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_PLindex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_PLindex" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->PLindex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_PLindex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_PLindex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_PLindex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_PLindex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::PLindex(double)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::PLindex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_floorTemperature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_floorTemperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_floorTemperature" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_floorTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->floorTemperature(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_floorTemperature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_floorTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_floorTemperature" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->floorTemperature();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_floorTemperature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_floorTemperature__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_floorTemperature__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_floorTemperature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::floorTemperature(double)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::floorTemperature() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_temperature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_temperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_temperature" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_temperature" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->temperature(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_temperature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_temperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_temperature" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->temperature();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_temperature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_temperature__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_temperature__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_temperature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::temperature(bool)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::temperature() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_withVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DynamicalDisk3D_withVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_withVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_withVelocity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->withVelocity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_withVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_withVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_withVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->withVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_withVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_withVelocity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicalDisk3D_withVelocity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_withVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::withVelocity(bool)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::withVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission1date(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDisk3D_emission1date",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_emission1date" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_emission1date" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk3D_emission1date" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk3D_emission1date" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_emission1date" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->emission1date(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDisk3D_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk3D_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DynamicalDisk3D_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk3D_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:DynamicalDisk3D_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DynamicalDisk3D_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicalDisk3D_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DynamicalDisk3D_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DynamicalDisk3D_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicalDisk3D_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDisk3D_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk3D_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DynamicalDisk3D_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk3D_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DynamicalDisk3D_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DynamicalDisk3D_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_DynamicalDisk3D_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_DynamicalDisk3D_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_DynamicalDisk3D_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_DynamicalDisk3D_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_transmission1date(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDisk3D_transmission1date",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_transmission1date" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_transmission1date" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk3D_transmission1date" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk3D_transmission1date" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_transmission1date" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->transmission1date(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_transmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DynamicalDisk3D_transmission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_transmission" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicalDisk3D_transmission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicalDisk3D_transmission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicalDisk3D_transmission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicalDisk3D_transmission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->transmission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_getVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DynamicalDisk3D_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_getVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DynamicalDisk3D *arg1 = (Gyoto::Astrobj::DynamicalDisk3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DynamicalDisk3D_getVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicalDisk3D_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::DynamicalDisk3D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DynamicalDisk3D * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::DynamicalDisk3D const *)arg1)->getVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DynamicalDisk3D_getVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DynamicalDisk3D_getVelocity__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_DynamicalDisk3D_getVelocity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DynamicalDisk3D_getVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::getVelocity(double const [4],double [4])\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::getVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk3D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDisk3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DynamicalDisk3D" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk3D *)new_Gyoto_Astrobj_DynamicalDisk3D__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk3D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DynamicalDisk3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DynamicalDisk3D",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DynamicalDisk3D" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::DynamicalDisk3D *)new_Gyoto_Astrobj_DynamicalDisk3D__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DynamicalDisk3D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DynamicalDisk3D__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DynamicalDisk3D__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DynamicalDisk3D__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DynamicalDisk3D__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DynamicalDisk3D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::DynamicalDisk3D()\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::DynamicalDisk3D(Gyoto::Astrobj::DynamicalDisk3D const &)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::DynamicalDisk3D(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::DynamicalDisk3D::DynamicalDisk3D(long)\n");
  return 0;
}


SWIGINTERN PyObject *DynamicalDisk3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__DynamicalDisk3D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DirectionalDisk_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DirectionalDisk_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DirectionalDisk_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::DirectionalDisk::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_DirectionalDisk_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DirectionalDisk_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DirectionalDisk_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::DirectionalDisk::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DirectionalDisk_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::DirectionalDisk::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DirectionalDisk_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DirectionalDisk_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DirectionalDisk_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DirectionalDisk_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::DirectionalDisk::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DirectionalDisk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DirectionalDisk")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::DirectionalDisk *)new Gyoto::Astrobj::DirectionalDisk();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DirectionalDisk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DirectionalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DirectionalDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DirectionalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DirectionalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DirectionalDisk *)new Gyoto::Astrobj::DirectionalDisk((Gyoto::Astrobj::DirectionalDisk const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DirectionalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DirectionalDisk *)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DirectionalDisk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DirectionalDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DirectionalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_file" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_file" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->file();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_file__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DirectionalDisk_file__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::file(std::string const &)\n"
    "    Gyoto::Astrobj::DirectionalDisk::file() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_averageOverAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_averageOverAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_averageOverAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionalDisk_averageOverAngle" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->averageOverAngle(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_averageOverAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_averageOverAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_averageOverAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->averageOverAngle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_averageOverAngle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_averageOverAngle__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DirectionalDisk_averageOverAngle__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_averageOverAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::averageOverAngle(bool)\n"
    "    Gyoto::Astrobj::DirectionalDisk::averageOverAngle() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_lampaltitude__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_lampaltitude",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_lampaltitude" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionalDisk_lampaltitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->lampaltitude(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_lampaltitude__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_lampaltitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_lampaltitude" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->lampaltitude();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_lampaltitude(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_lampaltitude__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DirectionalDisk_lampaltitude__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_lampaltitude'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::lampaltitude(double)\n"
    "    Gyoto::Astrobj::DirectionalDisk::lampaltitude() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_lampcutoffsinev__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_lampcutoffsinev",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_lampcutoffsinev" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_lampcutoffsinev" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_lampcutoffsinev" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->lampcutoffsinev((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_lampcutoffsinev__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_lampcutoffsinev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_lampcutoffsinev" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->lampcutoffsinev();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_lampcutoffsinev(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_lampcutoffsinev__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DirectionalDisk_lampcutoffsinev__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_lampcutoffsinev'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::lampcutoffsinev(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::DirectionalDisk::lampcutoffsinev() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_fitsRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_fitsRead",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_fitsRead" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DirectionalDisk_fitsRead" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsRead(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_fitsWrite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_fitsWrite",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_fitsWrite" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DirectionalDisk_fitsWrite" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsWrite(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_setEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_setEmission",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_setEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_setEmission" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->setEmission(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_radius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_radius" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_radius" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->radius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyIntensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DirectionalDisk_copyIntensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyIntensity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DirectionalDisk_copyIntensity" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyIntensity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyIntensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_copyIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyIntensity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyIntensity((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyIntensity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_copyIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      (arg1)->copyIntensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyIntensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_copyIntensity__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DirectionalDisk_copyIntensity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DirectionalDisk_copyIntensity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_copyIntensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyIntensity(double const *const,size_t const [3])\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyIntensity(double const *const)\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyIntensity()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_getIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_getIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_getIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->getIntensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_getIntensityNaxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  size_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_getIntensityNaxes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_getIntensityNaxes" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_getIntensityNaxes" "', argument " "2"" of type '" "size_t [3]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  {
    try {
      ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->getIntensityNaxes(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DirectionalDisk_copyGridRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyGridRadius" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectionalDisk_copyGridRadius" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridRadius((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_copyGridRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyGridRadius" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridRadius((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_copyGridRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      (arg1)->copyGridRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_copyGridRadius__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DirectionalDisk_copyGridRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DirectionalDisk_copyGridRadius__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_copyGridRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridRadius(double const *const,size_t)\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridRadius(double const *const)\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridRadius()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_getGridRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_getGridRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_getGridRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->getGridRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridCosi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DirectionalDisk_copyGridCosi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridCosi" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyGridCosi" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectionalDisk_copyGridCosi" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridCosi((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridCosi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_copyGridCosi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridCosi" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyGridCosi" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridCosi((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridCosi__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_copyGridCosi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridCosi" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      (arg1)->copyGridCosi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridCosi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_copyGridCosi__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DirectionalDisk_copyGridCosi__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DirectionalDisk_copyGridCosi__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_copyGridCosi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridCosi(double const *const,size_t)\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridCosi(double const *const)\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridCosi()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_getGridCosi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_getGridCosi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_getGridCosi" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->getGridCosi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridFreq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DirectionalDisk_copyGridFreq",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyGridFreq" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectionalDisk_copyGridFreq" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridFreq((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridFreq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionalDisk_copyGridFreq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionalDisk_copyGridFreq" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridFreq((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridFreq__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_copyGridFreq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_copyGridFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      (arg1)->copyGridFreq();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_copyGridFreq(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DirectionalDisk_copyGridFreq__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DirectionalDisk_copyGridFreq__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DirectionalDisk_copyGridFreq__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_copyGridFreq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridFreq(double const *const,size_t)\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridFreq(double const *const)\n"
    "    Gyoto::Astrobj::DirectionalDisk::copyGridFreq()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_getGridFreq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionalDisk_getGridFreq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_getGridFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->getGridFreq();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_emission__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DirectionalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectionalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_emission__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DirectionalDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectionalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_emission__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:DirectionalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DirectionalDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DirectionalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_emission__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DirectionalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DirectionalDisk_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DirectionalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::DirectionalDisk const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DirectionalDisk_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectionalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DirectionalDisk *arg1 = (Gyoto::Astrobj::DirectionalDisk *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DirectionalDisk_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionalDisk_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DirectionalDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DirectionalDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionalDisk_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectionalDisk_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectionalDisk_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::DirectionalDisk const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionalDisk_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DirectionalDisk_emission__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DirectionalDisk_emission__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_DirectionalDisk_emission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_DirectionalDisk_emission__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_DirectionalDisk_emission__SWIG_0_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_DirectionalDisk_emission__SWIG_0_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectionalDisk_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double,double,Gyoto::state_t const &) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::DirectionalDisk::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::DirectionalDisk::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DirectionalDisk__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DirectionalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DirectionalDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DirectionalDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DirectionalDisk *)new_Gyoto_Astrobj_DirectionalDisk__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DirectionalDisk__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DirectionalDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DirectionalDisk",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DirectionalDisk" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::DirectionalDisk *)new_Gyoto_Astrobj_DirectionalDisk__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DirectionalDisk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DirectionalDisk__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DirectionalDisk__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DirectionalDisk__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DirectionalDisk__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DirectionalDisk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DirectionalDisk::DirectionalDisk()\n"
    "    Gyoto::Astrobj::DirectionalDisk::DirectionalDisk(Gyoto::Astrobj::DirectionalDisk const &)\n"
    "    Gyoto::Astrobj::DirectionalDisk::DirectionalDisk(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::DirectionalDisk::DirectionalDisk(long)\n");
  return 0;
}


SWIGINTERN PyObject *DirectionalDisk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__DirectionalDisk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DeformedTorus_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeformedTorus_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DeformedTorus_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::DeformedTorus::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::DeformedTorus const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_DeformedTorus_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeformedTorus_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DeformedTorus_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::DeformedTorus::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeformedTorus_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeformedTorus_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DeformedTorus const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DeformedTorus_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::DeformedTorus::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DeformedTorus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DeformedTorus")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::DeformedTorus *)new Gyoto::Astrobj::DeformedTorus();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeformedTorus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DeformedTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DeformedTorus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DeformedTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DeformedTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DeformedTorus *)new Gyoto::Astrobj::DeformedTorus((Gyoto::Astrobj::DeformedTorus const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DeformedTorus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DeformedTorus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DeformedTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DeformedTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DeformedTorus *)((Gyoto::Astrobj::DeformedTorus const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_spectrum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_spectrum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_spectrum" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrum::Generic" "*'");
    }
    Gyoto::Spectrum::Generic * kp=reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(kp);
  }
  {
    try {
      (arg1)->spectrum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_spectrum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_spectrum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_spectrum" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DeformedTorus const *)arg1)->spectrum();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_spectrum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_spectrum__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DeformedTorus_spectrum__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_spectrum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::spectrum(Gyoto::SmartPointer< Gyoto::Spectrum::Generic >)\n"
    "    Gyoto::Astrobj::DeformedTorus::spectrum() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_largeRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_largeRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeformedTorus_largeRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->largeRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_largeRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_largeRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_largeRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DeformedTorus const *)arg1)->largeRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_largeRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_largeRadius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DeformedTorus_largeRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_largeRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::largeRadius(double)\n"
    "    Gyoto::Astrobj::DeformedTorus::largeRadius() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_beta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_beta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_beta" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeformedTorus_beta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->beta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_beta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_beta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_beta" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DeformedTorus const *)arg1)->beta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_beta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_beta__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DeformedTorus_beta__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_beta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::beta(double)\n"
    "    Gyoto::Astrobj::DeformedTorus::beta() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_betaSt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_betaSt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_betaSt" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeformedTorus_betaSt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->betaSt(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_betaSt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_betaSt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_betaSt" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DeformedTorus const *)arg1)->betaSt();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_betaSt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_betaSt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DeformedTorus_betaSt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_betaSt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::betaSt(double)\n"
    "    Gyoto::Astrobj::DeformedTorus::betaSt() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_eta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_eta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_eta" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeformedTorus_eta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->eta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_eta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_eta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_eta" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::DeformedTorus const *)arg1)->eta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_eta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_eta__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DeformedTorus_eta__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_eta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::eta(double)\n"
    "    Gyoto::Astrobj::DeformedTorus::eta() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_mode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_mode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_mode" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeformedTorus_mode" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    try {
      (arg1)->mode(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_mode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_mode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_mode" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = (unsigned long)((Gyoto::Astrobj::DeformedTorus const *)arg1)->mode();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_mode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_mode__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DeformedTorus_mode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_mode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::mode(unsigned long)\n"
    "    Gyoto::Astrobj::DeformedTorus::mode() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_perturbKind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_perturbKind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_perturbKind" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeformedTorus_perturbKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeformedTorus_perturbKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->perturbKind((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_perturbKind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_perturbKind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_perturbKind" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DeformedTorus const *)arg1)->perturbKind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_perturbKind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_perturbKind__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DeformedTorus_perturbKind__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_perturbKind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::perturbKind(std::string const &)\n"
    "    Gyoto::Astrobj::DeformedTorus::perturbKind() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeformedTorus_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::DeformedTorus const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_DeformedTorus_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DeformedTorus_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DeformedTorus_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    Gyoto::Astrobj::DeformedTorus::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeformedTorus___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeformedTorus___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DeformedTorus_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformedTorus_emission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::DeformedTorus *arg1 = (Gyoto::Astrobj::DeformedTorus *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DeformedTorus_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformedTorus_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::DeformedTorus const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::DeformedTorus * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeformedTorus_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DeformedTorus_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DeformedTorus_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeformedTorus_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DeformedTorus_emission" "', argument " "5"" of type '" "double const *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (double)((Gyoto::Astrobj::DeformedTorus const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const *)arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeformedTorus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DeformedTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DeformedTorus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DeformedTorus" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::DeformedTorus *)new_Gyoto_Astrobj_DeformedTorus__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeformedTorus__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::DeformedTorus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DeformedTorus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DeformedTorus" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::DeformedTorus *)new_Gyoto_Astrobj_DeformedTorus__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeformedTorus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DeformedTorus__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DeformedTorus__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DeformedTorus__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DeformedTorus__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DeformedTorus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::DeformedTorus::DeformedTorus()\n"
    "    Gyoto::Astrobj::DeformedTorus::DeformedTorus(Gyoto::Astrobj::DeformedTorus const &)\n"
    "    Gyoto::Astrobj::DeformedTorus::DeformedTorus(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::DeformedTorus::DeformedTorus(long)\n");
  return 0;
}


SWIGINTERN PyObject *DeformedTorus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__DeformedTorus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_EquatorialHotSpot_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EquatorialHotSpot_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EquatorialHotSpot_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::EquatorialHotSpot::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_EquatorialHotSpot_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EquatorialHotSpot_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EquatorialHotSpot_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::EquatorialHotSpot::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EquatorialHotSpot_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_delta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EquatorialHotSpot__delta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EquatorialHotSpot__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_delta(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__delta__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_delta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__delta__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__delta" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_delta((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__delta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__delta__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__delta__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EquatorialHotSpot__delta__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_EquatorialHotSpot__delta__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_delta(double const)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_delta(double,std::string const &)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_delta() const\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_delta(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__tMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_tMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__tMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EquatorialHotSpot__tMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EquatorialHotSpot__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_tMin(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__tMin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__tMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_tMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__tMin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__tMin" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_tMin((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__tMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__tMin__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__tMin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EquatorialHotSpot__tMin__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_EquatorialHotSpot__tMin__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__tMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_tMin(double const)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_tMin(double,std::string const &)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_tMin() const\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_tMin(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__adaptive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__adaptive" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__adaptive" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_adaptive(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__adaptive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__adaptive" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_adaptive();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__adaptive__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__adaptive__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_adaptive(bool)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_adaptive() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__secondary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__secondary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__secondary" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__secondary" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_secondary(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__secondary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__secondary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__secondary" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_secondary();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__secondary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__secondary__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__secondary__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__secondary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_secondary(bool)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_secondary() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__integ31__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__integ31",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__integ31" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__integ31" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_integ31(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__integ31__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__integ31",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__integ31" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_integ31();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__integ31(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__integ31__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__integ31__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__integ31'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_integ31(bool)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_integ31() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__parallelTransport__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__parallelTransport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__parallelTransport" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__parallelTransport" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_parallelTransport(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__parallelTransport__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__parallelTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__parallelTransport" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_parallelTransport();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__parallelTransport(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__parallelTransport__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__parallelTransport__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__parallelTransport'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_parallelTransport(bool)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_parallelTransport() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__maxiter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__maxiter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__maxiter" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__maxiter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->_maxiter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__maxiter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__maxiter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__maxiter" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_maxiter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__maxiter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__maxiter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__maxiter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__maxiter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_maxiter(size_t)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_maxiter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__integrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__integrator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__integrator" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_integrator((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__integrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__integrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__integrator" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_integrator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__integrator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__integrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EquatorialHotSpot__integrator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__integrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_integrator(std::string const &)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_integrator() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__deltaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__deltaMin" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_deltaMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__deltaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__deltaMin" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__deltaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__deltaMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__deltaMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__deltaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_deltaMin() const\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_deltaMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__absTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__absTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__absTol" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__absTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_absTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__absTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__absTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__absTol" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_absTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__absTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__absTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__absTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__absTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_absTol(double)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_absTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__maxCrossEqplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__maxCrossEqplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__maxCrossEqplane" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_maxCrossEqplane(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__maxCrossEqplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__maxCrossEqplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_maxCrossEqplane();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__maxCrossEqplane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__maxCrossEqplane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__maxCrossEqplane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__maxCrossEqplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_maxCrossEqplane(double)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_maxCrossEqplane() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__relTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__relTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__relTol" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__relTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_relTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__relTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__relTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__relTol" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_relTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__relTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__relTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__relTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__relTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_relTol(double)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_relTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__deltaMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__deltaMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_deltaMax(double)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_deltaMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMaxOverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__deltaMaxOverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_deltaMaxOverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMaxOverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__deltaMaxOverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot__deltaMaxOverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMaxOverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__deltaMaxOverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__deltaMaxOverR__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__deltaMaxOverR__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__deltaMaxOverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_deltaMaxOverR() const\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_deltaMaxOverR(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_initCoord((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__initCoord__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EquatorialHotSpot__initCoord__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_initCoord() const\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_initCoord(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot__metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__metric" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->_metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot__metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot__metric" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->_metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot__metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot__metric__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot__metric__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot__metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::_metric() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_deltaMax__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_deltaMax__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EquatorialHotSpot_deltaMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EquatorialHotSpot_deltaMax" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->deltaMax((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_deltaMax__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot_deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_deltaMax__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot_deltaMax__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot_deltaMax__SWIG_0_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot_deltaMax__SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EquatorialHotSpot_deltaMax__SWIG_0_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    deltaMax() const\n"
    "    deltaMax(double const [8],double) const\n"
    "    deltaMax(double)\n"
    "    deltaMax(double [8])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_EquatorialHotSpot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EquatorialHotSpot")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::EquatorialHotSpot *)new Gyoto::Astrobj::EquatorialHotSpot();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EquatorialHotSpot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::EquatorialHotSpot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EquatorialHotSpot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EquatorialHotSpot" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EquatorialHotSpot" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::EquatorialHotSpot *)new Gyoto::Astrobj::EquatorialHotSpot((Gyoto::Astrobj::EquatorialHotSpot const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EquatorialHotSpot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EquatorialHotSpot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EquatorialHotSpot" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::EquatorialHotSpot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::EquatorialHotSpot *)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_spotRadSize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_spotRadSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_spotRadSize" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot_spotRadSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->spotRadSize(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_spotRadSize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_spotRadSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_spotRadSize" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->spotRadSize();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_spotRadSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot_spotRadSize__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot_spotRadSize__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_spotRadSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::spotRadSize(double)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::spotRadSize() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_beaming__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_beaming",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_beaming" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot_beaming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot_beaming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->beaming((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_beaming__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_beaming",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_beaming" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->beaming();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_beaming(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot_beaming__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EquatorialHotSpot_beaming__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_beaming'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::beaming(std::string const &)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::beaming() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_beamAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_beamAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_beamAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot_beamAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->beamAngle(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_beamAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_beamAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_beamAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->beamAngle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_beamAngle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot_beamAngle__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot_beamAngle__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_beamAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::beamAngle(double)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::beamAngle() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_magneticConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_magneticConfiguration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_magneticConfiguration" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "EquatorialHotSpot_magneticConfiguration" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->magneticConfiguration(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_magneticConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_magneticConfiguration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_magneticConfiguration" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->magneticConfiguration();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_magneticConfiguration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot_magneticConfiguration__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EquatorialHotSpot_magneticConfiguration__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_magneticConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::magneticConfiguration(std::string)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::magneticConfiguration() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_getMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_getMass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_getMass" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->getMass();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EquatorialHotSpot_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_EquatorialHotSpot_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquatorialHotSpot_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_setInitialCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_setInitialCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setInitialCondition(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EquatorialHotSpot_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_emission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:EquatorialHotSpot_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquatorialHotSpot_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EquatorialHotSpot_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EquatorialHotSpot_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  Eigen::Matrix4d *arg6 = (Eigen::Matrix4d *) 0 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  double arg9 ;
  Gyoto::state_t *arg10 = 0 ;
  double *arg11 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 = SWIG_OLDOBJ ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:EquatorialHotSpot_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "6"" of type '" "Eigen::Matrix4d *""'"); 
  }
  arg6 = reinterpret_cast< Eigen::Matrix4d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "7"" of type '" "double const *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_size_t(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res10 = swig::asptr(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg10 = ptr;
  }
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "11"" of type '" "double const *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  {
    try {
      ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,(Gyoto::state_t const &)*arg10,(double const *)arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res10)) delete arg10;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res10)) delete arg10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:EquatorialHotSpot_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = is_array(argv[7]) || PySequence_Check(argv[7]);
                  }
                  if (_v) {
                    return _wrap_EquatorialHotSpot_radiativeQ__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_Eigen__Matrix4d, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_size_t(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      int res = swig::asptr(argv[9], (std::vector< double,std::allocator< double > >**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_EquatorialHotSpot_radiativeQ__SWIG_0(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EquatorialHotSpot_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::radiativeQ(double *,double *,double *,double *,Eigen::Matrix4d *,double const *,size_t,double,Gyoto::state_t const &,double const *) const\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_setParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EquatorialHotSpot_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_setParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "EquatorialHotSpot_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "EquatorialHotSpot_setParameter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "EquatorialHotSpot_setParameter" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (int)(arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EquatorialHotSpot_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_setParameters" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquatorialHotSpot_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::EquatorialHotSpot *arg1 = (Gyoto::Astrobj::EquatorialHotSpot *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EquatorialHotSpot_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquatorialHotSpot_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::EquatorialHotSpot const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::EquatorialHotSpot * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EquatorialHotSpot_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EquatorialHotSpot_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EquatorialHotSpot_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::EquatorialHotSpot const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EquatorialHotSpot__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::EquatorialHotSpot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EquatorialHotSpot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EquatorialHotSpot" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::EquatorialHotSpot *)new_Gyoto_Astrobj_EquatorialHotSpot__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EquatorialHotSpot__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::EquatorialHotSpot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EquatorialHotSpot",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EquatorialHotSpot" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::EquatorialHotSpot *)new_Gyoto_Astrobj_EquatorialHotSpot__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EquatorialHotSpot(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_EquatorialHotSpot__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EquatorialHotSpot__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_EquatorialHotSpot__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_EquatorialHotSpot__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EquatorialHotSpot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::EquatorialHotSpot()\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::EquatorialHotSpot(Gyoto::Astrobj::EquatorialHotSpot const &)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::EquatorialHotSpot(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::EquatorialHotSpot::EquatorialHotSpot(long)\n");
  return 0;
}


SWIGINTERN PyObject *EquatorialHotSpot_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__EquatorialHotSpot, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_XillverReflection_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable XillverReflection_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_XillverReflection_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::XillverReflection::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_XillverReflection_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable XillverReflection_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_XillverReflection_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::XillverReflection::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_XillverReflection_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XillverReflection_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::XillverReflection const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::XillverReflection::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_fillProperty" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XillverReflection_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XillverReflection_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Astrobj::XillverReflection const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XillverReflection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_XillverReflection")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::XillverReflection *)new Gyoto::Astrobj::XillverReflection();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XillverReflection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::XillverReflection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_XillverReflection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XillverReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_XillverReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::XillverReflection *)new Gyoto::Astrobj::XillverReflection((Gyoto::Astrobj::XillverReflection const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::XillverReflection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::XillverReflection *)((Gyoto::Astrobj::XillverReflection const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_XillverReflection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_XillverReflection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XillverReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_timelampphizero__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_timelampphizero",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_timelampphizero" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XillverReflection_timelampphizero" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->timelampphizero(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_timelampphizero__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_timelampphizero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_timelampphizero" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::XillverReflection const *)arg1)->timelampphizero();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_timelampphizero(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_timelampphizero__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XillverReflection_timelampphizero__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_timelampphizero'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::timelampphizero(double)\n"
    "    Gyoto::Astrobj::XillverReflection::timelampphizero() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_lampradius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_lampradius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_lampradius" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XillverReflection_lampradius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->lampradius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_lampradius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_lampradius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_lampradius" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::XillverReflection const *)arg1)->lampradius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_lampradius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_lampradius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XillverReflection_lampradius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_lampradius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::lampradius(double)\n"
    "    Gyoto::Astrobj::XillverReflection::lampradius() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fileillumination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_fileillumination",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_fileillumination" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_fileillumination" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XillverReflection_fileillumination" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->fileillumination((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fileillumination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_fileillumination",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_fileillumination" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::XillverReflection const *)arg1)->fileillumination();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fileillumination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_fileillumination__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_fileillumination__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_fileillumination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::fileillumination(std::string const &)\n"
    "    Gyoto::Astrobj::XillverReflection::fileillumination() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_filereflection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_filereflection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_filereflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_filereflection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XillverReflection_filereflection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->filereflection((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_filereflection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_filereflection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_filereflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::XillverReflection const *)arg1)->filereflection();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_filereflection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_filereflection__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_filereflection__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_filereflection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::filereflection(std::string const &)\n"
    "    Gyoto::Astrobj::XillverReflection::filereflection() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_averageOverAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_averageOverAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_averageOverAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XillverReflection_averageOverAngle" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->averageOverAngle(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_averageOverAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_averageOverAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_averageOverAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::XillverReflection const *)arg1)->averageOverAngle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_averageOverAngle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_averageOverAngle__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XillverReflection_averageOverAngle__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_averageOverAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::averageOverAngle(bool)\n"
    "    Gyoto::Astrobj::XillverReflection::averageOverAngle() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fitsReadIllum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_fitsReadIllum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_fitsReadIllum" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "XillverReflection_fitsReadIllum" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsReadIllum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fitsWriteIllum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_fitsWriteIllum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_fitsWriteIllum" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "XillverReflection_fitsWriteIllum" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsWriteIllum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fitsReadRefl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_fitsReadRefl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_fitsReadRefl" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "XillverReflection_fitsReadRefl" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsReadRefl(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_fitsWriteRefl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_fitsWriteRefl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_fitsWriteRefl" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "XillverReflection_fitsWriteRefl" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fitsWriteRefl(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_setIllumination(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_setIllumination",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_setIllumination" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_setIllumination" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->setIllumination(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_setReflection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_setReflection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_setReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_setReflection" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->setReflection(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyIllumination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_copyIllumination",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyIllumination" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyIllumination" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XillverReflection_copyIllumination" "', argument " "3"" of type '" "size_t const [2]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyIllumination((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyIllumination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_copyIllumination",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyIllumination" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyIllumination" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyIllumination((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyIllumination__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_copyIllumination",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyIllumination" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->copyIllumination();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyIllumination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_copyIllumination__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_copyIllumination__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XillverReflection_copyIllumination__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_copyIllumination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::copyIllumination(double const *const,size_t const [2])\n"
    "    Gyoto::Astrobj::XillverReflection::copyIllumination(double const *const)\n"
    "    Gyoto::Astrobj::XillverReflection::copyIllumination()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getIllumination(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getIllumination",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getIllumination" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getIllumination();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getIlluminationNaxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  size_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_getIlluminationNaxes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getIlluminationNaxes" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_getIlluminationNaxes" "', argument " "2"" of type '" "size_t [2]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  {
    try {
      ((Gyoto::Astrobj::XillverReflection const *)arg1)->getIlluminationNaxes(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyReflection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_copyReflection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyReflection" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XillverReflection_copyReflection" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyReflection((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyReflection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_copyReflection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyReflection" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyReflection((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyReflection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_copyReflection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->copyReflection();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyReflection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_copyReflection__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_copyReflection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XillverReflection_copyReflection__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_copyReflection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::copyReflection(double const *const,size_t const [3])\n"
    "    Gyoto::Astrobj::XillverReflection::copyReflection(double const *const)\n"
    "    Gyoto::Astrobj::XillverReflection::copyReflection()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getReflection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getReflection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getReflection();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getReflectionNaxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  size_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_getReflectionNaxes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getReflectionNaxes" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_getReflectionNaxes" "', argument " "2"" of type '" "size_t [3]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  {
    try {
      ((Gyoto::Astrobj::XillverReflection const *)arg1)->getReflectionNaxes(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflLogxi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_copyGridReflLogxi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflLogxi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridReflLogxi" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XillverReflection_copyGridReflLogxi" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridReflLogxi((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflLogxi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_copyGridReflLogxi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflLogxi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridReflLogxi" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridReflLogxi((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflLogxi__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_copyGridReflLogxi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflLogxi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->copyGridReflLogxi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflLogxi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_copyGridReflLogxi__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_copyGridReflLogxi__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XillverReflection_copyGridReflLogxi__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_copyGridReflLogxi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflLogxi(double const *const,size_t)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflLogxi(double const *const)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflLogxi()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getGridReflLogxi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getGridReflLogxi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getGridReflLogxi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getGridReflLogxi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflIncl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_copyGridReflIncl",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflIncl" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridReflIncl" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XillverReflection_copyGridReflIncl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridReflIncl((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflIncl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_copyGridReflIncl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflIncl" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridReflIncl" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridReflIncl((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflIncl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_copyGridReflIncl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflIncl" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->copyGridReflIncl();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflIncl(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_copyGridReflIncl__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_copyGridReflIncl__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XillverReflection_copyGridReflIncl__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_copyGridReflIncl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflIncl(double const *const,size_t)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflIncl(double const *const)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflIncl()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getGridReflIncl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getGridReflIncl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getGridReflIncl" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getGridReflIncl();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflFreq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_copyGridReflFreq",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridReflFreq" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XillverReflection_copyGridReflFreq" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridReflFreq((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflFreq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_copyGridReflFreq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridReflFreq" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridReflFreq((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflFreq__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_copyGridReflFreq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridReflFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->copyGridReflFreq();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridReflFreq(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_copyGridReflFreq__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_copyGridReflFreq__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XillverReflection_copyGridReflFreq__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_copyGridReflFreq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflFreq(double const *const,size_t)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflFreq(double const *const)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridReflFreq()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getGridReflFreq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getGridReflFreq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getGridReflFreq" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getGridReflFreq();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_copyGridIllumRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridIllumRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridIllumRadius" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XillverReflection_copyGridIllumRadius" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridIllumRadius((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_copyGridIllumRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridIllumRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridIllumRadius" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridIllumRadius((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_copyGridIllumRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridIllumRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->copyGridIllumRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_copyGridIllumRadius__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_copyGridIllumRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XillverReflection_copyGridIllumRadius__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_copyGridIllumRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridIllumRadius(double const *const,size_t)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridIllumRadius(double const *const)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridIllumRadius()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getGridIllumRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getGridIllumRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getGridIllumRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getGridIllumRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumPhi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XillverReflection_copyGridIllumPhi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridIllumPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridIllumPhi" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XillverReflection_copyGridIllumPhi" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyGridIllumPhi((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumPhi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_copyGridIllumPhi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridIllumPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_copyGridIllumPhi" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->copyGridIllumPhi((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumPhi__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_copyGridIllumPhi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_copyGridIllumPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->copyGridIllumPhi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_copyGridIllumPhi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_copyGridIllumPhi__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XillverReflection_copyGridIllumPhi__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XillverReflection_copyGridIllumPhi__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_copyGridIllumPhi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridIllumPhi(double const *const,size_t)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridIllumPhi(double const *const)\n"
    "    Gyoto::Astrobj::XillverReflection::copyGridIllumPhi()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_getGridIllumPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_getGridIllumPhi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_getGridIllumPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::XillverReflection const *)arg1)->getGridIllumPhi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:XillverReflection_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XillverReflection_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XillverReflection_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "XillverReflection_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XillverReflection_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::XillverReflection const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:XillverReflection_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XillverReflection_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XillverReflection_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "XillverReflection_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XillverReflection_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::XillverReflection const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XillverReflection_emission__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_XillverReflection_emission__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::XillverReflection::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XillverReflection_updateSpin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_updateSpin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_updateSpin" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      (arg1)->updateSpin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_tell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  Gyoto::Hook::Teller *arg2 = (Gyoto::Hook::Teller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_tell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_tell" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Hook__Teller, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XillverReflection_tell" "', argument " "2"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Hook::Teller * >(argp2);
  {
    try {
      (arg1)->tell(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XillverReflection_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::XillverReflection const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::XillverReflection *arg1 = (Gyoto::Astrobj::XillverReflection *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XillverReflection_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XillverReflection_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::XillverReflection *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::XillverReflection * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XillverReflection_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_XillverReflection_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XillverReflection_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XillverReflection_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XillverReflection_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::XillverReflection::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_XillverReflection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::XillverReflection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_XillverReflection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XillverReflection" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::XillverReflection *)new_Gyoto_Astrobj_XillverReflection__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XillverReflection__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::XillverReflection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_XillverReflection",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XillverReflection" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::XillverReflection *)new_Gyoto_Astrobj_XillverReflection__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XillverReflection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_XillverReflection__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XillverReflection__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XillverReflection__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XillverReflection__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_XillverReflection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::XillverReflection::XillverReflection()\n"
    "    Gyoto::Astrobj::XillverReflection::XillverReflection(Gyoto::Astrobj::XillverReflection const &)\n"
    "    Gyoto::Astrobj::XillverReflection::XillverReflection(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::XillverReflection::XillverReflection(long)\n");
  return 0;
}


SWIGINTERN PyObject *XillverReflection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__XillverReflection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Jet_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Jet_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Jet_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Jet::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Jet_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Jet const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Jet_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Jet_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Jet_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Jet::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Jet_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Jet_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Jet_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Jet const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Jet_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Jet::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Jet const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Jet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Jet")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Jet *)new Gyoto::Astrobj::Jet();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Jet, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Jet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Jet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Jet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Jet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Jet" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Jet" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Jet *)new Gyoto::Astrobj::Jet((Gyoto::Astrobj::Jet const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Jet, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Jet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Jet *)((Gyoto::Astrobj::Jet const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Jet, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Jet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Jet" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetOuterOpeningAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_jetOuterOpeningAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetOuterOpeningAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_jetOuterOpeningAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->jetOuterOpeningAngle(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetOuterOpeningAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_jetOuterOpeningAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetOuterOpeningAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->jetOuterOpeningAngle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetOuterOpeningAngle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_jetOuterOpeningAngle__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_jetOuterOpeningAngle__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_jetOuterOpeningAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::jetOuterOpeningAngle(double)\n"
    "    Gyoto::Astrobj::Jet::jetOuterOpeningAngle() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_jetInnerOpeningAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_jetInnerOpeningAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetInnerOpeningAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_jetInnerOpeningAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->jetInnerOpeningAngle(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetInnerOpeningAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_jetInnerOpeningAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetInnerOpeningAngle" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->jetInnerOpeningAngle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetInnerOpeningAngle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_jetInnerOpeningAngle__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_jetInnerOpeningAngle__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_jetInnerOpeningAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::jetInnerOpeningAngle(double)\n"
    "    Gyoto::Astrobj::Jet::jetInnerOpeningAngle() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_jetBaseHeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_jetBaseHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetBaseHeight" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_jetBaseHeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->jetBaseHeight(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetBaseHeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_jetBaseHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetBaseHeight" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->jetBaseHeight();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetBaseHeight(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_jetBaseHeight__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_jetBaseHeight__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_jetBaseHeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::jetBaseHeight(double)\n"
    "    Gyoto::Astrobj::Jet::jetBaseHeight() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_gammaJet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_gammaJet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_gammaJet" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_gammaJet" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->gammaJet(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_gammaJet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_gammaJet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_gammaJet" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->gammaJet();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_gammaJet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_gammaJet__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_gammaJet__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_gammaJet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::gammaJet(double)\n"
    "    Gyoto::Astrobj::Jet::gammaJet() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_jetVphiOverVr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_jetVphiOverVr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetVphiOverVr" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_jetVphiOverVr" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->jetVphiOverVr(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetVphiOverVr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_jetVphiOverVr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_jetVphiOverVr" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->jetVphiOverVr();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_jetVphiOverVr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_jetVphiOverVr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_jetVphiOverVr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_jetVphiOverVr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::jetVphiOverVr(double)\n"
    "    Gyoto::Astrobj::Jet::jetVphiOverVr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_baseNumberDensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_baseNumberDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_baseNumberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->baseNumberDensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_baseNumberDensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_baseNumberDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_baseNumberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Jet_baseNumberDensity" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Jet_baseNumberDensity" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->baseNumberDensity((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_baseNumberDensity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_baseNumberDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_baseNumberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_baseNumberDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->baseNumberDensity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_baseNumberDensity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Jet_baseNumberDensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_baseNumberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_baseNumberDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Jet_baseNumberDensity" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Jet_baseNumberDensity" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->baseNumberDensity(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_baseNumberDensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_baseNumberDensity__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_baseNumberDensity__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Jet_baseNumberDensity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Jet_baseNumberDensity__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_baseNumberDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::baseNumberDensity() const\n"
    "    Gyoto::Astrobj::Jet::baseNumberDensity(std::string const &) const\n"
    "    Gyoto::Astrobj::Jet::baseNumberDensity(double)\n"
    "    Gyoto::Astrobj::Jet::baseNumberDensity(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_baseTemperature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_baseTemperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_baseTemperature" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_baseTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->baseTemperature(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_baseTemperature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_baseTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_baseTemperature" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->baseTemperature();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_baseTemperature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_baseTemperature__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_baseTemperature__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_baseTemperature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::baseTemperature(double)\n"
    "    Gyoto::Astrobj::Jet::baseTemperature() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_temperatureSlope__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_temperatureSlope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_temperatureSlope" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_temperatureSlope" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperatureSlope(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_temperatureSlope__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_temperatureSlope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_temperatureSlope" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->temperatureSlope();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_temperatureSlope(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_temperatureSlope__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_temperatureSlope__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_temperatureSlope'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::temperatureSlope(double)\n"
    "    Gyoto::Astrobj::Jet::temperatureSlope() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_magnetizationParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_magnetizationParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_magnetizationParameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->magnetizationParameter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_magnetizationParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_magnetizationParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->magnetizationParameter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_magnetizationParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_magnetizationParameter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_magnetizationParameter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_magnetizationParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::magnetizationParameter(double)\n"
    "    Gyoto::Astrobj::Jet::magnetizationParameter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_kappaIndex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_kappaIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_kappaIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Jet_kappaIndex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->kappaIndex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_kappaIndex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_kappaIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_kappaIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Jet const *)arg1)->kappaIndex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_kappaIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_kappaIndex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_kappaIndex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_kappaIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::kappaIndex(double)\n"
    "    Gyoto::Astrobj::Jet::kappaIndex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Jet_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Jet const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Jet_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Jet_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::Jet::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Jet___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Jet_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Jet_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Jet_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Jet_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Jet_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::Jet const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Jet_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Jet_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Jet_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Jet_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Jet_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::Jet const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Jet_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Jet_radiativeQ__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = is_array(argv[7]) || PySequence_Check(argv[7]);
                  }
                  if (_v) {
                    return _wrap_Jet_radiativeQ__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Jet_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::Jet::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Jet_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Jet *arg1 = (Gyoto::Astrobj::Jet *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Jet_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Jet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Jet_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Jet *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Jet * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Jet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Jet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Jet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Jet" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Jet *)new_Gyoto_Astrobj_Jet__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Jet, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Jet__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Jet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Jet",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Jet" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Jet *)new_Gyoto_Astrobj_Jet__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Jet, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Jet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Jet__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Jet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Jet__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Jet__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Jet__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Jet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Jet::Jet()\n"
    "    Gyoto::Astrobj::Jet::Jet(Gyoto::Astrobj::Jet const &)\n"
    "    Gyoto::Astrobj::Jet::Jet(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Jet::Jet(long)\n");
  return 0;
}


SWIGINTERN PyObject *Jet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Jet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Blob_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Blob_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Blob_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Blob::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Blob_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Blob const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Blob_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Blob_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Blob_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Blob::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Blob_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Blob_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Blob const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Blob_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Blob::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Blob__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Blob")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Blob *)new Gyoto::Astrobj::Blob();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Blob, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Blob__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Blob *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Blob",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Blob,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Blob" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Blob" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Blob *)new Gyoto::Astrobj::Blob((Gyoto::Astrobj::Blob const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Blob, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Blob *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Blob *)((Gyoto::Astrobj::Blob const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Blob, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Blob(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Blob",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Blob" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_electronDistribution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_electronDistribution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_electronDistribution" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Blob_electronDistribution" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_electronDistribution" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->electronDistribution((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_electronDistribution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_electronDistribution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_electronDistribution" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Blob const *)arg1)->electronDistribution();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_electronDistribution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_electronDistribution__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Blob_electronDistribution__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_electronDistribution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::electronDistribution(std::string const &)\n"
    "    Gyoto::Astrobj::Blob::electronDistribution() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_className" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Blob const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_className_l" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Blob const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_numberDensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_numberDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_numberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->numberDensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_numberDensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_numberDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_numberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Blob_numberDensity" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_numberDensity" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->numberDensity((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_numberDensity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_numberDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_numberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_numberDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numberDensity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_numberDensity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Blob_numberDensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_numberDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_numberDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Blob_numberDensity" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_numberDensity" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->numberDensity(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_numberDensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_numberDensity__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Blob_numberDensity__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Blob_numberDensity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Blob_numberDensity__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_numberDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::numberDensity() const\n"
    "    Gyoto::Astrobj::Blob::numberDensity(std::string const &) const\n"
    "    Gyoto::Astrobj::Blob::numberDensity(double)\n"
    "    Gyoto::Astrobj::Blob::numberDensity(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_temperature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_temperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_temperature" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->temperature();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_temperature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_temperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_temperature" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_temperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperature(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_temperature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_temperature__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Blob_temperature__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_temperature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::temperature() const\n"
    "    Gyoto::Astrobj::Blob::temperature(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_timeRef__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_timeRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeRef" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->timeRef();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeRef__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_timeRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeRef" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Blob_timeRef" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_timeRef" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->timeRef((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeRef__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_timeRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeRef" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_timeRef" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->timeRef(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeRef__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Blob_timeRef",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeRef" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_timeRef" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Blob_timeRef" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_timeRef" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->timeRef(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeRef(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_timeRef__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Blob_timeRef__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Blob_timeRef__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Blob_timeRef__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_timeRef'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::timeRef() const\n"
    "    Gyoto::Astrobj::Blob::timeRef(std::string const &) const\n"
    "    Gyoto::Astrobj::Blob::timeRef(double)\n"
    "    Gyoto::Astrobj::Blob::timeRef(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_timeSigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_timeSigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeSigma" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->timeSigma();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeSigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_timeSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeSigma" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Blob_timeSigma" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_timeSigma" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->timeSigma((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeSigma__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_timeSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeSigma" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_timeSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->timeSigma(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeSigma__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Blob_timeSigma",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_timeSigma" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_timeSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Blob_timeSigma" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_timeSigma" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->timeSigma(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_timeSigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_timeSigma__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Blob_timeSigma__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Blob_timeSigma__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Blob_timeSigma__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_timeSigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::timeSigma() const\n"
    "    Gyoto::Astrobj::Blob::timeSigma(std::string const &) const\n"
    "    Gyoto::Astrobj::Blob::timeSigma(double)\n"
    "    Gyoto::Astrobj::Blob::timeSigma(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_magnetizationParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_magnetizationParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_magnetizationParameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->magnetizationParameter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_magnetizationParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_magnetizationParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->magnetizationParameter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_magnetizationParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_magnetizationParameter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Blob_magnetizationParameter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_magnetizationParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::magnetizationParameter(double)\n"
    "    Gyoto::Astrobj::Blob::magnetizationParameter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_kappaIndex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_kappaIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_kappaIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Blob const *)arg1)->kappaIndex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_kappaIndex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_kappaIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_kappaIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blob_kappaIndex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->kappaIndex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_kappaIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_kappaIndex__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Blob_kappaIndex__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_kappaIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::kappaIndex() const\n"
    "    Gyoto::Astrobj::Blob::kappaIndex(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_magneticConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Blob_magneticConfiguration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_magneticConfiguration" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Blob_magneticConfiguration" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->magneticConfiguration(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_magneticConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Blob_magneticConfiguration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_magneticConfiguration" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Blob const *)arg1)->magneticConfiguration();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_magneticConfiguration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Blob_magneticConfiguration__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Blob_magneticConfiguration__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_magneticConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::magneticConfiguration(std::string)\n"
    "    Gyoto::Astrobj::Blob::magneticConfiguration() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Blob_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Blob_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Blob_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Blob_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Blob_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::Blob const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Blob_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Blob_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Blob_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Blob_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::Blob const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_radiativeQ__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Blob *arg1 = (Gyoto::Astrobj::Blob *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  Eigen::Matrix4d *arg6 ;
  double *arg7 ;
  size_t arg8 ;
  double arg9 ;
  Gyoto::state_t *arg10 = 0 ;
  double *arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 = SWIG_OLDOBJ ;
  PyArrayObject *array11 = NULL ;
  int is_new_object11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Blob_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blob_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Blob const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Blob * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Blob_radiativeQ" "', argument " "6"" of type '" "Eigen::Matrix4d []""'"); 
  } 
  arg6 = reinterpret_cast< Eigen::Matrix4d * >(argp6);
  {
    npy_intp size[1] = {
      
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  ecode8 = SWIG_AsVal_size_t(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Blob_radiativeQ" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Blob_radiativeQ" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res10 = swig::asptr(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Blob_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blob_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg10 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array11 = obj_to_array_contiguous_allow_conversion(obj10,
      NPY_DOUBLE,
      &is_new_object11);
    if (!array11 || !require_dimensions(array11, 1) ||
      !require_size(array11, size, 1)) SWIG_fail;
    arg11 = (double *) array_data(array11);
  }
  {
    try {
      ((Gyoto::Astrobj::Blob const *)arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,(double const (*))arg7,arg8,arg9,(Gyoto::state_t const &)*arg10,(double const (*))arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  if (SWIG_IsNewObj(res10)) delete arg10;
  {
    if (is_new_object11 && array11)
    {
      Py_DECREF(array11); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  if (SWIG_IsNewObj(res10)) delete arg10;
  {
    if (is_new_object11 && array11)
    {
      Py_DECREF(array11); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Blob_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Blob_radiativeQ__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = is_array(argv[7]) || PySequence_Check(argv[7]);
                  }
                  if (_v) {
                    return _wrap_Blob_radiativeQ__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) && PyArray_EquivTypenums(array_type(argv[4]),
                NPY_DOUBLE);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_Eigen__Matrix4d, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_size_t(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      int res = swig::asptr(argv[9], (std::vector< double,std::allocator< double > >**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        {
                          _v = is_array(argv[10]) || PySequence_Check(argv[10]);
                        }
                        if (_v) {
                          return _wrap_Blob_radiativeQ__SWIG_2(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Blob_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::Blob::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::Blob::radiativeQ(double [],double [],double [],double [],Eigen::Matrix4d [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Blob__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Blob *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Blob",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Blob" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Blob *)new_Gyoto_Astrobj_Blob__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Blob, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Blob__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Blob *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Blob",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Blob" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Blob *)new_Gyoto_Astrobj_Blob__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Blob, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Blob(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Blob__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Blob, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Blob__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Blob__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Blob__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Blob'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Blob::Blob()\n"
    "    Gyoto::Astrobj::Blob::Blob(Gyoto::Astrobj::Blob const &)\n"
    "    Gyoto::Astrobj::Blob::Blob(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Blob::Blob(long)\n");
  return 0;
}


SWIGINTERN PyObject *Blob_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Blob, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Plasmoid_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Plasmoid_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Plasmoid_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Plasmoid::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Plasmoid_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Plasmoid const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Plasmoid_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Plasmoid_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Plasmoid_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Plasmoid::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Plasmoid_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasmoid_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Plasmoid const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Plasmoid_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plasmoid_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Plasmoid::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Plasmoid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Plasmoid")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Plasmoid *)new Gyoto::Astrobj::Plasmoid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plasmoid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Plasmoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Plasmoid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plasmoid" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plasmoid" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Plasmoid *)new Gyoto::Astrobj::Plasmoid((Gyoto::Astrobj::Plasmoid const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Plasmoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Plasmoid *)((Gyoto::Astrobj::Plasmoid const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Plasmoid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Plasmoid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Plasmoid" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_className" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Plasmoid const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_className_l" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Plasmoid const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_motionType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_motionType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_motionType" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasmoid_motionType" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->motionType(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Plasmoid const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Plasmoid_metric__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasmoid_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::metric() const\n"
    "    Gyoto::Astrobj::Plasmoid::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_initPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_initPosition" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_initPosition" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasmoid_initPosition" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->initPosition((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_initPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_initPosition" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Plasmoid const *)arg1)->initPosition();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initPosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Plasmoid_initPosition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plasmoid_initPosition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_initPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::initPosition(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::Plasmoid::initPosition() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_initVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_initVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_initVelocity" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasmoid_initVelocity" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->initVelocity((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_initVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_initVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Plasmoid const *)arg1)->initVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Plasmoid_initVelocity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plasmoid_initVelocity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_initVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::initVelocity(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::Plasmoid::initVelocity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasmoid_initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->initCoord((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_initCoord" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Plasmoid const *)arg1)->initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Plasmoid_initCoord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plasmoid_initCoord__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::initCoord(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::Plasmoid::initCoord() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_radiusMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_radiusMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_radiusMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plasmoid_radiusMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->radiusMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_radiusMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plasmoid_radiusMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_radiusMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Plasmoid const *)arg1)->radiusMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_radiusMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Plasmoid_radiusMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plasmoid_radiusMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_radiusMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::radiusMax(double)\n"
    "    Gyoto::Astrobj::Plasmoid::radiusMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_Radius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_Radius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_Radius" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasmoid_Radius" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->Radius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Plasmoid_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Plasmoid_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Plasmoid_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Plasmoid_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasmoid_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::Plasmoid const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Plasmoid_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Plasmoid_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Plasmoid_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Plasmoid_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasmoid_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::Plasmoid const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Plasmoid_radiativeQ__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = is_array(argv[7]) || PySequence_Check(argv[7]);
                  }
                  if (_v) {
                    return _wrap_Plasmoid_radiativeQ__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::Plasmoid::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_getCartesian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Plasmoid_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasmoid_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Plasmoid_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Plasmoid_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Plasmoid_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Plasmoid_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Plasmoid_getCartesian" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Plasmoid_getCartesian" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_getCartesian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Plasmoid_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasmoid_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Plasmoid_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Plasmoid_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Plasmoid_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Plasmoid_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Plasmoid_getCartesian" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_getCartesian__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Plasmoid_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasmoid_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Plasmoid_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Plasmoid_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Plasmoid_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Plasmoid_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_getCartesian__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Plasmoid_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_getCartesian" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasmoid_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Plasmoid_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Plasmoid_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Plasmoid_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_getCartesian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Plasmoid_getCartesian__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Plasmoid_getCartesian__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Plasmoid_getCartesian__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Plasmoid_getCartesian__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_getCartesian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Astrobj::Plasmoid::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Astrobj::Plasmoid::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Astrobj::Plasmoid::getCartesian(double const *const,size_t const,double *const,double *const,double *const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasmoid_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_Impact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Plasmoid_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasmoid_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Plasmoid_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_Impact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Plasmoid_Impact",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plasmoid_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_Impact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Plasmoid_Impact__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Plasmoid_Impact__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Plasmoid_Impact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::Impact(Gyoto::Photon *,size_t,Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Astrobj::Plasmoid::Impact(Gyoto::Photon *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Plasmoid_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_file" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plasmoid_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plasmoid_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plasmoid_fitsRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Plasmoid *arg1 = (Gyoto::Astrobj::Plasmoid *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< size_t,std::allocator< size_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Plasmoid_fitsRead",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plasmoid_fitsRead" "', argument " "1"" of type '" "Gyoto::Astrobj::Plasmoid *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Plasmoid * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Plasmoid_fitsRead" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->fitsRead(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< size_t,std::allocator< size_t > >(static_cast< const std::vector< size_t,std::allocator< size_t > >& >(result))), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plasmoid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Plasmoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Plasmoid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plasmoid" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Plasmoid *)new_Gyoto_Astrobj_Plasmoid__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plasmoid__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Plasmoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Plasmoid",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Plasmoid" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Plasmoid *)new_Gyoto_Astrobj_Plasmoid__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Plasmoid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Plasmoid__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Plasmoid__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Plasmoid__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Plasmoid__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Plasmoid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Plasmoid::Plasmoid()\n"
    "    Gyoto::Astrobj::Plasmoid::Plasmoid(Gyoto::Astrobj::Plasmoid const &)\n"
    "    Gyoto::Astrobj::Plasmoid::Plasmoid(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Plasmoid::Plasmoid(long)\n");
  return 0;
}


SWIGINTERN PyObject *Plasmoid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Plasmoid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_FlaredDiskSynchrotron_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FlaredDiskSynchrotron_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FlaredDiskSynchrotron_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::FlaredDiskSynchrotron::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_FlaredDiskSynchrotron_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FlaredDiskSynchrotron_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FlaredDiskSynchrotron_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::FlaredDiskSynchrotron::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlaredDiskSynchrotron_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlaredDiskSynchrotron_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FlaredDiskSynchrotron__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FlaredDiskSynchrotron")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::FlaredDiskSynchrotron *)new Gyoto::Astrobj::FlaredDiskSynchrotron();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FlaredDiskSynchrotron__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FlaredDiskSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FlaredDiskSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FlaredDiskSynchrotron" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FlaredDiskSynchrotron" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FlaredDiskSynchrotron *)new Gyoto::Astrobj::FlaredDiskSynchrotron((Gyoto::Astrobj::FlaredDiskSynchrotron const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FlaredDiskSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FlaredDiskSynchrotron *)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FlaredDiskSynchrotron(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FlaredDiskSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FlaredDiskSynchrotron" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_file" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlaredDiskSynchrotron_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlaredDiskSynchrotron_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_file" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->file();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_file__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_file__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::file(std::string const &)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::file() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_hoverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_hoverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_hoverR" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_hoverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->hoverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_hoverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_hoverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_hoverR" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->hoverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_hoverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_hoverR__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_hoverR__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_hoverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::hoverR(double const)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::hoverR() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_timeTranslation_inMunit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_timeTranslation_inMunit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_timeTranslation_inMunit" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_timeTranslation_inMunit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->timeTranslation_inMunit(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_timeTranslation_inMunit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_timeTranslation_inMunit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_timeTranslation_inMunit" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->timeTranslation_inMunit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_timeTranslation_inMunit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_timeTranslation_inMunit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_timeTranslation_inMunit__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_timeTranslation_inMunit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::timeTranslation_inMunit(double const)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::timeTranslation_inMunit() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_magnetizationParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_magnetizationParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_magnetizationParameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->magnetizationParameter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_magnetizationParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_magnetizationParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->magnetizationParameter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_magnetizationParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_magnetizationParameter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_magnetizationParameter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_magnetizationParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::magnetizationParameter(double)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::magnetizationParameter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_kappaIndex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_kappaIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_kappaIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_kappaIndex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->kappaIndex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_kappaIndex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_kappaIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_kappaIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->kappaIndex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_kappaIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_kappaIndex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_kappaIndex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_kappaIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::kappaIndex(double)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::kappaIndex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_numberDensityMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->numberDensityMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_numberDensityMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->numberDensityMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_numberDensityMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numberDensityMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FlaredDiskSynchrotron_numberDensityMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlaredDiskSynchrotron_numberDensityMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->numberDensityMax(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_numberDensityMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FlaredDiskSynchrotron_numberDensityMax__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_numberDensityMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::numberDensityMax() const\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::numberDensityMax(std::string const &) const\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::numberDensityMax(double)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::numberDensityMax(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_temperatureMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_temperatureMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_temperatureMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_temperatureMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperatureMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_temperatureMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_temperatureMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_temperatureMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->temperatureMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_temperatureMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_temperatureMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_temperatureMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_temperatureMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::temperatureMax(double)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::temperatureMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_polytropicIndex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_polytropicIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_polytropicIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_polytropicIndex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->polytropicIndex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_polytropicIndex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_polytropicIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_polytropicIndex" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->polytropicIndex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_polytropicIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_polytropicIndex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_polytropicIndex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_polytropicIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::polytropicIndex(double)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::polytropicIndex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_betaAtMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_betaAtMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_betaAtMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FlaredDiskSynchrotron_betaAtMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->betaAtMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_betaAtMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_betaAtMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_betaAtMax" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->betaAtMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_betaAtMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_betaAtMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_betaAtMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_betaAtMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::betaAtMax(double)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::betaAtMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_copyDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FlaredDiskSynchrotron_copyDensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_copyDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlaredDiskSynchrotron_copyDensity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FlaredDiskSynchrotron_copyDensity" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyDensity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_getDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_getDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_getDensity" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->getDensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_copyVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FlaredDiskSynchrotron_copyVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_copyVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlaredDiskSynchrotron_copyVelocity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FlaredDiskSynchrotron_copyVelocity" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyVelocity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_getVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_getVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->getVelocity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_copyBvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FlaredDiskSynchrotron_copyBvector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_copyBvector" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlaredDiskSynchrotron_copyBvector" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FlaredDiskSynchrotron_copyBvector" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyBvector((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_getBvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_getBvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_getBvector" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->getBvector();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_copyTimeArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FlaredDiskSynchrotron_copyTimeArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_copyTimeArray" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FlaredDiskSynchrotron_copyTimeArray" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FlaredDiskSynchrotron_copyTimeArray" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyTimeArray((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_getTimeArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_getTimeArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_getTimeArray" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->getTimeArray();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_metric_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FlaredDiskSynchrotron_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_metric_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_metric_SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FlaredDiskSynchrotron_metric_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_fitsRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< size_t,std::allocator< size_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron_fitsRead",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_fitsRead" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FlaredDiskSynchrotron_fitsRead" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->fitsRead(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< size_t,std::allocator< size_t > >(static_cast< const std::vector< size_t,std::allocator< size_t > >& >(result))), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FlaredDiskSynchrotron___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_radiativeQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:FlaredDiskSynchrotron_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FlaredDiskSynchrotron_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FlaredDiskSynchrotron_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "FlaredDiskSynchrotron_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FlaredDiskSynchrotron_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::FlaredDiskSynchrotron const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_getVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::FlaredDiskSynchrotron *arg1 = (Gyoto::Astrobj::FlaredDiskSynchrotron *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FlaredDiskSynchrotron_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlaredDiskSynchrotron_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::FlaredDiskSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::FlaredDiskSynchrotron * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlaredDiskSynchrotron_getVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_FlaredDiskSynchrotron_getVelocity__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_FlaredDiskSynchrotron_getVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FlaredDiskSynchrotron_getVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::getVelocity() const\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::getVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_FlaredDiskSynchrotron__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FlaredDiskSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FlaredDiskSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FlaredDiskSynchrotron" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::FlaredDiskSynchrotron *)new_Gyoto_Astrobj_FlaredDiskSynchrotron__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FlaredDiskSynchrotron__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::FlaredDiskSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FlaredDiskSynchrotron",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FlaredDiskSynchrotron" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::FlaredDiskSynchrotron *)new_Gyoto_Astrobj_FlaredDiskSynchrotron__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FlaredDiskSynchrotron(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FlaredDiskSynchrotron__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FlaredDiskSynchrotron__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FlaredDiskSynchrotron__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FlaredDiskSynchrotron__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FlaredDiskSynchrotron'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::FlaredDiskSynchrotron()\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::FlaredDiskSynchrotron(Gyoto::Astrobj::FlaredDiskSynchrotron const &)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::FlaredDiskSynchrotron(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::FlaredDiskSynchrotron::FlaredDiskSynchrotron(long)\n");
  return 0;
}


SWIGINTERN PyObject *FlaredDiskSynchrotron_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__FlaredDiskSynchrotron, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThinDiskGridIntensity_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskGridIntensity_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskGridIntensity_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::ThinDiskGridIntensity::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThinDiskGridIntensity_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskGridIntensity_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskGridIntensity_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::ThinDiskGridIntensity::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskGridIntensity_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskGridIntensity_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskGridIntensity_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskGridIntensity_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskGridIntensity_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskGridIntensity_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskGridIntensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThinDiskGridIntensity")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskGridIntensity *)new Gyoto::Astrobj::ThinDiskGridIntensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskGridIntensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskGridIntensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskGridIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskGridIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThinDiskGridIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskGridIntensity *)new Gyoto::Astrobj::ThinDiskGridIntensity((Gyoto::Astrobj::ThinDiskGridIntensity const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskGridIntensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskGridIntensity *)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThinDiskGridIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThinDiskGridIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThinDiskGridIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskGridIntensity_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_file" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskGridIntensity_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskGridIntensity_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->file((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_file" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->file();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskGridIntensity_file__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskGridIntensity_file__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskGridIntensity_file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::file(std::string const &)\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::file() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_timeTranslation_inMunit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskGridIntensity_timeTranslation_inMunit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_timeTranslation_inMunit" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskGridIntensity_timeTranslation_inMunit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->timeTranslation_inMunit(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_timeTranslation_inMunit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_timeTranslation_inMunit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_timeTranslation_inMunit" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->timeTranslation_inMunit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_timeTranslation_inMunit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskGridIntensity_timeTranslation_inMunit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskGridIntensity_timeTranslation_inMunit__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskGridIntensity_timeTranslation_inMunit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::timeTranslation_inMunit(double const)\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::timeTranslation_inMunit() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_copyIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDiskGridIntensity_copyIntensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_copyIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskGridIntensity_copyIntensity" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThinDiskGridIntensity_copyIntensity" "', argument " "3"" of type '" "size_t const [3]""'"); 
  } 
  arg3 = reinterpret_cast< size_t * >(argp3);
  {
    try {
      (arg1)->copyIntensity((double const *)arg2,(size_t const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_getIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_getIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_getIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->getIntensity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_copyTimeArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDiskGridIntensity_copyTimeArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_copyTimeArray" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskGridIntensity_copyTimeArray" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskGridIntensity_copyTimeArray" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->copyTimeArray((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_getTimeArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_getTimeArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_getTimeArray" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->getTimeArray();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_metric_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskGridIntensity_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_metric_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskGridIntensity_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskGridIntensity_metric_SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskGridIntensity_metric_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskGridIntensity_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_fitsRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< size_t,std::allocator< size_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskGridIntensity_fitsRead",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_fitsRead" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThinDiskGridIntensity_fitsRead" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->fitsRead(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< size_t,std::allocator< size_t > >(static_cast< const std::vector< size_t,std::allocator< size_t > >& >(result))), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThinDiskGridIntensity_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskGridIntensity_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskGridIntensity_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskGridIntensity_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskGridIntensity_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThinDiskGridIntensity_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskGridIntensity_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskGridIntensity_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskGridIntensity_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskGridIntensity_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskGridIntensity const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThinDiskGridIntensity_emission__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_ThinDiskGridIntensity_emission__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskGridIntensity_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskGridIntensity_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskGridIntensity *arg1 = (Gyoto::Astrobj::ThinDiskGridIntensity *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDiskGridIntensity_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskGridIntensity_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskGridIntensity *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskGridIntensity * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskGridIntensity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskGridIntensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskGridIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskGridIntensity" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskGridIntensity *)new_Gyoto_Astrobj_ThinDiskGridIntensity__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskGridIntensity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskGridIntensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskGridIntensity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThinDiskGridIntensity" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskGridIntensity *)new_Gyoto_Astrobj_ThinDiskGridIntensity__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskGridIntensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThinDiskGridIntensity__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThinDiskGridIntensity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskGridIntensity__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskGridIntensity__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThinDiskGridIntensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::ThinDiskGridIntensity()\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::ThinDiskGridIntensity(Gyoto::Astrobj::ThinDiskGridIntensity const &)\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::ThinDiskGridIntensity(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::ThinDiskGridIntensity::ThinDiskGridIntensity(long)\n");
  return 0;
}


SWIGINTERN PyObject *ThinDiskGridIntensity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__ThinDiskGridIntensity, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThickDisk_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThickDisk_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThickDisk_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::ThickDisk::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThickDisk_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::ThickDisk const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThickDisk_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThickDisk_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThickDisk_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::ThickDisk::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThickDisk_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThickDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThickDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThickDisk const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThickDisk_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::ThickDisk::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::ThickDisk const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThickDisk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThickDisk")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::ThickDisk *)new Gyoto::Astrobj::ThickDisk();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThickDisk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThickDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThickDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThickDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThickDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThickDisk *)new Gyoto::Astrobj::ThickDisk((Gyoto::Astrobj::ThickDisk const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThickDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThickDisk *)((Gyoto::Astrobj::ThickDisk const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThickDisk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThickDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThickDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_thickDiskInnerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_thickDiskInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_thickDiskInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_thickDiskInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->thickDiskInnerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_thickDiskInnerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_thickDiskInnerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_thickDiskInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->thickDiskInnerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_thickDiskInnerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_thickDiskInnerRadius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_thickDiskInnerRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_thickDiskInnerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::thickDiskInnerRadius(double)\n"
    "    Gyoto::Astrobj::ThickDisk::thickDiskInnerRadius() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_thickDiskZGaussianSigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_thickDiskZGaussianSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_thickDiskZGaussianSigma" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_thickDiskZGaussianSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->thickDiskZGaussianSigma(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_thickDiskZGaussianSigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_thickDiskZGaussianSigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_thickDiskZGaussianSigma" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->thickDiskZGaussianSigma();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_thickDiskZGaussianSigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_thickDiskZGaussianSigma__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_thickDiskZGaussianSigma__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_thickDiskZGaussianSigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::thickDiskZGaussianSigma(double)\n"
    "    Gyoto::Astrobj::ThickDisk::thickDiskZGaussianSigma() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_useSelfAbsorption__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_useSelfAbsorption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_useSelfAbsorption" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_useSelfAbsorption" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->useSelfAbsorption(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_useSelfAbsorption__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_useSelfAbsorption",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_useSelfAbsorption" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::ThickDisk const *)arg1)->useSelfAbsorption();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_useSelfAbsorption(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_useSelfAbsorption__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_useSelfAbsorption__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_useSelfAbsorption'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::useSelfAbsorption(bool)\n"
    "    Gyoto::Astrobj::ThickDisk::useSelfAbsorption() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_veloParam__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_veloParam",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_veloParam" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThickDisk_veloParam" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThickDisk_veloParam" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->veloParam((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_veloParam__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_veloParam",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_veloParam" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThickDisk const *)arg1)->veloParam();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_veloParam(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_veloParam__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThickDisk_veloParam__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_veloParam'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::veloParam(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::ThickDisk::veloParam() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_numberDensityAtInnerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->numberDensityAtInnerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_numberDensityAtInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->numberDensityAtInnerRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_numberDensityAtInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numberDensityAtInnerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThickDisk_numberDensityAtInnerRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThickDisk_numberDensityAtInnerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->numberDensityAtInnerRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_numberDensityAtInnerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThickDisk_numberDensityAtInnerRadius__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_numberDensityAtInnerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::numberDensityAtInnerRadius() const\n"
    "    Gyoto::Astrobj::ThickDisk::numberDensityAtInnerRadius(std::string const &) const\n"
    "    Gyoto::Astrobj::ThickDisk::numberDensityAtInnerRadius(double)\n"
    "    Gyoto::Astrobj::ThickDisk::numberDensityAtInnerRadius(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_temperatureAtInnerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_temperatureAtInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_temperatureAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_temperatureAtInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperatureAtInnerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_temperatureAtInnerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_temperatureAtInnerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_temperatureAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->temperatureAtInnerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_temperatureAtInnerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_temperatureAtInnerRadius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_temperatureAtInnerRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_temperatureAtInnerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::temperatureAtInnerRadius(double)\n"
    "    Gyoto::Astrobj::ThickDisk::temperatureAtInnerRadius() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_temperatureSlope__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_temperatureSlope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_temperatureSlope" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_temperatureSlope" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperatureSlope(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_temperatureSlope__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_temperatureSlope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_temperatureSlope" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->temperatureSlope();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_temperatureSlope(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_temperatureSlope__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_temperatureSlope__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_temperatureSlope'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::temperatureSlope(double)\n"
    "    Gyoto::Astrobj::ThickDisk::temperatureSlope() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_densitySlope__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_densitySlope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_densitySlope" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_densitySlope" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->densitySlope(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_densitySlope__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_densitySlope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_densitySlope" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->densitySlope();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_densitySlope(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_densitySlope__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_densitySlope__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_densitySlope'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::densitySlope(double)\n"
    "    Gyoto::Astrobj::ThickDisk::densitySlope() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_magnetizationParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_magnetizationParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThickDisk_magnetizationParameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->magnetizationParameter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_magnetizationParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_magnetizationParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThickDisk const *)arg1)->magnetizationParameter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_magnetizationParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_magnetizationParameter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_magnetizationParameter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_magnetizationParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::magnetizationParameter(double)\n"
    "    Gyoto::Astrobj::ThickDisk::magnetizationParameter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_magneticConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_magneticConfiguration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_magneticConfiguration" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ThickDisk_magneticConfiguration" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->magneticConfiguration(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_magneticConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_magneticConfiguration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_magneticConfiguration" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThickDisk const *)arg1)->magneticConfiguration();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_magneticConfiguration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_magneticConfiguration__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThickDisk_magneticConfiguration__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_magneticConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::magneticConfiguration(std::string)\n"
    "    Gyoto::Astrobj::ThickDisk::magneticConfiguration() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThickDisk_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThickDisk const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThickDisk_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThickDisk_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::ThickDisk::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThickDisk___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThickDisk___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:ThickDisk_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThickDisk_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ThickDisk_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ThickDisk_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThickDisk_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::ThickDisk const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ThickDisk_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThickDisk_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ThickDisk_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ThickDisk_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThickDisk_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::ThickDisk const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThickDisk_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_radiativeQ__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThickDisk *arg1 = (Gyoto::Astrobj::ThickDisk *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  Eigen::Matrix4d *arg6 = (Eigen::Matrix4d *) 0 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  double arg9 ;
  Gyoto::state_t *arg10 = 0 ;
  double *arg11 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 = SWIG_OLDOBJ ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:ThickDisk_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThickDisk_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::ThickDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThickDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThickDisk_radiativeQ" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThickDisk_radiativeQ" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThickDisk_radiativeQ" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ThickDisk_radiativeQ" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ThickDisk_radiativeQ" "', argument " "6"" of type '" "Eigen::Matrix4d *""'"); 
  }
  arg6 = reinterpret_cast< Eigen::Matrix4d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ThickDisk_radiativeQ" "', argument " "7"" of type '" "double const *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_size_t(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ThickDisk_radiativeQ" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ThickDisk_radiativeQ" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res10 = swig::asptr(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "ThickDisk_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThickDisk_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg10 = ptr;
  }
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "ThickDisk_radiativeQ" "', argument " "11"" of type '" "double const *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  {
    try {
      ((Gyoto::Astrobj::ThickDisk const *)arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,(Gyoto::state_t const &)*arg10,(double const *)arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res10)) delete arg10;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res10)) delete arg10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThickDisk_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_ThickDisk_radiativeQ__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = is_array(argv[7]) || PySequence_Check(argv[7]);
                  }
                  if (_v) {
                    return _wrap_ThickDisk_radiativeQ__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_Eigen__Matrix4d, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_size_t(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      int res = swig::asptr(argv[9], (std::vector< double,std::allocator< double > >**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_ThickDisk_radiativeQ__SWIG_2(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThickDisk_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::ThickDisk::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::ThickDisk::radiativeQ(double *,double *,double *,double *,Eigen::Matrix4d *,double const *,size_t,double,Gyoto::state_t const &,double const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThickDisk__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThickDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThickDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThickDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThickDisk *)new_Gyoto_Astrobj_ThickDisk__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThickDisk__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThickDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThickDisk",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThickDisk" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::ThickDisk *)new_Gyoto_Astrobj_ThickDisk__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThickDisk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThickDisk__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThickDisk__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThickDisk__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThickDisk__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThickDisk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThickDisk::ThickDisk()\n"
    "    Gyoto::Astrobj::ThickDisk::ThickDisk(Gyoto::Astrobj::ThickDisk const &)\n"
    "    Gyoto::Astrobj::ThickDisk::ThickDisk(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::ThickDisk::ThickDisk(long)\n");
  return 0;
}


SWIGINTERN PyObject *ThickDisk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__ThickDisk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SphericalAccretion_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SphericalAccretion_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SphericalAccretion_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::SphericalAccretion::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_SphericalAccretion_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SphericalAccretion_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SphericalAccretion_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::SphericalAccretion::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SphericalAccretion_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalAccretion_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::SphericalAccretion const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SphericalAccretion_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::SphericalAccretion::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SphericalAccretion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SphericalAccretion")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::SphericalAccretion *)new Gyoto::Astrobj::SphericalAccretion();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SphericalAccretion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::SphericalAccretion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SphericalAccretion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SphericalAccretion" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SphericalAccretion" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::SphericalAccretion *)new Gyoto::Astrobj::SphericalAccretion((Gyoto::Astrobj::SphericalAccretion const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::SphericalAccretion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::SphericalAccretion *)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SphericalAccretion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SphericalAccretion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SphericalAccretion" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_useSelfAbsorption__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_useSelfAbsorption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_useSelfAbsorption" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_useSelfAbsorption" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->useSelfAbsorption(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_useSelfAbsorption__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_useSelfAbsorption",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_useSelfAbsorption" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->useSelfAbsorption();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_useSelfAbsorption(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_useSelfAbsorption__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_useSelfAbsorption__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_useSelfAbsorption'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::useSelfAbsorption(bool)\n"
    "    Gyoto::Astrobj::SphericalAccretion::useSelfAbsorption() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_sphericalAccretionInnerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_sphericalAccretionInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_sphericalAccretionInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_sphericalAccretionInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->sphericalAccretionInnerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_sphericalAccretionInnerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_sphericalAccretionInnerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_sphericalAccretionInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->sphericalAccretionInnerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_sphericalAccretionInnerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_sphericalAccretionInnerRadius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_sphericalAccretionInnerRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_sphericalAccretionInnerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::sphericalAccretionInnerRadius(double)\n"
    "    Gyoto::Astrobj::SphericalAccretion::sphericalAccretionInnerRadius() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_numberDensityAtInnerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->numberDensityAtInnerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_numberDensityAtInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->numberDensityAtInnerRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_numberDensityAtInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numberDensityAtInnerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SphericalAccretion_numberDensityAtInnerRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalAccretion_numberDensityAtInnerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->numberDensityAtInnerRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_numberDensityAtInnerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SphericalAccretion_numberDensityAtInnerRadius__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_numberDensityAtInnerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::numberDensityAtInnerRadius() const\n"
    "    Gyoto::Astrobj::SphericalAccretion::numberDensityAtInnerRadius(std::string const &) const\n"
    "    Gyoto::Astrobj::SphericalAccretion::numberDensityAtInnerRadius(double)\n"
    "    Gyoto::Astrobj::SphericalAccretion::numberDensityAtInnerRadius(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_densitySlope__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_densitySlope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_densitySlope" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_densitySlope" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->densitySlope(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_densitySlope__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_densitySlope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_densitySlope" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->densitySlope();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_densitySlope(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_densitySlope__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_densitySlope__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_densitySlope'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::densitySlope(double)\n"
    "    Gyoto::Astrobj::SphericalAccretion::densitySlope() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_temperatureAtInnerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_temperatureAtInnerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_temperatureAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_temperatureAtInnerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperatureAtInnerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_temperatureAtInnerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_temperatureAtInnerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_temperatureAtInnerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->temperatureAtInnerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_temperatureAtInnerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_temperatureAtInnerRadius__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_temperatureAtInnerRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_temperatureAtInnerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::temperatureAtInnerRadius(double)\n"
    "    Gyoto::Astrobj::SphericalAccretion::temperatureAtInnerRadius() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_temperatureSlope__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_temperatureSlope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_temperatureSlope" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_temperatureSlope" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperatureSlope(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_temperatureSlope__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_temperatureSlope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_temperatureSlope" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->temperatureSlope();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_temperatureSlope(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_temperatureSlope__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_temperatureSlope__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_temperatureSlope'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::temperatureSlope(double)\n"
    "    Gyoto::Astrobj::SphericalAccretion::temperatureSlope() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_magnetizationParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_magnetizationParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalAccretion_magnetizationParameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->magnetizationParameter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_magnetizationParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_magnetizationParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_magnetizationParameter" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::SphericalAccretion const *)arg1)->magnetizationParameter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_magnetizationParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_magnetizationParameter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_magnetizationParameter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_magnetizationParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::magnetizationParameter(double)\n"
    "    Gyoto::Astrobj::SphericalAccretion::magnetizationParameter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphericalAccretion_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::SphericalAccretion const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SphericalAccretion_metric__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_metric__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SphericalAccretion_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric() const\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Astrobj::SphericalAccretion::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SphericalAccretion___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:SphericalAccretion_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SphericalAccretion_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SphericalAccretion_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SphericalAccretion_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalAccretion_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::SphericalAccretion const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:SphericalAccretion_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SphericalAccretion_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SphericalAccretion_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SphericalAccretion_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalAccretion_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::SphericalAccretion const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_SphericalAccretion_radiativeQ__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = is_array(argv[7]) || PySequence_Check(argv[7]);
                  }
                  if (_v) {
                    return _wrap_SphericalAccretion_radiativeQ__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SphericalAccretion_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::SphericalAccretion::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SphericalAccretion_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::SphericalAccretion *arg1 = (Gyoto::Astrobj::SphericalAccretion *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SphericalAccretion_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalAccretion_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::SphericalAccretion *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::SphericalAccretion * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SphericalAccretion__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::SphericalAccretion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SphericalAccretion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SphericalAccretion" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::SphericalAccretion *)new_Gyoto_Astrobj_SphericalAccretion__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SphericalAccretion__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::SphericalAccretion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SphericalAccretion",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SphericalAccretion" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::SphericalAccretion *)new_Gyoto_Astrobj_SphericalAccretion__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SphericalAccretion(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SphericalAccretion__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SphericalAccretion__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SphericalAccretion__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SphericalAccretion__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SphericalAccretion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::SphericalAccretion::SphericalAccretion()\n"
    "    Gyoto::Astrobj::SphericalAccretion::SphericalAccretion(Gyoto::Astrobj::SphericalAccretion const &)\n"
    "    Gyoto::Astrobj::SphericalAccretion::SphericalAccretion(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::SphericalAccretion::SphericalAccretion(long)\n");
  return 0;
}


SWIGINTERN PyObject *SphericalAccretion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__SphericalAccretion, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThinDiskProfile_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskProfile_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskProfile_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::ThinDiskProfile::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskProfile_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThinDiskProfile_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDiskProfile_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDiskProfile_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::ThinDiskProfile::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskProfile_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskProfile_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskProfile_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskProfile_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskProfile_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskProfile_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskProfile_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskProfile::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::ThinDiskProfile::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskProfile_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskProfile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThinDiskProfile")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskProfile *)new Gyoto::Astrobj::ThinDiskProfile();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskProfile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskProfile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskProfile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskProfile" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThinDiskProfile" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskProfile *)new Gyoto::Astrobj::ThinDiskProfile((Gyoto::Astrobj::ThinDiskProfile const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskProfile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskProfile_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskProfile *)((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThinDiskProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThinDiskProfile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThinDiskProfile" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_circularMotion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskProfile_circularMotion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_circularMotion" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->circularMotion();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_circularMotion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskProfile_circularMotion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_circularMotion" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskProfile_circularMotion" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->circularMotion(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_circularMotion(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskProfile_circularMotion__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDiskProfile_circularMotion__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskProfile_circularMotion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskProfile::circularMotion() const\n"
    "    Gyoto::Astrobj::ThinDiskProfile::circularMotion(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_model_param__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDiskProfile_model_param",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_model_param" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskProfile_model_param" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskProfile_model_param" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->model_param((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_model_param__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDiskProfile_model_param",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_model_param" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->model_param();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_model_param(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDiskProfile_model_param__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDiskProfile_model_param__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskProfile_model_param'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskProfile::model_param(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Astrobj::ThinDiskProfile::model_param() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThinDiskProfile_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskProfile_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskProfile_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskProfile_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskProfile_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThinDiskProfile_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDiskProfile_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDiskProfile_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskProfile_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskProfile_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThinDiskProfile_emission__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_ThinDiskProfile_emission__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDiskProfile_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskProfile::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::ThinDiskProfile::emission(double,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDiskProfile_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDiskProfile_processHitQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDiskProfile *arg1 = (Gyoto::Astrobj::ThinDiskProfile *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  Gyoto::Astrobj::Properties *arg6 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ThinDiskProfile_processHitQuantities",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDiskProfile_processHitQuantities" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDiskProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDiskProfile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDiskProfile_processHitQuantities" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThinDiskProfile_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDiskProfile_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDiskProfile_processHitQuantities" "', argument " "4"" of type '" "double const *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThinDiskProfile_processHitQuantities" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ThinDiskProfile_processHitQuantities" "', argument " "6"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp6);
  {
    try {
      ((Gyoto::Astrobj::ThinDiskProfile const *)arg1)->processHitQuantities(arg2,(Gyoto::state_t const &)*arg3,(double const *)arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskProfile__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskProfile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskProfile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDiskProfile" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskProfile *)new_Gyoto_Astrobj_ThinDiskProfile__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskProfile__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDiskProfile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDiskProfile",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThinDiskProfile" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDiskProfile *)new_Gyoto_Astrobj_ThinDiskProfile__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDiskProfile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThinDiskProfile__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThinDiskProfile__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskProfile__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDiskProfile__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThinDiskProfile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDiskProfile::ThinDiskProfile()\n"
    "    Gyoto::Astrobj::ThinDiskProfile::ThinDiskProfile(Gyoto::Astrobj::ThinDiskProfile const &)\n"
    "    Gyoto::Astrobj::ThinDiskProfile::ThinDiskProfile(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::ThinDiskProfile::ThinDiskProfile(long)\n");
  return 0;
}


SWIGINTERN PyObject *ThinDiskProfile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__ThinDiskProfile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ComplexMetric_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexMetric_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Metric::Complex const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexMetric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexMetric")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::Complex *)new Gyoto::Metric::Complex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexMetric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexMetric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Metric__Complex,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexMetric" "', argument " "1"" of type '" "Gyoto::Metric::Complex const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ComplexMetric" "', argument " "1"" of type '" "Gyoto::Metric::Complex const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Complex *)new Gyoto::Metric::Complex((Gyoto::Metric::Complex const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexMetric_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_clone" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Complex *)((Gyoto::Metric::Complex const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Complex, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComplexMetric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexMetric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexMetric" "', argument " "1"" of type '" "Gyoto::Metric::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_append" "', argument " "1"" of type '" "Gyoto::Metric::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->append(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_remove" "', argument " "1"" of type '" "Gyoto::Metric::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexMetric_remove" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->remove(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_getCardinal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexMetric_getCardinal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_getCardinal" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::Complex const *)arg1)->getCardinal();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_fillElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric_fillElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_fillElement" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexMetric_fillElement" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      ((Gyoto::Metric::Complex const *)arg1)->fillElement(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_setParameters" "', argument " "1"" of type '" "Gyoto::Metric::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexMetric_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_gmunu__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ComplexMetric_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ComplexMetric_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComplexMetric_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Complex const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Complex const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMetric_gmunu__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ComplexMetric_gmunu__SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ComplexMetric_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gmunu(double const [4],int,int) const\n"
    "    Gyoto::Metric::Complex::gmunu(double [4][4],double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric_jacobian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_jacobian" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Complex const *)arg1)->jacobian((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric_isStopCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric_isStopCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric_isStopCondition" "', argument " "1"" of type '" "Gyoto::Metric::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (int)((Gyoto::Metric::Complex const *)arg1)->isStopCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexMetric___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric___getitem__" "', argument " "1"" of type '" "Gyoto::Metric::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexMetric___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = Gyoto_Metric_Complex___getitem__(arg1,arg2); ;
    } catch (myCplxIdxExcept e) {
      SWIG_exception_fail(SWIG_IndexError, "Index out of bounds");
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexMetric___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Complex *arg1 = (Gyoto::Metric::Complex *) 0 ;
  int arg2 ;
  Gyoto::Metric::Generic *arg3 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComplexMetric___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexMetric___setitem__" "', argument " "1"" of type '" "Gyoto::Metric::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Complex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexMetric___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComplexMetric___setitem__" "', argument " "3"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Metric::Generic * >(argp3);
  {
    try {
      Gyoto_Metric_Complex___setitem__(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexMetric__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexMetric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexMetric" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Complex *)new_Gyoto_Metric_Complex__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexMetric__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexMetric",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ComplexMetric" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::Complex *)new_Gyoto_Metric_Complex__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexMetric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ComplexMetric__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Metric__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ComplexMetric__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexMetric__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexMetric__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ComplexMetric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Complex::Complex()\n"
    "    Gyoto::Metric::Complex::Complex(Gyoto::Metric::Complex const &)\n"
    "    Gyoto::Metric::Complex::Complex(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::Complex::Complex(long)\n");
  return 0;
}


SWIGINTERN PyObject *ComplexMetric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__Complex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Shift_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Shift_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Shift_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::Shift::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Shift_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shift_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::Shift const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Shift_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Shift_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Shift_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::Shift::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Shift_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shift_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shift_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shift_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::Shift const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Shift_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Shift_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shift_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Shift::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::Shift::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Shift__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Shift")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::Shift *)new Gyoto::Metric::Shift();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Shift, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Shift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shift" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Shift *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shift_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_clone" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Shift *)((Gyoto::Metric::Shift const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Shift, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_subMetric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shift_subMetric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_subMetric" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::Shift const *)arg1)->subMetric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_subMetric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_subMetric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_subMetric" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->subMetric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_subMetric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Shift_subMetric__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Shift_subMetric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shift_subMetric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Shift::subMetric() const\n"
    "    Gyoto::Metric::Shift::subMetric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Shift_offset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shift_offset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_offset" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::Shift const *)arg1)->offset();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_offset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_offset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_offset" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shift_offset" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shift_offset" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->offset((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_offset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Shift_offset__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Shift_offset__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shift_offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Shift::offset() const\n"
    "    Gyoto::Metric::Shift::offset(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Shift_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_mass" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shift_mass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->mass(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_gmunu__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Shift_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shift_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Shift_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Shift const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Shift const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Shift_gmunu__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Shift_gmunu__SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shift_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gmunu(double const [4],int,int) const\n"
    "    Gyoto::Metric::Shift::gmunu(double [4][4],double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Shift_gmunu_up__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Shift_gmunu_up",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shift_gmunu_up" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Shift_gmunu_up" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Shift const *)arg1)->gmunu_up((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_gmunu_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_gmunu_up",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Shift const *)arg1)->gmunu_up((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_gmunu_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Shift_gmunu_up__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Shift_gmunu_up__SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shift_gmunu_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gmunu_up(double const [4],int,int) const\n"
    "    Gyoto::Metric::Shift::gmunu_up(double [4][4],double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Shift_jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_jacobian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_jacobian" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Shift const *)arg1)->jacobian((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_isStopCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_isStopCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_isStopCondition" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (int)((Gyoto::Metric::Shift const *)arg1)->isStopCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Shift_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_fillProperty" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shift_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Shift_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shift_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Metric::Shift const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_setParameters" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shift_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_tell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  Gyoto::Hook::Teller *arg2 = (Gyoto::Hook::Teller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_tell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_tell" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Hook__Teller, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shift_tell" "', argument " "2"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Hook::Teller * >(argp2);
  {
    try {
      (arg1)->tell(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_circularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Shift_circularVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_zamoVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Shift_zamoVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_christoffel__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Shift_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shift_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Shift_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Shift_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)Gyoto_Metric_Shift_christoffel__SWIG_0_0((Gyoto::Metric::Shift const *)arg1,(double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_christoffel__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Shift_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Shift const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)Gyoto_Metric_Shift_christoffel__SWIG_0_1((Gyoto::Metric::Shift const *)arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Shift *arg1 = (Gyoto::Metric::Shift *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Shift_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Shift, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shift_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Shift *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Shift * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_Shift_christoffel__SWIG_1(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shift_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Shift_christoffel__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_Shift_christoffel__SWIG_0_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Shift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Shift_christoffel__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Shift_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    christoffel(double const [4],int const,int const,int const) const\n"
    "    christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::Shift::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Shift__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Shift *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Shift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Shift" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Shift *)new_Gyoto_Metric_Shift__SWIG_1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Shift, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shift__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Shift *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Shift",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Shift" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::Shift *)new_Gyoto_Metric_Shift__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Shift, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shift(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Shift__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Shift__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Shift__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Shift'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Shift::Shift()\n"
    "    Gyoto::Metric::Shift::Shift(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::Shift::Shift(long)\n");
  return 0;
}


SWIGINTERN PyObject *Shift_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__Shift, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_KerrBL_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KerrBL_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KerrBL_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::KerrBL::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_KerrBL_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::KerrBL const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_KerrBL_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KerrBL_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KerrBL_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::KerrBL::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_KerrBL_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_plugins" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KerrBL_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_plugins" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::KerrBL const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrBL_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KerrBL_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::KerrBL::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_KerrBL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KerrBL")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::KerrBL *)new Gyoto::Metric::KerrBL();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrBL, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::KerrBL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_clone" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (Gyoto::Metric::KerrBL *)((Gyoto::Metric::KerrBL const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrBL, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_spin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_spin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_spin" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KerrBL_spin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->spin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_spin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_spin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_spin" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->spin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_spin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrBL_spin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KerrBL_spin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_spin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::spin(double const)\n"
    "    Gyoto::Metric::KerrBL::spin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_difftol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_difftol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_difftol" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->difftol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_difftol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_difftol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_difftol" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KerrBL_difftol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->difftol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_difftol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrBL_difftol__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KerrBL_difftol__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_difftol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::difftol() const\n"
    "    Gyoto::Metric::KerrBL::difftol(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_horizonSecurity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_horizonSecurity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_horizonSecurity" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KerrBL_horizonSecurity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->horizonSecurity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_horizonSecurity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_horizonSecurity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_horizonSecurity" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->horizonSecurity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_horizonSecurity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrBL_horizonSecurity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KerrBL_horizonSecurity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_horizonSecurity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::horizonSecurity(double)\n"
    "    Gyoto::Metric::KerrBL::horizonSecurity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_genericIntegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_genericIntegrator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_genericIntegrator" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KerrBL_genericIntegrator" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->genericIntegrator(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_genericIntegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_genericIntegrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_genericIntegrator" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Metric::KerrBL const *)arg1)->genericIntegrator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_genericIntegrator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrBL_genericIntegrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KerrBL_genericIntegrator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_genericIntegrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::genericIntegrator(bool)\n"
    "    Gyoto::Metric::KerrBL::genericIntegrator() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_getRms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_getRms",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_getRms" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->getRms();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_getRmb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrBL_getRmb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_getRmb" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->getRmb();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_getSpecificAngularMomentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_getSpecificAngularMomentum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_getSpecificAngularMomentum" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KerrBL_getSpecificAngularMomentum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->getSpecificAngularMomentum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_getPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrBL_getPotential",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_getPotential" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KerrBL_getPotential" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->getPotential((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_gmunu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrBL_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KerrBL_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrBL_gmunu__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_KerrBL_gmunu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::gmunu(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::KerrBL::gmunu(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_gmunu_up__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_gmunu_up",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->gmunu_up((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_gmunu_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrBL_gmunu_up",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KerrBL_gmunu_up" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_gmunu_up" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->gmunu_up((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_gmunu_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrBL_gmunu_up__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_KerrBL_gmunu_up__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_gmunu_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::gmunu_up(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::KerrBL::gmunu_up(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_christoffel__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:KerrBL_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KerrBL_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KerrBL_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->christoffel((double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrBL_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)((Gyoto::Metric::KerrBL const *)arg1)->christoffel((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_ScalarProd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrBL_ScalarProd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_ScalarProd" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (double)((Gyoto::Metric::KerrBL const *)arg1)->ScalarProd((double const (*))arg2,(double const (*))arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_nullifyCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrBL_nullifyCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_nullifyCoord" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KerrBL_nullifyCoord" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_nullifyCoord" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->nullifyCoord(arg2,*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_nullifyCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_nullifyCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_nullifyCoord" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->nullifyCoord(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_nullifyCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        return _wrap_KerrBL_nullifyCoord__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KerrBL_nullifyCoord__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_nullifyCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::nullifyCoord(double [8],double &) const\n"
    "    Gyoto::Metric::KerrBL::nullifyCoord(double [8]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_circularVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrBL_circularVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_circularVelocity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->circularVelocity((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_circularVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrBL_circularVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->circularVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_zamoVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrBL_zamoVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->zamoVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_MakeCoord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrBL_MakeCoord",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_MakeCoord" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      5 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->MakeCoord((double const (*))arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_MakeMomentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrBL_MakeMomentum",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_MakeMomentum" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      5 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->MakeMomentum((double const (*))arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_myrk4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyArrayObject *array5 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:KerrBL_myrk4",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_myrk4" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      5 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_myrk4" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (int)((Gyoto::Metric::KerrBL const *)arg1)->myrk4((double const (*))arg2,(double const (*))arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_myrk4_adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  Gyoto::Worldline *arg2 = (Gyoto::Worldline *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double arg7 ;
  double *arg8 = 0 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:KerrBL_myrk4_adaptive",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_myrk4_adaptive" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KerrBL_myrk4_adaptive" "', argument " "2"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Worldline * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KerrBL_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_myrk4_adaptive" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KerrBL_myrk4_adaptive" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "KerrBL_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::state_t * >(argp6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "KerrBL_myrk4_adaptive" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "KerrBL_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "KerrBL_myrk4_adaptive" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      result = (int)((Gyoto::Metric::KerrBL const *)arg1)->myrk4_adaptive(arg2,(Gyoto::state_t const &)*arg3,arg4,arg5,*arg6,arg7,*arg8,arg9);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_myrk4_adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  Gyoto::Worldline *arg2 = (Gyoto::Worldline *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double arg7 ;
  double *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:KerrBL_myrk4_adaptive",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_myrk4_adaptive" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KerrBL_myrk4_adaptive" "', argument " "2"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Worldline * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KerrBL_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_myrk4_adaptive" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KerrBL_myrk4_adaptive" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "KerrBL_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::state_t * >(argp6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "KerrBL_myrk4_adaptive" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "KerrBL_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      result = (int)((Gyoto::Metric::KerrBL const *)arg1)->myrk4_adaptive(arg2,(Gyoto::state_t const &)*arg3,arg4,arg5,*arg6,arg7,*arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_myrk4_adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_KerrBL_myrk4_adaptive__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_KerrBL_myrk4_adaptive__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_myrk4_adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::myrk4_adaptive(Gyoto::Worldline *,Gyoto::state_t const &,double,double,Gyoto::state_t &,double,double &,double) const\n"
    "    Gyoto::Metric::KerrBL::myrk4_adaptive(Gyoto::Worldline *,Gyoto::state_t const &,double,double,Gyoto::state_t &,double,double &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  Gyoto::state_t *arg2 = 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrBL_diff",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_diff" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KerrBL_diff" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_diff" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KerrBL_diff" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrBL_diff" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrBL_diff" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)((Gyoto::Metric::KerrBL const *)arg1)->diff((Gyoto::state_t const &)*arg2,*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_setParticleProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  Gyoto::Worldline *arg2 = (Gyoto::Worldline *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrBL_setParticleProperties",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_setParticleProperties" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KerrBL_setParticleProperties" "', argument " "2"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Worldline * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KerrBL_setParticleProperties" "', argument " "3"" of type '" "double const *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->setParticleProperties(arg2,(double const *)arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_isStopCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_isStopCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_isStopCondition" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (int)((Gyoto::Metric::KerrBL const *)arg1)->isStopCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_observerTetrad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:KerrBL_observerTetrad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_observerTetrad" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      ((Gyoto::Metric::KerrBL const *)arg1)->observerTetrad((double const (*))arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_circularVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_KerrBL_circularVelocity__SWIG_2(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_circularVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrBL_circularVelocity__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_KerrBL_circularVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_KerrBL_circularVelocity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_circularVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::circularVelocity(double const [4],double [4],double) const\n"
    "    Gyoto::Metric::KerrBL::circularVelocity(double const [4],double [4]) const\n"
    "    Gyoto::Metric::KerrBL::circularVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_zamoVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_KerrBL_zamoVelocity__SWIG_1(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_zamoVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrBL_zamoVelocity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_KerrBL_zamoVelocity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_zamoVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::zamoVelocity(double const [4],double [4]) const\n"
    "    Gyoto::Metric::KerrBL::zamoVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrBL_christoffel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrBL_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrBL_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_KerrBL_christoffel__SWIG_3(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrBL_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrBL_christoffel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_KerrBL_christoffel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrBL, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_KerrBL_christoffel__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrBL_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    christoffel(double const [4],int const,int const,int const) const\n"
    "    Gyoto::Metric::KerrBL::christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::KerrBL::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_KerrBL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::KerrBL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KerrBL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KerrBL" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::KerrBL *)new_Gyoto_Metric_KerrBL__SWIG_1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrBL, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KerrBL__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::KerrBL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KerrBL",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KerrBL" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::KerrBL *)new_Gyoto_Metric_KerrBL__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrBL, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KerrBL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KerrBL__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KerrBL__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KerrBL__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KerrBL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrBL::KerrBL()\n"
    "    Gyoto::Metric::KerrBL::KerrBL(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::KerrBL::KerrBL(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_KerrBL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrBL *arg1 = (Gyoto::Metric::KerrBL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KerrBL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrBL, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KerrBL" "', argument " "1"" of type '" "Gyoto::Metric::KerrBL *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrBL * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KerrBL_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__KerrBL, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_KerrKS_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KerrKS_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KerrKS_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::KerrKS::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_KerrKS_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrKS_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::KerrKS const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_KerrKS_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KerrKS_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KerrKS_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::KerrKS::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_KerrKS_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_plugins" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KerrKS_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KerrKS_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrKS_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_plugins" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::KerrKS const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrKS_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KerrKS_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrKS_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrKS::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::KerrKS::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_KerrKS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KerrKS")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::KerrKS *)new Gyoto::Metric::KerrKS();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrKS, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::KerrKS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrKS_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_clone" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    try {
      result = (Gyoto::Metric::KerrKS *)((Gyoto::Metric::KerrKS const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrKS, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_spin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_spin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_spin" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KerrKS_spin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->spin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_spin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrKS_spin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_spin" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::KerrKS const *)arg1)->spin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_spin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrKS_spin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KerrKS_spin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrKS_spin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrKS::spin(double const)\n"
    "    Gyoto::Metric::KerrKS::spin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrKS_horizonSecurity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_horizonSecurity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_horizonSecurity" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KerrKS_horizonSecurity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->horizonSecurity(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_horizonSecurity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KerrKS_horizonSecurity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_horizonSecurity" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::KerrKS const *)arg1)->horizonSecurity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_horizonSecurity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_KerrKS_horizonSecurity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KerrKS_horizonSecurity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrKS_horizonSecurity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrKS::horizonSecurity(double)\n"
    "    Gyoto::Metric::KerrKS::horizonSecurity() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrKS_gmunu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrKS_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KerrKS_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrKS_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::KerrKS const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrKS const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrKS_gmunu__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_KerrKS_gmunu__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrKS_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrKS::gmunu(double const [4],int,int) const\n"
    "    Gyoto::Metric::KerrKS::gmunu(double [4][4],double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrKS_gmunu_up__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrKS_gmunu_up",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KerrKS_gmunu_up" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrKS_gmunu_up" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::KerrKS const *)arg1)->gmunu_up((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_gmunu_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_gmunu_up",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrKS const *)arg1)->gmunu_up((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_gmunu_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrKS_gmunu_up__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_KerrKS_gmunu_up__SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrKS_gmunu_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gmunu_up(double const [4],int,int) const\n"
    "    Gyoto::Metric::KerrKS::gmunu_up(double [4][4],double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrKS_jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_jacobian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_jacobian" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrKS const *)arg1)->jacobian((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_gmunu_up_and_jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double (*arg2)[4] ;
  double (*arg3)[4][4] ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array3 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double (*)[4][4]) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_gmunu_up_and_jacobian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_gmunu_up_and_jacobian" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Metric::KerrKS const *)arg1)->gmunu_up_and_jacobian((double (*)[4])arg2,(double (*)[4][4])arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_circularVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrKS_circularVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrKS_circularVelocity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((Gyoto::Metric::KerrKS const *)arg1)->circularVelocity((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_circularVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrKS_circularVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::KerrKS const *)arg1)->circularVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_isStopCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_isStopCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_isStopCondition" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (int)((Gyoto::Metric::KerrKS const *)arg1)->isStopCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_setParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KerrKS_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_setParameter" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "KerrKS_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "KerrKS_setParameter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "KerrKS_setParameter" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (int)(arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_circularVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_KerrKS_circularVelocity__SWIG_2(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_circularVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrKS_circularVelocity__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_KerrKS_circularVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_KerrKS_circularVelocity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrKS_circularVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrKS::circularVelocity(double const [4],double [4],double) const\n"
    "    Gyoto::Metric::KerrKS::circularVelocity(double const [4],double [4]) const\n"
    "    Gyoto::Metric::KerrKS::circularVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KerrKS_zamoVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_KerrKS_zamoVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_christoffel__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:KerrKS_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KerrKS_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KerrKS_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KerrKS_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)Gyoto_Metric_KerrKS_christoffel__SWIG_0_0((Gyoto::Metric::KerrKS const *)arg1,(double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_christoffel__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KerrKS_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)Gyoto_Metric_KerrKS_christoffel__SWIG_0_1((Gyoto::Metric::KerrKS const *)arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:KerrKS_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KerrKS_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_KerrKS_christoffel__SWIG_1(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_KerrKS_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_KerrKS_christoffel__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_KerrKS_christoffel__SWIG_0_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__KerrKS, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_KerrKS_christoffel__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KerrKS_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    christoffel(double const [4],int const,int const,int const) const\n"
    "    christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::KerrKS::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_KerrKS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::KerrKS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KerrKS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KerrKS" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::KerrKS *)new_Gyoto_Metric_KerrKS__SWIG_1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrKS, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KerrKS__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::KerrKS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KerrKS",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KerrKS" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::KerrKS *)new_Gyoto_Metric_KerrKS__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__KerrKS, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KerrKS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KerrKS__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KerrKS__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KerrKS__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KerrKS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::KerrKS::KerrKS()\n"
    "    Gyoto::Metric::KerrKS::KerrKS(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::KerrKS::KerrKS(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_KerrKS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::KerrKS *arg1 = (Gyoto::Metric::KerrKS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KerrKS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__KerrKS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KerrKS" "', argument " "1"" of type '" "Gyoto::Metric::KerrKS *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::KerrKS * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KerrKS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__KerrKS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Minkowski_spherical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Minkowski_spherical",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_spherical" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Minkowski_spherical" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->spherical(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_spherical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Minkowski_spherical",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_spherical" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Metric::Minkowski const *)arg1)->spherical();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_spherical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Minkowski_spherical__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Minkowski_spherical__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Minkowski_spherical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Minkowski::spherical(bool)\n"
    "    Gyoto::Metric::Minkowski::spherical() const\n");
  return 0;
}


SWIGINTERN int Swig_var_Minkowski_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Minkowski_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Minkowski_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::Minkowski::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Minkowski_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Minkowski_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::Minkowski const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Minkowski_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Minkowski_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Minkowski_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::Minkowski::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Minkowski_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Minkowski_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Minkowski_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minkowski_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Minkowski_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::Minkowski const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Minkowski_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Minkowski_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Minkowski_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Minkowski::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::Minkowski::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Minkowski__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Minkowski")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::Minkowski *)new Gyoto::Metric::Minkowski();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Minkowski, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Minkowski *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Minkowski_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_clone" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Minkowski *)((Gyoto::Metric::Minkowski const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Minkowski, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_gmunu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Minkowski_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Minkowski const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_christoffel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Minkowski_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)((Gyoto::Metric::Minkowski const *)arg1)->christoffel((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Minkowski_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Minkowski_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Minkowski_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Minkowski const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Minkowski_gmunu__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Minkowski_gmunu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Minkowski_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Minkowski::gmunu(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::Minkowski::gmunu(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Minkowski_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Minkowski_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Minkowski_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Minkowski_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Minkowski_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)((Gyoto::Metric::Minkowski const *)arg1)->christoffel((double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_observerTetrad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  unsigned int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Minkowski_observerTetrad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_observerTetrad" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Minkowski_observerTetrad" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array7 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
    if (!array7 || !require_dimensions(array7,1) || !require_size(array7, size, 1) ||
      !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Metric::Minkowski const *)arg1)->observerTetrad(arg2,(double const (*))arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  Gyoto::state_t *arg2 = 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Minkowski_diff",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_diff" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Minkowski_diff" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minkowski_diff" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Minkowski_diff" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minkowski_diff" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Minkowski_diff" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)((Gyoto::Metric::Minkowski const *)arg1)->diff((Gyoto::state_t const &)*arg2,*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_circularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Minkowski_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Minkowski_circularVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_zamoVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Minkowski_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Minkowski_zamoVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_christoffel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Minkowski_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minkowski_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_Minkowski_christoffel__SWIG_3(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Minkowski_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Minkowski_christoffel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_Minkowski_christoffel__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Minkowski, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Minkowski_christoffel__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Minkowski_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Minkowski::christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::Minkowski::christoffel(double const [4],int const,int const,int const) const\n"
    "    Gyoto::Metric::Minkowski::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Minkowski__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Minkowski *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Minkowski",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Minkowski" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Minkowski *)new_Gyoto_Metric_Minkowski__SWIG_1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Minkowski, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Minkowski__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Minkowski *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Minkowski",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Minkowski" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::Minkowski *)new_Gyoto_Metric_Minkowski__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Minkowski, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Minkowski(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Minkowski__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Minkowski__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Minkowski__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Minkowski'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Minkowski::Minkowski()\n"
    "    Gyoto::Metric::Minkowski::Minkowski(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::Minkowski::Minkowski(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Minkowski(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Minkowski *arg1 = (Gyoto::Metric::Minkowski *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Minkowski",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Minkowski, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Minkowski" "', argument " "1"" of type '" "Gyoto::Metric::Minkowski *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Minkowski * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Minkowski_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__Minkowski, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ChernSimons_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ChernSimons_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ChernSimons_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::ChernSimons::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ChernSimons_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChernSimons_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::ChernSimons const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ChernSimons_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ChernSimons_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ChernSimons_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::ChernSimons::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ChernSimons_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChernSimons_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_plugins" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChernSimons_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChernSimons_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChernSimons_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_plugins" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::ChernSimons const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ChernSimons_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ChernSimons_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ChernSimons_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::ChernSimons::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::ChernSimons::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ChernSimons__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ChernSimons")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::ChernSimons *)new Gyoto::Metric::ChernSimons();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__ChernSimons, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ChernSimons__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::ChernSimons *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ChernSimons",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Metric__ChernSimons,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChernSimons" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChernSimons" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    try {
      result = (Gyoto::Metric::ChernSimons *)new Gyoto::Metric::ChernSimons((Gyoto::Metric::ChernSimons const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__ChernSimons, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChernSimons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ChernSimons",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChernSimons" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::ChernSimons *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChernSimons_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_clone" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    try {
      result = (Gyoto::Metric::ChernSimons *)((Gyoto::Metric::ChernSimons const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__ChernSimons, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_dzetaCS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChernSimons_dzetaCS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_dzetaCS" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChernSimons_dzetaCS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dzetaCS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_dzetaCS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChernSimons_dzetaCS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_dzetaCS" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::ChernSimons const *)arg1)->dzetaCS();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_dzetaCS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ChernSimons_dzetaCS__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ChernSimons_dzetaCS__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ChernSimons_dzetaCS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::ChernSimons::dzetaCS(double)\n"
    "    Gyoto::Metric::ChernSimons::dzetaCS() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ChernSimons_gmunu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:ChernSimons_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::ChernSimons const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ChernSimons_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChernSimons_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ChernSimons_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::ChernSimons const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ChernSimons_gmunu__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ChernSimons_gmunu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ChernSimons_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::ChernSimons::gmunu(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::ChernSimons::gmunu(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ChernSimons_christoffel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ChernSimons_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChernSimons_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ChernSimons_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ChernSimons_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)((Gyoto::Metric::ChernSimons const *)arg1)->christoffel((double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ChernSimons_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)((Gyoto::Metric::ChernSimons const *)arg1)->christoffel((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_gmunu_up__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:ChernSimons_gmunu_up",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::ChernSimons const *)arg1)->gmunu_up((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_gmunu_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ChernSimons_gmunu_up",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChernSimons_gmunu_up" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ChernSimons_gmunu_up" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::ChernSimons const *)arg1)->gmunu_up((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_gmunu_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ChernSimons_gmunu_up__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ChernSimons_gmunu_up__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ChernSimons_gmunu_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::ChernSimons::gmunu_up(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::ChernSimons::gmunu_up(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ChernSimons_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ChernSimons_diff",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_diff" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      5 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (int)((Gyoto::Metric::ChernSimons const *)arg1)->diff((double const (*))arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_circularVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ChernSimons_circularVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ChernSimons_circularVelocity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((Gyoto::Metric::ChernSimons const *)arg1)->circularVelocity((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_circularVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ChernSimons_circularVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::ChernSimons const *)arg1)->circularVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_circularVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:ChernSimons_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_ChernSimons_circularVelocity__SWIG_2(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_circularVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ChernSimons_circularVelocity__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_ChernSimons_circularVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ChernSimons_circularVelocity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ChernSimons_circularVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::ChernSimons::circularVelocity(double const [4],double [4],double) const\n"
    "    Gyoto::Metric::ChernSimons::circularVelocity(double const [4],double [4]) const\n"
    "    Gyoto::Metric::ChernSimons::circularVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ChernSimons_zamoVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:ChernSimons_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_ChernSimons_zamoVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_christoffel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::ChernSimons *arg1 = (Gyoto::Metric::ChernSimons *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:ChernSimons_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChernSimons_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::ChernSimons *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::ChernSimons * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_ChernSimons_christoffel__SWIG_3(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChernSimons_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ChernSimons_christoffel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_ChernSimons_christoffel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ChernSimons_christoffel__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ChernSimons_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::ChernSimons::christoffel(double const [4],int const,int const,int const) const\n"
    "    Gyoto::Metric::ChernSimons::christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::ChernSimons::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ChernSimons__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::ChernSimons *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ChernSimons",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChernSimons" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::ChernSimons *)new_Gyoto_Metric_ChernSimons__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__ChernSimons, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ChernSimons__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::ChernSimons *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ChernSimons",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ChernSimons" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::ChernSimons *)new_Gyoto_Metric_ChernSimons__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__ChernSimons, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ChernSimons(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ChernSimons__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Metric__ChernSimons, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ChernSimons__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ChernSimons__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ChernSimons__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ChernSimons'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::ChernSimons::ChernSimons()\n"
    "    Gyoto::Metric::ChernSimons::ChernSimons(Gyoto::Metric::ChernSimons const &)\n"
    "    Gyoto::Metric::ChernSimons::ChernSimons(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::ChernSimons::ChernSimons(long)\n");
  return 0;
}


SWIGINTERN PyObject *ChernSimons_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__ChernSimons, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_RezzollaZhidenko_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RezzollaZhidenko_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RezzollaZhidenko_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::RezzollaZhidenko::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_RezzollaZhidenko_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RezzollaZhidenko_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RezzollaZhidenko_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::RezzollaZhidenko::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_plugins" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RezzollaZhidenko_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RezzollaZhidenko_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_plugins" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::RezzollaZhidenko const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_RezzollaZhidenko_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RezzollaZhidenko_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::RezzollaZhidenko::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RezzollaZhidenko__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RezzollaZhidenko")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::RezzollaZhidenko *)new Gyoto::Metric::RezzollaZhidenko();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RezzollaZhidenko__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::RezzollaZhidenko *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RezzollaZhidenko",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RezzollaZhidenko" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RezzollaZhidenko" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (Gyoto::Metric::RezzollaZhidenko *)new Gyoto::Metric::RezzollaZhidenko((Gyoto::Metric::RezzollaZhidenko const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RezzollaZhidenko(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RezzollaZhidenko",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RezzollaZhidenko" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::RezzollaZhidenko *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_clone" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (Gyoto::Metric::RezzollaZhidenko *)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_epsilon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_epsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_epsilon" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_epsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->epsilon(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_epsilon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_epsilon" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->epsilon();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_epsilon(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_RezzollaZhidenko_epsilon__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RezzollaZhidenko_epsilon__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_epsilon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::epsilon(double)\n"
    "    Gyoto::Metric::RezzollaZhidenko::epsilon() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_rms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_rms",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_rms" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_rms" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rms(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_rms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_rms",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_rms" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->rms();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_rms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_RezzollaZhidenko_rms__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RezzollaZhidenko_rms__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_rms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::rms(double)\n"
    "    Gyoto::Metric::RezzollaZhidenko::rms() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_rmb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_rmb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_rmb" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_rmb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rmb(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_rmb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_rmb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_rmb" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->rmb();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_rmb(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_RezzollaZhidenko_rmb__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RezzollaZhidenko_rmb__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_rmb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::rmb(double)\n"
    "    Gyoto::Metric::RezzollaZhidenko::rmb() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_aparam__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_aparam",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_aparam" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RezzollaZhidenko_aparam" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RezzollaZhidenko_aparam" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->aparam((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_aparam__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_aparam",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_aparam" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::RezzollaZhidenko const *)arg1)->aparam();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_aparam(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_RezzollaZhidenko_aparam__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RezzollaZhidenko_aparam__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_aparam'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::aparam(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Metric::RezzollaZhidenko::aparam() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_bparam__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_bparam",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_bparam" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RezzollaZhidenko_bparam" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RezzollaZhidenko_bparam" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->bparam((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_bparam__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_bparam",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_bparam" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::RezzollaZhidenko const *)arg1)->bparam();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_bparam(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_RezzollaZhidenko_bparam__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RezzollaZhidenko_bparam__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_bparam'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::bparam(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Metric::RezzollaZhidenko::bparam() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_gmunu__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::RezzollaZhidenko const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RezzollaZhidenko_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RezzollaZhidenko_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RezzollaZhidenko_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RezzollaZhidenko_gmunu__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RezzollaZhidenko_gmunu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gmunu(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::RezzollaZhidenko::gmunu(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_N2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_N2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_N2" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_N2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->N2(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_B2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_B2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_B2" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_B2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->B2(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_Nprime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_Nprime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_Nprime" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_Nprime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->Nprime(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_Bprime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_Bprime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_Bprime" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_Bprime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->Bprime(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_christoffel__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RezzollaZhidenko_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RezzollaZhidenko_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RezzollaZhidenko_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RezzollaZhidenko_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->christoffel((double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RezzollaZhidenko_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->christoffel((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_isStopCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_isStopCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_isStopCondition" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (int)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->isStopCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_getRmb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_getRmb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_getRmb" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->getRmb();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_getRms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RezzollaZhidenko_getRms",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_getRms" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->getRms();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_getPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RezzollaZhidenko_getPotential",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_getPotential" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RezzollaZhidenko_getPotential" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->getPotential((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_getSpecificAngularMomentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_getSpecificAngularMomentum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_getSpecificAngularMomentum" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RezzollaZhidenko_getSpecificAngularMomentum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::RezzollaZhidenko const *)arg1)->getSpecificAngularMomentum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_circularVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RezzollaZhidenko_circularVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RezzollaZhidenko_circularVelocity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((Gyoto::Metric::RezzollaZhidenko const *)arg1)->circularVelocity((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_circularVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RezzollaZhidenko_circularVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::RezzollaZhidenko const *)arg1)->circularVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_circularVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_RezzollaZhidenko_circularVelocity__SWIG_2(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_circularVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RezzollaZhidenko_circularVelocity__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_RezzollaZhidenko_circularVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RezzollaZhidenko_circularVelocity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_circularVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::circularVelocity(double const [4],double [4],double) const\n"
    "    Gyoto::Metric::RezzollaZhidenko::circularVelocity(double const [4],double [4]) const\n"
    "    Gyoto::Metric::RezzollaZhidenko::circularVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_zamoVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_RezzollaZhidenko_zamoVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_christoffel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::RezzollaZhidenko *arg1 = (Gyoto::Metric::RezzollaZhidenko *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RezzollaZhidenko_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RezzollaZhidenko_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::RezzollaZhidenko *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::RezzollaZhidenko * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_RezzollaZhidenko_christoffel__SWIG_3(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RezzollaZhidenko_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RezzollaZhidenko_christoffel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_RezzollaZhidenko_christoffel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RezzollaZhidenko_christoffel__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RezzollaZhidenko_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    christoffel(double const [4],int const,int const,int const) const\n"
    "    Gyoto::Metric::RezzollaZhidenko::christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::RezzollaZhidenko::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RezzollaZhidenko__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::RezzollaZhidenko *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RezzollaZhidenko",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RezzollaZhidenko" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::RezzollaZhidenko *)new_Gyoto_Metric_RezzollaZhidenko__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RezzollaZhidenko__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::RezzollaZhidenko *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RezzollaZhidenko",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RezzollaZhidenko" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::RezzollaZhidenko *)new_Gyoto_Metric_RezzollaZhidenko__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RezzollaZhidenko(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RezzollaZhidenko__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RezzollaZhidenko__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RezzollaZhidenko__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RezzollaZhidenko__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RezzollaZhidenko'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::RezzollaZhidenko::RezzollaZhidenko()\n"
    "    Gyoto::Metric::RezzollaZhidenko::RezzollaZhidenko(Gyoto::Metric::RezzollaZhidenko const &)\n"
    "    Gyoto::Metric::RezzollaZhidenko::RezzollaZhidenko(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::RezzollaZhidenko::RezzollaZhidenko(long)\n");
  return 0;
}


SWIGINTERN PyObject *RezzollaZhidenko_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__RezzollaZhidenko, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Hayward_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hayward_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hayward_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::Hayward::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Hayward_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hayward_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::Hayward const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Hayward_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hayward_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hayward_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::Hayward::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Hayward_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Hayward *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hayward_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hayward_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hayward_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::Hayward const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Hayward_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Hayward_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hayward_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Hayward::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::Hayward::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Hayward__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Hayward")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::Hayward *)new Gyoto::Metric::Hayward();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Hayward, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Hayward *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hayward_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_clone" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Hayward *)((Gyoto::Metric::Hayward const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Hayward, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_spin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_spin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_spin" "', argument " "1"" of type '" "Gyoto::Metric::Hayward *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hayward_spin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->spin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_spin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hayward_spin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_spin" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->spin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_spin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Hayward_spin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Hayward_spin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hayward_spin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Hayward::spin(double const)\n"
    "    Gyoto::Metric::Hayward::spin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hayward_charge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_charge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_charge" "', argument " "1"" of type '" "Gyoto::Metric::Hayward *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hayward_charge" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->charge(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_charge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hayward_charge",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_charge" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->charge();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_charge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Hayward_charge__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Hayward_charge__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hayward_charge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Hayward::charge(double const)\n"
    "    Gyoto::Metric::Hayward::charge() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hayward_getSpecificAngularMomentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_getSpecificAngularMomentum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_getSpecificAngularMomentum" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hayward_getSpecificAngularMomentum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->getSpecificAngularMomentum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_getPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Hayward_getPotential",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_getPotential" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hayward_getPotential" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->getPotential((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_circularVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Hayward_circularVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Hayward_circularVelocity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((Gyoto::Metric::Hayward const *)arg1)->circularVelocity((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_gmunu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Hayward const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Hayward_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hayward_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Hayward_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Hayward_gmunu__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Hayward_gmunu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hayward_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Hayward::gmunu(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::Hayward::gmunu(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hayward_gmunu_up__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_gmunu_up",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Hayward const *)arg1)->gmunu_up((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_gmunu_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Hayward_gmunu_up",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hayward_gmunu_up" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Hayward_gmunu_up" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->gmunu_up((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_gmunu_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Hayward_gmunu_up__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Hayward_gmunu_up__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hayward_gmunu_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Hayward::gmunu_up(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::Hayward::gmunu_up(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hayward_christoffel__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Hayward_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hayward_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Hayward_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Hayward_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->christoffel((double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Hayward_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)((Gyoto::Metric::Hayward const *)arg1)->christoffel((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_ScalarProd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Hayward_ScalarProd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_ScalarProd" "', argument " "1"" of type '" "Gyoto::Metric::Hayward const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (double)((Gyoto::Metric::Hayward const *)arg1)->ScalarProd((double const (*))arg2,(double const (*))arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_circularVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Hayward *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Hayward_circularVelocity__SWIG_1(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_circularVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Hayward_circularVelocity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Hayward_circularVelocity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hayward_circularVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Hayward::circularVelocity(double const [4],double [4],double) const\n"
    "    Gyoto::Metric::Hayward::circularVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hayward_zamoVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Hayward *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Hayward_zamoVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_christoffel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Hayward_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hayward_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Hayward *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_Hayward_christoffel__SWIG_3(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hayward_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Hayward_christoffel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_Hayward_christoffel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Hayward, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Hayward_christoffel__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hayward_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    christoffel(double const [4],int const,int const,int const) const\n"
    "    Gyoto::Metric::Hayward::christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::Hayward::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Hayward__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Hayward *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Hayward",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hayward" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Hayward *)new_Gyoto_Metric_Hayward__SWIG_1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Hayward, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hayward__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Hayward *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Hayward",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hayward" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::Hayward *)new_Gyoto_Metric_Hayward__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Hayward, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Hayward(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Hayward__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Hayward__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Hayward__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Hayward'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Hayward::Hayward()\n"
    "    Gyoto::Metric::Hayward::Hayward(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::Hayward::Hayward(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Hayward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Hayward *arg1 = (Gyoto::Metric::Hayward *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Hayward",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Hayward, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hayward" "', argument " "1"" of type '" "Gyoto::Metric::Hayward *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Hayward * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Hayward_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__Hayward, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SchwarzschildHarmonic_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SchwarzschildHarmonic_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SchwarzschildHarmonic_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::SchwarzschildHarmonic::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SchwarzschildHarmonic_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_SchwarzschildHarmonic_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SchwarzschildHarmonic_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SchwarzschildHarmonic_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::SchwarzschildHarmonic::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SchwarzschildHarmonic_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_plugins" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchwarzschildHarmonic_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchwarzschildHarmonic_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SchwarzschildHarmonic_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_plugins" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SchwarzschildHarmonic_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SchwarzschildHarmonic_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SchwarzschildHarmonic_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SchwarzschildHarmonic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SchwarzschildHarmonic")) SWIG_fail;
  {
    try {
      result = (Gyoto::Metric::SchwarzschildHarmonic *)new Gyoto::Metric::SchwarzschildHarmonic();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SchwarzschildHarmonic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::SchwarzschildHarmonic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SchwarzschildHarmonic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SchwarzschildHarmonic" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SchwarzschildHarmonic" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::SchwarzschildHarmonic *)new Gyoto::Metric::SchwarzschildHarmonic((Gyoto::Metric::SchwarzschildHarmonic const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SchwarzschildHarmonic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SchwarzschildHarmonic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchwarzschildHarmonic" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::SchwarzschildHarmonic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SchwarzschildHarmonic_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_clone" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::SchwarzschildHarmonic *)((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_gmunu__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:SchwarzschildHarmonic_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SchwarzschildHarmonic_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SchwarzschildHarmonic_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SchwarzschildHarmonic_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SchwarzschildHarmonic_gmunu__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SchwarzschildHarmonic_gmunu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SchwarzschildHarmonic_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gmunu(double [4][4],double const [4]) const\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::gmunu(double const [4],int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_christoffel__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SchwarzschildHarmonic_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SchwarzschildHarmonic_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SchwarzschildHarmonic_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SchwarzschildHarmonic_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->christoffel((double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SchwarzschildHarmonic_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->christoffel((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_isStopCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SchwarzschildHarmonic_isStopCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_isStopCondition" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (int)((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->isStopCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_circularVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SchwarzschildHarmonic_circularVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchwarzschildHarmonic_circularVelocity" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SchwarzschildHarmonic_circularVelocity" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SchwarzschildHarmonic_circularVelocity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((Gyoto::Metric::SchwarzschildHarmonic const *)arg1)->circularVelocity((double const *)arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_circularVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:SchwarzschildHarmonic_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_SchwarzschildHarmonic_circularVelocity__SWIG_1(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_circularVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SchwarzschildHarmonic_circularVelocity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SchwarzschildHarmonic_circularVelocity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SchwarzschildHarmonic_circularVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::circularVelocity(double const *,double *,double) const\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::circularVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_zamoVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:SchwarzschildHarmonic_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_SchwarzschildHarmonic_zamoVelocity(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_christoffel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::SchwarzschildHarmonic *arg1 = (Gyoto::Metric::SchwarzschildHarmonic *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:SchwarzschildHarmonic_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchwarzschildHarmonic_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::SchwarzschildHarmonic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::SchwarzschildHarmonic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_SchwarzschildHarmonic_christoffel__SWIG_3(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchwarzschildHarmonic_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SchwarzschildHarmonic_christoffel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_SchwarzschildHarmonic_christoffel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_SchwarzschildHarmonic_christoffel__SWIG_0_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SchwarzschildHarmonic_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    christoffel(double const [4],int const,int const,int const) const\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SchwarzschildHarmonic__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::SchwarzschildHarmonic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SchwarzschildHarmonic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SchwarzschildHarmonic" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::SchwarzschildHarmonic *)new_Gyoto_Metric_SchwarzschildHarmonic__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SchwarzschildHarmonic__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::SchwarzschildHarmonic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SchwarzschildHarmonic",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SchwarzschildHarmonic" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::SchwarzschildHarmonic *)new_Gyoto_Metric_SchwarzschildHarmonic__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SchwarzschildHarmonic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SchwarzschildHarmonic__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SchwarzschildHarmonic__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SchwarzschildHarmonic__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SchwarzschildHarmonic__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SchwarzschildHarmonic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::SchwarzschildHarmonic()\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::SchwarzschildHarmonic(Gyoto::Metric::SchwarzschildHarmonic const &)\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::SchwarzschildHarmonic(Gyoto::Metric::Generic *)\n"
    "    Gyoto::Metric::SchwarzschildHarmonic::SchwarzschildHarmonic(long)\n");
  return 0;
}


SWIGINTERN PyObject *SchwarzschildHarmonic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__SchwarzschildHarmonic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PowerLaw_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PowerLaw_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PowerLaw_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrum::PowerLaw::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PowerLaw_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLaw_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrum::PowerLaw const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PowerLaw_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PowerLaw_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PowerLaw_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrum::PowerLaw::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PowerLaw_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLaw_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PowerLaw_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerLaw_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLaw_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrum::PowerLaw const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLaw_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PowerLaw_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLaw_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLaw::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrum::PowerLaw::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PowerLaw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PowerLaw")) SWIG_fail;
  {
    try {
      result = (Gyoto::Spectrum::PowerLaw *)new Gyoto::Spectrum::PowerLaw();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PowerLaw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Spectrum::PowerLaw *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PowerLaw",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PowerLaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PowerLaw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (Gyoto::Spectrum::PowerLaw *)new Gyoto::Spectrum::PowerLaw(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PowerLaw__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLaw *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PowerLaw",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PowerLaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLaw *)new Gyoto::Spectrum::PowerLaw(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLaw *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLaw_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_clone" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLaw *)((Gyoto::Spectrum::PowerLaw const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_constant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLaw_constant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_constant" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLaw const *)arg1)->constant();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_constant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLaw_constant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_constant" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLaw_constant" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->constant(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_constant(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLaw_constant__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLaw_constant__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLaw_constant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLaw::constant() const\n"
    "    Gyoto::Spectrum::PowerLaw::constant(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLaw_exponent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLaw_exponent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_exponent" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLaw const *)arg1)->exponent();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_exponent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLaw_exponent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_exponent" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLaw_exponent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->exponent(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_exponent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLaw_exponent__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLaw_exponent__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLaw_exponent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLaw::exponent() const\n"
    "    Gyoto::Spectrum::PowerLaw::exponent(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLaw_cutoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLaw_cutoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_cutoff" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PowerLaw_cutoff" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerLaw_cutoff" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((Gyoto::Spectrum::PowerLaw const *)arg1)->cutoff((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_cutoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PowerLaw_cutoff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_cutoff" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PowerLaw_cutoff" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerLaw_cutoff" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PowerLaw_cutoff" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerLaw_cutoff" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->cutoff((std::vector< double,std::allocator< double > > const &)*arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_cutoff__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLaw_cutoff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_cutoff" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrum::PowerLaw const *)arg1)->cutoff();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_cutoff__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLaw_cutoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw_cutoff" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PowerLaw_cutoff" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerLaw_cutoff" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->cutoff((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw_cutoff(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLaw_cutoff__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PowerLaw_cutoff__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PowerLaw_cutoff__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PowerLaw_cutoff__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLaw_cutoff'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLaw::cutoff(std::string const &) const\n"
    "    Gyoto::Spectrum::PowerLaw::cutoff(std::vector< double,std::allocator< double > > const &,std::string const &)\n"
    "    Gyoto::Spectrum::PowerLaw::cutoff() const\n"
    "    Gyoto::Spectrum::PowerLaw::cutoff(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLaw___call____SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PowerLaw___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLaw___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PowerLaw___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PowerLaw___call__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLaw const *)arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLaw___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLaw___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLaw___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLaw const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLaw___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLaw___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PowerLaw___call____SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLaw___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator ()(double,double,double) const\n"
    "    Gyoto::Spectrum::PowerLaw::operator ()(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PowerLaw__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLaw *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PowerLaw",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PowerLaw" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLaw *)new_Gyoto_Spectrum_PowerLaw__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PowerLaw__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLaw *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PowerLaw",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PowerLaw" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLaw *)new_Gyoto_Spectrum_PowerLaw__SWIG_4(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PowerLaw(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PowerLaw__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PowerLaw__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PowerLaw__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PowerLaw__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PowerLaw__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PowerLaw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLaw::PowerLaw()\n"
    "    Gyoto::Spectrum::PowerLaw::PowerLaw(double,double)\n"
    "    Gyoto::Spectrum::PowerLaw::PowerLaw(double)\n"
    "    Gyoto::Spectrum::PowerLaw::PowerLaw(Gyoto::Spectrum::Generic *)\n"
    "    Gyoto::Spectrum::PowerLaw::PowerLaw(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PowerLaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLaw *arg1 = (Gyoto::Spectrum::PowerLaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PowerLaw",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PowerLaw" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLaw *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLaw * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PowerLaw_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrum__PowerLaw, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_BlackBody_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BlackBody_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BlackBody_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrum::BlackBody::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_BlackBody_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlackBody_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrum::BlackBody const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_BlackBody_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BlackBody_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BlackBody_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrum::BlackBody::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_BlackBody_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlackBody_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlackBody_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlackBody_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlackBody_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrum::BlackBody const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_BlackBody_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BlackBody_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlackBody_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::BlackBody::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrum::BlackBody::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BlackBody__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlackBody")) SWIG_fail;
  {
    try {
      result = (Gyoto::Spectrum::BlackBody *)new Gyoto::Spectrum::BlackBody();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlackBody__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Spectrum::BlackBody *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BlackBody",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlackBody" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BlackBody" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (Gyoto::Spectrum::BlackBody *)new Gyoto::Spectrum::BlackBody(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlackBody__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::BlackBody *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlackBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlackBody" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (Gyoto::Spectrum::BlackBody *)new Gyoto::Spectrum::BlackBody(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::BlackBody *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlackBody_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_clone" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::BlackBody *)((Gyoto::Spectrum::BlackBody const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_temperature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlackBody_temperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_temperature" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::BlackBody const *)arg1)->temperature();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_temperature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlackBody_temperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_temperature" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackBody_temperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperature(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_temperature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_BlackBody_temperature__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlackBody_temperature__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlackBody_temperature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::BlackBody::temperature() const\n"
    "    Gyoto::Spectrum::BlackBody::temperature(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlackBody_scaling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlackBody_scaling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_scaling" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::BlackBody const *)arg1)->scaling();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_scaling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlackBody_scaling",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_scaling" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackBody_scaling" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->scaling(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_scaling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_BlackBody_scaling__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlackBody_scaling__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlackBody_scaling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::BlackBody::scaling() const\n"
    "    Gyoto::Spectrum::BlackBody::scaling(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlackBody_colorCorrection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlackBody_colorCorrection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_colorCorrection" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::BlackBody const *)arg1)->colorCorrection();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_colorCorrection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlackBody_colorCorrection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody_colorCorrection" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackBody_colorCorrection" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->colorCorrection(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody_colorCorrection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_BlackBody_colorCorrection__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlackBody_colorCorrection__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlackBody_colorCorrection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::BlackBody::colorCorrection() const\n"
    "    Gyoto::Spectrum::BlackBody::colorCorrection(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlackBody___call____SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BlackBody___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackBody___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlackBody___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BlackBody___call__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((Gyoto::Spectrum::BlackBody const *)arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlackBody___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackBody___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackBody___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::BlackBody const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackBody___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlackBody___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__BlackBody, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BlackBody___call____SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlackBody___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator ()(double,double,double) const\n"
    "    Gyoto::Spectrum::BlackBody::operator ()(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BlackBody__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::BlackBody *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlackBody",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlackBody" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::BlackBody *)new_Gyoto_Spectrum_BlackBody__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlackBody__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::BlackBody *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlackBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlackBody" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrum::BlackBody *)new_Gyoto_Spectrum_BlackBody__SWIG_4(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlackBody(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BlackBody__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BlackBody__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BlackBody__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BlackBody__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BlackBody__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BlackBody'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::BlackBody::BlackBody()\n"
    "    Gyoto::Spectrum::BlackBody::BlackBody(double,double)\n"
    "    Gyoto::Spectrum::BlackBody::BlackBody(double)\n"
    "    Gyoto::Spectrum::BlackBody::BlackBody(Gyoto::Spectrum::Generic *)\n"
    "    Gyoto::Spectrum::BlackBody::BlackBody(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BlackBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::BlackBody *arg1 = (Gyoto::Spectrum::BlackBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlackBody",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlackBody" "', argument " "1"" of type '" "Gyoto::Spectrum::BlackBody *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::BlackBody * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlackBody_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrum__BlackBody, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThermalBremsstrahlung_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThermalBremsstrahlung_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThermalBremsstrahlung_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrum::ThermalBremsstrahlung::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalBremsstrahlung_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThermalBremsstrahlung_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThermalBremsstrahlung_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThermalBremsstrahlung_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrum::ThermalBremsstrahlung::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalBremsstrahlung_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThermalBremsstrahlung_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThermalBremsstrahlung_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalBremsstrahlung_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalBremsstrahlung_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThermalBremsstrahlung_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalBremsstrahlung_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThermalBremsstrahlung__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThermalBremsstrahlung")) SWIG_fail;
  {
    try {
      result = (Gyoto::Spectrum::ThermalBremsstrahlung *)new Gyoto::Spectrum::ThermalBremsstrahlung();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThermalBremsstrahlung__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalBremsstrahlung *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThermalBremsstrahlung",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThermalBremsstrahlung" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThermalBremsstrahlung" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalBremsstrahlung *)new Gyoto::Spectrum::ThermalBremsstrahlung((Gyoto::Spectrum::ThermalBremsstrahlung const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalBremsstrahlung *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalBremsstrahlung_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_clone" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalBremsstrahlung *)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung___call____SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThermalBremsstrahlung___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalBremsstrahlung___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThermalBremsstrahlung___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ThermalBremsstrahlung___call__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalBremsstrahlung___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalBremsstrahlung___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalBremsstrahlung___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ThermalBremsstrahlung___call____SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalBremsstrahlung___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator ()(double,double,double) const\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::operator ()(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_temperature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalBremsstrahlung_temperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_temperature" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->temperature();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_temperature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalBremsstrahlung_temperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_temperature" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalBremsstrahlung_temperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperature(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_temperature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalBremsstrahlung_temperature__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalBremsstrahlung_temperature__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalBremsstrahlung_temperature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::temperature() const\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::temperature(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_numberdensityCGS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalBremsstrahlung_numberdensityCGS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_numberdensityCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->numberdensityCGS();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_numberdensityCGS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalBremsstrahlung_numberdensityCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_numberdensityCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalBremsstrahlung_numberdensityCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numberdensityCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_numberdensityCGS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalBremsstrahlung_numberdensityCGS__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalBremsstrahlung_numberdensityCGS__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalBremsstrahlung_numberdensityCGS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::numberdensityCGS() const\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::numberdensityCGS(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_jnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalBremsstrahlung_jnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_jnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalBremsstrahlung_jnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->jnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_alphanuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalBremsstrahlung_alphanuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_alphanuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalBremsstrahlung_alphanuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalBremsstrahlung const *)arg1)->alphanuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalBremsstrahlung_radiativeQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThermalBremsstrahlung_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalBremsstrahlung_radiativeQ" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThermalBremsstrahlung_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      (arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThermalBremsstrahlung__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalBremsstrahlung *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThermalBremsstrahlung",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThermalBremsstrahlung" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalBremsstrahlung *)new_Gyoto_Spectrum_ThermalBremsstrahlung__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThermalBremsstrahlung__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalBremsstrahlung *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThermalBremsstrahlung",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThermalBremsstrahlung" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalBremsstrahlung *)new_Gyoto_Spectrum_ThermalBremsstrahlung__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThermalBremsstrahlung(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThermalBremsstrahlung__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThermalBremsstrahlung__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThermalBremsstrahlung__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThermalBremsstrahlung__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThermalBremsstrahlung'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::ThermalBremsstrahlung()\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::ThermalBremsstrahlung(Gyoto::Spectrum::ThermalBremsstrahlung const &)\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::ThermalBremsstrahlung(Gyoto::Spectrum::Generic *)\n"
    "    Gyoto::Spectrum::ThermalBremsstrahlung::ThermalBremsstrahlung(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ThermalBremsstrahlung(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalBremsstrahlung *arg1 = (Gyoto::Spectrum::ThermalBremsstrahlung *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThermalBremsstrahlung",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThermalBremsstrahlung" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalBremsstrahlung *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalBremsstrahlung * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThermalBremsstrahlung_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrum__ThermalBremsstrahlung, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThermalSynchrotron_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThermalSynchrotron_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThermalSynchrotron_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrum::ThermalSynchrotron::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThermalSynchrotron_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThermalSynchrotron_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThermalSynchrotron_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrum::ThermalSynchrotron::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThermalSynchrotron_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThermalSynchrotron_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalSynchrotron_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThermalSynchrotron_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThermalSynchrotron__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThermalSynchrotron")) SWIG_fail;
  {
    try {
      result = (Gyoto::Spectrum::ThermalSynchrotron *)new Gyoto::Spectrum::ThermalSynchrotron();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThermalSynchrotron__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThermalSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThermalSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThermalSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalSynchrotron *)new Gyoto::Spectrum::ThermalSynchrotron((Gyoto::Spectrum::ThermalSynchrotron const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_clone" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalSynchrotron *)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron___call____SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThermalSynchrotron___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThermalSynchrotron___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ThermalSynchrotron___call__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalSynchrotron___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ThermalSynchrotron___call____SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator ()(double,double,double) const\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::operator ()(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_temperature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_temperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_temperature" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->temperature();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_temperature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_temperature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_temperature" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_temperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->temperature(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_temperature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalSynchrotron_temperature__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalSynchrotron_temperature__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_temperature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::temperature() const\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::temperature(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_numberdensityCGS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_numberdensityCGS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_numberdensityCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->numberdensityCGS();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_numberdensityCGS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_numberdensityCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_numberdensityCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_numberdensityCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numberdensityCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_numberdensityCGS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalSynchrotron_numberdensityCGS__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalSynchrotron_numberdensityCGS__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_numberdensityCGS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::numberdensityCGS() const\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::numberdensityCGS(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_angle_B_pem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_angle_B_pem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_angle_B_pem" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->angle_B_pem();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_angle_B_pem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_angle_B_pem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_angle_B_pem" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_angle_B_pem" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->angle_B_pem(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_angle_B_pem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalSynchrotron_angle_B_pem__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalSynchrotron_angle_B_pem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_angle_B_pem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::angle_B_pem() const\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::angle_B_pem(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_cyclotron_freq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_cyclotron_freq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_cyclotron_freq" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->cyclotron_freq();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_cyclotron_freq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_cyclotron_freq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_cyclotron_freq" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_cyclotron_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->cyclotron_freq(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_cyclotron_freq(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalSynchrotron_cyclotron_freq__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalSynchrotron_cyclotron_freq__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_cyclotron_freq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::cyclotron_freq() const\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::cyclotron_freq(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_angle_averaged__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_angle_averaged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_angle_averaged" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->angle_averaged();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_angle_averaged__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_angle_averaged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_angle_averaged" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_angle_averaged" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->angle_averaged(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_angle_averaged(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalSynchrotron_angle_averaged__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalSynchrotron_angle_averaged__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_angle_averaged'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::angle_averaged() const\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::angle_averaged(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_besselK2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThermalSynchrotron_besselK2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_besselK2" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->besselK2();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_besselK2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_besselK2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_besselK2" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_besselK2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->besselK2(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_besselK2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThermalSynchrotron_besselK2__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThermalSynchrotron_besselK2__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_besselK2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::besselK2() const\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::besselK2(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_jnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_jnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_jnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_jnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->jnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_jQnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_jQnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_jQnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_jQnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->jQnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_jUnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_jUnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_jUnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_jUnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->jUnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_jVnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_jVnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_jVnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_jVnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->jVnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_alphanuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_alphanuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_alphanuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_alphanuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->alphanuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_alphaQnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_alphaQnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_alphaQnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_alphaQnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->alphaQnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_alphaUnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_alphaUnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_alphaUnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_alphaUnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->alphaUnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_alphaVnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_alphaVnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_alphaVnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_alphaVnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->alphaVnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_rQnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_rQnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_rQnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_rQnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->rQnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_rUnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_rUnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_rUnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_rUnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->rUnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_rVnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThermalSynchrotron_rVnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_rVnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThermalSynchrotron_rVnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::ThermalSynchrotron const *)arg1)->rVnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ThermalSynchrotron_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_radiativeQ" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThermalSynchrotron_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      (arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  double *arg7 ;
  double *arg8 ;
  double *arg9 ;
  double *arg10 ;
  double *arg11 ;
  double *arg12 ;
  double *arg13 ;
  size_t arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyArrayObject *array8 = NULL ;
  PyArrayObject *array9 = NULL ;
  PyArrayObject *array10 = NULL ;
  PyArrayObject *array11 = NULL ;
  PyArrayObject *array12 = NULL ;
  PyArrayObject *array13 = NULL ;
  int is_new_object13 = 0 ;
  size_t val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:ThermalSynchrotron_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThermalSynchrotron_radiativeQ" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    npy_intp size[1] = {
      
    };
    array7 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
    if (!array7 || !require_dimensions(array7,1) || !require_size(array7, size, 1) ||
      !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    npy_intp size[1] = {
      
    };
    array8 = obj_to_array_no_conversion(obj7, NPY_DOUBLE);
    if (!array8 || !require_dimensions(array8,1) || !require_size(array8, size, 1) ||
      !require_contiguous(array8) || !require_native(array8)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    npy_intp size[1] = {
      
    };
    array9 = obj_to_array_no_conversion(obj8, NPY_DOUBLE);
    if (!array9 || !require_dimensions(array9,1) || !require_size(array9, size, 1) ||
      !require_contiguous(array9) || !require_native(array9)) SWIG_fail;
    arg9 = (double *) array_data(array9);
  }
  {
    npy_intp size[1] = {
      
    };
    array10 = obj_to_array_no_conversion(obj9, NPY_DOUBLE);
    if (!array10 || !require_dimensions(array10,1) || !require_size(array10, size, 1) ||
      !require_contiguous(array10) || !require_native(array10)) SWIG_fail;
    arg10 = (double *) array_data(array10);
  }
  {
    npy_intp size[1] = {
      
    };
    array11 = obj_to_array_no_conversion(obj10, NPY_DOUBLE);
    if (!array11 || !require_dimensions(array11,1) || !require_size(array11, size, 1) ||
      !require_contiguous(array11) || !require_native(array11)) SWIG_fail;
    arg11 = (double *) array_data(array11);
  }
  {
    npy_intp size[1] = {
      
    };
    array12 = obj_to_array_no_conversion(obj11, NPY_DOUBLE);
    if (!array12 || !require_dimensions(array12,1) || !require_size(array12, size, 1) ||
      !require_contiguous(array12) || !require_native(array12)) SWIG_fail;
    arg12 = (double *) array_data(array12);
  }
  {
    npy_intp size[1] = {
      
    };
    array13 = obj_to_array_contiguous_allow_conversion(obj12,
      NPY_DOUBLE,
      &is_new_object13);
    if (!array13 || !require_dimensions(array13, 1) ||
      !require_size(array13, size, 1)) SWIG_fail;
    arg13 = (double *) array_data(array13);
  }
  ecode14 = SWIG_AsVal_size_t(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "ThermalSynchrotron_radiativeQ" "', argument " "14"" of type '" "size_t""'");
  } 
  arg14 = static_cast< size_t >(val14);
  {
    try {
      (arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(double const (*))arg13,arg14);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object13 && array13)
    {
      Py_DECREF(array13); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object13 && array13)
    {
      Py_DECREF(array13); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThermalSynchrotron_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[15] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 14) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ThermalSynchrotron_radiativeQ__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) && PyArray_EquivTypenums(array_type(argv[4]),
                NPY_DOUBLE);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                {
                  _v = is_array(argv[6]) && PyArray_EquivTypenums(array_type(argv[6]),
                    NPY_DOUBLE);
                }
                if (_v) {
                  {
                    _v = is_array(argv[7]) && PyArray_EquivTypenums(array_type(argv[7]),
                      NPY_DOUBLE);
                  }
                  if (_v) {
                    {
                      _v = is_array(argv[8]) && PyArray_EquivTypenums(array_type(argv[8]),
                        NPY_DOUBLE);
                    }
                    if (_v) {
                      {
                        _v = is_array(argv[9]) && PyArray_EquivTypenums(array_type(argv[9]),
                          NPY_DOUBLE);
                      }
                      if (_v) {
                        {
                          _v = is_array(argv[10]) && PyArray_EquivTypenums(array_type(argv[10]),
                            NPY_DOUBLE);
                        }
                        if (_v) {
                          {
                            _v = is_array(argv[11]) && PyArray_EquivTypenums(array_type(argv[11]),
                              NPY_DOUBLE);
                          }
                          if (_v) {
                            {
                              _v = is_array(argv[12]) || PySequence_Check(argv[12]);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_size_t(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                return _wrap_ThermalSynchrotron_radiativeQ__SWIG_1(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThermalSynchrotron_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::radiativeQ(double [],double [],double const [],size_t)\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::radiativeQ(double [],double [],double [],double [],double [],double [],double [],double [],double [],double [],double [],double const [],size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThermalSynchrotron__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThermalSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThermalSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalSynchrotron *)new_Gyoto_Spectrum_ThermalSynchrotron__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThermalSynchrotron__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::ThermalSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThermalSynchrotron",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThermalSynchrotron" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrum::ThermalSynchrotron *)new_Gyoto_Spectrum_ThermalSynchrotron__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThermalSynchrotron(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThermalSynchrotron__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThermalSynchrotron__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThermalSynchrotron__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThermalSynchrotron__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThermalSynchrotron'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::ThermalSynchrotron()\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::ThermalSynchrotron(Gyoto::Spectrum::ThermalSynchrotron const &)\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::ThermalSynchrotron(Gyoto::Spectrum::Generic *)\n"
    "    Gyoto::Spectrum::ThermalSynchrotron::ThermalSynchrotron(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ThermalSynchrotron(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::ThermalSynchrotron *arg1 = (Gyoto::Spectrum::ThermalSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThermalSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThermalSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::ThermalSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::ThermalSynchrotron * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThermalSynchrotron_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrum__ThermalSynchrotron, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PowerLawSynchrotron_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PowerLawSynchrotron_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PowerLawSynchrotron_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrum::PowerLawSynchrotron::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PowerLawSynchrotron_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PowerLawSynchrotron_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PowerLawSynchrotron_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrum::PowerLawSynchrotron::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PowerLawSynchrotron_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerLawSynchrotron_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PowerLawSynchrotron_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PowerLawSynchrotron__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PowerLawSynchrotron")) SWIG_fail;
  {
    try {
      result = (Gyoto::Spectrum::PowerLawSynchrotron *)new Gyoto::Spectrum::PowerLawSynchrotron();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PowerLawSynchrotron__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLawSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PowerLawSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PowerLawSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PowerLawSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLawSynchrotron *)new Gyoto::Spectrum::PowerLawSynchrotron((Gyoto::Spectrum::PowerLawSynchrotron const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLawSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_clone" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLawSynchrotron *)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron___call____SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PowerLawSynchrotron___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PowerLawSynchrotron___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PowerLawSynchrotron___call__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PowerLawSynchrotron___call____SWIG_0_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator ()(double,double,double) const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::operator ()(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_numberdensityCGS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_numberdensityCGS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_numberdensityCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->numberdensityCGS();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_numberdensityCGS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_numberdensityCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_numberdensityCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_numberdensityCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numberdensityCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_numberdensityCGS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_numberdensityCGS__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron_numberdensityCGS__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_numberdensityCGS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::numberdensityCGS() const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::numberdensityCGS(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_angle_B_pem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_angle_B_pem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_angle_B_pem" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->angle_B_pem();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_angle_B_pem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_angle_B_pem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_angle_B_pem" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_angle_B_pem" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->angle_B_pem(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_angle_B_pem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_angle_B_pem__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron_angle_B_pem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_angle_B_pem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::angle_B_pem() const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::angle_B_pem(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_cyclotron_freq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_cyclotron_freq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_cyclotron_freq" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->cyclotron_freq();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_cyclotron_freq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_cyclotron_freq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_cyclotron_freq" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_cyclotron_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->cyclotron_freq(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_cyclotron_freq(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_cyclotron_freq__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron_cyclotron_freq__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_cyclotron_freq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::cyclotron_freq() const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::cyclotron_freq(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_PLindex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_PLindex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_PLindex" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->PLindex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_PLindex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_PLindex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_PLindex" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_PLindex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->PLindex(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_PLindex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_PLindex__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron_PLindex__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_PLindex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::PLindex() const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::PLindex(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_angle_averaged__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_angle_averaged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_angle_averaged" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->angle_averaged();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_angle_averaged__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_angle_averaged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_angle_averaged" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_angle_averaged" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->angle_averaged(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_angle_averaged(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_angle_averaged__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron_angle_averaged__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_angle_averaged'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::angle_averaged() const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::angle_averaged(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_gamma_min__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_gamma_min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_gamma_min" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->gamma_min();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_gamma_min__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_gamma_min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_gamma_min" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_gamma_min" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->gamma_min(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_gamma_min(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_gamma_min__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron_gamma_min__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_gamma_min'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::gamma_min() const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::gamma_min(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_gamma_max__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PowerLawSynchrotron_gamma_max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_gamma_max" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->gamma_max();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_gamma_max__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_gamma_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_gamma_max" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_gamma_max" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->gamma_max(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_gamma_max(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_PowerLawSynchrotron_gamma_max__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PowerLawSynchrotron_gamma_max__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_gamma_max'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::gamma_max() const\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::gamma_max(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_jnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_jnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_jnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_jnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->jnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_jQnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_jQnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_jQnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_jQnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->jQnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_jUnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_jUnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_jUnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_jUnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->jUnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_jVnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_jVnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_jVnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_jVnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->jVnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_alphanuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_alphanuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_alphanuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_alphanuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->alphanuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_alphaQnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_alphaQnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_alphaQnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_alphaQnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->alphaQnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_alphaUnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_alphaUnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_alphaUnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_alphaUnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->alphaUnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_alphaVnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_alphaVnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_alphaVnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_alphaVnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->alphaVnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_rQnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_rQnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_rQnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_rQnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->rQnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_rUnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_rUnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_rUnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_rUnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->rUnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_rVnuCGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PowerLawSynchrotron_rVnuCGS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_rVnuCGS" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerLawSynchrotron_rVnuCGS" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::PowerLawSynchrotron const *)arg1)->rVnuCGS(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PowerLawSynchrotron_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_radiativeQ" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PowerLawSynchrotron_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      (arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  double *arg7 ;
  double *arg8 ;
  double *arg9 ;
  double *arg10 ;
  double *arg11 ;
  double *arg12 ;
  double *arg13 ;
  size_t arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyArrayObject *array8 = NULL ;
  PyArrayObject *array9 = NULL ;
  PyArrayObject *array10 = NULL ;
  PyArrayObject *array11 = NULL ;
  PyArrayObject *array12 = NULL ;
  PyArrayObject *array13 = NULL ;
  int is_new_object13 = 0 ;
  size_t val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:PowerLawSynchrotron_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerLawSynchrotron_radiativeQ" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    npy_intp size[1] = {
      
    };
    array7 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
    if (!array7 || !require_dimensions(array7,1) || !require_size(array7, size, 1) ||
      !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    npy_intp size[1] = {
      
    };
    array8 = obj_to_array_no_conversion(obj7, NPY_DOUBLE);
    if (!array8 || !require_dimensions(array8,1) || !require_size(array8, size, 1) ||
      !require_contiguous(array8) || !require_native(array8)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    npy_intp size[1] = {
      
    };
    array9 = obj_to_array_no_conversion(obj8, NPY_DOUBLE);
    if (!array9 || !require_dimensions(array9,1) || !require_size(array9, size, 1) ||
      !require_contiguous(array9) || !require_native(array9)) SWIG_fail;
    arg9 = (double *) array_data(array9);
  }
  {
    npy_intp size[1] = {
      
    };
    array10 = obj_to_array_no_conversion(obj9, NPY_DOUBLE);
    if (!array10 || !require_dimensions(array10,1) || !require_size(array10, size, 1) ||
      !require_contiguous(array10) || !require_native(array10)) SWIG_fail;
    arg10 = (double *) array_data(array10);
  }
  {
    npy_intp size[1] = {
      
    };
    array11 = obj_to_array_no_conversion(obj10, NPY_DOUBLE);
    if (!array11 || !require_dimensions(array11,1) || !require_size(array11, size, 1) ||
      !require_contiguous(array11) || !require_native(array11)) SWIG_fail;
    arg11 = (double *) array_data(array11);
  }
  {
    npy_intp size[1] = {
      
    };
    array12 = obj_to_array_no_conversion(obj11, NPY_DOUBLE);
    if (!array12 || !require_dimensions(array12,1) || !require_size(array12, size, 1) ||
      !require_contiguous(array12) || !require_native(array12)) SWIG_fail;
    arg12 = (double *) array_data(array12);
  }
  {
    npy_intp size[1] = {
      
    };
    array13 = obj_to_array_contiguous_allow_conversion(obj12,
      NPY_DOUBLE,
      &is_new_object13);
    if (!array13 || !require_dimensions(array13, 1) ||
      !require_size(array13, size, 1)) SWIG_fail;
    arg13 = (double *) array_data(array13);
  }
  ecode14 = SWIG_AsVal_size_t(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "PowerLawSynchrotron_radiativeQ" "', argument " "14"" of type '" "size_t""'");
  } 
  arg14 = static_cast< size_t >(val14);
  {
    try {
      (arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(double const (*))arg13,arg14);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object13 && array13)
    {
      Py_DECREF(array13); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object13 && array13)
    {
      Py_DECREF(array13); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerLawSynchrotron_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[15] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 14) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PowerLawSynchrotron_radiativeQ__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) && PyArray_EquivTypenums(array_type(argv[4]),
                NPY_DOUBLE);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                {
                  _v = is_array(argv[6]) && PyArray_EquivTypenums(array_type(argv[6]),
                    NPY_DOUBLE);
                }
                if (_v) {
                  {
                    _v = is_array(argv[7]) && PyArray_EquivTypenums(array_type(argv[7]),
                      NPY_DOUBLE);
                  }
                  if (_v) {
                    {
                      _v = is_array(argv[8]) && PyArray_EquivTypenums(array_type(argv[8]),
                        NPY_DOUBLE);
                    }
                    if (_v) {
                      {
                        _v = is_array(argv[9]) && PyArray_EquivTypenums(array_type(argv[9]),
                          NPY_DOUBLE);
                      }
                      if (_v) {
                        {
                          _v = is_array(argv[10]) && PyArray_EquivTypenums(array_type(argv[10]),
                            NPY_DOUBLE);
                        }
                        if (_v) {
                          {
                            _v = is_array(argv[11]) && PyArray_EquivTypenums(array_type(argv[11]),
                              NPY_DOUBLE);
                          }
                          if (_v) {
                            {
                              _v = is_array(argv[12]) || PySequence_Check(argv[12]);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_size_t(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                return _wrap_PowerLawSynchrotron_radiativeQ__SWIG_1(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PowerLawSynchrotron_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::radiativeQ(double [],double [],double const [],size_t)\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::radiativeQ(double [],double [],double [],double [],double [],double [],double [],double [],double [],double [],double [],double const [],size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PowerLawSynchrotron__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLawSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PowerLawSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PowerLawSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLawSynchrotron *)new_Gyoto_Spectrum_PowerLawSynchrotron__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PowerLawSynchrotron__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::PowerLawSynchrotron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PowerLawSynchrotron",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PowerLawSynchrotron" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrum::PowerLawSynchrotron *)new_Gyoto_Spectrum_PowerLawSynchrotron__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PowerLawSynchrotron(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PowerLawSynchrotron__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PowerLawSynchrotron__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PowerLawSynchrotron__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PowerLawSynchrotron__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PowerLawSynchrotron'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::PowerLawSynchrotron()\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::PowerLawSynchrotron(Gyoto::Spectrum::PowerLawSynchrotron const &)\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::PowerLawSynchrotron(Gyoto::Spectrum::Generic *)\n"
    "    Gyoto::Spectrum::PowerLawSynchrotron::PowerLawSynchrotron(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PowerLawSynchrotron(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::PowerLawSynchrotron *arg1 = (Gyoto::Spectrum::PowerLawSynchrotron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PowerLawSynchrotron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PowerLawSynchrotron" "', argument " "1"" of type '" "Gyoto::Spectrum::PowerLawSynchrotron *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::PowerLawSynchrotron * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PowerLawSynchrotron_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrum__PowerLawSynchrotron, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var___class___set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""GyotoStd::__class__""' of type '""int""'");
    }
    GyotoStd::__class__ = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var___class___get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(GyotoStd::__class__));
  return pyobj;
}


static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "UniformSphere_getProperties", _wrap_UniformSphere_getProperties, METH_VARARGS, (char *)"\n"
		"UniformSphere_getProperties(UniformSphere self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "UniformSphere_plugins", _wrap_UniformSphere_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"UniformSphere_plugins(UniformSphere self) -> vector_string\n"
		""},
	 { "delete_UniformSphere", _wrap_delete_UniformSphere, METH_VARARGS, (char *)"\n"
		"delete_UniformSphere(UniformSphere self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "UniformSphere_className", _wrap_UniformSphere_className, METH_VARARGS, (char *)"\n"
		"UniformSphere_className(UniformSphere self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"UniformSphere\" \n"
		""},
	 { "UniformSphere_className_l", _wrap_UniformSphere_className_l, METH_VARARGS, (char *)"\n"
		"UniformSphere_className_l(UniformSphere self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"uniformsphere\" \n"
		""},
	 { "UniformSphere_spectrum", _wrap_UniformSphere_spectrum, METH_VARARGS, (char *)"\n"
		"spectrum(Gyoto::SmartPointer< Gyoto::Spectrum::Generic > arg2)\n"
		"UniformSphere_spectrum(UniformSphere self) -> Gyoto::SmartPointer< Gyoto::Spectrum::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get spectrum_. \n"
		""},
	 { "UniformSphere_opacity", _wrap_UniformSphere_opacity, METH_VARARGS, (char *)"\n"
		"opacity(Gyoto::SmartPointer< Gyoto::Spectrum::Generic > arg2)\n"
		"UniformSphere_opacity(UniformSphere self) -> Gyoto::SmartPointer< Gyoto::Spectrum::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get opacity_. \n"
		""},
	 { "UniformSphere_radius", _wrap_UniformSphere_radius, METH_VARARGS, (char *)"\n"
		"radius() -> double\n"
		"radius(double arg2)\n"
		"radius(std::string const & arg2) -> double\n"
		"UniformSphere_radius(UniformSphere self, double arg3, std::string const & arg4)\n"
		"\n"
		"\n"
		"\n"
		"Set radius_ in specified unit. \n"
		""},
	 { "UniformSphere_deltaMaxOverRadius", _wrap_UniformSphere_deltaMaxOverRadius, METH_VARARGS, (char *)"\n"
		"deltaMaxOverRadius() -> double\n"
		"UniformSphere_deltaMaxOverRadius(UniformSphere self, double f)\n"
		"\n"
		"\n"
		"\n"
		"Set dltmor_. \n"
		""},
	 { "UniformSphere_deltaMaxOverDistance", _wrap_UniformSphere_deltaMaxOverDistance, METH_VARARGS, (char *)"\n"
		"deltaMaxOverDistance() -> double\n"
		"UniformSphere_deltaMaxOverDistance(UniformSphere self, double f)\n"
		"\n"
		"\n"
		"\n"
		"Set dltmod_. \n"
		""},
	 { "UniformSphere_isotropic", _wrap_UniformSphere_isotropic, METH_VARARGS, (char *)"\n"
		"isotropic() -> bool\n"
		"UniformSphere_isotropic(UniformSphere self, bool arg3)\n"
		""},
	 { "UniformSphere_alpha", _wrap_UniformSphere_alpha, METH_VARARGS, (char *)"\n"
		"alpha() -> double\n"
		"UniformSphere_alpha(UniformSphere self, double arg3)\n"
		""},
	 { "UniformSphere___call__", _wrap_UniformSphere___call__, METH_VARARGS, (char *)"UniformSphere___call__(UniformSphere self, double const [4] coord) -> double"},
	 { "UniformSphere_deltaMax", _wrap_UniformSphere_deltaMax, METH_VARARGS, (char *)"\n"
		"UniformSphere_deltaMax(UniformSphere self, double * coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get max step constraint for adaptive integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  position\n"
		"\n"
		"max step to find this object reliably \n"
		""},
	 { "new_UniformSphere", _wrap_new_UniformSphere, METH_VARARGS, (char *)"\n"
		"UniformSphere(Astrobj base)\n"
		"new_UniformSphere(long address) -> UniformSphere\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "UniformSphere_swigregister", UniformSphere_swigregister, METH_VARARGS, NULL},
	 { "new_myCplxIdxExcept", _wrap_new_myCplxIdxExcept, METH_VARARGS, (char *)"new_myCplxIdxExcept() -> myCplxIdxExcept"},
	 { "delete_myCplxIdxExcept", _wrap_delete_myCplxIdxExcept, METH_VARARGS, (char *)"delete_myCplxIdxExcept(myCplxIdxExcept self)"},
	 { "myCplxIdxExcept_swigregister", myCplxIdxExcept_swigregister, METH_VARARGS, NULL},
	 { "ComplexAstrobj_isThreadSafe", _wrap_ComplexAstrobj_isThreadSafe, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_isThreadSafe(ComplexAstrobj self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "ComplexAstrobj_clone", _wrap_ComplexAstrobj_clone, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_clone(ComplexAstrobj self) -> ComplexAstrobj\n"
		"\n"
		"\n"
		"\n"
		"\"Virtual\" copy constructor \n"
		""},
	 { "ComplexAstrobj_deltaMax", _wrap_ComplexAstrobj_deltaMax, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_deltaMax(ComplexAstrobj self, double [8] coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get max step constraint for adaptive integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  position\n"
		"\n"
		"max step to find this object reliably \n"
		""},
	 { "ComplexAstrobj_rMax", _wrap_ComplexAstrobj_rMax, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_rMax(ComplexAstrobj self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Set maximal distance from center of coordinate system.\n"
		"\n"
		"Call Generic::rMax(double val) after converting val from unit to\n"
		"geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"val:   rmax_ expressed in unit \"unit\";\n"
		"\n"
		"unit:  string... \n"
		""},
	 { "delete_ComplexAstrobj", _wrap_delete_ComplexAstrobj, METH_VARARGS, (char *)"\n"
		"delete_ComplexAstrobj(ComplexAstrobj self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor.\n"
		"\n"
		"Frees every SmartPointer<Astrobj::Generic> before freed the array\n"
		"itself. \n"
		""},
	 { "ComplexAstrobj_append", _wrap_ComplexAstrobj_append, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_append(ComplexAstrobj self, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > element)\n"
		"\n"
		"\n"
		"\n"
		"Add element at the end of the array.\n"
		"\n"
		"If the Astrobj::Complex itself does not have a metric already\n"
		"assigned, it takes it from the new element. Else, it sets the metric\n"
		"in the new element to its own. This ensures that all elements use the\n"
		"same metric (this heuristic is not entirely fool-proof, it's safer to\n"
		"set the metric directly in the Astrobj::Complex). \n"
		""},
	 { "ComplexAstrobj_remove", _wrap_ComplexAstrobj_remove, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_remove(ComplexAstrobj self, size_t i)\n"
		"\n"
		"\n"
		"\n"
		"Remove i-th element from the array. \n"
		""},
	 { "ComplexAstrobj_getCardinal", _wrap_ComplexAstrobj_getCardinal, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_getCardinal(ComplexAstrobj self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get the number of elements in the array. \n"
		""},
	 { "ComplexAstrobj_metric", _wrap_ComplexAstrobj_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"ComplexAstrobj_metric(ComplexAstrobj self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "ComplexAstrobj_fillElement", _wrap_ComplexAstrobj_fillElement, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_fillElement(ComplexAstrobj self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Fill the XML element for this Object.\n"
		"\n"
		"The base implementation simply calls fillProperty() for each Property\n"
		"defined for the Object.\n"
		"\n"
		"Derived classes should avoid overriding fillElement(). It may make\n"
		"sense occasionally, e.g. to make sure that the metric is output first.\n"
		"\n"
		"To customize how a given Property is rendered, it is better to\n"
		"override fillProperty().\n"
		"\n"
		"If this method is overridden, the implementation should in general\n"
		"call fillElement() on the direct base. \n"
		""},
	 { "ComplexAstrobj_setParameters", _wrap_ComplexAstrobj_setParameters, METH_VARARGS, (char *)"\n"
		"ComplexAstrobj_setParameters(ComplexAstrobj self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop in Subcontractor_t function.\n"
		"\n"
		"The Subcontractor_t function for each Astrobj kind should look\n"
		"somewhat like this (templated as\n"
		"Gyoto::Astrobj::Subcontractor<MyKind>):\n"
		"\n"
		"Each object kind should implement setParameter(string name, string\n"
		"content, string unit) to interpret the individual XML elements.\n"
		"setParameters() can be overloaded in case the specific Astrobj class\n"
		"needs low level access to the FactoryMessenger. See\n"
		"UniformSphere::setParameters(). \n"
		""},
	 { "ComplexAstrobj_Impact", _wrap_ComplexAstrobj_Impact, METH_VARARGS, (char *)"\n"
		"Impact(Photon ph, size_t index, AstrobjProperties data=None) -> int\n"
		"ComplexAstrobj_Impact(ComplexAstrobj self, Photon ph, size_t index) -> int\n"
		"\n"
		"\n"
		"\n"
		"Call Impact() for each of the elements.\n"
		"\n"
		"Astrobj::Complex::Impact( Gyoto::Photon* ph, size_t index,\n"
		"Astrobj::Properties *data) calls the specific implementation of\n"
		"Astrobj::Generic::Impact() for each of its elements twice: the first\n"
		"time, data is set to NULL so that Astrobj::Complex::Impact() only\n"
		"knows whether each object is hit by the Photon. If no object is hit,\n"
		"return. If a single object is hit, call Impact() again only for this\n"
		"object, passing data this time. If several objects are hit, the\n"
		"Photon's trajectory is refined so that the step is at most step_max_\n"
		"and the Impact() methods for each of the hit objects are called again\n"
		"for each step, passing data. It is therefore important that the\n"
		"transmission of the Photon is not touched by Impact() when data==NULL.\n"
		"\n"
		""},
	 { "ComplexAstrobj___getitem__", _wrap_ComplexAstrobj___getitem__, METH_VARARGS, (char *)"ComplexAstrobj___getitem__(ComplexAstrobj self, size_t i) -> Gyoto::SmartPointer< Gyoto::Astrobj::Generic >"},
	 { "ComplexAstrobj___setitem__", _wrap_ComplexAstrobj___setitem__, METH_VARARGS, (char *)"ComplexAstrobj___setitem__(ComplexAstrobj self, int i, Astrobj p)"},
	 { "new_ComplexAstrobj", _wrap_new_ComplexAstrobj, METH_VARARGS, (char *)"\n"
		"Complex()\n"
		"Complex(ComplexAstrobj arg2)\n"
		"Complex(Astrobj base)\n"
		"new_ComplexAstrobj(long address) -> ComplexAstrobj\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ComplexAstrobj_swigregister", ComplexAstrobj_swigregister, METH_VARARGS, NULL},
	 { "Star_getProperties", _wrap_Star_getProperties, METH_VARARGS, (char *)"\n"
		"Star_getProperties(Star self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Star_plugins", _wrap_Star_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Star_plugins(Star self) -> vector_string\n"
		""},
	 { "Star_clone", _wrap_Star_clone, METH_VARARGS, (char *)"\n"
		"Star_clone(Star self) -> Star\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_Star", _wrap_delete_Star, METH_VARARGS, (char *)"\n"
		"delete_Star(Star self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Star_className", _wrap_Star_className, METH_VARARGS, (char *)"\n"
		"Star_className(Star self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"Star\" \n"
		""},
	 { "Star_className_l", _wrap_Star_className_l, METH_VARARGS, (char *)"\n"
		"Star_className_l(Star self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"star\" \n"
		""},
	 { "Star_metric", _wrap_Star_metric, METH_VARARGS, (char *)"\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"Star_metric(Star self) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get the Metric gg_. \n"
		""},
	 { "Star_getMass", _wrap_Star_getMass, METH_VARARGS, (char *)"\n"
		"Star_getMass(Star self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Return 1.\n"
		"\n"
		"The mass of a Star is always 1. Stars do not perturb the metric. The\n"
		"only relevant point is that Stars are massive particules, their exact\n"
		"mass is of no importance. \n"
		""},
	 { "Star_rMax", _wrap_Star_rMax, METH_VARARGS, (char *)"\n"
		"rMax() -> double\n"
		"rMax(std::string const & unit) -> double\n"
		"rMax(std::string const & unit) -> double\n"
		"rMax(double val)\n"
		"rMax(double val, std::string const & unit)\n"
		"Star_rMax(Star self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Set maximal distance from center of coordinate system.\n"
		"\n"
		"Call Generic::rMax(double val) after converting val from unit to\n"
		"geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"val:   rmax_ expressed in unit \"unit\";\n"
		"\n"
		"unit:  string... \n"
		""},
	 { "Star_setInitialCondition", _wrap_Star_setInitialCondition, METH_VARARGS, (char *)"\n"
		"Star_setInitialCondition(Star self, double const [8] coord)\n"
		"\n"
		"\n"
		"\n"
		"Set or re-set the initial condition prior to integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gg:   Gyoto::SmartPointer to the Gyoto::Metric in this universe;\n"
		"\n"
		"coord:  8 element array containing the initial condition, i.e. the\n"
		"4-position and the 4-velocity of the Photon at the receiving end;\n"
		"\n"
		"dir:  direction: 1 for future, -1 for past. \n"
		""},
	 { "Star_setParameter", _wrap_Star_setParameter, METH_VARARGS, (char *)"\n"
		"Star_setParameter(Star self, std::string name, std::string content, std::string unit) -> int\n"
		"\n"
		"\n"
		"\n"
		"Set parameter by Property (and name)\n"
		"\n"
		"This function is used when parsing an XML description, if Property (\n"
		"p) of this name is found (i.e. either p.name or p.name_false is equal\n"
		"to name). Implementation should fall-back on calling the direct's\n"
		"parent implementation:\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"p:   Property that matches name ( p.name == name or p.name_false ==\n"
		"name)\n"
		"\n"
		"name:  XML name of the parameter (XML entity)\n"
		"\n"
		"content:  string representation of the value\n"
		"\n"
		"unit:  string representation of the unit \n"
		""},
	 { "Star_setParameters", _wrap_Star_setParameters, METH_VARARGS, (char *)"\n"
		"Star_setParameters(Star self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop in Subcontractor_t function.\n"
		"\n"
		"The Subcontractor_t function for each Astrobj kind should look\n"
		"somewhat like this (templated as\n"
		"Gyoto::Astrobj::Subcontractor<MyKind>):\n"
		"\n"
		"Each object kind should implement setParameter(string name, string\n"
		"content, string unit) to interpret the individual XML elements.\n"
		"setParameters() can be overloaded in case the specific Astrobj class\n"
		"needs low level access to the FactoryMessenger. See\n"
		"UniformSphere::setParameters(). \n"
		""},
	 { "Star_fillProperty", _wrap_Star_fillProperty, METH_VARARGS, (char *)"\n"
		"Star_fillProperty(Star self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "Star__delta", _wrap_Star__delta, METH_VARARGS, (char *)"\n"
		"_delta(double const delta)\n"
		"_delta(double arg2, std::string const & unit)\n"
		"_delta() -> double\n"
		"Star__delta(Star self, std::string const & unit) -> double\n"
		""},
	 { "Star__tMin", _wrap_Star__tMin, METH_VARARGS, (char *)"\n"
		"_tMin(double const tmin)\n"
		"_tMin(double arg2, std::string const & unit)\n"
		"_tMin() -> double\n"
		"Star__tMin(Star self, std::string const & unit) -> double\n"
		""},
	 { "Star__adaptive", _wrap_Star__adaptive, METH_VARARGS, (char *)"\n"
		"_adaptive(bool mode)\n"
		"Star__adaptive(Star self) -> bool\n"
		""},
	 { "Star__secondary", _wrap_Star__secondary, METH_VARARGS, (char *)"\n"
		"_secondary(bool sec)\n"
		"Star__secondary(Star self) -> bool\n"
		""},
	 { "Star__integ31", _wrap_Star__integ31, METH_VARARGS, (char *)"\n"
		"_integ31(bool sec)\n"
		"Star__integ31(Star self) -> bool\n"
		""},
	 { "Star__parallelTransport", _wrap_Star__parallelTransport, METH_VARARGS, (char *)"\n"
		"_parallelTransport(bool sec)\n"
		"Star__parallelTransport(Star self) -> bool\n"
		""},
	 { "Star__maxiter", _wrap_Star__maxiter, METH_VARARGS, (char *)"\n"
		"_maxiter(size_t miter)\n"
		"Star__maxiter(Star self) -> size_t\n"
		""},
	 { "Star__integrator", _wrap_Star__integrator, METH_VARARGS, (char *)"\n"
		"_integrator(std::string const & type)\n"
		"Star__integrator(Star self) -> std::string\n"
		""},
	 { "Star__deltaMin", _wrap_Star__deltaMin, METH_VARARGS, (char *)"\n"
		"_deltaMin() -> double\n"
		"Star__deltaMin(Star self, double h1)\n"
		""},
	 { "Star__absTol", _wrap_Star__absTol, METH_VARARGS, (char *)"\n"
		"_absTol(double arg2)\n"
		"Star__absTol(Star self) -> double\n"
		""},
	 { "Star__maxCrossEqplane", _wrap_Star__maxCrossEqplane, METH_VARARGS, (char *)"\n"
		"_maxCrossEqplane(double arg2)\n"
		"Star__maxCrossEqplane(Star self) -> double\n"
		""},
	 { "Star__relTol", _wrap_Star__relTol, METH_VARARGS, (char *)"\n"
		"_relTol(double arg2)\n"
		"Star__relTol(Star self) -> double\n"
		""},
	 { "Star__deltaMax", _wrap_Star__deltaMax, METH_VARARGS, (char *)"\n"
		"_deltaMax(double h1)\n"
		"Star__deltaMax(Star self) -> double\n"
		""},
	 { "Star__deltaMaxOverR", _wrap_Star__deltaMaxOverR, METH_VARARGS, (char *)"\n"
		"_deltaMaxOverR() -> double\n"
		"Star__deltaMaxOverR(Star self, double t)\n"
		""},
	 { "Star__initCoord", _wrap_Star__initCoord, METH_VARARGS, (char *)"\n"
		"_initCoord() -> vector_double\n"
		"Star__initCoord(Star self, vector_double f)\n"
		""},
	 { "Star__metric", _wrap_Star__metric, METH_VARARGS, (char *)"\n"
		"_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"Star__metric(Star self) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		""},
	 { "Star_deltaMax", _wrap_Star_deltaMax, METH_VARARGS, (char *)"\n"
		"deltaMax() -> double\n"
		"deltaMax(double const [8] pos, double delta_max_external) -> double\n"
		"deltaMax(double h1)\n"
		"Star_deltaMax(Star self, double * coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Set delta_max_ \n"
		""},
	 { "Star_getVelocity", _wrap_Star_getVelocity, METH_VARARGS, (char *)"\n"
		"Star_getVelocity(Star self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Yield velocity of the center of the sphere. \n"
		""},
	 { "Star_radiativeQ", _wrap_Star_radiativeQ, METH_VARARGS, (char *)"Star_radiativeQ(Star self, double * Inu, double * Qnu, double * Unu, double * Vnu, Eigen::Matrix4d * Onu, double const * nuem, size_t nbnu, double dsem, vector_double cph, double const * co)"},
	 { "new_Star", _wrap_new_Star, METH_VARARGS, (char *)"\n"
		"Star(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, double radius, double const [4] pos, double const [3] v)\n"
		"Star()\n"
		"Star(Star orig)\n"
		"Star(Astrobj base)\n"
		"new_Star(long address) -> Star\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Star_swigregister", Star_swigregister, METH_VARARGS, NULL},
	 { "StarTrace_getProperties", _wrap_StarTrace_getProperties, METH_VARARGS, (char *)"\n"
		"StarTrace_getProperties(StarTrace self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "StarTrace_plugins", _wrap_StarTrace_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"StarTrace_plugins(StarTrace self) -> vector_string\n"
		""},
	 { "StarTrace_clone", _wrap_StarTrace_clone, METH_VARARGS, (char *)"\n"
		"StarTrace_clone(StarTrace self) -> StarTrace\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_StarTrace", _wrap_delete_StarTrace, METH_VARARGS, (char *)"\n"
		"delete_StarTrace(StarTrace self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "StarTrace_xAllocate", _wrap_StarTrace_xAllocate, METH_VARARGS, (char *)"\n"
		"xAllocate()\n"
		"StarTrace_xAllocate(StarTrace self, size_t arg3)\n"
		""},
	 { "StarTrace_xAllocateXYZ", _wrap_StarTrace_xAllocateXYZ, METH_VARARGS, (char *)"\n"
		"StarTrace_xAllocateXYZ(StarTrace self)\n"
		"\n"
		"\n"
		"\n"
		"Allocate x_, y_, z_. \n"
		""},
	 { "StarTrace_xExpand", _wrap_StarTrace_xExpand, METH_VARARGS, (char *)"\n"
		"xExpand(double *& x, int dir)\n"
		"StarTrace_xExpand(StarTrace self, int arg3) -> size_t\n"
		""},
	 { "StarTrace_computeXYZ", _wrap_StarTrace_computeXYZ, METH_VARARGS, (char *)"\n"
		"computeXYZ(size_t i)\n"
		"StarTrace_computeXYZ(StarTrace self)\n"
		"\n"
		"\n"
		"\n"
		"Compute (and cache) x_, y_ and z_. \n"
		""},
	 { "StarTrace_setInitCoord", _wrap_StarTrace_setInitCoord, METH_VARARGS, (char *)"\n"
		"setInitCoord(double const [8] coord, int dir, double const [4] Ephi, double const [4] Etheta)\n"
		"setInitCoord(double const [4] pos, double const [3] vel, int dir=0)\n"
		"setInitCoord(double const [4] pos, double const [3] vel)\n"
		"setInitCoord(double const [8] coord, int dir=0)\n"
		"StarTrace_setInitCoord(StarTrace self, double const [8] coord)\n"
		"\n"
		"\n"
		"\n"
		"Set initial coordinate.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  initial 4-position\n"
		"\n"
		"vel:  initial 3-velocity\n"
		"\n"
		"dir:  direction of integration \n"
		""},
	 { "StarTrace_metric", _wrap_StarTrace_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"StarTrace_metric(StarTrace self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "StarTrace_xStore", _wrap_StarTrace_xStore, METH_VARARGS, (char *)"\n"
		"StarTrace_xStore(StarTrace self, size_t ind, vector_double coord, double tau)\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "StarTrace_className", _wrap_StarTrace_className, METH_VARARGS, (char *)"\n"
		"StarTrace_className(StarTrace self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"StarTrace\" \n"
		""},
	 { "StarTrace_className_l", _wrap_StarTrace_className_l, METH_VARARGS, (char *)"\n"
		"StarTrace_className_l(StarTrace self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"startrace\" \n"
		""},
	 { "StarTrace_TMin", _wrap_StarTrace_TMin, METH_VARARGS, (char *)"\n"
		"TMin() -> double\n"
		"StarTrace_TMin(StarTrace self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set tmin_. \n"
		""},
	 { "StarTrace_TMax", _wrap_StarTrace_TMax, METH_VARARGS, (char *)"\n"
		"TMax() -> double\n"
		"StarTrace_TMax(StarTrace self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set tmax_. \n"
		""},
	 { "StarTrace_setInitialCondition", _wrap_StarTrace_setInitialCondition, METH_VARARGS, (char *)"\n"
		"StarTrace_setInitialCondition(StarTrace self, double const [8] coord)\n"
		"\n"
		"\n"
		"\n"
		"Set or re-set the initial condition prior to integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gg:   Gyoto::SmartPointer to the Gyoto::Metric in this universe;\n"
		"\n"
		"coord:  8 element array containing the initial condition, i.e. the\n"
		"4-position and the 4-velocity of the Photon at the receiving end;\n"
		"\n"
		"dir:  direction: 1 for future, -1 for past. \n"
		""},
	 { "StarTrace___call__", _wrap_StarTrace___call__, METH_VARARGS, (char *)"StarTrace___call__(StarTrace self, double const [4] coord) -> double"},
	 { "new_StarTrace", _wrap_new_StarTrace, METH_VARARGS, (char *)"\n"
		"StarTrace(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, double radius, double const [4] pos, double const [3] v)\n"
		"StarTrace()\n"
		"StarTrace(StarTrace orig)\n"
		"StarTrace(Star o, double tmin, double tmax)\n"
		"StarTrace(Astrobj base)\n"
		"new_StarTrace(long address) -> StarTrace\n"
		"\n"
		"\n"
		"\n"
		"Build StarTrace from Star. \n"
		""},
	 { "StarTrace_swigregister", StarTrace_swigregister, METH_VARARGS, NULL},
	 { "FixedStar_getProperties", _wrap_FixedStar_getProperties, METH_VARARGS, (char *)"\n"
		"FixedStar_getProperties(FixedStar self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "FixedStar_plugins", _wrap_FixedStar_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"FixedStar_plugins(FixedStar self) -> vector_string\n"
		""},
	 { "FixedStar_clone", _wrap_FixedStar_clone, METH_VARARGS, (char *)"\n"
		"FixedStar_clone(FixedStar self) -> FixedStar\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_FixedStar", _wrap_delete_FixedStar, METH_VARARGS, (char *)"\n"
		"delete_FixedStar(FixedStar self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "FixedStar_getPos", _wrap_FixedStar_getPos, METH_VARARGS, (char *)"\n"
		"getPos() -> double const\n"
		"FixedStar_getPos(FixedStar self, double * dst)\n"
		"\n"
		"\n"
		"\n"
		"Get a copy of the pos_ array. \n"
		""},
	 { "FixedStar_position", _wrap_FixedStar_position, METH_VARARGS, (char *)"\n"
		"position() -> vector_double\n"
		"FixedStar_position(FixedStar self, vector_double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set pos_ from vector. \n"
		""},
	 { "FixedStar_rMax", _wrap_FixedStar_rMax, METH_VARARGS, (char *)"\n"
		"FixedStar_rMax(FixedStar self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Set maximal distance from center of coordinate system.\n"
		"\n"
		"Call Generic::rMax(double val) after converting val from unit to\n"
		"geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"val:   rmax_ expressed in unit \"unit\";\n"
		"\n"
		"unit:  string... \n"
		""},
	 { "FixedStar_rotating", _wrap_FixedStar_rotating, METH_VARARGS, (char *)"\n"
		"rotating() -> bool\n"
		"FixedStar_rotating(FixedStar self, bool arg3)\n"
		""},
	 { "FixedStar_metric", _wrap_FixedStar_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"FixedStar_metric(FixedStar self, Gyoto::SmartPointer< Gyoto::Metric::Generic > metric)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "FixedStar_radius", _wrap_FixedStar_radius, METH_VARARGS, (char *)"\n"
		"radius() -> double\n"
		"radius(std::string const & arg2) -> double\n"
		"radius(double arg2, std::string const & arg3)\n"
		"FixedStar_radius(FixedStar self, double radius)\n"
		"\n"
		"\n"
		"\n"
		"Set radius_ in specified unit. \n"
		""},
	 { "FixedStar_setPos", _wrap_FixedStar_setPos, METH_VARARGS, (char *)"\n"
		"FixedStar_setPos(FixedStar self, double const [3] arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set pos_ array. \n"
		""},
	 { "new_FixedStar", _wrap_new_FixedStar, METH_VARARGS, (char *)"\n"
		"FixedStar()\n"
		"FixedStar(FixedStar orig)\n"
		"FixedStar(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, double [3] StPsn, double radius)\n"
		"FixedStar(Astrobj base)\n"
		"new_FixedStar(long address) -> FixedStar\n"
		"\n"
		"\n"
		"\n"
		"Standard constructor. \n"
		""},
	 { "FixedStar_swigregister", FixedStar_swigregister, METH_VARARGS, NULL},
	 { "FreeStar_getProperties", _wrap_FreeStar_getProperties, METH_VARARGS, (char *)"\n"
		"FreeStar_getProperties(FreeStar self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "FreeStar_plugins", _wrap_FreeStar_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"FreeStar_plugins(FreeStar self) -> vector_string\n"
		""},
	 { "FreeStar_clone", _wrap_FreeStar_clone, METH_VARARGS, (char *)"\n"
		"FreeStar_clone(FreeStar self) -> FreeStar\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_FreeStar", _wrap_delete_FreeStar, METH_VARARGS, (char *)"\n"
		"delete_FreeStar(FreeStar self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "FreeStar_className", _wrap_FreeStar_className, METH_VARARGS, (char *)"\n"
		"FreeStar_className(FreeStar self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"FreeStar\" \n"
		""},
	 { "FreeStar_className_l", _wrap_FreeStar_className_l, METH_VARARGS, (char *)"\n"
		"FreeStar_className_l(FreeStar self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"free_star\" \n"
		""},
	 { "FreeStar_initPosition", _wrap_FreeStar_initPosition, METH_VARARGS, (char *)"\n"
		"initPosition(vector_double v)\n"
		"FreeStar_initPosition(FreeStar self) -> vector_double\n"
		""},
	 { "FreeStar_initVelocity", _wrap_FreeStar_initVelocity, METH_VARARGS, (char *)"\n"
		"initVelocity(vector_double v)\n"
		"FreeStar_initVelocity(FreeStar self) -> vector_double\n"
		""},
	 { "FreeStar_initCoord", _wrap_FreeStar_initCoord, METH_VARARGS, (char *)"\n"
		"initCoord(vector_double v)\n"
		"FreeStar_initCoord(FreeStar self) -> vector_double\n"
		""},
	 { "FreeStar_getCartesian", _wrap_FreeStar_getCartesian, METH_VARARGS, (char *)"\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None, double *const yprime=None, double *const zprime=None)\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None, double *const yprime=None)\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None)\n"
		"FreeStar_getCartesian(FreeStar self, double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z)\n"
		"\n"
		"\n"
		"\n"
		"Yield the Cartesian coordinates of the center of the sphere.\n"
		"\n"
		"If the coordinate system of the Metric object is spherical, use a\n"
		"trivial conversion. \n"
		""},
	 { "FreeStar_getVelocity", _wrap_FreeStar_getVelocity, METH_VARARGS, (char *)"\n"
		"FreeStar_getVelocity(FreeStar self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Yield velocity of the center of the sphere. \n"
		""},
	 { "new_FreeStar", _wrap_new_FreeStar, METH_VARARGS, (char *)"\n"
		"FreeStar()\n"
		"FreeStar(FreeStar orig)\n"
		"FreeStar(Astrobj base)\n"
		"new_FreeStar(long address) -> FreeStar\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "FreeStar_swigregister", FreeStar_swigregister, METH_VARARGS, NULL},
	 { "InflateStar_getProperties", _wrap_InflateStar_getProperties, METH_VARARGS, (char *)"\n"
		"InflateStar_getProperties(InflateStar self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "InflateStar_plugins", _wrap_InflateStar_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"InflateStar_plugins(InflateStar self) -> vector_string\n"
		""},
	 { "InflateStar_clone", _wrap_InflateStar_clone, METH_VARARGS, (char *)"\n"
		"InflateStar_clone(InflateStar self) -> InflateStar\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_InflateStar", _wrap_delete_InflateStar, METH_VARARGS, (char *)"\n"
		"delete_InflateStar(InflateStar self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "InflateStar_timeInflateInit", _wrap_InflateStar_timeInflateInit, METH_VARARGS, (char *)"\n"
		"timeInflateInit(double arg2)\n"
		"timeInflateInit() -> double\n"
		"timeInflateInit(double arg2, std::string const & arg3)\n"
		"InflateStar_timeInflateInit(InflateStar self, std::string const & arg3) -> double\n"
		""},
	 { "InflateStar_timeInflateStop", _wrap_InflateStar_timeInflateStop, METH_VARARGS, (char *)"\n"
		"timeInflateStop(double arg2)\n"
		"timeInflateStop() -> double\n"
		"timeInflateStop(double arg2, std::string const & arg3)\n"
		"InflateStar_timeInflateStop(InflateStar self, std::string const & arg3) -> double\n"
		""},
	 { "InflateStar_radiusStop", _wrap_InflateStar_radiusStop, METH_VARARGS, (char *)"\n"
		"radiusStop(double arg2)\n"
		"radiusStop() -> double\n"
		"radiusStop(double arg2, std::string const & arg3)\n"
		"InflateStar_radiusStop(InflateStar self, std::string const & arg3) -> double\n"
		""},
	 { "InflateStar_radius", _wrap_InflateStar_radius, METH_VARARGS, (char *)"\n"
		"radius() -> double\n"
		"radius(double arg2)\n"
		"radius(std::string const & arg2) -> double\n"
		"InflateStar_radius(InflateStar self, double arg3, std::string const & arg4)\n"
		"\n"
		"\n"
		"\n"
		"Set radius_ in specified unit. \n"
		""},
	 { "InflateStar_radiusAt", _wrap_InflateStar_radiusAt, METH_VARARGS, (char *)"\n"
		"radiusAt(double t) -> double\n"
		"radiusAt(double t, std::string const & t_unit) -> double\n"
		"InflateStar_radiusAt(InflateStar self, double t, std::string const & t_unit, std::string const & r_unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Radius at a given time. \n"
		""},
	 { "InflateStar_className", _wrap_InflateStar_className, METH_VARARGS, (char *)"\n"
		"InflateStar_className(InflateStar self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"InflateStar\" \n"
		""},
	 { "InflateStar_className_l", _wrap_InflateStar_className_l, METH_VARARGS, (char *)"\n"
		"InflateStar_className_l(InflateStar self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"inflate_star\" \n"
		""},
	 { "InflateStar_Impact", _wrap_InflateStar_Impact, METH_VARARGS, (char *)"\n"
		"Impact(Photon ph, size_t index, AstrobjProperties data=None) -> int\n"
		"InflateStar_Impact(InflateStar self, Photon ph, size_t index) -> int\n"
		"\n"
		"\n"
		"\n"
		"Does a photon at these coordinates impact the object?\n"
		"\n"
		"Impact() checks whether a Photon impacts the object between two\n"
		"integration steps of the photon's trajectory (those two steps are\n"
		"photon->getCoord(index, coord1) and photon->getCoord(index+1,\n"
		"coord2)). Impact returns 1 if the photon impacts the object between\n"
		"these two steps, else 0. In many cases of geometrically thick obects,\n"
		"the implementation Astrobj::Standard::Impact() will be fine.\n"
		"\n"
		"Impact will call Generic::processHitQuantities() (which is virtual and\n"
		"may be re-implemented) to compute observable properties on demand: if\n"
		"the data pointer is non-NULL, the object will look in it for pointers\n"
		"to properties which apply to its kind. If a pointer to a property\n"
		"known to this object is present, then the property is computed and\n"
		"store at the pointed-to address. For instance, all objects know the\n"
		"\"intensity\" property. If data->intensity != NULL, the instensity is\n"
		"computed and stored in *data->intensity.\n"
		"\n"
		"If data is non-NULL and only in this case, processHitQuantities() will\n"
		"also call ph->transmit() to update the transmissions of the Photon\n"
		"(see Photon::transmit(size_t, double)). This must not be done if data\n"
		"is NULL (see Astrobj::Complex::Impact() for an explanation).\n"
		"\n"
		"Impact() may not extend the ph Worldline. The only two dates that are\n"
		"guaranteed to be defined are at indices index and index+1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ph:   Gyoto::Photon aimed at the object;\n"
		"\n"
		"index:  Index of the last photon step;\n"
		"\n"
		"data:  Pointer to a structure to hold the observables at impact.\n"
		"\n"
		"1 if impact, 0 if not. \n"
		""},
	 { "InflateStar_emission", _wrap_InflateStar_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double cp, double const [8] co=0) -> double\n"
		"InflateStar_emission(InflateStar self, double nu_em, double dsem, vector_double cp) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "new_InflateStar", _wrap_new_InflateStar, METH_VARARGS, (char *)"\n"
		"InflateStar()\n"
		"InflateStar(InflateStar orig)\n"
		"InflateStar(Astrobj base)\n"
		"new_InflateStar(long address) -> InflateStar\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "InflateStar_swigregister", InflateStar_swigregister, METH_VARARGS, NULL},
	 { "Torus_getProperties", _wrap_Torus_getProperties, METH_VARARGS, (char *)"\n"
		"Torus_getProperties(Torus self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Torus_plugins", _wrap_Torus_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Torus_plugins(Torus self) -> vector_string\n"
		""},
	 { "Torus_clone", _wrap_Torus_clone, METH_VARARGS, (char *)"\n"
		"Torus_clone(Torus self) -> Torus\n"
		"\n"
		"\n"
		"\n"
		"\"Virtual\" copy constructor \n"
		""},
	 { "delete_Torus", _wrap_delete_Torus, METH_VARARGS, (char *)"\n"
		"delete_Torus(Torus self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor: does nothing. \n"
		""},
	 { "Torus_largeRadius", _wrap_Torus_largeRadius, METH_VARARGS, (char *)"\n"
		"largeRadius() -> double\n"
		"largeRadius(std::string unit) -> double\n"
		"largeRadius(double c)\n"
		"Torus_largeRadius(Torus self, double c, std::string unit)\n"
		"\n"
		"\n"
		"\n"
		"Set large radius Torus::c_ in specified unit. \n"
		""},
	 { "Torus_smallRadius", _wrap_Torus_smallRadius, METH_VARARGS, (char *)"\n"
		"smallRadius() -> double\n"
		"smallRadius(std::string unit) -> double\n"
		"smallRadius(double a)\n"
		"Torus_smallRadius(Torus self, double a, std::string unit)\n"
		"\n"
		"\n"
		"\n"
		"Set small radius in specified unit. \n"
		""},
	 { "Torus_spectrum", _wrap_Torus_spectrum, METH_VARARGS, (char *)"\n"
		"spectrum(Gyoto::SmartPointer< Gyoto::Spectrum::Generic > arg2)\n"
		"Torus_spectrum(Torus self) -> Gyoto::SmartPointer< Gyoto::Spectrum::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get Torus::spectrum_. \n"
		""},
	 { "Torus_opacity", _wrap_Torus_opacity, METH_VARARGS, (char *)"\n"
		"opacity(Gyoto::SmartPointer< Gyoto::Spectrum::Generic > arg2)\n"
		"Torus_opacity(Torus self) -> Gyoto::SmartPointer< Gyoto::Spectrum::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get Torus::opacity_. \n"
		""},
	 { "Torus_rMax", _wrap_Torus_rMax, METH_VARARGS, (char *)"\n"
		"rMax() -> double\n"
		"rMax(std::string const & unit) -> double\n"
		"rMax(std::string const & unit) -> double\n"
		"rMax(double val)\n"
		"rMax(double val, std::string const & unit)\n"
		"Torus_rMax(Torus self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Set maximal distance from center of coordinate system.\n"
		"\n"
		"Call Generic::rMax(double val) after converting val from unit to\n"
		"geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"val:   rmax_ expressed in unit \"unit\";\n"
		"\n"
		"unit:  string... \n"
		""},
	 { "Torus___call__", _wrap_Torus___call__, METH_VARARGS, (char *)"Torus___call__(Torus self, double const [4] coord) -> double"},
	 { "Torus_deltaMax", _wrap_Torus_deltaMax, METH_VARARGS, (char *)"\n"
		"Torus_deltaMax(Torus self, double * arg3) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get max step constraint for adaptive integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  position\n"
		"\n"
		"max step to find this object reliably \n"
		""},
	 { "new_Torus", _wrap_new_Torus, METH_VARARGS, (char *)"\n"
		"Torus()\n"
		"Torus(Torus arg2)\n"
		"Torus(Astrobj base)\n"
		"new_Torus(long address) -> Torus\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Torus_swigregister", Torus_swigregister, METH_VARARGS, NULL},
	 { "OscilTorus_getProperties", _wrap_OscilTorus_getProperties, METH_VARARGS, (char *)"\n"
		"OscilTorus_getProperties(OscilTorus self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "OscilTorus_plugins", _wrap_OscilTorus_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"OscilTorus_plugins(OscilTorus self) -> vector_string\n"
		""},
	 { "delete_OscilTorus", _wrap_delete_OscilTorus, METH_VARARGS, (char *)"delete_OscilTorus(OscilTorus self)"},
	 { "OscilTorus_clone", _wrap_OscilTorus_clone, METH_VARARGS, (char *)"\n"
		"OscilTorus_clone(OscilTorus self) -> OscilTorus\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "OscilTorus_largeRadius", _wrap_OscilTorus_largeRadius, METH_VARARGS, (char *)"\n"
		"largeRadius(double arg2)\n"
		"largeRadius() -> double\n"
		"largeRadius(double arg2, std::string const & arg3)\n"
		"OscilTorus_largeRadius(OscilTorus self, std::string const & arg3) -> double\n"
		""},
	 { "OscilTorus_mode", _wrap_OscilTorus_mode, METH_VARARGS, (char *)"\n"
		"mode(unsigned long arg2)\n"
		"OscilTorus_mode(OscilTorus self) -> unsigned long\n"
		""},
	 { "OscilTorus_polyCst", _wrap_OscilTorus_polyCst, METH_VARARGS, (char *)"\n"
		"polyCst(double arg2)\n"
		"OscilTorus_polyCst(OscilTorus self) -> double\n"
		""},
	 { "OscilTorus_polyIndex", _wrap_OscilTorus_polyIndex, METH_VARARGS, (char *)"\n"
		"polyIndex(double arg2)\n"
		"OscilTorus_polyIndex(OscilTorus self) -> double\n"
		""},
	 { "OscilTorus_centralDensity", _wrap_OscilTorus_centralDensity, METH_VARARGS, (char *)"\n"
		"centralDensity(double arg2)\n"
		"OscilTorus_centralDensity(OscilTorus self) -> double\n"
		""},
	 { "OscilTorus_perturbKind", _wrap_OscilTorus_perturbKind, METH_VARARGS, (char *)"\n"
		"perturbKind(std::string const & arg2)\n"
		"OscilTorus_perturbKind(OscilTorus self) -> std::string\n"
		""},
	 { "OscilTorus_perturbIntens", _wrap_OscilTorus_perturbIntens, METH_VARARGS, (char *)"\n"
		"perturbIntens(double arg2)\n"
		"OscilTorus_perturbIntens(OscilTorus self) -> double\n"
		""},
	 { "OscilTorus_emittingArea", _wrap_OscilTorus_emittingArea, METH_VARARGS, (char *)"\n"
		"emittingArea(std::string const & arg2)\n"
		"OscilTorus_emittingArea(OscilTorus self) -> std::string\n"
		""},
	 { "OscilTorus_metric", _wrap_OscilTorus_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"OscilTorus_metric(OscilTorus self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "OscilTorus___call__", _wrap_OscilTorus___call__, METH_VARARGS, (char *)"OscilTorus___call__(OscilTorus self, double const [4] coord) -> double"},
	 { "OscilTorus_getVelocity", _wrap_OscilTorus_getVelocity, METH_VARARGS, (char *)"\n"
		"OscilTorus_getVelocity(OscilTorus self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Fluid velocity field.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "OscilTorus_emission", _wrap_OscilTorus_emission, METH_VARARGS, (char *)"\n"
		"OscilTorus_emission(OscilTorus self, double nuem, double arg4, vector_double arg5, double const * arg6) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "OscilTorus_setParameters", _wrap_OscilTorus_setParameters, METH_VARARGS, (char *)"\n"
		"OscilTorus_setParameters(OscilTorus self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop in Subcontractor_t function.\n"
		"\n"
		"The Subcontractor_t function for each Astrobj kind should look\n"
		"somewhat like this (templated as\n"
		"Gyoto::Astrobj::Subcontractor<MyKind>):\n"
		"\n"
		"Each object kind should implement setParameter(string name, string\n"
		"content, string unit) to interpret the individual XML elements.\n"
		"setParameters() can be overloaded in case the specific Astrobj class\n"
		"needs low level access to the FactoryMessenger. See\n"
		"UniformSphere::setParameters(). \n"
		""},
	 { "OscilTorus_updateCachedValues", _wrap_OscilTorus_updateCachedValues, METH_VARARGS, (char *)"OscilTorus_updateCachedValues(OscilTorus self)"},
	 { "OscilTorus_computeXbYb", _wrap_OscilTorus_computeXbYb, METH_VARARGS, (char *)"OscilTorus_computeXbYb(OscilTorus self, double const * pos, double & xb, double & yb)"},
	 { "OscilTorus_tell", _wrap_OscilTorus_tell, METH_VARARGS, (char *)"\n"
		"OscilTorus_tell(OscilTorus self, Teller msg)\n"
		"\n"
		"\n"
		"\n"
		"Update cached values.\n"
		"\n"
		"Calls updateCachedValues().\n"
		"\n"
		"See Hook::Listener::tell() \n"
		""},
	 { "new_OscilTorus", _wrap_new_OscilTorus, METH_VARARGS, (char *)"\n"
		"OscilTorus()\n"
		"OscilTorus(OscilTorus o)\n"
		"OscilTorus(Astrobj base)\n"
		"new_OscilTorus(long address) -> OscilTorus\n"
		""},
	 { "OscilTorus_swigregister", OscilTorus_swigregister, METH_VARARGS, NULL},
	 { "PageThorneDisk_getProperties", _wrap_PageThorneDisk_getProperties, METH_VARARGS, (char *)"\n"
		"PageThorneDisk_getProperties(PageThorneDisk self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "PageThorneDisk_plugins", _wrap_PageThorneDisk_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"PageThorneDisk_plugins(PageThorneDisk self) -> vector_string\n"
		""},
	 { "PageThorneDisk_isThreadSafe", _wrap_PageThorneDisk_isThreadSafe, METH_VARARGS, (char *)"\n"
		"PageThorneDisk_isThreadSafe(PageThorneDisk self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "PageThorneDisk_clone", _wrap_PageThorneDisk_clone, METH_VARARGS, (char *)"\n"
		"PageThorneDisk_clone(PageThorneDisk self) -> PageThorneDisk\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_PageThorneDisk", _wrap_delete_PageThorneDisk, METH_VARARGS, (char *)"\n"
		"delete_PageThorneDisk(PageThorneDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "PageThorneDisk_metric", _wrap_PageThorneDisk_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"PageThorneDisk_metric(PageThorneDisk self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "PageThorneDisk_mdot", _wrap_PageThorneDisk_mdot, METH_VARARGS, (char *)"\n"
		"mdot(double v)\n"
		"PageThorneDisk_mdot(PageThorneDisk self) -> double\n"
		""},
	 { "PageThorneDisk_uniFlux", _wrap_PageThorneDisk_uniFlux, METH_VARARGS, (char *)"\n"
		"uniFlux(bool t)\n"
		"PageThorneDisk_uniFlux(PageThorneDisk self) -> bool\n"
		""},
	 { "PageThorneDisk_emission", _wrap_PageThorneDisk_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"PageThorneDisk_emission(PageThorneDisk self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "PageThorneDisk_bolometricEmission", _wrap_PageThorneDisk_bolometricEmission, METH_VARARGS, (char *)"\n"
		"PageThorneDisk_bolometricEmission(PageThorneDisk self, double nuem, double dsem, double const [8] c_obj) -> double\n"
		"\n"
		"\n"
		"\n"
		"Bolometric emission.\n"
		"\n"
		"Similar to Generic::emission(), but bolometric. \n"
		""},
	 { "PageThorneDisk_processHitQuantities", _wrap_PageThorneDisk_processHitQuantities, METH_VARARGS, (char *)"PageThorneDisk_processHitQuantities(PageThorneDisk self, Photon ph, vector_double coord_ph_hit, double const * coord_obj_hit, double dt, AstrobjProperties data)"},
	 { "PageThorneDisk_getDefaultQuantities", _wrap_PageThorneDisk_getDefaultQuantities, METH_VARARGS, (char *)"\n"
		"PageThorneDisk_getDefaultQuantities(PageThorneDisk self) -> Gyoto::Quantity_t\n"
		"\n"
		"\n"
		"\n"
		"Which quantities to compute if know was requested.\n"
		"\n"
		"Return a Gyoto::Quantity_t suitable as input to\n"
		"Gyoto::Scenery::setRequestedQuantities() to set de default quantities\n"
		"to compute for this object. The default of these defaults\n"
		"GYOTO_QUANTITY_INTENSITY. \n"
		""},
	 { "PageThorneDisk_tell", _wrap_PageThorneDisk_tell, METH_VARARGS, (char *)"\n"
		"PageThorneDisk_tell(PageThorneDisk self, Teller msg)\n"
		"\n"
		"\n"
		"\n"
		"Update PageThorneDisk::aa_.\n"
		"\n"
		"Calls updateSpin().\n"
		"\n"
		"See Hook::Listener::tell() \n"
		""},
	 { "PageThorneDisk_radiativeQ", _wrap_PageThorneDisk_radiativeQ, METH_VARARGS, (char *)"PageThorneDisk_radiativeQ(PageThorneDisk self, double * Inu, double * Qnu, double * Unu, double * Vnu, Eigen::Matrix4d * Onu, double const * nuem, size_t nbnu, double dsem, vector_double cph, double const * co)"},
	 { "new_PageThorneDisk", _wrap_new_PageThorneDisk, METH_VARARGS, (char *)"\n"
		"PageThorneDisk()\n"
		"PageThorneDisk(PageThorneDisk arg2)\n"
		"PageThorneDisk(Astrobj base)\n"
		"new_PageThorneDisk(long address) -> PageThorneDisk\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "PageThorneDisk_swigregister", PageThorneDisk_swigregister, METH_VARARGS, NULL},
	 { "ThinDiskPL_getProperties", _wrap_ThinDiskPL_getProperties, METH_VARARGS, (char *)"\n"
		"ThinDiskPL_getProperties(ThinDiskPL self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThinDiskPL_plugins", _wrap_ThinDiskPL_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThinDiskPL_plugins(ThinDiskPL self) -> vector_string\n"
		""},
	 { "ThinDiskPL_isThreadSafe", _wrap_ThinDiskPL_isThreadSafe, METH_VARARGS, (char *)"\n"
		"ThinDiskPL_isThreadSafe(ThinDiskPL self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "ThinDiskPL_clone", _wrap_ThinDiskPL_clone, METH_VARARGS, (char *)"\n"
		"ThinDiskPL_clone(ThinDiskPL self) -> ThinDiskPL\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_ThinDiskPL", _wrap_delete_ThinDiskPL, METH_VARARGS, (char *)"\n"
		"delete_ThinDiskPL(ThinDiskPL self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "ThinDiskPL_Slope", _wrap_ThinDiskPL_Slope, METH_VARARGS, (char *)"\n"
		"Slope(double arg2)\n"
		"ThinDiskPL_Slope(ThinDiskPL self) -> double\n"
		""},
	 { "ThinDiskPL_Tinner", _wrap_ThinDiskPL_Tinner, METH_VARARGS, (char *)"\n"
		"Tinner(double arg2)\n"
		"ThinDiskPL_Tinner(ThinDiskPL self) -> double\n"
		""},
	 { "ThinDiskPL_emission", _wrap_ThinDiskPL_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"ThinDiskPL_emission(ThinDiskPL self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "new_ThinDiskPL", _wrap_new_ThinDiskPL, METH_VARARGS, (char *)"\n"
		"ThinDiskPL()\n"
		"ThinDiskPL(ThinDiskPL arg2)\n"
		"ThinDiskPL(Astrobj base)\n"
		"new_ThinDiskPL(long address) -> ThinDiskPL\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ThinDiskPL_swigregister", ThinDiskPL_swigregister, METH_VARARGS, NULL},
	 { "PolishDoughnut_getProperties", _wrap_PolishDoughnut_getProperties, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_getProperties(PolishDoughnut self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "PolishDoughnut_plugins", _wrap_PolishDoughnut_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"PolishDoughnut_plugins(PolishDoughnut self) -> vector_string\n"
		""},
	 { "PolishDoughnut_isThreadSafe", _wrap_PolishDoughnut_isThreadSafe, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_isThreadSafe(PolishDoughnut self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "PolishDoughnut_fillProperty", _wrap_PolishDoughnut_fillProperty, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_fillProperty(PolishDoughnut self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "PolishDoughnut_clone", _wrap_PolishDoughnut_clone, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_clone(PolishDoughnut self) -> PolishDoughnut\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_PolishDoughnut", _wrap_delete_PolishDoughnut, METH_VARARGS, (char *)"\n"
		"delete_PolishDoughnut(PolishDoughnut self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "PolishDoughnut_getL0", _wrap_PolishDoughnut_getL0, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_getL0(PolishDoughnut self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PolishDoughnut::l0_. \n"
		""},
	 { "PolishDoughnut__lambda", _wrap_PolishDoughnut__lambda, METH_VARARGS, (char *)"\n"
		"_lambda() -> double\n"
		"PolishDoughnut__lambda(PolishDoughnut self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set PolishDoughnut::lambda_. \n"
		""},
	 { "PolishDoughnut_centralEnthalpyPerUnitVolume", _wrap_PolishDoughnut_centralEnthalpyPerUnitVolume, METH_VARARGS, (char *)"\n"
		"centralEnthalpyPerUnitVolume() -> double\n"
		"centralEnthalpyPerUnitVolume(std::string const & unit) -> double\n"
		"centralEnthalpyPerUnitVolume(double density)\n"
		"PolishDoughnut_centralEnthalpyPerUnitVolume(PolishDoughnut self, double density, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set PolishDoughnut::central_enthalpy_cgs_ in specified unit. \n"
		""},
	 { "PolishDoughnut_centralTemp", _wrap_PolishDoughnut_centralTemp, METH_VARARGS, (char *)"\n"
		"centralTemp() -> double\n"
		"PolishDoughnut_centralTemp(PolishDoughnut self, double val)\n"
		"\n"
		"\n"
		"\n"
		"Set PolishDoughnut::central_temperature_. \n"
		""},
	 { "PolishDoughnut_beta", _wrap_PolishDoughnut_beta, METH_VARARGS, (char *)"\n"
		"beta() -> double\n"
		"PolishDoughnut_beta(PolishDoughnut self, double beta)\n"
		"\n"
		"\n"
		"\n"
		"Set PolishDoughnut::beta_. \n"
		""},
	 { "PolishDoughnut_magnetizationParameter", _wrap_PolishDoughnut_magnetizationParameter, METH_VARARGS, (char *)"\n"
		"magnetizationParameter(double rr)\n"
		"PolishDoughnut_magnetizationParameter(PolishDoughnut self) -> double\n"
		""},
	 { "PolishDoughnut_spectralOversampling", _wrap_PolishDoughnut_spectralOversampling, METH_VARARGS, (char *)"\n"
		"spectralOversampling(size_t arg2)\n"
		"PolishDoughnut_spectralOversampling(PolishDoughnut self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get PolishDoughnut::spectral_oversampling_. \n"
		""},
	 { "PolishDoughnut_changeCusp", _wrap_PolishDoughnut_changeCusp, METH_VARARGS, (char *)"\n"
		"changeCusp() -> bool\n"
		"PolishDoughnut_changeCusp(PolishDoughnut self, bool t)\n"
		"\n"
		"\n"
		"\n"
		"Set PolishDoughnut::komissarov_. \n"
		""},
	 { "PolishDoughnut_bremsstrahlung", _wrap_PolishDoughnut_bremsstrahlung, METH_VARARGS, (char *)"\n"
		"bremsstrahlung() -> bool\n"
		"PolishDoughnut_bremsstrahlung(PolishDoughnut self, bool brems)\n"
		"\n"
		"\n"
		"\n"
		"Set PolishDoughnut::bremsstrahlung_. \n"
		""},
	 { "PolishDoughnut_angleAveraged", _wrap_PolishDoughnut_angleAveraged, METH_VARARGS, (char *)"\n"
		"angleAveraged() -> bool\n"
		"PolishDoughnut_angleAveraged(PolishDoughnut self, bool komis)\n"
		"\n"
		"\n"
		"\n"
		"Set PolishDoughnut::angle_averaged_. \n"
		""},
	 { "PolishDoughnut_nonThermalDeltaExpo", _wrap_PolishDoughnut_nonThermalDeltaExpo, METH_VARARGS, (char *)"\n"
		"nonThermalDeltaExpo(vector_double v)\n"
		"PolishDoughnut_nonThermalDeltaExpo(PolishDoughnut self) -> vector_double\n"
		""},
	 { "PolishDoughnut_angmomrinner", _wrap_PolishDoughnut_angmomrinner, METH_VARARGS, (char *)"\n"
		"angmomrinner(vector_double v)\n"
		"PolishDoughnut_angmomrinner(PolishDoughnut self) -> vector_double\n"
		""},
	 { "PolishDoughnut_adafparams", _wrap_PolishDoughnut_adafparams, METH_VARARGS, (char *)"\n"
		"adafparams(vector_double v)\n"
		"PolishDoughnut_adafparams(PolishDoughnut self) -> vector_double\n"
		""},
	 { "PolishDoughnut_adaf", _wrap_PolishDoughnut_adaf, METH_VARARGS, (char *)"\n"
		"adaf(bool t)\n"
		"PolishDoughnut_adaf(PolishDoughnut self) -> bool\n"
		""},
	 { "PolishDoughnut_setParameter", _wrap_PolishDoughnut_setParameter, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_setParameter(PolishDoughnut self, Property p, std::string const & name, std::string const & content, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set parameter by name.\n"
		"\n"
		"This function is used when parsing an XML description, if no Property\n"
		"of this name is found. Overriding implementation should fall-back on\n"
		"calling the direct's parent implementation:\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  XML name of the parameter (XML entity). This may have a path\n"
		"component, e.g. \"Astrobj::Radius\", in which case a property named\n"
		"\"Astrobj\" will be sought in the current object, and setParameter\n"
		"will be called recusrively on this Astrobj with Radius as name.\n"
		"\n"
		"content:  string representation of the value\n"
		"\n"
		"unit:  string representation of the unit\n"
		"\n"
		"0 if this parameter is known, 1 if it is not. \n"
		""},
	 { "PolishDoughnut_getWsurface", _wrap_PolishDoughnut_getWsurface, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_getWsurface(PolishDoughnut self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PolishDoughnut::W_surface_. \n"
		""},
	 { "PolishDoughnut_getWcentre", _wrap_PolishDoughnut_getWcentre, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_getWcentre(PolishDoughnut self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PolishDoughnut::W_centre_. \n"
		""},
	 { "PolishDoughnut_getRcusp", _wrap_PolishDoughnut_getRcusp, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_getRcusp(PolishDoughnut self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PolishDoughnut::r_cusp_. \n"
		""},
	 { "PolishDoughnut_getRcentre", _wrap_PolishDoughnut_getRcentre, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_getRcentre(PolishDoughnut self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PolishDoughnut::r_centre_. \n"
		""},
	 { "PolishDoughnut_metric", _wrap_PolishDoughnut_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"PolishDoughnut_metric(PolishDoughnut self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "PolishDoughnut_Impact", _wrap_PolishDoughnut_Impact, METH_VARARGS, (char *)"\n"
		"PolishDoughnut_Impact(PolishDoughnut self, Photon ph, size_t index, AstrobjProperties data) -> int\n"
		"\n"
		"\n"
		"\n"
		"Does a photon at these coordinates impact the object?\n"
		"\n"
		"Impact() checks whether a Photon impacts the object between two\n"
		"integration steps of the photon's trajectory (those two steps are\n"
		"photon->getCoord(index, coord1) and photon->getCoord(index+1,\n"
		"coord2)). Impact returns 1 if the photon impacts the object between\n"
		"these two steps, else 0. In many cases of geometrically thick obects,\n"
		"the implementation Astrobj::Standard::Impact() will be fine.\n"
		"\n"
		"Impact will call Generic::processHitQuantities() (which is virtual and\n"
		"may be re-implemented) to compute observable properties on demand: if\n"
		"the data pointer is non-NULL, the object will look in it for pointers\n"
		"to properties which apply to its kind. If a pointer to a property\n"
		"known to this object is present, then the property is computed and\n"
		"store at the pointed-to address. For instance, all objects know the\n"
		"\"intensity\" property. If data->intensity != NULL, the instensity is\n"
		"computed and stored in *data->intensity.\n"
		"\n"
		"If data is non-NULL and only in this case, processHitQuantities() will\n"
		"also call ph->transmit() to update the transmissions of the Photon\n"
		"(see Photon::transmit(size_t, double)). This must not be done if data\n"
		"is NULL (see Astrobj::Complex::Impact() for an explanation).\n"
		"\n"
		"Impact() may not extend the ph Worldline. The only two dates that are\n"
		"guaranteed to be defined are at indices index and index+1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ph:   Gyoto::Photon aimed at the object;\n"
		"\n"
		"index:  Index of the last photon step;\n"
		"\n"
		"data:  Pointer to a structure to hold the observables at impact.\n"
		"\n"
		"1 if impact, 0 if not. \n"
		""},
	 { "PolishDoughnut___call__", _wrap_PolishDoughnut___call__, METH_VARARGS, (char *)"PolishDoughnut___call__(PolishDoughnut self, double const [4] coord) -> double"},
	 { "new_PolishDoughnut", _wrap_new_PolishDoughnut, METH_VARARGS, (char *)"\n"
		"PolishDoughnut()\n"
		"PolishDoughnut(PolishDoughnut arg2)\n"
		"PolishDoughnut(Astrobj base)\n"
		"new_PolishDoughnut(long address) -> PolishDoughnut\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "PolishDoughnut_swigregister", PolishDoughnut_swigregister, METH_VARARGS, NULL},
	 { "ThinDiskIronLine_getProperties", _wrap_ThinDiskIronLine_getProperties, METH_VARARGS, (char *)"\n"
		"ThinDiskIronLine_getProperties(ThinDiskIronLine self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThinDiskIronLine_plugins", _wrap_ThinDiskIronLine_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThinDiskIronLine_plugins(ThinDiskIronLine self) -> vector_string\n"
		""},
	 { "delete_ThinDiskIronLine", _wrap_delete_ThinDiskIronLine, METH_VARARGS, (char *)"delete_ThinDiskIronLine(ThinDiskIronLine self)"},
	 { "ThinDiskIronLine_clone", _wrap_ThinDiskIronLine_clone, METH_VARARGS, (char *)"\n"
		"ThinDiskIronLine_clone(ThinDiskIronLine self) -> ThinDiskIronLine\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "ThinDiskIronLine_emission", _wrap_ThinDiskIronLine_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"ThinDiskIronLine_emission(ThinDiskIronLine self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "ThinDiskIronLine_getVelocity", _wrap_ThinDiskIronLine_getVelocity, METH_VARARGS, (char *)"\n"
		"ThinDiskIronLine_getVelocity(ThinDiskIronLine self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Get fluid 4-velocity at point.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"getVelocity() should work at some distance from the equatorial plane.\n"
		"The default implementation calls Metric::Generic::circularVelocity().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "ThinDiskIronLine_PowerLawIndex", _wrap_ThinDiskIronLine_PowerLawIndex, METH_VARARGS, (char *)"\n"
		"PowerLawIndex(double arg2)\n"
		"ThinDiskIronLine_PowerLawIndex(ThinDiskIronLine self) -> double\n"
		""},
	 { "ThinDiskIronLine_LineFreq", _wrap_ThinDiskIronLine_LineFreq, METH_VARARGS, (char *)"\n"
		"LineFreq(double arg2)\n"
		"LineFreq() -> double\n"
		"LineFreq(double v, std::string const & u)\n"
		"ThinDiskIronLine_LineFreq(ThinDiskIronLine self, std::string const & u) -> double\n"
		""},
	 { "ThinDiskIronLine_CutRadius", _wrap_ThinDiskIronLine_CutRadius, METH_VARARGS, (char *)"\n"
		"CutRadius(double arg2)\n"
		"CutRadius() -> double\n"
		"CutRadius(double v, std::string const & u)\n"
		"ThinDiskIronLine_CutRadius(ThinDiskIronLine self, std::string const & u) -> double\n"
		""},
	 { "new_ThinDiskIronLine", _wrap_new_ThinDiskIronLine, METH_VARARGS, (char *)"\n"
		"ThinDiskIronLine()\n"
		"ThinDiskIronLine(ThinDiskIronLine o)\n"
		"ThinDiskIronLine(Astrobj base)\n"
		"new_ThinDiskIronLine(long address) -> ThinDiskIronLine\n"
		""},
	 { "ThinDiskIronLine_swigregister", ThinDiskIronLine_swigregister, METH_VARARGS, NULL},
	 { "PatternDisk_getProperties", _wrap_PatternDisk_getProperties, METH_VARARGS, (char *)"\n"
		"PatternDisk_getProperties(PatternDisk self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "PatternDisk_plugins", _wrap_PatternDisk_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"PatternDisk_plugins(PatternDisk self) -> vector_string\n"
		""},
	 { "PatternDisk_fillProperty", _wrap_PatternDisk_fillProperty, METH_VARARGS, (char *)"\n"
		"PatternDisk_fillProperty(PatternDisk self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "PatternDisk_clone", _wrap_PatternDisk_clone, METH_VARARGS, (char *)"\n"
		"PatternDisk_clone(PatternDisk self) -> PatternDisk\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_PatternDisk", _wrap_delete_PatternDisk, METH_VARARGS, (char *)"\n"
		"delete_PatternDisk(PatternDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "PatternDisk_innerRadius", _wrap_PatternDisk_innerRadius, METH_VARARGS, (char *)"\n"
		"innerRadius() -> double\n"
		"innerRadius(std::string const & arg2) -> double\n"
		"innerRadius(double arg2, std::string const & arg3)\n"
		"PatternDisk_innerRadius(PatternDisk self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set rin_. \n"
		""},
	 { "PatternDisk_outerRadius", _wrap_PatternDisk_outerRadius, METH_VARARGS, (char *)"\n"
		"outerRadius() -> double\n"
		"outerRadius(std::string const & arg2) -> double\n"
		"outerRadius(double arg2, std::string const & arg3)\n"
		"PatternDisk_outerRadius(PatternDisk self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set rout_. \n"
		""},
	 { "PatternDisk_patternVelocity", _wrap_PatternDisk_patternVelocity, METH_VARARGS, (char *)"\n"
		"patternVelocity(double arg2)\n"
		"PatternDisk_patternVelocity(PatternDisk self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::Omega_. \n"
		""},
	 { "PatternDisk_file", _wrap_PatternDisk_file, METH_VARARGS, (char *)"\n"
		"file(std::string const & f)\n"
		"PatternDisk_file(PatternDisk self) -> std::string\n"
		""},
	 { "PatternDisk_fitsRead", _wrap_PatternDisk_fitsRead, METH_VARARGS, (char *)"PatternDisk_fitsRead(PatternDisk self, std::string filename_)"},
	 { "PatternDisk_fitsWrite", _wrap_PatternDisk_fitsWrite, METH_VARARGS, (char *)"PatternDisk_fitsWrite(PatternDisk self, std::string filename_)"},
	 { "PatternDisk_setEmission", _wrap_PatternDisk_setEmission, METH_VARARGS, (char *)"\n"
		"PatternDisk_setEmission(PatternDisk self, double * pattern)\n"
		"\n"
		"\n"
		"\n"
		"Set PatternDisk::emission_.\n"
		"\n"
		"The pointer is copied directly, not the array content.\n"
		"\n"
		"This is a low-level function. Beware that: previously allocated array\n"
		"will not be freed automatically;\n"
		"\n"
		"array attached when the destructor is called will be freed. \n"
		""},
	 { "PatternDisk_setVelocity", _wrap_PatternDisk_setVelocity, METH_VARARGS, (char *)"\n"
		"PatternDisk_setVelocity(PatternDisk self, double * pattern)\n"
		"\n"
		"\n"
		"\n"
		"Set PatternDisk::velocity__.\n"
		"\n"
		"The pointer is copied directly, not the array content.\n"
		"\n"
		"This is a low-level function. Beware that: previously allocated array\n"
		"will not be freed automatically;\n"
		"\n"
		"array attached when the destructor is called will be freed. \n"
		""},
	 { "PatternDisk_radius", _wrap_PatternDisk_radius, METH_VARARGS, (char *)"\n"
		"PatternDisk_radius(PatternDisk self, double * pattern)\n"
		"\n"
		"\n"
		"\n"
		"Set PatternDisk::radius_.\n"
		"\n"
		"The pointer is copied directly, not the array content.\n"
		"\n"
		"This is a low-level function. Beware that: previously allocated array\n"
		"will not be freed automatically;\n"
		"\n"
		"array attached when the destructor is called will be freed. \n"
		""},
	 { "PatternDisk_copyIntensity", _wrap_PatternDisk_copyIntensity, METH_VARARGS, (char *)"\n"
		"copyIntensity(double const *const pattern=None, size_t const [3] naxes=0)\n"
		"copyIntensity(double const *const pattern=None)\n"
		"PatternDisk_copyIntensity(PatternDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Set PatternDisk::emission_.\n"
		"\n"
		"PatternDisk::emission_ is freed if not NULL, reallocated, and pattern\n"
		"is copied into emission_.\n"
		"\n"
		"If PatternDisk::opacity_, PatternDisk::velocity_ or\n"
		"PatternDisk::radius_ have been set previously with mismatching sizes,\n"
		"they are deallocated too.\n"
		"\n"
		"Finally, PatternDisk::nnu_, PatternDisk::nphi_, and PatternDisk::nr_\n"
		"are set according to naxes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as emission_. May be NULL in which case\n"
		"emission_ is simply deallocated and set to NULL.\n"
		"\n"
		"naxes:  { nnu_, nphi_, nr_ }. \n"
		""},
	 { "PatternDisk_getIntensity", _wrap_PatternDisk_getIntensity, METH_VARARGS, (char *)"\n"
		"PatternDisk_getIntensity(PatternDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::emission_. \n"
		""},
	 { "PatternDisk_getIntensityNaxes", _wrap_PatternDisk_getIntensityNaxes, METH_VARARGS, (char *)"\n"
		"PatternDisk_getIntensityNaxes(PatternDisk self, size_t [3] naxes)\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::nnu_, PatternDisk::nphi_, and PatternDisk::nr_. \n"
		""},
	 { "PatternDisk_copyOpacity", _wrap_PatternDisk_copyOpacity, METH_VARARGS, (char *)"\n"
		"copyOpacity(double const *const pattern=None, size_t const [3] naxes=0)\n"
		"copyOpacity(double const *const pattern=None)\n"
		"PatternDisk_copyOpacity(PatternDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Set PatternDisk::opacity_.\n"
		"\n"
		"PatternDisk::opacity_ is first freed if not NULL and set to NULL.\n"
		"\n"
		"If pattern is not NULL, PatternDisk::emission_ must have been set\n"
		"previously with matching dimensions. PatternDisk::opacity_ is then\n"
		"reallocated, and pattern is copied into opacity_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as opacity_. May be NULL in which case\n"
		"opacity_ is simply deallocated and set to NULL.\n"
		"\n"
		"naxes:  { nnu_, nphi_, nr_ }. \n"
		""},
	 { "PatternDisk_opacity", _wrap_PatternDisk_opacity, METH_VARARGS, (char *)"\n"
		"PatternDisk_opacity(PatternDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::opacity_. \n"
		""},
	 { "PatternDisk_copyVelocity", _wrap_PatternDisk_copyVelocity, METH_VARARGS, (char *)"\n"
		"copyVelocity(double const *const pattern=None, size_t const [2] naxes=0)\n"
		"copyVelocity(double const *const pattern=None)\n"
		"PatternDisk_copyVelocity(PatternDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Set PatternDisk::velocity_.\n"
		"\n"
		"PatternDisk::velocity_ is first freed if not NULL and set to NULL.\n"
		"\n"
		"If pattern is not NULL, PatternDisk::emission_ must have been set\n"
		"previously with matching dimensions. PatternDisk::velocity_ is then\n"
		"reallocated, and pattern is copied into velocity_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as velocity_. May be NULL in which case\n"
		"velocity_ is simply deallocated and set to NULL.\n"
		"\n"
		"naxes:  { nphi_, nr_ }. \n"
		""},
	 { "PatternDisk_copyGridRadius", _wrap_PatternDisk_copyGridRadius, METH_VARARGS, (char *)"\n"
		"copyGridRadius(double const *const pattern=None, size_t nr=0)\n"
		"copyGridRadius(double const *const pattern=None)\n"
		"PatternDisk_copyGridRadius(PatternDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Set PatternDisk::radius_.\n"
		"\n"
		"PatternDisk::radius_ is first freed if not NULL and set to NULL.\n"
		"\n"
		"If pattern is not NULL, PatternDisk::emission_ must have been set\n"
		"previously with matching dimensions. PatternDisk::radius_ is then\n"
		"reallocated, and pattern is copied into radius_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as radius_. May be NULL in which case radius_\n"
		"is simply deallocated and set to NULL.\n"
		"\n"
		"nr:  size of radius array. \n"
		""},
	 { "PatternDisk_getGridRadius", _wrap_PatternDisk_getGridRadius, METH_VARARGS, (char *)"\n"
		"PatternDisk_getGridRadius(PatternDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::radius_. \n"
		""},
	 { "PatternDisk_repeatPhi", _wrap_PatternDisk_repeatPhi, METH_VARARGS, (char *)"\n"
		"repeatPhi(size_t n)\n"
		"PatternDisk_repeatPhi(PatternDisk self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::repeat_phi_. \n"
		""},
	 { "PatternDisk_nu0", _wrap_PatternDisk_nu0, METH_VARARGS, (char *)"\n"
		"nu0(double freq)\n"
		"PatternDisk_nu0(PatternDisk self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::nu0_. \n"
		""},
	 { "PatternDisk_dnu", _wrap_PatternDisk_dnu, METH_VARARGS, (char *)"\n"
		"dnu(double dfreq)\n"
		"PatternDisk_dnu(PatternDisk self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::dnu_. \n"
		""},
	 { "PatternDisk_phimin", _wrap_PatternDisk_phimin, METH_VARARGS, (char *)"\n"
		"phimin(double phimin)\n"
		"PatternDisk_phimin(PatternDisk self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::phimin_. \n"
		""},
	 { "PatternDisk_phimax", _wrap_PatternDisk_phimax, METH_VARARGS, (char *)"\n"
		"phimax(double phimax)\n"
		"PatternDisk_phimax(PatternDisk self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::phimax_. \n"
		""},
	 { "PatternDisk_emission", _wrap_PatternDisk_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"PatternDisk_emission(PatternDisk self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "PatternDisk_transmission", _wrap_PatternDisk_transmission, METH_VARARGS, (char *)"\n"
		"PatternDisk_transmission(PatternDisk self, double nu_em, double dsem, vector_double arg5, double const [8] coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "PatternDisk_getVelocity", _wrap_PatternDisk_getVelocity, METH_VARARGS, (char *)"\n"
		"getVelocity() -> double const\n"
		"PatternDisk_getVelocity(PatternDisk self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Get fluid 4-velocity at point.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"getVelocity() should work at some distance from the equatorial plane.\n"
		"The default implementation calls Metric::Generic::circularVelocity().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "new_PatternDisk", _wrap_new_PatternDisk, METH_VARARGS, (char *)"\n"
		"PatternDisk()\n"
		"PatternDisk(PatternDisk arg2)\n"
		"PatternDisk(Astrobj base)\n"
		"new_PatternDisk(long address) -> PatternDisk\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "PatternDisk_swigregister", PatternDisk_swigregister, METH_VARARGS, NULL},
	 { "PatternDiskBB_getProperties", _wrap_PatternDiskBB_getProperties, METH_VARARGS, (char *)"\n"
		"PatternDiskBB_getProperties(PatternDiskBB self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "PatternDiskBB_plugins", _wrap_PatternDiskBB_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"PatternDiskBB_plugins(PatternDiskBB self) -> vector_string\n"
		""},
	 { "PatternDiskBB_isThreadSafe", _wrap_PatternDiskBB_isThreadSafe, METH_VARARGS, (char *)"\n"
		"PatternDiskBB_isThreadSafe(PatternDiskBB self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "PatternDiskBB_clone", _wrap_PatternDiskBB_clone, METH_VARARGS, (char *)"\n"
		"PatternDiskBB_clone(PatternDiskBB self) -> PatternDiskBB\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_PatternDiskBB", _wrap_delete_PatternDiskBB, METH_VARARGS, (char *)"\n"
		"delete_PatternDiskBB(PatternDiskBB self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "PatternDiskBB_spectralEmission", _wrap_PatternDiskBB_spectralEmission, METH_VARARGS, (char *)"\n"
		"spectralEmission() -> bool\n"
		"PatternDiskBB_spectralEmission(PatternDiskBB self, bool t)\n"
		""},
	 { "PatternDiskBB_emission", _wrap_PatternDiskBB_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"PatternDiskBB_emission(PatternDiskBB self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "new_PatternDiskBB", _wrap_new_PatternDiskBB, METH_VARARGS, (char *)"\n"
		"PatternDiskBB()\n"
		"PatternDiskBB(PatternDiskBB arg2)\n"
		"PatternDiskBB(Astrobj base)\n"
		"new_PatternDiskBB(long address) -> PatternDiskBB\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "PatternDiskBB_swigregister", PatternDiskBB_swigregister, METH_VARARGS, NULL},
	 { "DynamicalDisk_getProperties", _wrap_DynamicalDisk_getProperties, METH_VARARGS, (char *)"\n"
		"DynamicalDisk_getProperties(DynamicalDisk self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "DynamicalDisk_plugins", _wrap_DynamicalDisk_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"DynamicalDisk_plugins(DynamicalDisk self) -> vector_string\n"
		""},
	 { "DynamicalDisk_clone", _wrap_DynamicalDisk_clone, METH_VARARGS, (char *)"\n"
		"DynamicalDisk_clone(DynamicalDisk self) -> DynamicalDisk\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_DynamicalDisk", _wrap_delete_DynamicalDisk, METH_VARARGS, (char *)"\n"
		"delete_DynamicalDisk(DynamicalDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "DynamicalDisk_file", _wrap_DynamicalDisk_file, METH_VARARGS, (char *)"\n"
		"file() -> std::string\n"
		"DynamicalDisk_file(DynamicalDisk self, std::string const & fname)\n"
		""},
	 { "DynamicalDisk_tinit", _wrap_DynamicalDisk_tinit, METH_VARARGS, (char *)"\n"
		"tinit(double t)\n"
		"DynamicalDisk_tinit(DynamicalDisk self) -> double\n"
		""},
	 { "DynamicalDisk_dt", _wrap_DynamicalDisk_dt, METH_VARARGS, (char *)"\n"
		"dt(double t)\n"
		"DynamicalDisk_dt(DynamicalDisk self) -> double\n"
		""},
	 { "DynamicalDisk_fillProperty", _wrap_DynamicalDisk_fillProperty, METH_VARARGS, (char *)"\n"
		"DynamicalDisk_fillProperty(DynamicalDisk self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "DynamicalDisk_emission", _wrap_DynamicalDisk_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"DynamicalDisk_emission(DynamicalDisk self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "DynamicalDisk_getVelocity", _wrap_DynamicalDisk_getVelocity, METH_VARARGS, (char *)"\n"
		"getVelocity(double const [4] pos, double [4] vel)\n"
		"DynamicalDisk_getVelocity(DynamicalDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get PatternDisk::velocity_. \n"
		""},
	 { "new_DynamicalDisk", _wrap_new_DynamicalDisk, METH_VARARGS, (char *)"\n"
		"DynamicalDisk()\n"
		"DynamicalDisk(DynamicalDisk arg2)\n"
		"DynamicalDisk(Astrobj base)\n"
		"new_DynamicalDisk(long address) -> DynamicalDisk\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "DynamicalDisk_swigregister", DynamicalDisk_swigregister, METH_VARARGS, NULL},
	 { "DynamicalDiskBolometric_getProperties", _wrap_DynamicalDiskBolometric_getProperties, METH_VARARGS, (char *)"\n"
		"DynamicalDiskBolometric_getProperties(DynamicalDiskBolometric self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "DynamicalDiskBolometric_plugins", _wrap_DynamicalDiskBolometric_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"DynamicalDiskBolometric_plugins(DynamicalDiskBolometric self) -> vector_string\n"
		""},
	 { "DynamicalDiskBolometric_clone", _wrap_DynamicalDiskBolometric_clone, METH_VARARGS, (char *)"\n"
		"DynamicalDiskBolometric_clone(DynamicalDiskBolometric self) -> DynamicalDiskBolometric\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_DynamicalDiskBolometric", _wrap_delete_DynamicalDiskBolometric, METH_VARARGS, (char *)"\n"
		"delete_DynamicalDiskBolometric(DynamicalDiskBolometric self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "DynamicalDiskBolometric_emission", _wrap_DynamicalDiskBolometric_emission, METH_VARARGS, (char *)"\n"
		"DynamicalDiskBolometric_emission(DynamicalDiskBolometric self, double nu_em, double dsem, vector_double arg5, double const [8] coord_obj) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "DynamicalDiskBolometric_bolometricEmission", _wrap_DynamicalDiskBolometric_bolometricEmission, METH_VARARGS, (char *)"DynamicalDiskBolometric_bolometricEmission(DynamicalDiskBolometric self, double dsem, vector_double cph, double const [8] coord_obj) -> double"},
	 { "DynamicalDiskBolometric_processHitQuantities", _wrap_DynamicalDiskBolometric_processHitQuantities, METH_VARARGS, (char *)"DynamicalDiskBolometric_processHitQuantities(DynamicalDiskBolometric self, Photon ph, vector_double coord_ph_hit, double const * coord_obj_hit, double dt, AstrobjProperties data)"},
	 { "new_DynamicalDiskBolometric", _wrap_new_DynamicalDiskBolometric, METH_VARARGS, (char *)"\n"
		"DynamicalDiskBolometric()\n"
		"DynamicalDiskBolometric(DynamicalDiskBolometric arg2)\n"
		"DynamicalDiskBolometric(Astrobj base)\n"
		"new_DynamicalDiskBolometric(long address) -> DynamicalDiskBolometric\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "DynamicalDiskBolometric_swigregister", DynamicalDiskBolometric_swigregister, METH_VARARGS, NULL},
	 { "Disk3D_getProperties", _wrap_Disk3D_getProperties, METH_VARARGS, (char *)"\n"
		"Disk3D_getProperties(Disk3D self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Disk3D_plugins", _wrap_Disk3D_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Disk3D_plugins(Disk3D self) -> vector_string\n"
		""},
	 { "Disk3D_fillProperty", _wrap_Disk3D_fillProperty, METH_VARARGS, (char *)"\n"
		"Disk3D_fillProperty(Disk3D self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "Disk3D_clone", _wrap_Disk3D_clone, METH_VARARGS, (char *)"\n"
		"Disk3D_clone(Disk3D self) -> Disk3D\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_Disk3D", _wrap_delete_Disk3D, METH_VARARGS, (char *)"\n"
		"delete_Disk3D(Disk3D self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Disk3D_fitsRead", _wrap_Disk3D_fitsRead, METH_VARARGS, (char *)"Disk3D_fitsRead(Disk3D self, std::string filename_)"},
	 { "Disk3D_fitsWrite", _wrap_Disk3D_fitsWrite, METH_VARARGS, (char *)"Disk3D_fitsWrite(Disk3D self, std::string filename_)"},
	 { "Disk3D_file", _wrap_Disk3D_file, METH_VARARGS, (char *)"\n"
		"file(std::string const & f)\n"
		"Disk3D_file(Disk3D self) -> std::string\n"
		""},
	 { "Disk3D_zsym", _wrap_Disk3D_zsym, METH_VARARGS, (char *)"\n"
		"zsym(bool t)\n"
		"Disk3D_zsym(Disk3D self) -> bool\n"
		""},
	 { "Disk3D_tPattern", _wrap_Disk3D_tPattern, METH_VARARGS, (char *)"\n"
		"tPattern(double t)\n"
		"Disk3D_tPattern(Disk3D self) -> double\n"
		""},
	 { "Disk3D_omegaPattern", _wrap_Disk3D_omegaPattern, METH_VARARGS, (char *)"\n"
		"omegaPattern(double t)\n"
		"Disk3D_omegaPattern(Disk3D self) -> double\n"
		""},
	 { "Disk3D_setEmissquant", _wrap_Disk3D_setEmissquant, METH_VARARGS, (char *)"\n"
		"Disk3D_setEmissquant(Disk3D self, double * pattern)\n"
		"\n"
		"\n"
		"\n"
		"Set Disk3D::emissquant_.\n"
		"\n"
		"The pointer is copied directly, not the array content.\n"
		"\n"
		"This is a low-level function. Beware that: previously allocated array\n"
		"will not be freed automatically;\n"
		"\n"
		"array attached when the destructor is called will be freed. \n"
		""},
	 { "Disk3D_setVelocity", _wrap_Disk3D_setVelocity, METH_VARARGS, (char *)"\n"
		"Disk3D_setVelocity(Disk3D self, double * pattern)\n"
		"\n"
		"\n"
		"\n"
		"Set Disk3D::velocity__.\n"
		"\n"
		"The pointer is copied directly, not the array content.\n"
		"\n"
		"This is a low-level function. Beware that: previously allocated array\n"
		"will not be freed automatically;\n"
		"\n"
		"array attached when the destructor is called will be freed. \n"
		""},
	 { "Disk3D_copyEmissquant", _wrap_Disk3D_copyEmissquant, METH_VARARGS, (char *)"\n"
		"copyEmissquant(double const *const pattern=None, size_t const [4] naxes=0)\n"
		"copyEmissquant(double const *const pattern=None)\n"
		"Disk3D_copyEmissquant(Disk3D self)\n"
		"\n"
		"\n"
		"\n"
		"Set Disk3D::emissquant_.\n"
		"\n"
		"Disk3D::emissquant_ is freed if not NULL, reallocated, and pattern is\n"
		"copied into emission_.\n"
		"\n"
		"If Disk3D::velocity_ or has been set previously with mismatching\n"
		"sizes, it is deallocated too.\n"
		"\n"
		"Finally, Disk3D::nnu_, Disk3D::nphi_, Disk3D::nz_ and Disk3D::nr_ are\n"
		"set according to naxes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as emission_. May be NULL in which case\n"
		"emission_ is simply deallocated and set to NULL.\n"
		"\n"
		"naxes:  { nnu_, nphi_, nz_, nr_ }. \n"
		""},
	 { "Disk3D_getEmissquant", _wrap_Disk3D_getEmissquant, METH_VARARGS, (char *)"\n"
		"Disk3D_getEmissquant(Disk3D self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::emissquant_. \n"
		""},
	 { "Disk3D_getEmissquantNaxes", _wrap_Disk3D_getEmissquantNaxes, METH_VARARGS, (char *)"\n"
		"Disk3D_getEmissquantNaxes(Disk3D self, size_t [4] naxes)\n"
		"\n"
		"\n"
		"\n"
		"Get { Disk3D::nnu_, Disk3D::nphi_, Disk3D::nz_, Disk3D::nr_ }. \n"
		""},
	 { "Disk3D_copyOpacity", _wrap_Disk3D_copyOpacity, METH_VARARGS, (char *)"\n"
		"copyOpacity(double const *const pattern=None, size_t const [4] naxes=0)\n"
		"copyOpacity(double const *const pattern=None)\n"
		"Disk3D_copyOpacity(Disk3D self)\n"
		""},
	 { "Disk3D_opacity", _wrap_Disk3D_opacity, METH_VARARGS, (char *)"\n"
		"opacity(double * pattern)\n"
		"Disk3D_opacity(Disk3D self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::opacity_. \n"
		""},
	 { "Disk3D_copyVelocity", _wrap_Disk3D_copyVelocity, METH_VARARGS, (char *)"\n"
		"copyVelocity(double const *const pattern=None, size_t const [3] naxes=0)\n"
		"copyVelocity(double const *const pattern=None)\n"
		"Disk3D_copyVelocity(Disk3D self)\n"
		"\n"
		"\n"
		"\n"
		"Set Disk3D::velocity_.\n"
		"\n"
		"Disk3D::velocity_ is first freed if not NULL and set to NULL.\n"
		"\n"
		"If pattern is not NULL, Disk3D::emissquant_ must have been set\n"
		"previously with matching dimensions. Disk3D::velocity_ is then\n"
		"reallocated, and pattern is copied into velocity_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as velocity_. May be NULL in which case\n"
		"velocity_ is simply deallocated and set to NULL.\n"
		"\n"
		"naxes:  { nphi_, nz_, nr_ }. \n"
		""},
	 { "Disk3D_repeatPhi", _wrap_Disk3D_repeatPhi, METH_VARARGS, (char *)"\n"
		"repeatPhi(size_t n)\n"
		"Disk3D_repeatPhi(Disk3D self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::repeat_phi_. \n"
		""},
	 { "Disk3D_nu0", _wrap_Disk3D_nu0, METH_VARARGS, (char *)"\n"
		"nu0(double freq)\n"
		"Disk3D_nu0(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::nu0_. \n"
		""},
	 { "Disk3D_dnu", _wrap_Disk3D_dnu, METH_VARARGS, (char *)"\n"
		"dnu(double dfreq)\n"
		"Disk3D_dnu(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::dnu_. \n"
		""},
	 { "Disk3D_rin", _wrap_Disk3D_rin, METH_VARARGS, (char *)"\n"
		"rin(double rrin)\n"
		"Disk3D_rin(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::rin_. \n"
		""},
	 { "Disk3D_rout", _wrap_Disk3D_rout, METH_VARARGS, (char *)"\n"
		"rout(double rout)\n"
		"Disk3D_rout(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::rout_. \n"
		""},
	 { "Disk3D_zmin", _wrap_Disk3D_zmin, METH_VARARGS, (char *)"\n"
		"zmin(double zmin)\n"
		"Disk3D_zmin(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::zmin_. \n"
		""},
	 { "Disk3D_zmax", _wrap_Disk3D_zmax, METH_VARARGS, (char *)"\n"
		"zmax(double zmax)\n"
		"Disk3D_zmax(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::zmax_. \n"
		""},
	 { "Disk3D_phimin", _wrap_Disk3D_phimin, METH_VARARGS, (char *)"\n"
		"phimin(double phimin)\n"
		"Disk3D_phimin(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::phimin_. \n"
		""},
	 { "Disk3D_phimax", _wrap_Disk3D_phimax, METH_VARARGS, (char *)"\n"
		"phimax(double phimax)\n"
		"Disk3D_phimax(Disk3D self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::phimax_. \n"
		""},
	 { "Disk3D_Impact", _wrap_Disk3D_Impact, METH_VARARGS, (char *)"\n"
		"Disk3D_Impact(Disk3D self, Photon ph, size_t index, AstrobjProperties data) -> int\n"
		"\n"
		"\n"
		"\n"
		"Does a photon at these coordinates impact the object?\n"
		"\n"
		"Impact() checks whether a Photon impacts the object between two\n"
		"integration steps of the photon's trajectory (those two steps are\n"
		"photon->getCoord(index, coord1) and photon->getCoord(index+1,\n"
		"coord2)). Impact returns 1 if the photon impacts the object between\n"
		"these two steps, else 0. In many cases of geometrically thick obects,\n"
		"the implementation Astrobj::Standard::Impact() will be fine.\n"
		"\n"
		"Impact will call Generic::processHitQuantities() (which is virtual and\n"
		"may be re-implemented) to compute observable properties on demand: if\n"
		"the data pointer is non-NULL, the object will look in it for pointers\n"
		"to properties which apply to its kind. If a pointer to a property\n"
		"known to this object is present, then the property is computed and\n"
		"store at the pointed-to address. For instance, all objects know the\n"
		"\"intensity\" property. If data->intensity != NULL, the instensity is\n"
		"computed and stored in *data->intensity.\n"
		"\n"
		"If data is non-NULL and only in this case, processHitQuantities() will\n"
		"also call ph->transmit() to update the transmissions of the Photon\n"
		"(see Photon::transmit(size_t, double)). This must not be done if data\n"
		"is NULL (see Astrobj::Complex::Impact() for an explanation).\n"
		"\n"
		"Impact() may not extend the ph Worldline. The only two dates that are\n"
		"guaranteed to be defined are at indices index and index+1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ph:   Gyoto::Photon aimed at the object;\n"
		"\n"
		"index:  Index of the last photon step;\n"
		"\n"
		"data:  Pointer to a structure to hold the observables at impact.\n"
		"\n"
		"1 if impact, 0 if not. \n"
		""},
	 { "Disk3D_getVelocity", _wrap_Disk3D_getVelocity, METH_VARARGS, (char *)"\n"
		"getVelocity() -> double const\n"
		"Disk3D_getVelocity(Disk3D self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Get fluid 4-velocity at point.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "new_Disk3D", _wrap_new_Disk3D, METH_VARARGS, (char *)"\n"
		"Disk3D()\n"
		"Disk3D(Disk3D arg2)\n"
		"Disk3D(Astrobj base)\n"
		"new_Disk3D(long address) -> Disk3D\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Disk3D_swigregister", Disk3D_swigregister, METH_VARARGS, NULL},
	 { "DynamicalDisk3D_getProperties", _wrap_DynamicalDisk3D_getProperties, METH_VARARGS, (char *)"\n"
		"DynamicalDisk3D_getProperties(DynamicalDisk3D self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "DynamicalDisk3D_plugins", _wrap_DynamicalDisk3D_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"DynamicalDisk3D_plugins(DynamicalDisk3D self) -> vector_string\n"
		""},
	 { "DynamicalDisk3D_isThreadSafe", _wrap_DynamicalDisk3D_isThreadSafe, METH_VARARGS, (char *)"\n"
		"DynamicalDisk3D_isThreadSafe(DynamicalDisk3D self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "DynamicalDisk3D_clone", _wrap_DynamicalDisk3D_clone, METH_VARARGS, (char *)"\n"
		"DynamicalDisk3D_clone(DynamicalDisk3D self) -> DynamicalDisk3D\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_DynamicalDisk3D", _wrap_delete_DynamicalDisk3D, METH_VARARGS, (char *)"\n"
		"delete_DynamicalDisk3D(DynamicalDisk3D self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "DynamicalDisk3D_metric", _wrap_DynamicalDisk3D_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"DynamicalDisk3D_metric(DynamicalDisk3D self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "DynamicalDisk3D_file", _wrap_DynamicalDisk3D_file, METH_VARARGS, (char *)"\n"
		"file(std::string const & f)\n"
		"DynamicalDisk3D_file(DynamicalDisk3D self) -> std::string\n"
		""},
	 { "DynamicalDisk3D_tinit", _wrap_DynamicalDisk3D_tinit, METH_VARARGS, (char *)"\n"
		"tinit(double t)\n"
		"DynamicalDisk3D_tinit(DynamicalDisk3D self) -> double\n"
		""},
	 { "DynamicalDisk3D_dt", _wrap_DynamicalDisk3D_dt, METH_VARARGS, (char *)"\n"
		"dt(double t)\n"
		"DynamicalDisk3D_dt(DynamicalDisk3D self) -> double\n"
		""},
	 { "DynamicalDisk3D_PLindex", _wrap_DynamicalDisk3D_PLindex, METH_VARARGS, (char *)"\n"
		"PLindex(double t)\n"
		"DynamicalDisk3D_PLindex(DynamicalDisk3D self) -> double\n"
		""},
	 { "DynamicalDisk3D_floorTemperature", _wrap_DynamicalDisk3D_floorTemperature, METH_VARARGS, (char *)"\n"
		"floorTemperature(double t)\n"
		"DynamicalDisk3D_floorTemperature(DynamicalDisk3D self) -> double\n"
		""},
	 { "DynamicalDisk3D_temperature", _wrap_DynamicalDisk3D_temperature, METH_VARARGS, (char *)"\n"
		"temperature(bool t)\n"
		"DynamicalDisk3D_temperature(DynamicalDisk3D self) -> bool\n"
		""},
	 { "DynamicalDisk3D_withVelocity", _wrap_DynamicalDisk3D_withVelocity, METH_VARARGS, (char *)"\n"
		"withVelocity(bool t)\n"
		"DynamicalDisk3D_withVelocity(DynamicalDisk3D self) -> bool\n"
		""},
	 { "DynamicalDisk3D_emission1date", _wrap_DynamicalDisk3D_emission1date, METH_VARARGS, (char *)"\n"
		"DynamicalDisk3D_emission1date(DynamicalDisk3D self, double nu_em, double dsem, vector_double c_ph, double const [8] c_obj) -> double\n"
		"\n"
		"\n"
		"\n"
		"Compute emission at one grid date. \n"
		""},
	 { "DynamicalDisk3D_emission", _wrap_DynamicalDisk3D_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"DynamicalDisk3D_emission(DynamicalDisk3D self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "DynamicalDisk3D_transmission1date", _wrap_DynamicalDisk3D_transmission1date, METH_VARARGS, (char *)"\n"
		"DynamicalDisk3D_transmission1date(DynamicalDisk3D self, double nu_em, double dsem, vector_double c_ph, double const [8] c_obj) -> double\n"
		"\n"
		"\n"
		"\n"
		"Compute transmission at one grid date. \n"
		""},
	 { "DynamicalDisk3D_transmission", _wrap_DynamicalDisk3D_transmission, METH_VARARGS, (char *)"\n"
		"DynamicalDisk3D_transmission(DynamicalDisk3D self, double nu_em, double dsem, vector_double cph, double const [8] co) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "DynamicalDisk3D_getVelocity", _wrap_DynamicalDisk3D_getVelocity, METH_VARARGS, (char *)"\n"
		"getVelocity(double const [4] pos, double [4] vel)\n"
		"DynamicalDisk3D_getVelocity(DynamicalDisk3D self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get Disk3D::velocity_. \n"
		""},
	 { "new_DynamicalDisk3D", _wrap_new_DynamicalDisk3D, METH_VARARGS, (char *)"\n"
		"DynamicalDisk3D()\n"
		"DynamicalDisk3D(DynamicalDisk3D arg2)\n"
		"DynamicalDisk3D(Astrobj base)\n"
		"new_DynamicalDisk3D(long address) -> DynamicalDisk3D\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "DynamicalDisk3D_swigregister", DynamicalDisk3D_swigregister, METH_VARARGS, NULL},
	 { "DirectionalDisk_getProperties", _wrap_DirectionalDisk_getProperties, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_getProperties(DirectionalDisk self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "DirectionalDisk_plugins", _wrap_DirectionalDisk_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"DirectionalDisk_plugins(DirectionalDisk self) -> vector_string\n"
		""},
	 { "DirectionalDisk_fillProperty", _wrap_DirectionalDisk_fillProperty, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_fillProperty(DirectionalDisk self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "DirectionalDisk_metric", _wrap_DirectionalDisk_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"DirectionalDisk_metric(DirectionalDisk self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "DirectionalDisk_clone", _wrap_DirectionalDisk_clone, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_clone(DirectionalDisk self) -> DirectionalDisk\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_DirectionalDisk", _wrap_delete_DirectionalDisk, METH_VARARGS, (char *)"\n"
		"delete_DirectionalDisk(DirectionalDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "DirectionalDisk_file", _wrap_DirectionalDisk_file, METH_VARARGS, (char *)"\n"
		"file(std::string const & f)\n"
		"DirectionalDisk_file(DirectionalDisk self) -> std::string\n"
		""},
	 { "DirectionalDisk_averageOverAngle", _wrap_DirectionalDisk_averageOverAngle, METH_VARARGS, (char *)"\n"
		"averageOverAngle(bool t)\n"
		"DirectionalDisk_averageOverAngle(DirectionalDisk self) -> bool\n"
		""},
	 { "DirectionalDisk_lampaltitude", _wrap_DirectionalDisk_lampaltitude, METH_VARARGS, (char *)"\n"
		"lampaltitude(double zz)\n"
		"DirectionalDisk_lampaltitude(DirectionalDisk self) -> double\n"
		""},
	 { "DirectionalDisk_lampcutoffsinev", _wrap_DirectionalDisk_lampcutoffsinev, METH_VARARGS, (char *)"\n"
		"lampcutoffsinev(vector_double v)\n"
		"DirectionalDisk_lampcutoffsinev(DirectionalDisk self) -> vector_double\n"
		""},
	 { "DirectionalDisk_fitsRead", _wrap_DirectionalDisk_fitsRead, METH_VARARGS, (char *)"DirectionalDisk_fitsRead(DirectionalDisk self, std::string filename_)"},
	 { "DirectionalDisk_fitsWrite", _wrap_DirectionalDisk_fitsWrite, METH_VARARGS, (char *)"DirectionalDisk_fitsWrite(DirectionalDisk self, std::string filename_)"},
	 { "DirectionalDisk_setEmission", _wrap_DirectionalDisk_setEmission, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_setEmission(DirectionalDisk self, double * pattern)\n"
		"\n"
		"\n"
		"\n"
		"Set DirectionalDisk::emission_.\n"
		"\n"
		"The pointer is copied directly, not the array content.\n"
		"\n"
		"This is a low-level function. Beware that: previously allocated array\n"
		"will not be freed automatically;\n"
		"\n"
		"array attached when the destructor is called will be freed. \n"
		""},
	 { "DirectionalDisk_radius", _wrap_DirectionalDisk_radius, METH_VARARGS, (char *)"DirectionalDisk_radius(DirectionalDisk self, double * pattern)"},
	 { "DirectionalDisk_copyIntensity", _wrap_DirectionalDisk_copyIntensity, METH_VARARGS, (char *)"\n"
		"copyIntensity(double const *const pattern=None, size_t const [3] naxes=0)\n"
		"copyIntensity(double const *const pattern=None)\n"
		"DirectionalDisk_copyIntensity(DirectionalDisk self)\n"
		"\n"
		"\n"
		"\n"
		"DirectionalDisk::emission_ is freed if not NULL, reallocated, and\n"
		"pattern is copied into emission_.\n"
		"\n"
		"Finally, DirectionalDisk::nnu_, DirectionalDisk::ni_, and\n"
		"DirectionalDisk::nr_ are set according to naxes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as emission_. May be NULL in which case\n"
		"emission_ is simply deallocated and set to NULL.\n"
		"\n"
		"naxes:  { nnu_, ni_, nr_ }. \n"
		""},
	 { "DirectionalDisk_getIntensity", _wrap_DirectionalDisk_getIntensity, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_getIntensity(DirectionalDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get DirectionalDisk::emission_. \n"
		""},
	 { "DirectionalDisk_getIntensityNaxes", _wrap_DirectionalDisk_getIntensityNaxes, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_getIntensityNaxes(DirectionalDisk self, size_t [3] naxes)\n"
		"\n"
		"\n"
		"\n"
		"Get DirectionalDisk::nnu_, DirectionalDisk::ni_, and\n"
		"DirectionalDisk::nr_. \n"
		""},
	 { "DirectionalDisk_copyGridRadius", _wrap_DirectionalDisk_copyGridRadius, METH_VARARGS, (char *)"\n"
		"copyGridRadius(double const *const pattern=None, size_t nr=0)\n"
		"copyGridRadius(double const *const pattern=None)\n"
		"DirectionalDisk_copyGridRadius(DirectionalDisk self)\n"
		""},
	 { "DirectionalDisk_getGridRadius", _wrap_DirectionalDisk_getGridRadius, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_getGridRadius(DirectionalDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get DirectionalDisk::radius_. \n"
		""},
	 { "DirectionalDisk_copyGridCosi", _wrap_DirectionalDisk_copyGridCosi, METH_VARARGS, (char *)"\n"
		"copyGridCosi(double const *const pattern=None, size_t ni=0)\n"
		"copyGridCosi(double const *const pattern=None)\n"
		"DirectionalDisk_copyGridCosi(DirectionalDisk self)\n"
		""},
	 { "DirectionalDisk_getGridCosi", _wrap_DirectionalDisk_getGridCosi, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_getGridCosi(DirectionalDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get DirectionalDisk::cosi_. \n"
		""},
	 { "DirectionalDisk_copyGridFreq", _wrap_DirectionalDisk_copyGridFreq, METH_VARARGS, (char *)"\n"
		"copyGridFreq(double const *const pattern=None, size_t ni=0)\n"
		"copyGridFreq(double const *const pattern=None)\n"
		"DirectionalDisk_copyGridFreq(DirectionalDisk self)\n"
		""},
	 { "DirectionalDisk_getGridFreq", _wrap_DirectionalDisk_getGridFreq, METH_VARARGS, (char *)"\n"
		"DirectionalDisk_getGridFreq(DirectionalDisk self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get DirectionalDisk::freq_. \n"
		""},
	 { "DirectionalDisk_emission", _wrap_DirectionalDisk_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"DirectionalDisk_emission(DirectionalDisk self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "new_DirectionalDisk", _wrap_new_DirectionalDisk, METH_VARARGS, (char *)"\n"
		"DirectionalDisk()\n"
		"DirectionalDisk(DirectionalDisk arg2)\n"
		"DirectionalDisk(Astrobj base)\n"
		"new_DirectionalDisk(long address) -> DirectionalDisk\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "DirectionalDisk_swigregister", DirectionalDisk_swigregister, METH_VARARGS, NULL},
	 { "DeformedTorus_getProperties", _wrap_DeformedTorus_getProperties, METH_VARARGS, (char *)"\n"
		"DeformedTorus_getProperties(DeformedTorus self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "DeformedTorus_plugins", _wrap_DeformedTorus_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"DeformedTorus_plugins(DeformedTorus self) -> vector_string\n"
		""},
	 { "delete_DeformedTorus", _wrap_delete_DeformedTorus, METH_VARARGS, (char *)"delete_DeformedTorus(DeformedTorus self)"},
	 { "DeformedTorus_clone", _wrap_DeformedTorus_clone, METH_VARARGS, (char *)"\n"
		"DeformedTorus_clone(DeformedTorus self) -> DeformedTorus\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "DeformedTorus_spectrum", _wrap_DeformedTorus_spectrum, METH_VARARGS, (char *)"\n"
		"spectrum(Gyoto::SmartPointer< Gyoto::Spectrum::Generic > arg2)\n"
		"DeformedTorus_spectrum(DeformedTorus self) -> Gyoto::SmartPointer< Gyoto::Spectrum::Generic >\n"
		""},
	 { "DeformedTorus_largeRadius", _wrap_DeformedTorus_largeRadius, METH_VARARGS, (char *)"\n"
		"largeRadius(double arg2)\n"
		"DeformedTorus_largeRadius(DeformedTorus self) -> double\n"
		""},
	 { "DeformedTorus_beta", _wrap_DeformedTorus_beta, METH_VARARGS, (char *)"\n"
		"beta(double arg2)\n"
		"DeformedTorus_beta(DeformedTorus self) -> double\n"
		""},
	 { "DeformedTorus_betaSt", _wrap_DeformedTorus_betaSt, METH_VARARGS, (char *)"\n"
		"betaSt(double arg2)\n"
		"DeformedTorus_betaSt(DeformedTorus self) -> double\n"
		""},
	 { "DeformedTorus_eta", _wrap_DeformedTorus_eta, METH_VARARGS, (char *)"\n"
		"eta(double arg2)\n"
		"DeformedTorus_eta(DeformedTorus self) -> double\n"
		""},
	 { "DeformedTorus_mode", _wrap_DeformedTorus_mode, METH_VARARGS, (char *)"\n"
		"mode(unsigned long arg2)\n"
		"DeformedTorus_mode(DeformedTorus self) -> unsigned long\n"
		""},
	 { "DeformedTorus_perturbKind", _wrap_DeformedTorus_perturbKind, METH_VARARGS, (char *)"\n"
		"perturbKind(std::string const & arg2)\n"
		"DeformedTorus_perturbKind(DeformedTorus self) -> std::string\n"
		""},
	 { "DeformedTorus_metric", _wrap_DeformedTorus_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"DeformedTorus_metric(DeformedTorus self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "DeformedTorus___call__", _wrap_DeformedTorus___call__, METH_VARARGS, (char *)"DeformedTorus___call__(DeformedTorus self, double const [4] coord) -> double"},
	 { "DeformedTorus_getVelocity", _wrap_DeformedTorus_getVelocity, METH_VARARGS, (char *)"\n"
		"DeformedTorus_getVelocity(DeformedTorus self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Fluid velocity field.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "DeformedTorus_emission", _wrap_DeformedTorus_emission, METH_VARARGS, (char *)"\n"
		"DeformedTorus_emission(DeformedTorus self, double nuem, double arg4, vector_double arg5, double const * arg6) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "new_DeformedTorus", _wrap_new_DeformedTorus, METH_VARARGS, (char *)"\n"
		"DeformedTorus()\n"
		"DeformedTorus(DeformedTorus o)\n"
		"DeformedTorus(Astrobj base)\n"
		"new_DeformedTorus(long address) -> DeformedTorus\n"
		""},
	 { "DeformedTorus_swigregister", DeformedTorus_swigregister, METH_VARARGS, NULL},
	 { "EquatorialHotSpot_getProperties", _wrap_EquatorialHotSpot_getProperties, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_getProperties(EquatorialHotSpot self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "EquatorialHotSpot_plugins", _wrap_EquatorialHotSpot_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"EquatorialHotSpot_plugins(EquatorialHotSpot self) -> vector_string\n"
		""},
	 { "EquatorialHotSpot__delta", _wrap_EquatorialHotSpot__delta, METH_VARARGS, (char *)"\n"
		"_delta(double const delta)\n"
		"_delta(double arg2, std::string const & unit)\n"
		"_delta() -> double\n"
		"EquatorialHotSpot__delta(EquatorialHotSpot self, std::string const & unit) -> double\n"
		""},
	 { "EquatorialHotSpot__tMin", _wrap_EquatorialHotSpot__tMin, METH_VARARGS, (char *)"\n"
		"_tMin(double const tmin)\n"
		"_tMin(double arg2, std::string const & unit)\n"
		"_tMin() -> double\n"
		"EquatorialHotSpot__tMin(EquatorialHotSpot self, std::string const & unit) -> double\n"
		""},
	 { "EquatorialHotSpot__adaptive", _wrap_EquatorialHotSpot__adaptive, METH_VARARGS, (char *)"\n"
		"_adaptive(bool mode)\n"
		"EquatorialHotSpot__adaptive(EquatorialHotSpot self) -> bool\n"
		""},
	 { "EquatorialHotSpot__secondary", _wrap_EquatorialHotSpot__secondary, METH_VARARGS, (char *)"\n"
		"_secondary(bool sec)\n"
		"EquatorialHotSpot__secondary(EquatorialHotSpot self) -> bool\n"
		""},
	 { "EquatorialHotSpot__integ31", _wrap_EquatorialHotSpot__integ31, METH_VARARGS, (char *)"\n"
		"_integ31(bool sec)\n"
		"EquatorialHotSpot__integ31(EquatorialHotSpot self) -> bool\n"
		""},
	 { "EquatorialHotSpot__parallelTransport", _wrap_EquatorialHotSpot__parallelTransport, METH_VARARGS, (char *)"\n"
		"_parallelTransport(bool sec)\n"
		"EquatorialHotSpot__parallelTransport(EquatorialHotSpot self) -> bool\n"
		""},
	 { "EquatorialHotSpot__maxiter", _wrap_EquatorialHotSpot__maxiter, METH_VARARGS, (char *)"\n"
		"_maxiter(size_t miter)\n"
		"EquatorialHotSpot__maxiter(EquatorialHotSpot self) -> size_t\n"
		""},
	 { "EquatorialHotSpot__integrator", _wrap_EquatorialHotSpot__integrator, METH_VARARGS, (char *)"\n"
		"_integrator(std::string const & type)\n"
		"EquatorialHotSpot__integrator(EquatorialHotSpot self) -> std::string\n"
		""},
	 { "EquatorialHotSpot__deltaMin", _wrap_EquatorialHotSpot__deltaMin, METH_VARARGS, (char *)"\n"
		"_deltaMin() -> double\n"
		"EquatorialHotSpot__deltaMin(EquatorialHotSpot self, double h1)\n"
		""},
	 { "EquatorialHotSpot__absTol", _wrap_EquatorialHotSpot__absTol, METH_VARARGS, (char *)"\n"
		"_absTol(double arg2)\n"
		"EquatorialHotSpot__absTol(EquatorialHotSpot self) -> double\n"
		""},
	 { "EquatorialHotSpot__maxCrossEqplane", _wrap_EquatorialHotSpot__maxCrossEqplane, METH_VARARGS, (char *)"\n"
		"_maxCrossEqplane(double arg2)\n"
		"EquatorialHotSpot__maxCrossEqplane(EquatorialHotSpot self) -> double\n"
		""},
	 { "EquatorialHotSpot__relTol", _wrap_EquatorialHotSpot__relTol, METH_VARARGS, (char *)"\n"
		"_relTol(double arg2)\n"
		"EquatorialHotSpot__relTol(EquatorialHotSpot self) -> double\n"
		""},
	 { "EquatorialHotSpot__deltaMax", _wrap_EquatorialHotSpot__deltaMax, METH_VARARGS, (char *)"\n"
		"_deltaMax(double h1)\n"
		"EquatorialHotSpot__deltaMax(EquatorialHotSpot self) -> double\n"
		""},
	 { "EquatorialHotSpot__deltaMaxOverR", _wrap_EquatorialHotSpot__deltaMaxOverR, METH_VARARGS, (char *)"\n"
		"_deltaMaxOverR() -> double\n"
		"EquatorialHotSpot__deltaMaxOverR(EquatorialHotSpot self, double t)\n"
		""},
	 { "EquatorialHotSpot__initCoord", _wrap_EquatorialHotSpot__initCoord, METH_VARARGS, (char *)"\n"
		"_initCoord() -> vector_double\n"
		"EquatorialHotSpot__initCoord(EquatorialHotSpot self, vector_double f)\n"
		""},
	 { "EquatorialHotSpot__metric", _wrap_EquatorialHotSpot__metric, METH_VARARGS, (char *)"\n"
		"_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"EquatorialHotSpot__metric(EquatorialHotSpot self) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		""},
	 { "EquatorialHotSpot_deltaMax", _wrap_EquatorialHotSpot_deltaMax, METH_VARARGS, (char *)"\n"
		"deltaMax() -> double\n"
		"deltaMax(double const [8] pos, double delta_max_external) -> double\n"
		"deltaMax(double h1)\n"
		"EquatorialHotSpot_deltaMax(EquatorialHotSpot self, double [8] coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Set delta_max_ \n"
		""},
	 { "delete_EquatorialHotSpot", _wrap_delete_EquatorialHotSpot, METH_VARARGS, (char *)"delete_EquatorialHotSpot(EquatorialHotSpot self)"},
	 { "EquatorialHotSpot_clone", _wrap_EquatorialHotSpot_clone, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_clone(EquatorialHotSpot self) -> EquatorialHotSpot\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "EquatorialHotSpot_spotRadSize", _wrap_EquatorialHotSpot_spotRadSize, METH_VARARGS, (char *)"\n"
		"spotRadSize(double t)\n"
		"EquatorialHotSpot_spotRadSize(EquatorialHotSpot self) -> double\n"
		""},
	 { "EquatorialHotSpot_beaming", _wrap_EquatorialHotSpot_beaming, METH_VARARGS, (char *)"\n"
		"beaming(std::string const & b)\n"
		"EquatorialHotSpot_beaming(EquatorialHotSpot self) -> std::string\n"
		""},
	 { "EquatorialHotSpot_beamAngle", _wrap_EquatorialHotSpot_beamAngle, METH_VARARGS, (char *)"\n"
		"beamAngle(double t)\n"
		"EquatorialHotSpot_beamAngle(EquatorialHotSpot self) -> double\n"
		""},
	 { "EquatorialHotSpot_magneticConfiguration", _wrap_EquatorialHotSpot_magneticConfiguration, METH_VARARGS, (char *)"\n"
		"magneticConfiguration(std::string config)\n"
		"EquatorialHotSpot_magneticConfiguration(EquatorialHotSpot self) -> std::string\n"
		""},
	 { "EquatorialHotSpot_getMass", _wrap_EquatorialHotSpot_getMass, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_getMass(EquatorialHotSpot self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get mass of particule. \n"
		""},
	 { "EquatorialHotSpot_metric", _wrap_EquatorialHotSpot_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"EquatorialHotSpot_metric(EquatorialHotSpot self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "EquatorialHotSpot_setInitialCondition", _wrap_EquatorialHotSpot_setInitialCondition, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_setInitialCondition(EquatorialHotSpot self, double [8] coord)\n"
		"\n"
		"\n"
		"\n"
		"Set or re-set the initial condition prior to integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gg:   Gyoto::SmartPointer to the Gyoto::Metric in this universe;\n"
		"\n"
		"coord:  8 element array containing the initial condition, i.e. the\n"
		"4-position and the 4-velocity of the Photon at the receiving end;\n"
		"\n"
		"dir:  direction: 1 for future, -1 for past. \n"
		""},
	 { "EquatorialHotSpot_getVelocity", _wrap_EquatorialHotSpot_getVelocity, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_getVelocity(EquatorialHotSpot self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Get fluid 4-velocity at point.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"getVelocity() should work at some distance from the equatorial plane.\n"
		"The default implementation calls Metric::Generic::circularVelocity().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "EquatorialHotSpot_emission", _wrap_EquatorialHotSpot_emission, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_emission(EquatorialHotSpot self, double nu_em, double dsem, vector_double arg5, double const [8] coord_obj) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "EquatorialHotSpot_radiativeQ", _wrap_EquatorialHotSpot_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double * Inu, double * Qnu, double * Unu, double * Vnu, Eigen::Matrix4d * Onu, double const * nuem, size_t nbnu, double dsem, vector_double cph, double const * co)\n"
		"EquatorialHotSpot_radiativeQ(EquatorialHotSpot self, double [] Inu, double [] Taunu, double const [] nu_ems, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj)\n"
		""},
	 { "EquatorialHotSpot_setParameter", _wrap_EquatorialHotSpot_setParameter, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_setParameter(EquatorialHotSpot self, std::string name, std::string content, std::string unit) -> int\n"
		"\n"
		"\n"
		"\n"
		"Set parameter by Property (and name)\n"
		"\n"
		"This function is used when parsing an XML description, if Property (\n"
		"p) of this name is found (i.e. either p.name or p.name_false is equal\n"
		"to name). Implementation should fall-back on calling the direct's\n"
		"parent implementation:\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"p:   Property that matches name ( p.name == name or p.name_false ==\n"
		"name)\n"
		"\n"
		"name:  XML name of the parameter (XML entity)\n"
		"\n"
		"content:  string representation of the value\n"
		"\n"
		"unit:  string representation of the unit \n"
		""},
	 { "EquatorialHotSpot_setParameters", _wrap_EquatorialHotSpot_setParameters, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_setParameters(EquatorialHotSpot self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop in Subcontractor_t function.\n"
		"\n"
		"The Subcontractor_t function for each Astrobj kind should look\n"
		"somewhat like this (templated as\n"
		"Gyoto::Astrobj::Subcontractor<MyKind>):\n"
		"\n"
		"Each object kind should implement setParameter(string name, string\n"
		"content, string unit) to interpret the individual XML elements.\n"
		"setParameters() can be overloaded in case the specific Astrobj class\n"
		"needs low level access to the FactoryMessenger. See\n"
		"UniformSphere::setParameters(). \n"
		""},
	 { "EquatorialHotSpot_fillProperty", _wrap_EquatorialHotSpot_fillProperty, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot_fillProperty(EquatorialHotSpot self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "new_EquatorialHotSpot", _wrap_new_EquatorialHotSpot, METH_VARARGS, (char *)"\n"
		"EquatorialHotSpot()\n"
		"EquatorialHotSpot(EquatorialHotSpot o)\n"
		"EquatorialHotSpot(Astrobj base)\n"
		"new_EquatorialHotSpot(long address) -> EquatorialHotSpot\n"
		""},
	 { "EquatorialHotSpot_swigregister", EquatorialHotSpot_swigregister, METH_VARARGS, NULL},
	 { "XillverReflection_getProperties", _wrap_XillverReflection_getProperties, METH_VARARGS, (char *)"\n"
		"XillverReflection_getProperties(XillverReflection self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "XillverReflection_plugins", _wrap_XillverReflection_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"XillverReflection_plugins(XillverReflection self) -> vector_string\n"
		""},
	 { "XillverReflection_fillProperty", _wrap_XillverReflection_fillProperty, METH_VARARGS, (char *)"\n"
		"XillverReflection_fillProperty(XillverReflection self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "XillverReflection_clone", _wrap_XillverReflection_clone, METH_VARARGS, (char *)"\n"
		"XillverReflection_clone(XillverReflection self) -> XillverReflection\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_XillverReflection", _wrap_delete_XillverReflection, METH_VARARGS, (char *)"\n"
		"delete_XillverReflection(XillverReflection self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "XillverReflection_timelampphizero", _wrap_XillverReflection_timelampphizero, METH_VARARGS, (char *)"\n"
		"timelampphizero(double tt)\n"
		"XillverReflection_timelampphizero(XillverReflection self) -> double\n"
		""},
	 { "XillverReflection_lampradius", _wrap_XillverReflection_lampradius, METH_VARARGS, (char *)"\n"
		"lampradius(double rr)\n"
		"XillverReflection_lampradius(XillverReflection self) -> double\n"
		""},
	 { "XillverReflection_fileillumination", _wrap_XillverReflection_fileillumination, METH_VARARGS, (char *)"\n"
		"fileillumination(std::string const & f)\n"
		"XillverReflection_fileillumination(XillverReflection self) -> std::string\n"
		""},
	 { "XillverReflection_filereflection", _wrap_XillverReflection_filereflection, METH_VARARGS, (char *)"\n"
		"filereflection(std::string const & f)\n"
		"XillverReflection_filereflection(XillverReflection self) -> std::string\n"
		""},
	 { "XillverReflection_averageOverAngle", _wrap_XillverReflection_averageOverAngle, METH_VARARGS, (char *)"\n"
		"averageOverAngle(bool t)\n"
		"XillverReflection_averageOverAngle(XillverReflection self) -> bool\n"
		""},
	 { "XillverReflection_fitsReadIllum", _wrap_XillverReflection_fitsReadIllum, METH_VARARGS, (char *)"XillverReflection_fitsReadIllum(XillverReflection self, std::string filename)"},
	 { "XillverReflection_fitsWriteIllum", _wrap_XillverReflection_fitsWriteIllum, METH_VARARGS, (char *)"XillverReflection_fitsWriteIllum(XillverReflection self, std::string filename)"},
	 { "XillverReflection_fitsReadRefl", _wrap_XillverReflection_fitsReadRefl, METH_VARARGS, (char *)"XillverReflection_fitsReadRefl(XillverReflection self, std::string filename)"},
	 { "XillverReflection_fitsWriteRefl", _wrap_XillverReflection_fitsWriteRefl, METH_VARARGS, (char *)"XillverReflection_fitsWriteRefl(XillverReflection self, std::string filename)"},
	 { "XillverReflection_setIllumination", _wrap_XillverReflection_setIllumination, METH_VARARGS, (char *)"\n"
		"XillverReflection_setIllumination(XillverReflection self, double * pattern)\n"
		"\n"
		"\n"
		"\n"
		"The pointer is copied directly, not the array content.\n"
		"\n"
		"This is a low-level function. Beware that: previously allocated array\n"
		"will not be freed automatically;\n"
		"\n"
		"array attached when the destructor is called will be freed. \n"
		""},
	 { "XillverReflection_setReflection", _wrap_XillverReflection_setReflection, METH_VARARGS, (char *)"XillverReflection_setReflection(XillverReflection self, double * pattern)"},
	 { "XillverReflection_copyIllumination", _wrap_XillverReflection_copyIllumination, METH_VARARGS, (char *)"\n"
		"copyIllumination(double const *const pattern=None, size_t const [2] naxes=0)\n"
		"copyIllumination(double const *const pattern=None)\n"
		"XillverReflection_copyIllumination(XillverReflection self)\n"
		"\n"
		"\n"
		"\n"
		"XillverReflection::emission_ is freed if not NULL, reallocated, and\n"
		"pattern is copied into emission_.\n"
		"\n"
		"Finally, XillverReflection::nnu_, XillverReflection::ni_, and\n"
		"XillverReflection::nsg_ are set according to naxes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pattern:  Array to copy as emission_. May be NULL in which case\n"
		"emission_ is simply deallocated and set to NULL.\n"
		"\n"
		"naxes:  { nnu_, ni_, nsg_ }. \n"
		""},
	 { "XillverReflection_getIllumination", _wrap_XillverReflection_getIllumination, METH_VARARGS, (char *)"XillverReflection_getIllumination(XillverReflection self) -> double const *"},
	 { "XillverReflection_getIlluminationNaxes", _wrap_XillverReflection_getIlluminationNaxes, METH_VARARGS, (char *)"\n"
		"XillverReflection_getIlluminationNaxes(XillverReflection self, size_t [2] naxes)\n"
		"\n"
		"\n"
		"\n"
		"Get XillverReflection::nr_, XillverReflection::nphi_. \n"
		""},
	 { "XillverReflection_copyReflection", _wrap_XillverReflection_copyReflection, METH_VARARGS, (char *)"\n"
		"copyReflection(double const *const pattern=None, size_t const [3] naxes=0)\n"
		"copyReflection(double const *const pattern=None)\n"
		"XillverReflection_copyReflection(XillverReflection self)\n"
		""},
	 { "XillverReflection_getReflection", _wrap_XillverReflection_getReflection, METH_VARARGS, (char *)"XillverReflection_getReflection(XillverReflection self) -> double const *"},
	 { "XillverReflection_getReflectionNaxes", _wrap_XillverReflection_getReflectionNaxes, METH_VARARGS, (char *)"\n"
		"XillverReflection_getReflectionNaxes(XillverReflection self, size_t [3] naxes)\n"
		"\n"
		"\n"
		"\n"
		"Get XillverReflection::nnu_, XillverReflection::ni_,\n"
		"XillverReflection::nxi_. \n"
		""},
	 { "XillverReflection_copyGridReflLogxi", _wrap_XillverReflection_copyGridReflLogxi, METH_VARARGS, (char *)"\n"
		"copyGridReflLogxi(double const *const pattern=None, size_t nxi=0)\n"
		"copyGridReflLogxi(double const *const pattern=None)\n"
		"XillverReflection_copyGridReflLogxi(XillverReflection self)\n"
		""},
	 { "XillverReflection_getGridReflLogxi", _wrap_XillverReflection_getGridReflLogxi, METH_VARARGS, (char *)"\n"
		"XillverReflection_getGridReflLogxi(XillverReflection self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get XillverReflection::logxi_. \n"
		""},
	 { "XillverReflection_copyGridReflIncl", _wrap_XillverReflection_copyGridReflIncl, METH_VARARGS, (char *)"\n"
		"copyGridReflIncl(double const *const pattern=None, size_t ni=0)\n"
		"copyGridReflIncl(double const *const pattern=None)\n"
		"XillverReflection_copyGridReflIncl(XillverReflection self)\n"
		""},
	 { "XillverReflection_getGridReflIncl", _wrap_XillverReflection_getGridReflIncl, METH_VARARGS, (char *)"\n"
		"XillverReflection_getGridReflIncl(XillverReflection self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get XillverReflection::incl_. \n"
		""},
	 { "XillverReflection_copyGridReflFreq", _wrap_XillverReflection_copyGridReflFreq, METH_VARARGS, (char *)"\n"
		"copyGridReflFreq(double const *const pattern=None, size_t nnu=0)\n"
		"copyGridReflFreq(double const *const pattern=None)\n"
		"XillverReflection_copyGridReflFreq(XillverReflection self)\n"
		""},
	 { "XillverReflection_getGridReflFreq", _wrap_XillverReflection_getGridReflFreq, METH_VARARGS, (char *)"\n"
		"XillverReflection_getGridReflFreq(XillverReflection self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get XillverReflection::freq_. \n"
		""},
	 { "XillverReflection_copyGridIllumRadius", _wrap_XillverReflection_copyGridIllumRadius, METH_VARARGS, (char *)"\n"
		"copyGridIllumRadius(double const *const pattern=None, size_t nr=0)\n"
		"copyGridIllumRadius(double const *const pattern=None)\n"
		"XillverReflection_copyGridIllumRadius(XillverReflection self)\n"
		""},
	 { "XillverReflection_getGridIllumRadius", _wrap_XillverReflection_getGridIllumRadius, METH_VARARGS, (char *)"\n"
		"XillverReflection_getGridIllumRadius(XillverReflection self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get XillverReflection::radius_. \n"
		""},
	 { "XillverReflection_copyGridIllumPhi", _wrap_XillverReflection_copyGridIllumPhi, METH_VARARGS, (char *)"\n"
		"copyGridIllumPhi(double const *const pattern=None, size_t nphi=0)\n"
		"copyGridIllumPhi(double const *const pattern=None)\n"
		"XillverReflection_copyGridIllumPhi(XillverReflection self)\n"
		""},
	 { "XillverReflection_getGridIllumPhi", _wrap_XillverReflection_getGridIllumPhi, METH_VARARGS, (char *)"\n"
		"XillverReflection_getGridIllumPhi(XillverReflection self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get XillverReflection::phi_. \n"
		""},
	 { "XillverReflection_emission", _wrap_XillverReflection_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double _ph, double const [8] _obj=0) -> double\n"
		"XillverReflection_emission(XillverReflection self, double nu_em, double dsem, vector_double _ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "XillverReflection_updateSpin", _wrap_XillverReflection_updateSpin, METH_VARARGS, (char *)"XillverReflection_updateSpin(XillverReflection self)"},
	 { "XillverReflection_tell", _wrap_XillverReflection_tell, METH_VARARGS, (char *)"\n"
		"XillverReflection_tell(XillverReflection self, Teller msg)\n"
		"\n"
		"\n"
		"\n"
		"This is how a Teller tells.\n"
		"\n"
		"A teller will basically call listener->tell(this).\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"msg:  Teller* the Teller who is telling... Useful if the Listener\n"
		"listens to several Tellers. \n"
		""},
	 { "XillverReflection_metric", _wrap_XillverReflection_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"XillverReflection_metric(XillverReflection self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "new_XillverReflection", _wrap_new_XillverReflection, METH_VARARGS, (char *)"\n"
		"XillverReflection()\n"
		"XillverReflection(XillverReflection o)\n"
		"XillverReflection(Astrobj base)\n"
		"new_XillverReflection(long address) -> XillverReflection\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "XillverReflection_swigregister", XillverReflection_swigregister, METH_VARARGS, NULL},
	 { "Jet_getProperties", _wrap_Jet_getProperties, METH_VARARGS, (char *)"\n"
		"Jet_getProperties(Jet self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Jet_plugins", _wrap_Jet_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Jet_plugins(Jet self) -> vector_string\n"
		""},
	 { "Jet_isThreadSafe", _wrap_Jet_isThreadSafe, METH_VARARGS, (char *)"\n"
		"Jet_isThreadSafe(Jet self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "Jet_clone", _wrap_Jet_clone, METH_VARARGS, (char *)"\n"
		"Jet_clone(Jet self) -> Jet\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_Jet", _wrap_delete_Jet, METH_VARARGS, (char *)"\n"
		"delete_Jet(Jet self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Jet_jetOuterOpeningAngle", _wrap_Jet_jetOuterOpeningAngle, METH_VARARGS, (char *)"\n"
		"jetOuterOpeningAngle(double ang)\n"
		"Jet_jetOuterOpeningAngle(Jet self) -> double\n"
		""},
	 { "Jet_jetInnerOpeningAngle", _wrap_Jet_jetInnerOpeningAngle, METH_VARARGS, (char *)"\n"
		"jetInnerOpeningAngle(double ang)\n"
		"Jet_jetInnerOpeningAngle(Jet self) -> double\n"
		""},
	 { "Jet_jetBaseHeight", _wrap_Jet_jetBaseHeight, METH_VARARGS, (char *)"\n"
		"jetBaseHeight(double hh)\n"
		"Jet_jetBaseHeight(Jet self) -> double\n"
		""},
	 { "Jet_gammaJet", _wrap_Jet_gammaJet, METH_VARARGS, (char *)"\n"
		"gammaJet(double gam)\n"
		"Jet_gammaJet(Jet self) -> double\n"
		""},
	 { "Jet_jetVphiOverVr", _wrap_Jet_jetVphiOverVr, METH_VARARGS, (char *)"\n"
		"jetVphiOverVr(double alpha)\n"
		"Jet_jetVphiOverVr(Jet self) -> double\n"
		""},
	 { "Jet_baseNumberDensity", _wrap_Jet_baseNumberDensity, METH_VARARGS, (char *)"\n"
		"baseNumberDensity() -> double\n"
		"baseNumberDensity(std::string const & unit) -> double\n"
		"baseNumberDensity(double ne)\n"
		"Jet_baseNumberDensity(Jet self, double dens, std::string const & unit)\n"
		""},
	 { "Jet_baseTemperature", _wrap_Jet_baseTemperature, METH_VARARGS, (char *)"\n"
		"baseTemperature(double tt)\n"
		"Jet_baseTemperature(Jet self) -> double\n"
		""},
	 { "Jet_temperatureSlope", _wrap_Jet_temperatureSlope, METH_VARARGS, (char *)"\n"
		"temperatureSlope(double ss)\n"
		"Jet_temperatureSlope(Jet self) -> double\n"
		""},
	 { "Jet_magnetizationParameter", _wrap_Jet_magnetizationParameter, METH_VARARGS, (char *)"\n"
		"magnetizationParameter(double rr)\n"
		"Jet_magnetizationParameter(Jet self) -> double\n"
		""},
	 { "Jet_kappaIndex", _wrap_Jet_kappaIndex, METH_VARARGS, (char *)"\n"
		"kappaIndex(double index)\n"
		"Jet_kappaIndex(Jet self) -> double\n"
		""},
	 { "Jet_metric", _wrap_Jet_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"Jet_metric(Jet self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "Jet___call__", _wrap_Jet___call__, METH_VARARGS, (char *)"Jet___call__(Jet self, double const [4] coord) -> double"},
	 { "Jet_radiativeQ", _wrap_Jet_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"Jet_radiativeQ(Jet self, double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"\n"
		"\n"
		"\n"
		"Compute the increment of Stokes parameters and transmission matrix.\n"
		"Polarised version of RadiaveQ.\n"
		"\n"
		"First function to be called for radiative quantities. If exist, i.e.\n"
		"implemented in an Astrobj, return the Stokes parameters emitted by the\n"
		"small volume of length dsem.\n"
		"\n"
		"Warning : The basis used to determine the Stokes coefficients is\n"
		"different from the observer parallel transported polarisation basis.\n"
		"One should use getChi function to compute the angle between these two\n"
		"basis.\n"
		"\n"
		"The non polarized case must also be implemented in this function to\n"
		"avoid error.\n"
		"\n"
		"See exemple in SimplePolarStar.C.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Inu[nbnu]:  Output increment of intensity (must be set to a previously\n"
		"allocated array of doubles)\n"
		"\n"
		"Qnu[nbnu]:  Output increment of Stokes parameter Q (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Unu[nbnu]:  Output increment of Stokes parameter U (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Vnu[nbnu]:  Output increment of Stokes parameter V (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Onu[nbnu]:  Output transmission (Eigen) matrix (must be set to a\n"
		"previously allocated array of Matrix4d)\n"
		"\n"
		"nu_em[nbnu]:  Frequencies at emission\n"
		"\n"
		"nbnu:  Size of nu_em[], Inu[], Qnu[], Unu[], Vnu[], and Onu[]\n"
		"\n"
		"dsem:  Length over which to integrate inside the object\n"
		"\n"
		"cph:   Photon coordinate\n"
		"\n"
		"co:  Emitter coordinate at current photon position\n"
		"\n"
		"Increment of the Stokes parameters (I,Q,U,V) and local Transmission\n"
		"matrix (O). \n"
		""},
	 { "Jet_getVelocity", _wrap_Jet_getVelocity, METH_VARARGS, (char *)"\n"
		"Jet_getVelocity(Jet self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Fluid velocity field.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "new_Jet", _wrap_new_Jet, METH_VARARGS, (char *)"\n"
		"Jet()\n"
		"Jet(Jet arg2)\n"
		"Jet(Astrobj base)\n"
		"new_Jet(long address) -> Jet\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Jet_swigregister", Jet_swigregister, METH_VARARGS, NULL},
	 { "Blob_getProperties", _wrap_Blob_getProperties, METH_VARARGS, (char *)"\n"
		"Blob_getProperties(Blob self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Blob_plugins", _wrap_Blob_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Blob_plugins(Blob self) -> vector_string\n"
		""},
	 { "Blob_clone", _wrap_Blob_clone, METH_VARARGS, (char *)"\n"
		"Blob_clone(Blob self) -> Blob\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_Blob", _wrap_delete_Blob, METH_VARARGS, (char *)"\n"
		"delete_Blob(Blob self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Blob_electronDistribution", _wrap_Blob_electronDistribution, METH_VARARGS, (char *)"\n"
		"electronDistribution(std::string const & kind)\n"
		"Blob_electronDistribution(Blob self) -> std::string\n"
		""},
	 { "Blob_className", _wrap_Blob_className, METH_VARARGS, (char *)"\n"
		"Blob_className(Blob self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"Blob\" \n"
		""},
	 { "Blob_className_l", _wrap_Blob_className_l, METH_VARARGS, (char *)"\n"
		"Blob_className_l(Blob self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"inflate_star\" \n"
		""},
	 { "Blob_numberDensity", _wrap_Blob_numberDensity, METH_VARARGS, (char *)"\n"
		"numberDensity() -> double\n"
		"numberDensity(std::string const & unit) -> double\n"
		"numberDensity(double ne)\n"
		"Blob_numberDensity(Blob self, double dens, std::string const & unit)\n"
		""},
	 { "Blob_temperature", _wrap_Blob_temperature, METH_VARARGS, (char *)"\n"
		"temperature() -> double\n"
		"Blob_temperature(Blob self, double tt)\n"
		""},
	 { "Blob_timeRef", _wrap_Blob_timeRef, METH_VARARGS, (char *)"\n"
		"timeRef() -> double\n"
		"timeRef(std::string const & unit) -> double\n"
		"timeRef(double tt)\n"
		"Blob_timeRef(Blob self, double tt, std::string const & unit)\n"
		""},
	 { "Blob_timeSigma", _wrap_Blob_timeSigma, METH_VARARGS, (char *)"\n"
		"timeSigma() -> double\n"
		"timeSigma(std::string const & unit) -> double\n"
		"timeSigma(double tt)\n"
		"Blob_timeSigma(Blob self, double tt, std::string const & unit)\n"
		""},
	 { "Blob_magnetizationParameter", _wrap_Blob_magnetizationParameter, METH_VARARGS, (char *)"\n"
		"magnetizationParameter(double rr)\n"
		"Blob_magnetizationParameter(Blob self) -> double\n"
		""},
	 { "Blob_kappaIndex", _wrap_Blob_kappaIndex, METH_VARARGS, (char *)"\n"
		"kappaIndex() -> double\n"
		"Blob_kappaIndex(Blob self, double arg3)\n"
		""},
	 { "Blob_magneticConfiguration", _wrap_Blob_magneticConfiguration, METH_VARARGS, (char *)"\n"
		"magneticConfiguration(std::string config)\n"
		"Blob_magneticConfiguration(Blob self) -> std::string\n"
		""},
	 { "Blob_radiativeQ", _wrap_Blob_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"Blob_radiativeQ(Blob self, double [] Inu, double [] Qnu, double [] Unu, double [] Vnu, Eigen::Matrix4d [] Onu, double const [] nu_ems, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj)\n"
		""},
	 { "new_Blob", _wrap_new_Blob, METH_VARARGS, (char *)"\n"
		"Blob()\n"
		"Blob(Blob orig)\n"
		"Blob(Astrobj base)\n"
		"new_Blob(long address) -> Blob\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Blob_swigregister", Blob_swigregister, METH_VARARGS, NULL},
	 { "Plasmoid_getProperties", _wrap_Plasmoid_getProperties, METH_VARARGS, (char *)"\n"
		"Plasmoid_getProperties(Plasmoid self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Plasmoid_plugins", _wrap_Plasmoid_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Plasmoid_plugins(Plasmoid self) -> vector_string\n"
		""},
	 { "Plasmoid_clone", _wrap_Plasmoid_clone, METH_VARARGS, (char *)"Plasmoid_clone(Plasmoid self) -> Plasmoid"},
	 { "delete_Plasmoid", _wrap_delete_Plasmoid, METH_VARARGS, (char *)"\n"
		"delete_Plasmoid(Plasmoid self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Plasmoid_className", _wrap_Plasmoid_className, METH_VARARGS, (char *)"\n"
		"Plasmoid_className(Plasmoid self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"Plasmoid\" \n"
		""},
	 { "Plasmoid_className_l", _wrap_Plasmoid_className_l, METH_VARARGS, (char *)"\n"
		"Plasmoid_className_l(Plasmoid self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"inflate_star\" \n"
		""},
	 { "Plasmoid_motionType", _wrap_Plasmoid_motionType, METH_VARARGS, (char *)"Plasmoid_motionType(Plasmoid self, std::string const type)"},
	 { "Plasmoid_metric", _wrap_Plasmoid_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"Plasmoid_metric(Plasmoid self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "Plasmoid_initPosition", _wrap_Plasmoid_initPosition, METH_VARARGS, (char *)"\n"
		"initPosition(vector_double v)\n"
		"Plasmoid_initPosition(Plasmoid self) -> vector_double\n"
		""},
	 { "Plasmoid_initVelocity", _wrap_Plasmoid_initVelocity, METH_VARARGS, (char *)"\n"
		"initVelocity(vector_double v)\n"
		"Plasmoid_initVelocity(Plasmoid self) -> vector_double\n"
		""},
	 { "Plasmoid_initCoord", _wrap_Plasmoid_initCoord, METH_VARARGS, (char *)"\n"
		"initCoord(vector_double v)\n"
		"Plasmoid_initCoord(Plasmoid self) -> vector_double\n"
		""},
	 { "Plasmoid_radiusMax", _wrap_Plasmoid_radiusMax, METH_VARARGS, (char *)"\n"
		"radiusMax(double rr)\n"
		"Plasmoid_radiusMax(Plasmoid self) -> double\n"
		""},
	 { "Plasmoid_Radius", _wrap_Plasmoid_Radius, METH_VARARGS, (char *)"Plasmoid_Radius(Plasmoid self, std::string vary)"},
	 { "Plasmoid_radiativeQ", _wrap_Plasmoid_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"Plasmoid_radiativeQ(Plasmoid self, double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"\n"
		"\n"
		"\n"
		"Compute the increment of Stokes parameters and transmission matrix.\n"
		"Polarised version of RadiaveQ.\n"
		"\n"
		"First function to be called for radiative quantities. If exist, i.e.\n"
		"implemented in an Astrobj, return the Stokes parameters emitted by the\n"
		"small volume of length dsem.\n"
		"\n"
		"Warning : The basis used to determine the Stokes coefficients is\n"
		"different from the observer parallel transported polarisation basis.\n"
		"One should use getChi function to compute the angle between these two\n"
		"basis.\n"
		"\n"
		"The non polarized case must also be implemented in this function to\n"
		"avoid error.\n"
		"\n"
		"See exemple in SimplePolarStar.C.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Inu[nbnu]:  Output increment of intensity (must be set to a previously\n"
		"allocated array of doubles)\n"
		"\n"
		"Qnu[nbnu]:  Output increment of Stokes parameter Q (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Unu[nbnu]:  Output increment of Stokes parameter U (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Vnu[nbnu]:  Output increment of Stokes parameter V (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Onu[nbnu]:  Output transmission (Eigen) matrix (must be set to a\n"
		"previously allocated array of Matrix4d)\n"
		"\n"
		"nu_em[nbnu]:  Frequencies at emission\n"
		"\n"
		"nbnu:  Size of nu_em[], Inu[], Qnu[], Unu[], Vnu[], and Onu[]\n"
		"\n"
		"dsem:  Length over which to integrate inside the object\n"
		"\n"
		"cph:   Photon coordinate\n"
		"\n"
		"co:  Emitter coordinate at current photon position\n"
		"\n"
		"Increment of the Stokes parameters (I,Q,U,V) and local Transmission\n"
		"matrix (O). \n"
		""},
	 { "Plasmoid_getCartesian", _wrap_Plasmoid_getCartesian, METH_VARARGS, (char *)"\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None, double *const yprime=None, double *const zprime=None)\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None, double *const yprime=None)\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None)\n"
		"Plasmoid_getCartesian(Plasmoid self, double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z)\n"
		"\n"
		"\n"
		"\n"
		"Yield the Cartesian coordinates of the center of the sphere.\n"
		"\n"
		"If the coordinate system of the Metric object is spherical, use a\n"
		"trivial conversion. \n"
		""},
	 { "Plasmoid_getVelocity", _wrap_Plasmoid_getVelocity, METH_VARARGS, (char *)"\n"
		"Plasmoid_getVelocity(Plasmoid self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Yield velocity of the center of the sphere. \n"
		""},
	 { "Plasmoid_Impact", _wrap_Plasmoid_Impact, METH_VARARGS, (char *)"\n"
		"Impact(Photon ph, size_t index, AstrobjProperties data=None) -> int\n"
		"Plasmoid_Impact(Plasmoid self, Photon ph, size_t index) -> int\n"
		"\n"
		"\n"
		"\n"
		"Does a photon at these coordinates impact the object?\n"
		"\n"
		"Impact() checks whether a Photon impacts the object between two\n"
		"integration steps of the photon's trajectory (those two steps are\n"
		"photon->getCoord(index, coord1) and photon->getCoord(index+1,\n"
		"coord2)). Impact returns 1 if the photon impacts the object between\n"
		"these two steps, else 0. In many cases of geometrically thick obects,\n"
		"the implementation Astrobj::Standard::Impact() will be fine.\n"
		"\n"
		"Impact will call Generic::processHitQuantities() (which is virtual and\n"
		"may be re-implemented) to compute observable properties on demand: if\n"
		"the data pointer is non-NULL, the object will look in it for pointers\n"
		"to properties which apply to its kind. If a pointer to a property\n"
		"known to this object is present, then the property is computed and\n"
		"store at the pointed-to address. For instance, all objects know the\n"
		"\"intensity\" property. If data->intensity != NULL, the instensity is\n"
		"computed and stored in *data->intensity.\n"
		"\n"
		"If data is non-NULL and only in this case, processHitQuantities() will\n"
		"also call ph->transmit() to update the transmissions of the Photon\n"
		"(see Photon::transmit(size_t, double)). This must not be done if data\n"
		"is NULL (see Astrobj::Complex::Impact() for an explanation).\n"
		"\n"
		"Impact() may not extend the ph Worldline. The only two dates that are\n"
		"guaranteed to be defined are at indices index and index+1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ph:   Gyoto::Photon aimed at the object;\n"
		"\n"
		"index:  Index of the last photon step;\n"
		"\n"
		"data:  Pointer to a structure to hold the observables at impact.\n"
		"\n"
		"1 if impact, 0 if not. \n"
		""},
	 { "Plasmoid_file", _wrap_Plasmoid_file, METH_VARARGS, (char *)"Plasmoid_file(Plasmoid self, std::string const & f)"},
	 { "Plasmoid_fitsRead", _wrap_Plasmoid_fitsRead, METH_VARARGS, (char *)"Plasmoid_fitsRead(Plasmoid self, std::string filename) -> std::vector< size_t,std::allocator< size_t > >"},
	 { "new_Plasmoid", _wrap_new_Plasmoid, METH_VARARGS, (char *)"\n"
		"Plasmoid()\n"
		"Plasmoid(Plasmoid orig)\n"
		"Plasmoid(Astrobj base)\n"
		"new_Plasmoid(long address) -> Plasmoid\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Plasmoid_swigregister", Plasmoid_swigregister, METH_VARARGS, NULL},
	 { "FlaredDiskSynchrotron_getProperties", _wrap_FlaredDiskSynchrotron_getProperties, METH_VARARGS, (char *)"\n"
		"FlaredDiskSynchrotron_getProperties(FlaredDiskSynchrotron self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "FlaredDiskSynchrotron_plugins", _wrap_FlaredDiskSynchrotron_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"FlaredDiskSynchrotron_plugins(FlaredDiskSynchrotron self) -> vector_string\n"
		""},
	 { "FlaredDiskSynchrotron_isThreadSafe", _wrap_FlaredDiskSynchrotron_isThreadSafe, METH_VARARGS, (char *)"\n"
		"FlaredDiskSynchrotron_isThreadSafe(FlaredDiskSynchrotron self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "FlaredDiskSynchrotron_clone", _wrap_FlaredDiskSynchrotron_clone, METH_VARARGS, (char *)"\n"
		"FlaredDiskSynchrotron_clone(FlaredDiskSynchrotron self) -> FlaredDiskSynchrotron\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_FlaredDiskSynchrotron", _wrap_delete_FlaredDiskSynchrotron, METH_VARARGS, (char *)"\n"
		"delete_FlaredDiskSynchrotron(FlaredDiskSynchrotron self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "FlaredDiskSynchrotron_file", _wrap_FlaredDiskSynchrotron_file, METH_VARARGS, (char *)"\n"
		"file(std::string const & f)\n"
		"FlaredDiskSynchrotron_file(FlaredDiskSynchrotron self) -> std::string\n"
		""},
	 { "FlaredDiskSynchrotron_hoverR", _wrap_FlaredDiskSynchrotron_hoverR, METH_VARARGS, (char *)"\n"
		"hoverR(double const hor)\n"
		"FlaredDiskSynchrotron_hoverR(FlaredDiskSynchrotron self) -> double\n"
		""},
	 { "FlaredDiskSynchrotron_timeTranslation_inMunit", _wrap_FlaredDiskSynchrotron_timeTranslation_inMunit, METH_VARARGS, (char *)"\n"
		"timeTranslation_inMunit(double const dt)\n"
		"FlaredDiskSynchrotron_timeTranslation_inMunit(FlaredDiskSynchrotron self) -> double\n"
		""},
	 { "FlaredDiskSynchrotron_magnetizationParameter", _wrap_FlaredDiskSynchrotron_magnetizationParameter, METH_VARARGS, (char *)"\n"
		"magnetizationParameter(double rr)\n"
		"FlaredDiskSynchrotron_magnetizationParameter(FlaredDiskSynchrotron self) -> double\n"
		""},
	 { "FlaredDiskSynchrotron_kappaIndex", _wrap_FlaredDiskSynchrotron_kappaIndex, METH_VARARGS, (char *)"\n"
		"kappaIndex(double index)\n"
		"FlaredDiskSynchrotron_kappaIndex(FlaredDiskSynchrotron self) -> double\n"
		""},
	 { "FlaredDiskSynchrotron_numberDensityMax", _wrap_FlaredDiskSynchrotron_numberDensityMax, METH_VARARGS, (char *)"\n"
		"numberDensityMax() -> double\n"
		"numberDensityMax(std::string const & unit) -> double\n"
		"numberDensityMax(double dens)\n"
		"FlaredDiskSynchrotron_numberDensityMax(FlaredDiskSynchrotron self, double dens, std::string const & unit)\n"
		""},
	 { "FlaredDiskSynchrotron_temperatureMax", _wrap_FlaredDiskSynchrotron_temperatureMax, METH_VARARGS, (char *)"\n"
		"temperatureMax(double tt)\n"
		"FlaredDiskSynchrotron_temperatureMax(FlaredDiskSynchrotron self) -> double\n"
		""},
	 { "FlaredDiskSynchrotron_polytropicIndex", _wrap_FlaredDiskSynchrotron_polytropicIndex, METH_VARARGS, (char *)"\n"
		"polytropicIndex(double gamma)\n"
		"FlaredDiskSynchrotron_polytropicIndex(FlaredDiskSynchrotron self) -> double\n"
		""},
	 { "FlaredDiskSynchrotron_betaAtMax", _wrap_FlaredDiskSynchrotron_betaAtMax, METH_VARARGS, (char *)"\n"
		"betaAtMax(double beta)\n"
		"FlaredDiskSynchrotron_betaAtMax(FlaredDiskSynchrotron self) -> double\n"
		""},
	 { "FlaredDiskSynchrotron_copyDensity", _wrap_FlaredDiskSynchrotron_copyDensity, METH_VARARGS, (char *)"FlaredDiskSynchrotron_copyDensity(FlaredDiskSynchrotron self, double const *const density, size_t const [3] naxes)"},
	 { "FlaredDiskSynchrotron_getDensity", _wrap_FlaredDiskSynchrotron_getDensity, METH_VARARGS, (char *)"FlaredDiskSynchrotron_getDensity(FlaredDiskSynchrotron self) -> double const *"},
	 { "FlaredDiskSynchrotron_copyVelocity", _wrap_FlaredDiskSynchrotron_copyVelocity, METH_VARARGS, (char *)"FlaredDiskSynchrotron_copyVelocity(FlaredDiskSynchrotron self, double const *const velocity, size_t const [3] naxes)"},
	 { "FlaredDiskSynchrotron_copyBvector", _wrap_FlaredDiskSynchrotron_copyBvector, METH_VARARGS, (char *)"FlaredDiskSynchrotron_copyBvector(FlaredDiskSynchrotron self, double const *const Bvector, size_t const [3] naxes)"},
	 { "FlaredDiskSynchrotron_getBvector", _wrap_FlaredDiskSynchrotron_getBvector, METH_VARARGS, (char *)"FlaredDiskSynchrotron_getBvector(FlaredDiskSynchrotron self) -> double const *"},
	 { "FlaredDiskSynchrotron_copyTimeArray", _wrap_FlaredDiskSynchrotron_copyTimeArray, METH_VARARGS, (char *)"FlaredDiskSynchrotron_copyTimeArray(FlaredDiskSynchrotron self, double const *const time_array, size_t const ntimes)"},
	 { "FlaredDiskSynchrotron_getTimeArray", _wrap_FlaredDiskSynchrotron_getTimeArray, METH_VARARGS, (char *)"FlaredDiskSynchrotron_getTimeArray(FlaredDiskSynchrotron self) -> double const *"},
	 { "FlaredDiskSynchrotron_metric", _wrap_FlaredDiskSynchrotron_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"FlaredDiskSynchrotron_metric(FlaredDiskSynchrotron self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "FlaredDiskSynchrotron_fitsRead", _wrap_FlaredDiskSynchrotron_fitsRead, METH_VARARGS, (char *)"FlaredDiskSynchrotron_fitsRead(FlaredDiskSynchrotron self, std::string filename) -> std::vector< size_t,std::allocator< size_t > >"},
	 { "FlaredDiskSynchrotron___call__", _wrap_FlaredDiskSynchrotron___call__, METH_VARARGS, (char *)"FlaredDiskSynchrotron___call__(FlaredDiskSynchrotron self, double const [4] coord) -> double"},
	 { "FlaredDiskSynchrotron_radiativeQ", _wrap_FlaredDiskSynchrotron_radiativeQ, METH_VARARGS, (char *)"\n"
		"FlaredDiskSynchrotron_radiativeQ(FlaredDiskSynchrotron self, double [] Inu, double [] Taunu, double const [] nu_ems, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj)\n"
		"\n"
		"\n"
		"\n"
		"Compute the increment of Stokes parameters and transmission matrix.\n"
		"Polarised version of RadiaveQ.\n"
		"\n"
		"First function to be called for radiative quantities. If exist, i.e.\n"
		"implemented in an Astrobj, return the Stokes parameters emitted by the\n"
		"small volume of length dsem.\n"
		"\n"
		"Warning : The basis used to determine the Stokes coefficients is\n"
		"different from the observer parallel transported polarisation basis.\n"
		"One should use getChi function to compute the angle between these two\n"
		"basis.\n"
		"\n"
		"The non polarized case must also be implemented in this function to\n"
		"avoid error.\n"
		"\n"
		"See exemple in SimplePolarStar.C.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Inu[nbnu]:  Output increment of intensity (must be set to a previously\n"
		"allocated array of doubles)\n"
		"\n"
		"Qnu[nbnu]:  Output increment of Stokes parameter Q (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Unu[nbnu]:  Output increment of Stokes parameter U (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Vnu[nbnu]:  Output increment of Stokes parameter V (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Onu[nbnu]:  Output transmission (Eigen) matrix (must be set to a\n"
		"previously allocated array of Matrix4d)\n"
		"\n"
		"nu_em[nbnu]:  Frequencies at emission\n"
		"\n"
		"nbnu:  Size of nu_em[], Inu[], Qnu[], Unu[], Vnu[], and Onu[]\n"
		"\n"
		"dsem:  Length over which to integrate inside the object\n"
		"\n"
		"cph:   Photon coordinate\n"
		"\n"
		"co:  Emitter coordinate at current photon position\n"
		"\n"
		"Increment of the Stokes parameters (I,Q,U,V) and local Transmission\n"
		"matrix (O). \n"
		""},
	 { "FlaredDiskSynchrotron_getVelocity", _wrap_FlaredDiskSynchrotron_getVelocity, METH_VARARGS, (char *)"\n"
		"getVelocity() -> double const\n"
		"FlaredDiskSynchrotron_getVelocity(FlaredDiskSynchrotron self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Fluid velocity field.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "new_FlaredDiskSynchrotron", _wrap_new_FlaredDiskSynchrotron, METH_VARARGS, (char *)"\n"
		"FlaredDiskSynchrotron()\n"
		"FlaredDiskSynchrotron(FlaredDiskSynchrotron arg2)\n"
		"FlaredDiskSynchrotron(Astrobj base)\n"
		"new_FlaredDiskSynchrotron(long address) -> FlaredDiskSynchrotron\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "FlaredDiskSynchrotron_swigregister", FlaredDiskSynchrotron_swigregister, METH_VARARGS, NULL},
	 { "ThinDiskGridIntensity_getProperties", _wrap_ThinDiskGridIntensity_getProperties, METH_VARARGS, (char *)"\n"
		"ThinDiskGridIntensity_getProperties(ThinDiskGridIntensity self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThinDiskGridIntensity_plugins", _wrap_ThinDiskGridIntensity_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThinDiskGridIntensity_plugins(ThinDiskGridIntensity self) -> vector_string\n"
		""},
	 { "ThinDiskGridIntensity_isThreadSafe", _wrap_ThinDiskGridIntensity_isThreadSafe, METH_VARARGS, (char *)"\n"
		"ThinDiskGridIntensity_isThreadSafe(ThinDiskGridIntensity self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "ThinDiskGridIntensity_clone", _wrap_ThinDiskGridIntensity_clone, METH_VARARGS, (char *)"\n"
		"ThinDiskGridIntensity_clone(ThinDiskGridIntensity self) -> ThinDiskGridIntensity\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_ThinDiskGridIntensity", _wrap_delete_ThinDiskGridIntensity, METH_VARARGS, (char *)"\n"
		"delete_ThinDiskGridIntensity(ThinDiskGridIntensity self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "ThinDiskGridIntensity_file", _wrap_ThinDiskGridIntensity_file, METH_VARARGS, (char *)"\n"
		"file(std::string const & f)\n"
		"ThinDiskGridIntensity_file(ThinDiskGridIntensity self) -> std::string\n"
		""},
	 { "ThinDiskGridIntensity_timeTranslation_inMunit", _wrap_ThinDiskGridIntensity_timeTranslation_inMunit, METH_VARARGS, (char *)"\n"
		"timeTranslation_inMunit(double const dt)\n"
		"ThinDiskGridIntensity_timeTranslation_inMunit(ThinDiskGridIntensity self) -> double\n"
		""},
	 { "ThinDiskGridIntensity_copyIntensity", _wrap_ThinDiskGridIntensity_copyIntensity, METH_VARARGS, (char *)"ThinDiskGridIntensity_copyIntensity(ThinDiskGridIntensity self, double const *const intensity, size_t const [3] naxes)"},
	 { "ThinDiskGridIntensity_getIntensity", _wrap_ThinDiskGridIntensity_getIntensity, METH_VARARGS, (char *)"ThinDiskGridIntensity_getIntensity(ThinDiskGridIntensity self) -> double const *"},
	 { "ThinDiskGridIntensity_copyTimeArray", _wrap_ThinDiskGridIntensity_copyTimeArray, METH_VARARGS, (char *)"ThinDiskGridIntensity_copyTimeArray(ThinDiskGridIntensity self, double const *const time_array, size_t const ntimes)"},
	 { "ThinDiskGridIntensity_getTimeArray", _wrap_ThinDiskGridIntensity_getTimeArray, METH_VARARGS, (char *)"ThinDiskGridIntensity_getTimeArray(ThinDiskGridIntensity self) -> double const *"},
	 { "ThinDiskGridIntensity_metric", _wrap_ThinDiskGridIntensity_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"ThinDiskGridIntensity_metric(ThinDiskGridIntensity self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "ThinDiskGridIntensity_fitsRead", _wrap_ThinDiskGridIntensity_fitsRead, METH_VARARGS, (char *)"ThinDiskGridIntensity_fitsRead(ThinDiskGridIntensity self, std::string filename) -> std::vector< size_t,std::allocator< size_t > >"},
	 { "ThinDiskGridIntensity_emission", _wrap_ThinDiskGridIntensity_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"ThinDiskGridIntensity_emission(ThinDiskGridIntensity self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "ThinDiskGridIntensity_getVelocity", _wrap_ThinDiskGridIntensity_getVelocity, METH_VARARGS, (char *)"\n"
		"ThinDiskGridIntensity_getVelocity(ThinDiskGridIntensity self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Get fluid 4-velocity at point.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"getVelocity() should work at some distance from the equatorial plane.\n"
		"The default implementation calls Metric::Generic::circularVelocity().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "new_ThinDiskGridIntensity", _wrap_new_ThinDiskGridIntensity, METH_VARARGS, (char *)"\n"
		"ThinDiskGridIntensity()\n"
		"ThinDiskGridIntensity(ThinDiskGridIntensity arg2)\n"
		"ThinDiskGridIntensity(Astrobj base)\n"
		"new_ThinDiskGridIntensity(long address) -> ThinDiskGridIntensity\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ThinDiskGridIntensity_swigregister", ThinDiskGridIntensity_swigregister, METH_VARARGS, NULL},
	 { "ThickDisk_getProperties", _wrap_ThickDisk_getProperties, METH_VARARGS, (char *)"\n"
		"ThickDisk_getProperties(ThickDisk self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThickDisk_plugins", _wrap_ThickDisk_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThickDisk_plugins(ThickDisk self) -> vector_string\n"
		""},
	 { "ThickDisk_isThreadSafe", _wrap_ThickDisk_isThreadSafe, METH_VARARGS, (char *)"\n"
		"ThickDisk_isThreadSafe(ThickDisk self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "ThickDisk_clone", _wrap_ThickDisk_clone, METH_VARARGS, (char *)"\n"
		"ThickDisk_clone(ThickDisk self) -> ThickDisk\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_ThickDisk", _wrap_delete_ThickDisk, METH_VARARGS, (char *)"\n"
		"delete_ThickDisk(ThickDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "ThickDisk_thickDiskInnerRadius", _wrap_ThickDisk_thickDiskInnerRadius, METH_VARARGS, (char *)"\n"
		"thickDiskInnerRadius(double hh)\n"
		"ThickDisk_thickDiskInnerRadius(ThickDisk self) -> double\n"
		""},
	 { "ThickDisk_thickDiskZGaussianSigma", _wrap_ThickDisk_thickDiskZGaussianSigma, METH_VARARGS, (char *)"\n"
		"thickDiskZGaussianSigma(double sig)\n"
		"ThickDisk_thickDiskZGaussianSigma(ThickDisk self) -> double\n"
		""},
	 { "ThickDisk_useSelfAbsorption", _wrap_ThickDisk_useSelfAbsorption, METH_VARARGS, (char *)"\n"
		"useSelfAbsorption(bool abs)\n"
		"ThickDisk_useSelfAbsorption(ThickDisk self) -> bool\n"
		""},
	 { "ThickDisk_veloParam", _wrap_ThickDisk_veloParam, METH_VARARGS, (char *)"\n"
		"veloParam(vector_double v)\n"
		"ThickDisk_veloParam(ThickDisk self) -> vector_double\n"
		""},
	 { "ThickDisk_numberDensityAtInnerRadius", _wrap_ThickDisk_numberDensityAtInnerRadius, METH_VARARGS, (char *)"\n"
		"numberDensityAtInnerRadius() -> double\n"
		"numberDensityAtInnerRadius(std::string const & unit) -> double\n"
		"numberDensityAtInnerRadius(double ne)\n"
		"ThickDisk_numberDensityAtInnerRadius(ThickDisk self, double dens, std::string const & unit)\n"
		""},
	 { "ThickDisk_temperatureAtInnerRadius", _wrap_ThickDisk_temperatureAtInnerRadius, METH_VARARGS, (char *)"\n"
		"temperatureAtInnerRadius(double tt)\n"
		"ThickDisk_temperatureAtInnerRadius(ThickDisk self) -> double\n"
		""},
	 { "ThickDisk_temperatureSlope", _wrap_ThickDisk_temperatureSlope, METH_VARARGS, (char *)"\n"
		"temperatureSlope(double ss)\n"
		"ThickDisk_temperatureSlope(ThickDisk self) -> double\n"
		""},
	 { "ThickDisk_densitySlope", _wrap_ThickDisk_densitySlope, METH_VARARGS, (char *)"\n"
		"densitySlope(double ss)\n"
		"ThickDisk_densitySlope(ThickDisk self) -> double\n"
		""},
	 { "ThickDisk_magnetizationParameter", _wrap_ThickDisk_magnetizationParameter, METH_VARARGS, (char *)"\n"
		"magnetizationParameter(double rr)\n"
		"ThickDisk_magnetizationParameter(ThickDisk self) -> double\n"
		""},
	 { "ThickDisk_magneticConfiguration", _wrap_ThickDisk_magneticConfiguration, METH_VARARGS, (char *)"\n"
		"magneticConfiguration(std::string config)\n"
		"ThickDisk_magneticConfiguration(ThickDisk self) -> std::string\n"
		""},
	 { "ThickDisk_metric", _wrap_ThickDisk_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"ThickDisk_metric(ThickDisk self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "ThickDisk___call__", _wrap_ThickDisk___call__, METH_VARARGS, (char *)"ThickDisk___call__(ThickDisk self, double const [4] coord) -> double"},
	 { "ThickDisk_getVelocity", _wrap_ThickDisk_getVelocity, METH_VARARGS, (char *)"\n"
		"ThickDisk_getVelocity(ThickDisk self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Fluid velocity field.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "ThickDisk_radiativeQ", _wrap_ThickDisk_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"ThickDisk_radiativeQ(ThickDisk self, double * Inu, double * Qnu, double * Unu, double * Vnu, Eigen::Matrix4d * Onu, double const * nuem, size_t nbnu, double dsem, vector_double cph, double const * co)\n"
		""},
	 { "new_ThickDisk", _wrap_new_ThickDisk, METH_VARARGS, (char *)"\n"
		"ThickDisk()\n"
		"ThickDisk(ThickDisk arg2)\n"
		"ThickDisk(Astrobj base)\n"
		"new_ThickDisk(long address) -> ThickDisk\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ThickDisk_swigregister", ThickDisk_swigregister, METH_VARARGS, NULL},
	 { "SphericalAccretion_getProperties", _wrap_SphericalAccretion_getProperties, METH_VARARGS, (char *)"\n"
		"SphericalAccretion_getProperties(SphericalAccretion self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "SphericalAccretion_plugins", _wrap_SphericalAccretion_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"SphericalAccretion_plugins(SphericalAccretion self) -> vector_string\n"
		""},
	 { "SphericalAccretion_isThreadSafe", _wrap_SphericalAccretion_isThreadSafe, METH_VARARGS, (char *)"\n"
		"SphericalAccretion_isThreadSafe(SphericalAccretion self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "SphericalAccretion_clone", _wrap_SphericalAccretion_clone, METH_VARARGS, (char *)"\n"
		"SphericalAccretion_clone(SphericalAccretion self) -> SphericalAccretion\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_SphericalAccretion", _wrap_delete_SphericalAccretion, METH_VARARGS, (char *)"\n"
		"delete_SphericalAccretion(SphericalAccretion self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "SphericalAccretion_useSelfAbsorption", _wrap_SphericalAccretion_useSelfAbsorption, METH_VARARGS, (char *)"\n"
		"useSelfAbsorption(bool abs)\n"
		"SphericalAccretion_useSelfAbsorption(SphericalAccretion self) -> bool\n"
		""},
	 { "SphericalAccretion_sphericalAccretionInnerRadius", _wrap_SphericalAccretion_sphericalAccretionInnerRadius, METH_VARARGS, (char *)"\n"
		"sphericalAccretionInnerRadius(double hh)\n"
		"SphericalAccretion_sphericalAccretionInnerRadius(SphericalAccretion self) -> double\n"
		""},
	 { "SphericalAccretion_numberDensityAtInnerRadius", _wrap_SphericalAccretion_numberDensityAtInnerRadius, METH_VARARGS, (char *)"\n"
		"numberDensityAtInnerRadius() -> double\n"
		"numberDensityAtInnerRadius(std::string const & unit) -> double\n"
		"numberDensityAtInnerRadius(double ne)\n"
		"SphericalAccretion_numberDensityAtInnerRadius(SphericalAccretion self, double dens, std::string const & unit)\n"
		""},
	 { "SphericalAccretion_densitySlope", _wrap_SphericalAccretion_densitySlope, METH_VARARGS, (char *)"\n"
		"densitySlope(double ss)\n"
		"SphericalAccretion_densitySlope(SphericalAccretion self) -> double\n"
		""},
	 { "SphericalAccretion_temperatureAtInnerRadius", _wrap_SphericalAccretion_temperatureAtInnerRadius, METH_VARARGS, (char *)"\n"
		"temperatureAtInnerRadius(double tt)\n"
		"SphericalAccretion_temperatureAtInnerRadius(SphericalAccretion self) -> double\n"
		""},
	 { "SphericalAccretion_temperatureSlope", _wrap_SphericalAccretion_temperatureSlope, METH_VARARGS, (char *)"\n"
		"temperatureSlope(double ss)\n"
		"SphericalAccretion_temperatureSlope(SphericalAccretion self) -> double\n"
		""},
	 { "SphericalAccretion_magnetizationParameter", _wrap_SphericalAccretion_magnetizationParameter, METH_VARARGS, (char *)"\n"
		"magnetizationParameter(double rr)\n"
		"SphericalAccretion_magnetizationParameter(SphericalAccretion self) -> double\n"
		""},
	 { "SphericalAccretion_metric", _wrap_SphericalAccretion_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"SphericalAccretion_metric(SphericalAccretion self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "SphericalAccretion___call__", _wrap_SphericalAccretion___call__, METH_VARARGS, (char *)"SphericalAccretion___call__(SphericalAccretion self, double const [4] coord) -> double"},
	 { "SphericalAccretion_radiativeQ", _wrap_SphericalAccretion_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"SphericalAccretion_radiativeQ(SphericalAccretion self, double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"\n"
		"\n"
		"\n"
		"Compute the increment of Stokes parameters and transmission matrix.\n"
		"Polarised version of RadiaveQ.\n"
		"\n"
		"First function to be called for radiative quantities. If exist, i.e.\n"
		"implemented in an Astrobj, return the Stokes parameters emitted by the\n"
		"small volume of length dsem.\n"
		"\n"
		"Warning : The basis used to determine the Stokes coefficients is\n"
		"different from the observer parallel transported polarisation basis.\n"
		"One should use getChi function to compute the angle between these two\n"
		"basis.\n"
		"\n"
		"The non polarized case must also be implemented in this function to\n"
		"avoid error.\n"
		"\n"
		"See exemple in SimplePolarStar.C.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Inu[nbnu]:  Output increment of intensity (must be set to a previously\n"
		"allocated array of doubles)\n"
		"\n"
		"Qnu[nbnu]:  Output increment of Stokes parameter Q (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Unu[nbnu]:  Output increment of Stokes parameter U (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Vnu[nbnu]:  Output increment of Stokes parameter V (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Onu[nbnu]:  Output transmission (Eigen) matrix (must be set to a\n"
		"previously allocated array of Matrix4d)\n"
		"\n"
		"nu_em[nbnu]:  Frequencies at emission\n"
		"\n"
		"nbnu:  Size of nu_em[], Inu[], Qnu[], Unu[], Vnu[], and Onu[]\n"
		"\n"
		"dsem:  Length over which to integrate inside the object\n"
		"\n"
		"cph:   Photon coordinate\n"
		"\n"
		"co:  Emitter coordinate at current photon position\n"
		"\n"
		"Increment of the Stokes parameters (I,Q,U,V) and local Transmission\n"
		"matrix (O). \n"
		""},
	 { "SphericalAccretion_getVelocity", _wrap_SphericalAccretion_getVelocity, METH_VARARGS, (char *)"\n"
		"SphericalAccretion_getVelocity(SphericalAccretion self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Fluid velocity field.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "new_SphericalAccretion", _wrap_new_SphericalAccretion, METH_VARARGS, (char *)"\n"
		"SphericalAccretion()\n"
		"SphericalAccretion(SphericalAccretion arg2)\n"
		"SphericalAccretion(Astrobj base)\n"
		"new_SphericalAccretion(long address) -> SphericalAccretion\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "SphericalAccretion_swigregister", SphericalAccretion_swigregister, METH_VARARGS, NULL},
	 { "ThinDiskProfile_getProperties", _wrap_ThinDiskProfile_getProperties, METH_VARARGS, (char *)"\n"
		"ThinDiskProfile_getProperties(ThinDiskProfile self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThinDiskProfile_plugins", _wrap_ThinDiskProfile_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThinDiskProfile_plugins(ThinDiskProfile self) -> vector_string\n"
		""},
	 { "ThinDiskProfile_isThreadSafe", _wrap_ThinDiskProfile_isThreadSafe, METH_VARARGS, (char *)"\n"
		"ThinDiskProfile_isThreadSafe(ThinDiskProfile self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "ThinDiskProfile_clone", _wrap_ThinDiskProfile_clone, METH_VARARGS, (char *)"\n"
		"ThinDiskProfile_clone(ThinDiskProfile self) -> ThinDiskProfile\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_ThinDiskProfile", _wrap_delete_ThinDiskProfile, METH_VARARGS, (char *)"\n"
		"delete_ThinDiskProfile(ThinDiskProfile self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "ThinDiskProfile_circularMotion", _wrap_ThinDiskProfile_circularMotion, METH_VARARGS, (char *)"\n"
		"circularMotion() -> bool\n"
		"ThinDiskProfile_circularMotion(ThinDiskProfile self, bool circ)\n"
		""},
	 { "ThinDiskProfile_model_param", _wrap_ThinDiskProfile_model_param, METH_VARARGS, (char *)"\n"
		"model_param(vector_double v)\n"
		"ThinDiskProfile_model_param(ThinDiskProfile self) -> vector_double\n"
		""},
	 { "ThinDiskProfile_emission", _wrap_ThinDiskProfile_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"ThinDiskProfile_emission(ThinDiskProfile self, double nu_em, double dsem, vector_double c_ph) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "ThinDiskProfile_getVelocity", _wrap_ThinDiskProfile_getVelocity, METH_VARARGS, (char *)"\n"
		"ThinDiskProfile_getVelocity(ThinDiskProfile self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Get fluid 4-velocity at point.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"getVelocity() should work at some distance from the equatorial plane.\n"
		"The default implementation calls Metric::Generic::circularVelocity().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "ThinDiskProfile_processHitQuantities", _wrap_ThinDiskProfile_processHitQuantities, METH_VARARGS, (char *)"ThinDiskProfile_processHitQuantities(ThinDiskProfile self, Photon ph, vector_double coord_ph_hit, double const * coord_obj_hit, double dt, AstrobjProperties data)"},
	 { "new_ThinDiskProfile", _wrap_new_ThinDiskProfile, METH_VARARGS, (char *)"\n"
		"ThinDiskProfile()\n"
		"ThinDiskProfile(ThinDiskProfile arg2)\n"
		"ThinDiskProfile(Astrobj base)\n"
		"new_ThinDiskProfile(long address) -> ThinDiskProfile\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ThinDiskProfile_swigregister", ThinDiskProfile_swigregister, METH_VARARGS, NULL},
	 { "ComplexMetric_isThreadSafe", _wrap_ComplexMetric_isThreadSafe, METH_VARARGS, (char *)"\n"
		"ComplexMetric_isThreadSafe(ComplexMetric self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "ComplexMetric_clone", _wrap_ComplexMetric_clone, METH_VARARGS, (char *)"\n"
		"ComplexMetric_clone(ComplexMetric self) -> ComplexMetric\n"
		"\n"
		"\n"
		"\n"
		"\"Virtual\" copy constructor \n"
		""},
	 { "delete_ComplexMetric", _wrap_delete_ComplexMetric, METH_VARARGS, (char *)"\n"
		"delete_ComplexMetric(ComplexMetric self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor.\n"
		"\n"
		"Frees every SmartPointer<Metric::Generic> before freed the array\n"
		"itself. \n"
		""},
	 { "ComplexMetric_append", _wrap_ComplexMetric_append, METH_VARARGS, (char *)"\n"
		"ComplexMetric_append(ComplexMetric self, Gyoto::SmartPointer< Gyoto::Metric::Generic > element)\n"
		"\n"
		"\n"
		"\n"
		"Add element at the end of the array. \n"
		""},
	 { "ComplexMetric_remove", _wrap_ComplexMetric_remove, METH_VARARGS, (char *)"\n"
		"ComplexMetric_remove(ComplexMetric self, size_t i)\n"
		"\n"
		"\n"
		"\n"
		"Remove i-th element from the array. \n"
		""},
	 { "ComplexMetric_getCardinal", _wrap_ComplexMetric_getCardinal, METH_VARARGS, (char *)"\n"
		"ComplexMetric_getCardinal(ComplexMetric self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get the number of elements in the array. \n"
		""},
	 { "ComplexMetric_fillElement", _wrap_ComplexMetric_fillElement, METH_VARARGS, (char *)"\n"
		"ComplexMetric_fillElement(ComplexMetric self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Fill the XML element for this Object.\n"
		"\n"
		"The base implementation simply calls fillProperty() for each Property\n"
		"defined for the Object.\n"
		"\n"
		"Derived classes should avoid overriding fillElement(). It may make\n"
		"sense occasionally, e.g. to make sure that the metric is output first.\n"
		"\n"
		"To customize how a given Property is rendered, it is better to\n"
		"override fillProperty().\n"
		"\n"
		"If this method is overridden, the implementation should in general\n"
		"call fillElement() on the direct base. \n"
		""},
	 { "ComplexMetric_setParameters", _wrap_ComplexMetric_setParameters, METH_VARARGS, (char *)"\n"
		"ComplexMetric_setParameters(ComplexMetric self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop for parsing Properties from XML description.\n"
		"\n"
		"This function queries the FactoryMessenger for elements to parse, and\n"
		"tries to matche each element to a Property to set it  accordingly. Any\n"
		"class that tries to be buildable from XML must supply a subcontractor\n"
		"(for base classes such as Metric, Astrobj, Spectrum  and Spectrometer,\n"
		"it is done as a template that must be  specialized for each class).\n"
		"This subcontractor typically looks somewhat like this: Although this\n"
		"is discouraged, it is possible to override the following functions to\n"
		"customize how XML entities are parsed:    - setParameters() if low-\n"
		"level access to the      FactoryMessenger is required;    -\n"
		"setParameter(std::string name, std::string content,\n"
		"std::string unit)      to interpret an entity that does not match a\n"
		"Property      (e.g. alternative name);    -\n"
		"setParameter(Gyoto::Property const &p, std::string const &name,\n"
		"std::string const &content, std::string const &unit)      to change\n"
		"how a Property is interpreted. \n"
		""},
	 { "ComplexMetric_gmunu", _wrap_ComplexMetric_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] x, int mu, int nu) -> double\n"
		"ComplexMetric_gmunu(ComplexMetric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls double gmunu(const double * x, int\n"
		"mu, int nu) const.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ARGOUT_ARRAY2:  (g) 4x4 array to store the coeefficients\n"
		"\n"
		"IN_ARRAY1:  (x) 4-position at which to compute the coefficients;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "ComplexMetric_jacobian", _wrap_ComplexMetric_jacobian, METH_VARARGS, (char *)"\n"
		"ComplexMetric_jacobian(ComplexMetric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Derivatives of the metric covariant coefficients.\n"
		"\n"
		"The default implementation evaluates them numerically. The gmunu\n"
		"matrix is assumed to be symmetrical but no other assumptions are made\n"
		"at the moment. \n"
		""},
	 { "ComplexMetric_isStopCondition", _wrap_ComplexMetric_isStopCondition, METH_VARARGS, (char *)"\n"
		"ComplexMetric_isStopCondition(ComplexMetric self, double const [8] coord) -> int\n"
		"\n"
		"\n"
		"\n"
		"Check whether integration should stop.\n"
		"\n"
		"The integrating loop will ask this the Metric through this method\n"
		"whether or not it is happy to continue the integration. Typically, the\n"
		"Metric should answer 0 when everything is fine, 1 when too close to\n"
		"the event horizon, inside the BH...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-coordinate vector to check. \n"
		""},
	 { "ComplexMetric___getitem__", _wrap_ComplexMetric___getitem__, METH_VARARGS, (char *)"ComplexMetric___getitem__(ComplexMetric self, size_t i) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >"},
	 { "ComplexMetric___setitem__", _wrap_ComplexMetric___setitem__, METH_VARARGS, (char *)"ComplexMetric___setitem__(ComplexMetric self, int i, Metric p)"},
	 { "new_ComplexMetric", _wrap_new_ComplexMetric, METH_VARARGS, (char *)"\n"
		"Complex()\n"
		"Complex(ComplexMetric arg2)\n"
		"Complex(Metric base)\n"
		"new_ComplexMetric(long address) -> ComplexMetric\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ComplexMetric_swigregister", ComplexMetric_swigregister, METH_VARARGS, NULL},
	 { "Shift_getProperties", _wrap_Shift_getProperties, METH_VARARGS, (char *)"\n"
		"Shift_getProperties(Shift self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Shift_plugins", _wrap_Shift_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Shift_plugins(Shift self) -> vector_string\n"
		""},
	 { "delete_Shift", _wrap_delete_Shift, METH_VARARGS, (char *)"delete_Shift(Shift self)"},
	 { "Shift_clone", _wrap_Shift_clone, METH_VARARGS, (char *)"\n"
		"Shift_clone(Shift self) -> Shift\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "Shift_subMetric", _wrap_Shift_subMetric, METH_VARARGS, (char *)"\n"
		"subMetric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"Shift_subMetric(Shift self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		""},
	 { "Shift_offset", _wrap_Shift_offset, METH_VARARGS, (char *)"\n"
		"offset() -> vector_double\n"
		"Shift_offset(Shift self, vector_double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set #pos_ from vector. \n"
		""},
	 { "Shift_mass", _wrap_Shift_mass, METH_VARARGS, (char *)"\n"
		"Shift_mass(Shift self, double const arg3)\n"
		"\n"
		"\n"
		"\n"
		"Get mass used in unitLength() \n"
		""},
	 { "Shift_gmunu", _wrap_Shift_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] x, int mu, int nu) -> double\n"
		"Shift_gmunu(Shift self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls double gmunu(const double * x, int\n"
		"mu, int nu) const.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ARGOUT_ARRAY2:  (g) 4x4 array to store the coeefficients\n"
		"\n"
		"IN_ARRAY1:  (x) 4-position at which to compute the coefficients;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "Shift_gmunu_up", _wrap_Shift_gmunu_up, METH_VARARGS, (char *)"\n"
		"gmunu_up(double const [4] x, int mu, int nu) -> double\n"
		"Shift_gmunu_up(Shift self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Metric contravariant coefficients.\n"
		"\n"
		"The default implementation inverts the covariant coefficients matrix.\n"
		"\n"
		""},
	 { "Shift_jacobian", _wrap_Shift_jacobian, METH_VARARGS, (char *)"\n"
		"Shift_jacobian(Shift self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Derivatives of the metric covariant coefficients.\n"
		"\n"
		"The default implementation evaluates them numerically. The gmunu\n"
		"matrix is assumed to be symmetrical but no other assumptions are made\n"
		"at the moment. \n"
		""},
	 { "Shift_isStopCondition", _wrap_Shift_isStopCondition, METH_VARARGS, (char *)"\n"
		"Shift_isStopCondition(Shift self, double const [8] coord) -> int\n"
		"\n"
		"\n"
		"\n"
		"Check whether integration should stop.\n"
		"\n"
		"The integrating loop will ask this the Metric through this method\n"
		"whether or not it is happy to continue the integration. Typically, the\n"
		"Metric should answer 0 when everything is fine, 1 when too close to\n"
		"the event horizon, inside the BH...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-coordinate vector to check. \n"
		""},
	 { "Shift_fillProperty", _wrap_Shift_fillProperty, METH_VARARGS, (char *)"\n"
		"Shift_fillProperty(Shift self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "Shift_setParameters", _wrap_Shift_setParameters, METH_VARARGS, (char *)"\n"
		"Shift_setParameters(Shift self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop for parsing Properties from XML description.\n"
		"\n"
		"This function queries the FactoryMessenger for elements to parse, and\n"
		"tries to matche each element to a Property to set it  accordingly. Any\n"
		"class that tries to be buildable from XML must supply a subcontractor\n"
		"(for base classes such as Metric, Astrobj, Spectrum  and Spectrometer,\n"
		"it is done as a template that must be  specialized for each class).\n"
		"This subcontractor typically looks somewhat like this: Although this\n"
		"is discouraged, it is possible to override the following functions to\n"
		"customize how XML entities are parsed:    - setParameters() if low-\n"
		"level access to the      FactoryMessenger is required;    -\n"
		"setParameter(std::string name, std::string content,\n"
		"std::string unit)      to interpret an entity that does not match a\n"
		"Property      (e.g. alternative name);    -\n"
		"setParameter(Gyoto::Property const &p, std::string const &name,\n"
		"std::string const &content, std::string const &unit)      to change\n"
		"how a Property is interpreted. \n"
		""},
	 { "Shift_tell", _wrap_Shift_tell, METH_VARARGS, (char *)"\n"
		"Shift_tell(Shift self, Teller msg)\n"
		"\n"
		"\n"
		"\n"
		"This is how a Teller tells.\n"
		"\n"
		"A teller will basically call listener->tell(this).\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"msg:  Teller* the Teller who is telling... Useful if the Listener\n"
		"listens to several Tellers. \n"
		""},
	 { "Shift_circularVelocity", _wrap_Shift_circularVelocity, METH_VARARGS, (char *)"\n"
		"Shift_circularVelocity(Shift self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "Shift_zamoVelocity", _wrap_Shift_zamoVelocity, METH_VARARGS, (char *)"\n"
		"Shift_zamoVelocity(Shift self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "Shift_christoffel", _wrap_Shift_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] coord) -> int\n"
		"Shift_christoffel(Shift self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3).\n"
		"\n"
		"1 on error, 0 otherwise \n"
		""},
	 { "new_Shift", _wrap_new_Shift, METH_VARARGS, (char *)"\n"
		"Shift()\n"
		"Shift(Metric base)\n"
		"new_Shift(long address) -> Shift\n"
		""},
	 { "Shift_swigregister", Shift_swigregister, METH_VARARGS, NULL},
	 { "KerrBL_getProperties", _wrap_KerrBL_getProperties, METH_VARARGS, (char *)"\n"
		"KerrBL_getProperties(KerrBL self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "KerrBL_plugins", _wrap_KerrBL_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"KerrBL_plugins(KerrBL self) -> vector_string\n"
		""},
	 { "KerrBL_clone", _wrap_KerrBL_clone, METH_VARARGS, (char *)"\n"
		"KerrBL_clone(KerrBL self) -> KerrBL\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "KerrBL_spin", _wrap_KerrBL_spin, METH_VARARGS, (char *)"\n"
		"spin(double const spin)\n"
		"KerrBL_spin(KerrBL self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns spin. \n"
		""},
	 { "KerrBL_difftol", _wrap_KerrBL_difftol, METH_VARARGS, (char *)"\n"
		"difftol() -> double\n"
		"KerrBL_difftol(KerrBL self, double t)\n"
		"\n"
		"\n"
		"\n"
		"Set difftol_. \n"
		""},
	 { "KerrBL_horizonSecurity", _wrap_KerrBL_horizonSecurity, METH_VARARGS, (char *)"\n"
		"horizonSecurity(double drhor)\n"
		"KerrBL_horizonSecurity(KerrBL self) -> double\n"
		""},
	 { "KerrBL_genericIntegrator", _wrap_KerrBL_genericIntegrator, METH_VARARGS, (char *)"\n"
		"genericIntegrator(bool arg2)\n"
		"KerrBL_genericIntegrator(KerrBL self) -> bool\n"
		""},
	 { "KerrBL_getRms", _wrap_KerrBL_getRms, METH_VARARGS, (char *)"\n"
		"KerrBL_getRms(KerrBL self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the marginally stable (ISCO) radius Should be implemented in\n"
		"derived classes if useful If called on the base class, returns an\n"
		"error \n"
		""},
	 { "KerrBL_getRmb", _wrap_KerrBL_getRmb, METH_VARARGS, (char *)"\n"
		"KerrBL_getRmb(KerrBL self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the marginally bound radius Should be implemented in derived\n"
		"classes if useful If called on the base class, returns an error \n"
		""},
	 { "KerrBL_getSpecificAngularMomentum", _wrap_KerrBL_getSpecificAngularMomentum, METH_VARARGS, (char *)"\n"
		"KerrBL_getSpecificAngularMomentum(KerrBL self, double rr) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the specific angular momentum l=-u_phi/u_t Should be\n"
		"implemented in derived classes if useful If called on the base class,\n"
		"returns an error \n"
		""},
	 { "KerrBL_getPotential", _wrap_KerrBL_getPotential, METH_VARARGS, (char *)"\n"
		"KerrBL_getPotential(KerrBL self, double const [4] pos, double l_cst) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns potential W=-ln(|u_t|) for a cst specific angular momentum\n"
		"l_cst Should be implemented in derived classes if useful If called on\n"
		"the base class, returns an error \n"
		""},
	 { "KerrBL_gmunu", _wrap_KerrBL_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] IN_ARRAY1)\n"
		"KerrBL_gmunu(KerrBL self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls Metric:: gmunu(double g[4][4], const\n"
		"double * pos) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"x:  4-position at which to compute the coefficient;\n"
		"\n"
		"mu:  1st index of coefficient, 03;\n"
		"\n"
		"nu:  2nd index of coefficient, 03;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "KerrBL_gmunu_up", _wrap_KerrBL_gmunu_up, METH_VARARGS, (char *)"\n"
		"gmunu_up(double const [4] IN_ARRAY1)\n"
		"KerrBL_gmunu_up(KerrBL self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric contravariant coefficients.\n"
		"\n"
		"The default implementation calls Metric:: gmunu_up(double g[4][4],\n"
		"const double * pos) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"x:  4-position at which to compute the coefficient;\n"
		"\n"
		"mu:  1st index of coefficient, 03;\n"
		"\n"
		"nu:  2nd index of coefficient, 03;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "KerrBL_ScalarProd", _wrap_KerrBL_ScalarProd, METH_VARARGS, (char *)"\n"
		"KerrBL_ScalarProd(KerrBL self, double const [4] pos, double const [4] u1, double const [4] u2) -> double\n"
		"\n"
		"\n"
		"\n"
		"Scalar product.\n"
		"\n"
		"Compute the scalarproduct of the two quadrivectors u1 and u2 in this\n"
		"Metric, at point pos expressed in coordinate system sys.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position;\n"
		"\n"
		"u1:  1st quadrivector;\n"
		"\n"
		"u2:  2nd quadrivector;\n"
		"\n"
		"u1*u2 \n"
		""},
	 { "KerrBL_nullifyCoord", _wrap_KerrBL_nullifyCoord, METH_VARARGS, (char *)"\n"
		"nullifyCoord(double [8] coord, double & tdot2)\n"
		"KerrBL_nullifyCoord(KerrBL self, double [8] coord)\n"
		"\n"
		"\n"
		"\n"
		"Set tdot (coord[4]) such that coord is light-like. Everything is in\n"
		"geometrical units.\n"
		"\n"
		"Set coord[4] so that the 4-velocity coord[4:7] is lightlike, i.e. of\n"
		"norm 0. There may be up to two solutions. coord[4] is set to the\n"
		"hightest. The lowest can be retrieved using nullifyCoord(double\n"
		"coord[8], double& tdot2) const. Everything is expressed in geometrical\n"
		"units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-position, coord[4] will be set according to the other\n"
		"elements; \n"
		""},
	 { "KerrBL_MakeCoord", _wrap_KerrBL_MakeCoord, METH_VARARGS, (char *)"\n"
		"KerrBL_MakeCoord(KerrBL self, double const [8] coordin, double const [5] cst, double [8] coordout)\n"
		"\n"
		"\n"
		"\n"
		"Inverse function of MakeMomentumAndCst.\n"
		"\n"
		"Computes pr, ptheta, E and L from rdot, thetadot, phidot, tdot \n"
		""},
	 { "KerrBL_MakeMomentum", _wrap_KerrBL_MakeMomentum, METH_VARARGS, (char *)"\n"
		"KerrBL_MakeMomentum(KerrBL self, double const [8] coordin, double const [5] cst, double [8] coordout)\n"
		"\n"
		"\n"
		"\n"
		"Transforms from Boyer-Lindquist coordinates\n"
		"[t,r,th,phi,tdot,rdot,thdot,phidot] to [t,r,th,phi,pt,pr,pth,pphi]\n"
		"where pt,pr... are generalized momenta. \n"
		""},
	 { "KerrBL_myrk4", _wrap_KerrBL_myrk4, METH_VARARGS, (char *)"\n"
		"KerrBL_myrk4(KerrBL self, double const [8] coor, double const [5] cst, double h, double [8] res) -> int\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "KerrBL_myrk4_adaptive", _wrap_KerrBL_myrk4_adaptive, METH_VARARGS, (char *)"\n"
		"myrk4_adaptive(Worldline line, vector_double coor, double lastnorm, double normref, vector_double coor1, double h0, double & h1, double h1max) -> int\n"
		"KerrBL_myrk4_adaptive(KerrBL self, Worldline line, vector_double coor, double lastnorm, double normref, vector_double coor1, double h0, double & h1) -> int\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "KerrBL_diff", _wrap_KerrBL_diff, METH_VARARGS, (char *)"KerrBL_diff(KerrBL self, vector_double x, vector_double dxdt, double mass) -> int"},
	 { "KerrBL_setParticleProperties", _wrap_KerrBL_setParticleProperties, METH_VARARGS, (char *)"\n"
		"KerrBL_setParticleProperties(KerrBL self, Worldline line, double const * coord)\n"
		"\n"
		"\n"
		"\n"
		"Set Metric-specific constants of motion. Used e.g. in KerrBL. \n"
		""},
	 { "KerrBL_isStopCondition", _wrap_KerrBL_isStopCondition, METH_VARARGS, (char *)"\n"
		"KerrBL_isStopCondition(KerrBL self, double const [8] coord) -> int\n"
		"\n"
		"\n"
		"\n"
		"Check whether integration should stop.\n"
		"\n"
		"The integrating loop will ask this the Metric through this method\n"
		"whether or not it is happy to continue the integration. Typically, the\n"
		"Metric should answer 0 when everything is fine, 1 when too close to\n"
		"the event horizon, inside the BH...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-coordinate vector to check. \n"
		""},
	 { "KerrBL_observerTetrad", _wrap_KerrBL_observerTetrad, METH_VARARGS, (char *)"\n"
		"KerrBL_observerTetrad(KerrBL self, double const [4] pos, double [4] fourvel, double [4] screen1, double [4] screen2, double [4] screen3)\n"
		"\n"
		"\n"
		"\n"
		"Computes the orthonormal local tetrad of the observer.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"obskind:  input: kind of observer (eg:\n"
		"\"ZAMO\",\"KeplerianObserver\"...)\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"fourvel:  output: observer 4-velocity (norm -1)\n"
		"\n"
		"screen1:  output: first vector in the screen plane\n"
		"\n"
		"screen2:  output: second vector in the screen plane\n"
		"\n"
		"screen3:  output: vector normal to the screen \n"
		""},
	 { "KerrBL_circularVelocity", _wrap_KerrBL_circularVelocity, METH_VARARGS, (char *)"\n"
		"circularVelocity(double const [4] pos, double [4] vel, double dir=1.)\n"
		"circularVelocity(double const [4] pos, double [4] vel)\n"
		"KerrBL_circularVelocity(KerrBL self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "KerrBL_zamoVelocity", _wrap_KerrBL_zamoVelocity, METH_VARARGS, (char *)"\n"
		"zamoVelocity(double const [4] pos, double [4] vel)\n"
		"KerrBL_zamoVelocity(KerrBL self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "KerrBL_christoffel", _wrap_KerrBL_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] pos) -> int\n"
		"KerrBL_christoffel(KerrBL self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3). \n"
		""},
	 { "new_KerrBL", _wrap_new_KerrBL, METH_VARARGS, (char *)"\n"
		"KerrBL()\n"
		"KerrBL(Metric base)\n"
		"new_KerrBL(long address) -> KerrBL\n"
		"\n"
		"\n"
		"\n"
		"Default constructor. \n"
		""},
	 { "delete_KerrBL", _wrap_delete_KerrBL, METH_VARARGS, (char *)"delete_KerrBL(KerrBL self)"},
	 { "KerrBL_swigregister", KerrBL_swigregister, METH_VARARGS, NULL},
	 { "KerrKS_getProperties", _wrap_KerrKS_getProperties, METH_VARARGS, (char *)"\n"
		"KerrKS_getProperties(KerrKS self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "KerrKS_plugins", _wrap_KerrKS_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"KerrKS_plugins(KerrKS self) -> vector_string\n"
		""},
	 { "KerrKS_clone", _wrap_KerrKS_clone, METH_VARARGS, (char *)"\n"
		"KerrKS_clone(KerrKS self) -> KerrKS\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "KerrKS_spin", _wrap_KerrKS_spin, METH_VARARGS, (char *)"\n"
		"spin(double const spin)\n"
		"KerrKS_spin(KerrKS self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns spin. \n"
		""},
	 { "KerrKS_horizonSecurity", _wrap_KerrKS_horizonSecurity, METH_VARARGS, (char *)"\n"
		"horizonSecurity(double drhor)\n"
		"KerrKS_horizonSecurity(KerrKS self) -> double\n"
		""},
	 { "KerrKS_gmunu", _wrap_KerrKS_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] x, int alpha, int beta) -> double\n"
		"KerrKS_gmunu(KerrKS self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls double gmunu(const double * x, int\n"
		"mu, int nu) const.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ARGOUT_ARRAY2:  (g) 4x4 array to store the coeefficients\n"
		"\n"
		"IN_ARRAY1:  (x) 4-position at which to compute the coefficients;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "KerrKS_gmunu_up", _wrap_KerrKS_gmunu_up, METH_VARARGS, (char *)"\n"
		"gmunu_up(double const [4] x, int mu, int nu) -> double\n"
		"KerrKS_gmunu_up(KerrKS self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Metric contravariant coefficients.\n"
		"\n"
		"The default implementation inverts the covariant coefficients matrix.\n"
		"\n"
		""},
	 { "KerrKS_jacobian", _wrap_KerrKS_jacobian, METH_VARARGS, (char *)"\n"
		"KerrKS_jacobian(KerrKS self, double const [4] x)\n"
		"\n"
		"\n"
		"\n"
		"The derivatives of gmunu.\n"
		"\n"
		"Used in the test suite \n"
		""},
	 { "KerrKS_gmunu_up_and_jacobian", _wrap_KerrKS_gmunu_up_and_jacobian, METH_VARARGS, (char *)"\n"
		"KerrKS_gmunu_up_and_jacobian(KerrKS self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"gmunu_up() and jacobian() in one go \n"
		""},
	 { "KerrKS_isStopCondition", _wrap_KerrKS_isStopCondition, METH_VARARGS, (char *)"\n"
		"KerrKS_isStopCondition(KerrKS self, double const [8] coord) -> int\n"
		"\n"
		"\n"
		"\n"
		"Check whether integration should stop.\n"
		"\n"
		"The integrating loop will ask this the Metric through this method\n"
		"whether or not it is happy to continue the integration. Typically, the\n"
		"Metric should answer 0 when everything is fine, 1 when too close to\n"
		"the event horizon, inside the BH...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-coordinate vector to check. \n"
		""},
	 { "KerrKS_setParameter", _wrap_KerrKS_setParameter, METH_VARARGS, (char *)"\n"
		"KerrKS_setParameter(KerrKS self, std::string name, std::string content, std::string unit) -> int\n"
		"\n"
		"\n"
		"\n"
		"Set parameter by Property (and name)\n"
		"\n"
		"This function is used when parsing an XML description, if Property (\n"
		"p) of this name is found (i.e. either p.name or p.name_false is equal\n"
		"to name). Implementation should fall-back on calling the direct's\n"
		"parent implementation:\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"p:   Property that matches name ( p.name == name or p.name_false ==\n"
		"name)\n"
		"\n"
		"name:  XML name of the parameter (XML entity)\n"
		"\n"
		"content:  string representation of the value\n"
		"\n"
		"unit:  string representation of the unit \n"
		""},
	 { "KerrKS_circularVelocity", _wrap_KerrKS_circularVelocity, METH_VARARGS, (char *)"\n"
		"circularVelocity(double const [4] pos, double [4] vel, double dir=1.)\n"
		"circularVelocity(double const [4] pos, double [4] vel)\n"
		"KerrKS_circularVelocity(KerrKS self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "KerrKS_zamoVelocity", _wrap_KerrKS_zamoVelocity, METH_VARARGS, (char *)"\n"
		"KerrKS_zamoVelocity(KerrKS self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "KerrKS_christoffel", _wrap_KerrKS_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] coord) -> int\n"
		"KerrKS_christoffel(KerrKS self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3).\n"
		"\n"
		"1 on error, 0 otherwise \n"
		""},
	 { "new_KerrKS", _wrap_new_KerrKS, METH_VARARGS, (char *)"\n"
		"KerrKS()\n"
		"KerrKS(Metric base)\n"
		"new_KerrKS(long address) -> KerrKS\n"
		"\n"
		"\n"
		"\n"
		"Default constructor. \n"
		""},
	 { "delete_KerrKS", _wrap_delete_KerrKS, METH_VARARGS, (char *)"delete_KerrKS(KerrKS self)"},
	 { "KerrKS_swigregister", KerrKS_swigregister, METH_VARARGS, NULL},
	 { "Minkowski_spherical", _wrap_Minkowski_spherical, METH_VARARGS, (char *)"\n"
		"spherical(bool arg2)\n"
		"Minkowski_spherical(Minkowski self) -> bool\n"
		""},
	 { "Minkowski_getProperties", _wrap_Minkowski_getProperties, METH_VARARGS, (char *)"\n"
		"Minkowski_getProperties(Minkowski self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Minkowski_plugins", _wrap_Minkowski_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Minkowski_plugins(Minkowski self) -> vector_string\n"
		""},
	 { "Minkowski_clone", _wrap_Minkowski_clone, METH_VARARGS, (char *)"\n"
		"Minkowski_clone(Minkowski self) -> Minkowski\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "Minkowski_gmunu", _wrap_Minkowski_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] IN_ARRAY1)\n"
		"Minkowski_gmunu(Minkowski self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls Metric:: gmunu(double g[4][4], const\n"
		"double * pos) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"x:  4-position at which to compute the coefficient;\n"
		"\n"
		"mu:  1st index of coefficient, 03;\n"
		"\n"
		"nu:  2nd index of coefficient, 03;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "Minkowski_observerTetrad", _wrap_Minkowski_observerTetrad, METH_VARARGS, (char *)"\n"
		"Minkowski_observerTetrad(Minkowski self, unsigned int obskind, double const [4] pos, double [4] fourvel, double [4] screen1, double [4] screen2, double [4] screen3)\n"
		"\n"
		"\n"
		"\n"
		"Computes the orthonormal local tetrad of the observer.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  position,\n"
		"\n"
		"fourvel:  observer 4-velocity (norm -1)\n"
		"\n"
		"screen1:  first vector in the screen plane\n"
		"\n"
		"screen2:  second vector in the screen plane\n"
		"\n"
		"screen3:  vector normal to the screen \n"
		""},
	 { "Minkowski_diff", _wrap_Minkowski_diff, METH_VARARGS, (char *)"Minkowski_diff(Minkowski self, vector_double x, vector_double dxdt, double mass) -> int"},
	 { "Minkowski_circularVelocity", _wrap_Minkowski_circularVelocity, METH_VARARGS, (char *)"\n"
		"Minkowski_circularVelocity(Minkowski self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "Minkowski_zamoVelocity", _wrap_Minkowski_zamoVelocity, METH_VARARGS, (char *)"\n"
		"Minkowski_zamoVelocity(Minkowski self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "Minkowski_christoffel", _wrap_Minkowski_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double [4][4][4] dst, double const [4] x) -> int\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"Minkowski_christoffel(Minkowski self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3). \n"
		""},
	 { "new_Minkowski", _wrap_new_Minkowski, METH_VARARGS, (char *)"\n"
		"Minkowski()\n"
		"Minkowski(Metric base)\n"
		"new_Minkowski(long address) -> Minkowski\n"
		""},
	 { "delete_Minkowski", _wrap_delete_Minkowski, METH_VARARGS, (char *)"delete_Minkowski(Minkowski self)"},
	 { "Minkowski_swigregister", Minkowski_swigregister, METH_VARARGS, NULL},
	 { "ChernSimons_getProperties", _wrap_ChernSimons_getProperties, METH_VARARGS, (char *)"\n"
		"ChernSimons_getProperties(ChernSimons self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ChernSimons_plugins", _wrap_ChernSimons_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ChernSimons_plugins(ChernSimons self) -> vector_string\n"
		""},
	 { "delete_ChernSimons", _wrap_delete_ChernSimons, METH_VARARGS, (char *)"delete_ChernSimons(ChernSimons self)"},
	 { "ChernSimons_clone", _wrap_ChernSimons_clone, METH_VARARGS, (char *)"\n"
		"ChernSimons_clone(ChernSimons self) -> ChernSimons\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "ChernSimons_dzetaCS", _wrap_ChernSimons_dzetaCS, METH_VARARGS, (char *)"\n"
		"dzetaCS(double d)\n"
		"ChernSimons_dzetaCS(ChernSimons self) -> double\n"
		""},
	 { "ChernSimons_gmunu", _wrap_ChernSimons_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] IN_ARRAY1)\n"
		"ChernSimons_gmunu(ChernSimons self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls Metric:: gmunu(double g[4][4], const\n"
		"double * pos) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"x:  4-position at which to compute the coefficient;\n"
		"\n"
		"mu:  1st index of coefficient, 03;\n"
		"\n"
		"nu:  2nd index of coefficient, 03;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "ChernSimons_gmunu_up", _wrap_ChernSimons_gmunu_up, METH_VARARGS, (char *)"\n"
		"gmunu_up(double const [4] IN_ARRAY1)\n"
		"ChernSimons_gmunu_up(ChernSimons self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric contravariant coefficients.\n"
		"\n"
		"The default implementation calls Metric:: gmunu_up(double g[4][4],\n"
		"const double * pos) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"x:  4-position at which to compute the coefficient;\n"
		"\n"
		"mu:  1st index of coefficient, 03;\n"
		"\n"
		"nu:  2nd index of coefficient, 03;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "ChernSimons_diff", _wrap_ChernSimons_diff, METH_VARARGS, (char *)"ChernSimons_diff(ChernSimons self, double const [8] y, double const [5] cst, double [8] res) -> int"},
	 { "ChernSimons_circularVelocity", _wrap_ChernSimons_circularVelocity, METH_VARARGS, (char *)"\n"
		"circularVelocity(double const [4] pos, double [4] vel, double dir=1.)\n"
		"circularVelocity(double const [4] pos, double [4] vel)\n"
		"ChernSimons_circularVelocity(ChernSimons self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "ChernSimons_zamoVelocity", _wrap_ChernSimons_zamoVelocity, METH_VARARGS, (char *)"\n"
		"ChernSimons_zamoVelocity(ChernSimons self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "ChernSimons_christoffel", _wrap_ChernSimons_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] x) -> int\n"
		"ChernSimons_christoffel(ChernSimons self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3). \n"
		""},
	 { "new_ChernSimons", _wrap_new_ChernSimons, METH_VARARGS, (char *)"\n"
		"ChernSimons()\n"
		"ChernSimons(ChernSimons o)\n"
		"ChernSimons(Metric base)\n"
		"new_ChernSimons(long address) -> ChernSimons\n"
		""},
	 { "ChernSimons_swigregister", ChernSimons_swigregister, METH_VARARGS, NULL},
	 { "RezzollaZhidenko_getProperties", _wrap_RezzollaZhidenko_getProperties, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_getProperties(RezzollaZhidenko self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "RezzollaZhidenko_plugins", _wrap_RezzollaZhidenko_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"RezzollaZhidenko_plugins(RezzollaZhidenko self) -> vector_string\n"
		""},
	 { "delete_RezzollaZhidenko", _wrap_delete_RezzollaZhidenko, METH_VARARGS, (char *)"delete_RezzollaZhidenko(RezzollaZhidenko self)"},
	 { "RezzollaZhidenko_clone", _wrap_RezzollaZhidenko_clone, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_clone(RezzollaZhidenko self) -> RezzollaZhidenko\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "RezzollaZhidenko_epsilon", _wrap_RezzollaZhidenko_epsilon, METH_VARARGS, (char *)"\n"
		"epsilon(double arg2)\n"
		"RezzollaZhidenko_epsilon(RezzollaZhidenko self) -> double\n"
		""},
	 { "RezzollaZhidenko_rms", _wrap_RezzollaZhidenko_rms, METH_VARARGS, (char *)"\n"
		"rms(double arg2)\n"
		"RezzollaZhidenko_rms(RezzollaZhidenko self) -> double\n"
		""},
	 { "RezzollaZhidenko_rmb", _wrap_RezzollaZhidenko_rmb, METH_VARARGS, (char *)"\n"
		"rmb(double arg2)\n"
		"RezzollaZhidenko_rmb(RezzollaZhidenko self) -> double\n"
		""},
	 { "RezzollaZhidenko_aparam", _wrap_RezzollaZhidenko_aparam, METH_VARARGS, (char *)"\n"
		"aparam(vector_double v)\n"
		"RezzollaZhidenko_aparam(RezzollaZhidenko self) -> vector_double\n"
		""},
	 { "RezzollaZhidenko_bparam", _wrap_RezzollaZhidenko_bparam, METH_VARARGS, (char *)"\n"
		"bparam(vector_double v)\n"
		"RezzollaZhidenko_bparam(RezzollaZhidenko self) -> vector_double\n"
		""},
	 { "RezzollaZhidenko_gmunu", _wrap_RezzollaZhidenko_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] IN_ARRAY1)\n"
		"RezzollaZhidenko_gmunu(RezzollaZhidenko self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls double gmunu(const double * x, int\n"
		"mu, int nu) const.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ARGOUT_ARRAY2:  (g) 4x4 array to store the coeefficients\n"
		"\n"
		"IN_ARRAY1:  (x) 4-position at which to compute the coefficients;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "RezzollaZhidenko_N2", _wrap_RezzollaZhidenko_N2, METH_VARARGS, (char *)"RezzollaZhidenko_N2(RezzollaZhidenko self, double const rr) -> double"},
	 { "RezzollaZhidenko_B2", _wrap_RezzollaZhidenko_B2, METH_VARARGS, (char *)"RezzollaZhidenko_B2(RezzollaZhidenko self, double const rr) -> double"},
	 { "RezzollaZhidenko_Nprime", _wrap_RezzollaZhidenko_Nprime, METH_VARARGS, (char *)"RezzollaZhidenko_Nprime(RezzollaZhidenko self, double const rr) -> double"},
	 { "RezzollaZhidenko_Bprime", _wrap_RezzollaZhidenko_Bprime, METH_VARARGS, (char *)"RezzollaZhidenko_Bprime(RezzollaZhidenko self, double const rr) -> double"},
	 { "RezzollaZhidenko_isStopCondition", _wrap_RezzollaZhidenko_isStopCondition, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_isStopCondition(RezzollaZhidenko self, double const [8] coord) -> int\n"
		"\n"
		"\n"
		"\n"
		"Check whether integration should stop.\n"
		"\n"
		"The integrating loop will ask this the Metric through this method\n"
		"whether or not it is happy to continue the integration. Typically, the\n"
		"Metric should answer 0 when everything is fine, 1 when too close to\n"
		"the event horizon, inside the BH...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-coordinate vector to check. \n"
		""},
	 { "RezzollaZhidenko_getRmb", _wrap_RezzollaZhidenko_getRmb, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_getRmb(RezzollaZhidenko self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the marginally bound radius Should be implemented in derived\n"
		"classes if useful If called on the base class, returns an error \n"
		""},
	 { "RezzollaZhidenko_getRms", _wrap_RezzollaZhidenko_getRms, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_getRms(RezzollaZhidenko self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the marginally stable (ISCO) radius Should be implemented in\n"
		"derived classes if useful If called on the base class, returns an\n"
		"error \n"
		""},
	 { "RezzollaZhidenko_getPotential", _wrap_RezzollaZhidenko_getPotential, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_getPotential(RezzollaZhidenko self, double const [4] pos, double l_cst) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns potential W=-ln(|u_t|) for a cst specific angular momentum\n"
		"l_cst Should be implemented in derived classes if useful If called on\n"
		"the base class, returns an error \n"
		""},
	 { "RezzollaZhidenko_getSpecificAngularMomentum", _wrap_RezzollaZhidenko_getSpecificAngularMomentum, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_getSpecificAngularMomentum(RezzollaZhidenko self, double rr) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the specific angular momentum l=-u_phi/u_t Should be\n"
		"implemented in derived classes if useful If called on the base class,\n"
		"returns an error \n"
		""},
	 { "RezzollaZhidenko_circularVelocity", _wrap_RezzollaZhidenko_circularVelocity, METH_VARARGS, (char *)"\n"
		"circularVelocity(double const [4] pos, double [4] vel, double dir=1.)\n"
		"circularVelocity(double const [4] pos, double [4] vel)\n"
		"RezzollaZhidenko_circularVelocity(RezzollaZhidenko self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "RezzollaZhidenko_zamoVelocity", _wrap_RezzollaZhidenko_zamoVelocity, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko_zamoVelocity(RezzollaZhidenko self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "RezzollaZhidenko_christoffel", _wrap_RezzollaZhidenko_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] pos) -> int\n"
		"RezzollaZhidenko_christoffel(RezzollaZhidenko self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3). \n"
		""},
	 { "new_RezzollaZhidenko", _wrap_new_RezzollaZhidenko, METH_VARARGS, (char *)"\n"
		"RezzollaZhidenko()\n"
		"RezzollaZhidenko(RezzollaZhidenko orig)\n"
		"RezzollaZhidenko(Metric base)\n"
		"new_RezzollaZhidenko(long address) -> RezzollaZhidenko\n"
		""},
	 { "RezzollaZhidenko_swigregister", RezzollaZhidenko_swigregister, METH_VARARGS, NULL},
	 { "Hayward_getProperties", _wrap_Hayward_getProperties, METH_VARARGS, (char *)"\n"
		"Hayward_getProperties(Hayward self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Hayward_plugins", _wrap_Hayward_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Hayward_plugins(Hayward self) -> vector_string\n"
		""},
	 { "Hayward_clone", _wrap_Hayward_clone, METH_VARARGS, (char *)"\n"
		"Hayward_clone(Hayward self) -> Hayward\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "Hayward_spin", _wrap_Hayward_spin, METH_VARARGS, (char *)"\n"
		"spin(double const spin)\n"
		"Hayward_spin(Hayward self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns spin. \n"
		""},
	 { "Hayward_charge", _wrap_Hayward_charge, METH_VARARGS, (char *)"\n"
		"charge(double const charge)\n"
		"Hayward_charge(Hayward self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns charge. \n"
		""},
	 { "Hayward_getSpecificAngularMomentum", _wrap_Hayward_getSpecificAngularMomentum, METH_VARARGS, (char *)"\n"
		"Hayward_getSpecificAngularMomentum(Hayward self, double rr) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the specific angular momentum l=-u_phi/u_t Should be\n"
		"implemented in derived classes if useful If called on the base class,\n"
		"returns an error \n"
		""},
	 { "Hayward_getPotential", _wrap_Hayward_getPotential, METH_VARARGS, (char *)"\n"
		"Hayward_getPotential(Hayward self, double const [4] pos, double l_cst) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns potential W=-ln(|u_t|) for a cst specific angular momentum\n"
		"l_cst Should be implemented in derived classes if useful If called on\n"
		"the base class, returns an error \n"
		""},
	 { "Hayward_gmunu", _wrap_Hayward_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] IN_ARRAY1)\n"
		"Hayward_gmunu(Hayward self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls Metric:: gmunu(double g[4][4], const\n"
		"double * pos) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"x:  4-position at which to compute the coefficient;\n"
		"\n"
		"mu:  1st index of coefficient, 03;\n"
		"\n"
		"nu:  2nd index of coefficient, 03;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "Hayward_gmunu_up", _wrap_Hayward_gmunu_up, METH_VARARGS, (char *)"\n"
		"gmunu_up(double const [4] IN_ARRAY1)\n"
		"Hayward_gmunu_up(Hayward self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric contravariant coefficients.\n"
		"\n"
		"The default implementation calls Metric:: gmunu_up(double g[4][4],\n"
		"const double * pos) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"x:  4-position at which to compute the coefficient;\n"
		"\n"
		"mu:  1st index of coefficient, 03;\n"
		"\n"
		"nu:  2nd index of coefficient, 03;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "Hayward_ScalarProd", _wrap_Hayward_ScalarProd, METH_VARARGS, (char *)"\n"
		"Hayward_ScalarProd(Hayward self, double const [4] pos, double const [4] u1, double const [4] u2) -> double\n"
		"\n"
		"\n"
		"\n"
		"Scalar product.\n"
		"\n"
		"Compute the scalarproduct of the two quadrivectors u1 and u2 in this\n"
		"Metric, at point pos expressed in coordinate system sys.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position;\n"
		"\n"
		"u1:  1st quadrivector;\n"
		"\n"
		"u2:  2nd quadrivector;\n"
		"\n"
		"u1*u2 \n"
		""},
	 { "Hayward_circularVelocity", _wrap_Hayward_circularVelocity, METH_VARARGS, (char *)"\n"
		"circularVelocity(double const [4] coor, double [4] vel, double dir)\n"
		"Hayward_circularVelocity(Hayward self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "Hayward_zamoVelocity", _wrap_Hayward_zamoVelocity, METH_VARARGS, (char *)"\n"
		"Hayward_zamoVelocity(Hayward self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "Hayward_christoffel", _wrap_Hayward_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] pos) -> int\n"
		"Hayward_christoffel(Hayward self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3). \n"
		""},
	 { "new_Hayward", _wrap_new_Hayward, METH_VARARGS, (char *)"\n"
		"Hayward()\n"
		"Hayward(Metric base)\n"
		"new_Hayward(long address) -> Hayward\n"
		"\n"
		"\n"
		"\n"
		"Default constructor. \n"
		""},
	 { "delete_Hayward", _wrap_delete_Hayward, METH_VARARGS, (char *)"delete_Hayward(Hayward self)"},
	 { "Hayward_swigregister", Hayward_swigregister, METH_VARARGS, NULL},
	 { "SchwarzschildHarmonic_getProperties", _wrap_SchwarzschildHarmonic_getProperties, METH_VARARGS, (char *)"\n"
		"SchwarzschildHarmonic_getProperties(SchwarzschildHarmonic self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "SchwarzschildHarmonic_plugins", _wrap_SchwarzschildHarmonic_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"SchwarzschildHarmonic_plugins(SchwarzschildHarmonic self) -> vector_string\n"
		""},
	 { "delete_SchwarzschildHarmonic", _wrap_delete_SchwarzschildHarmonic, METH_VARARGS, (char *)"delete_SchwarzschildHarmonic(SchwarzschildHarmonic self)"},
	 { "SchwarzschildHarmonic_clone", _wrap_SchwarzschildHarmonic_clone, METH_VARARGS, (char *)"\n"
		"SchwarzschildHarmonic_clone(SchwarzschildHarmonic self) -> SchwarzschildHarmonic\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "SchwarzschildHarmonic_gmunu", _wrap_SchwarzschildHarmonic_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] IN_ARRAY1)\n"
		"SchwarzschildHarmonic_gmunu(SchwarzschildHarmonic self, double const [4] x, int mu, int nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls double gmunu(const double * x, int\n"
		"mu, int nu) const.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ARGOUT_ARRAY2:  (g) 4x4 array to store the coeefficients\n"
		"\n"
		"IN_ARRAY1:  (x) 4-position at which to compute the coefficients;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "SchwarzschildHarmonic_isStopCondition", _wrap_SchwarzschildHarmonic_isStopCondition, METH_VARARGS, (char *)"\n"
		"SchwarzschildHarmonic_isStopCondition(SchwarzschildHarmonic self, double const [8] coord) -> int\n"
		"\n"
		"\n"
		"\n"
		"Check whether integration should stop.\n"
		"\n"
		"The integrating loop will ask this the Metric through this method\n"
		"whether or not it is happy to continue the integration. Typically, the\n"
		"Metric should answer 0 when everything is fine, 1 when too close to\n"
		"the event horizon, inside the BH...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-coordinate vector to check. \n"
		""},
	 { "SchwarzschildHarmonic_circularVelocity", _wrap_SchwarzschildHarmonic_circularVelocity, METH_VARARGS, (char *)"\n"
		"circularVelocity(double const * coor, double * vel, double dir)\n"
		"SchwarzschildHarmonic_circularVelocity(SchwarzschildHarmonic self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "SchwarzschildHarmonic_zamoVelocity", _wrap_SchwarzschildHarmonic_zamoVelocity, METH_VARARGS, (char *)"\n"
		"SchwarzschildHarmonic_zamoVelocity(SchwarzschildHarmonic self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "SchwarzschildHarmonic_christoffel", _wrap_SchwarzschildHarmonic_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] pos) -> int\n"
		"SchwarzschildHarmonic_christoffel(SchwarzschildHarmonic self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3). \n"
		""},
	 { "new_SchwarzschildHarmonic", _wrap_new_SchwarzschildHarmonic, METH_VARARGS, (char *)"\n"
		"SchwarzschildHarmonic()\n"
		"SchwarzschildHarmonic(SchwarzschildHarmonic orig)\n"
		"SchwarzschildHarmonic(Metric base)\n"
		"new_SchwarzschildHarmonic(long address) -> SchwarzschildHarmonic\n"
		""},
	 { "SchwarzschildHarmonic_swigregister", SchwarzschildHarmonic_swigregister, METH_VARARGS, NULL},
	 { "PowerLaw_getProperties", _wrap_PowerLaw_getProperties, METH_VARARGS, (char *)"\n"
		"PowerLaw_getProperties(PowerLaw self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "PowerLaw_plugins", _wrap_PowerLaw_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"PowerLaw_plugins(PowerLaw self) -> vector_string\n"
		""},
	 { "PowerLaw_clone", _wrap_PowerLaw_clone, METH_VARARGS, (char *)"\n"
		"PowerLaw_clone(PowerLaw self) -> PowerLaw\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "PowerLaw_constant", _wrap_PowerLaw_constant, METH_VARARGS, (char *)"\n"
		"constant() -> double\n"
		"PowerLaw_constant(PowerLaw self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set constant_. \n"
		""},
	 { "PowerLaw_exponent", _wrap_PowerLaw_exponent, METH_VARARGS, (char *)"\n"
		"exponent() -> double\n"
		"PowerLaw_exponent(PowerLaw self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set exponent_. \n"
		""},
	 { "PowerLaw_cutoff", _wrap_PowerLaw_cutoff, METH_VARARGS, (char *)"\n"
		"cutoff(std::string const & unit) -> vector_double\n"
		"cutoff(vector_double v, std::string const & unit)\n"
		"cutoff() -> vector_double\n"
		"PowerLaw_cutoff(PowerLaw self, vector_double v)\n"
		"\n"
		"\n"
		"\n"
		"Set cutoffs, in Hz. \n"
		""},
	 { "PowerLaw___call__", _wrap_PowerLaw___call__, METH_VARARGS, (char *)"\n"
		"__call__(double nu, double opacity, double ds) -> double\n"
		"PowerLaw___call__(PowerLaw self, double nu) -> double\n"
		""},
	 { "new_PowerLaw", _wrap_new_PowerLaw, METH_VARARGS, (char *)"\n"
		"PowerLaw()\n"
		"PowerLaw(double exponent, double constant=1.)\n"
		"PowerLaw(double exponent)\n"
		"PowerLaw(Spectrum base)\n"
		"new_PowerLaw(long address) -> PowerLaw\n"
		"\n"
		"\n"
		"\n"
		"Constructor setting exponent_ and optionally constant_. \n"
		""},
	 { "delete_PowerLaw", _wrap_delete_PowerLaw, METH_VARARGS, (char *)"delete_PowerLaw(PowerLaw self)"},
	 { "PowerLaw_swigregister", PowerLaw_swigregister, METH_VARARGS, NULL},
	 { "BlackBody_getProperties", _wrap_BlackBody_getProperties, METH_VARARGS, (char *)"\n"
		"BlackBody_getProperties(BlackBody self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "BlackBody_plugins", _wrap_BlackBody_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"BlackBody_plugins(BlackBody self) -> vector_string\n"
		""},
	 { "BlackBody_clone", _wrap_BlackBody_clone, METH_VARARGS, (char *)"\n"
		"BlackBody_clone(BlackBody self) -> BlackBody\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "BlackBody_temperature", _wrap_BlackBody_temperature, METH_VARARGS, (char *)"\n"
		"temperature() -> double\n"
		"BlackBody_temperature(BlackBody self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set constant. \n"
		""},
	 { "BlackBody_scaling", _wrap_BlackBody_scaling, METH_VARARGS, (char *)"\n"
		"scaling() -> double\n"
		"BlackBody_scaling(BlackBody self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set exponent. \n"
		""},
	 { "BlackBody_colorCorrection", _wrap_BlackBody_colorCorrection, METH_VARARGS, (char *)"\n"
		"colorCorrection() -> double\n"
		"BlackBody_colorCorrection(BlackBody self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set color correction. \n"
		""},
	 { "BlackBody___call__", _wrap_BlackBody___call__, METH_VARARGS, (char *)"\n"
		"__call__(double nu, double opacity, double ds) -> double\n"
		"BlackBody___call__(BlackBody self, double nu) -> double\n"
		""},
	 { "new_BlackBody", _wrap_new_BlackBody, METH_VARARGS, (char *)"\n"
		"BlackBody()\n"
		"BlackBody(double T, double scaling=1.)\n"
		"BlackBody(double T)\n"
		"BlackBody(Spectrum base)\n"
		"new_BlackBody(long address) -> BlackBody\n"
		"\n"
		"\n"
		"\n"
		"Constructor setting T_ and cst_. \n"
		""},
	 { "delete_BlackBody", _wrap_delete_BlackBody, METH_VARARGS, (char *)"delete_BlackBody(BlackBody self)"},
	 { "BlackBody_swigregister", BlackBody_swigregister, METH_VARARGS, NULL},
	 { "ThermalBremsstrahlung_getProperties", _wrap_ThermalBremsstrahlung_getProperties, METH_VARARGS, (char *)"\n"
		"ThermalBremsstrahlung_getProperties(ThermalBremsstrahlung self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThermalBremsstrahlung_plugins", _wrap_ThermalBremsstrahlung_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThermalBremsstrahlung_plugins(ThermalBremsstrahlung self) -> vector_string\n"
		""},
	 { "ThermalBremsstrahlung_clone", _wrap_ThermalBremsstrahlung_clone, METH_VARARGS, (char *)"\n"
		"ThermalBremsstrahlung_clone(ThermalBremsstrahlung self) -> ThermalBremsstrahlung\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "ThermalBremsstrahlung___call__", _wrap_ThermalBremsstrahlung___call__, METH_VARARGS, (char *)"\n"
		"__call__(double nu, double opacity, double ds) -> double\n"
		"ThermalBremsstrahlung___call__(ThermalBremsstrahlung self, double nu) -> double\n"
		""},
	 { "ThermalBremsstrahlung_temperature", _wrap_ThermalBremsstrahlung_temperature, METH_VARARGS, (char *)"\n"
		"temperature() -> double\n"
		"ThermalBremsstrahlung_temperature(ThermalBremsstrahlung self, double tt)\n"
		""},
	 { "ThermalBremsstrahlung_numberdensityCGS", _wrap_ThermalBremsstrahlung_numberdensityCGS, METH_VARARGS, (char *)"\n"
		"numberdensityCGS() -> double\n"
		"ThermalBremsstrahlung_numberdensityCGS(ThermalBremsstrahlung self, double rho)\n"
		""},
	 { "ThermalBremsstrahlung_jnuCGS", _wrap_ThermalBremsstrahlung_jnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalBremsstrahlung_jnuCGS(ThermalBremsstrahlung self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the emission coefficient j_nu in cgs units i.e. erg cm^-3 s^-1\n"
		"ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalBremsstrahlung_alphanuCGS", _wrap_ThermalBremsstrahlung_alphanuCGS, METH_VARARGS, (char *)"\n"
		"ThermalBremsstrahlung_alphanuCGS(ThermalBremsstrahlung self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the absorption coefficient alpha_nu in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalBremsstrahlung_radiativeQ", _wrap_ThermalBremsstrahlung_radiativeQ, METH_VARARGS, (char *)"\n"
		"ThermalBremsstrahlung_radiativeQ(ThermalBremsstrahlung self, double [] jnu, double [] alphanu, double const [] nu_ems, size_t nbnu)\n"
		"\n"
		"\n"
		"\n"
		"Returns the emission and absorption coef jnu and alphanu in SI \n"
		""},
	 { "new_ThermalBremsstrahlung", _wrap_new_ThermalBremsstrahlung, METH_VARARGS, (char *)"\n"
		"ThermalBremsstrahlung()\n"
		"ThermalBremsstrahlung(ThermalBremsstrahlung arg2)\n"
		"ThermalBremsstrahlung(Spectrum base)\n"
		"new_ThermalBremsstrahlung(long address) -> ThermalBremsstrahlung\n"
		""},
	 { "delete_ThermalBremsstrahlung", _wrap_delete_ThermalBremsstrahlung, METH_VARARGS, (char *)"delete_ThermalBremsstrahlung(ThermalBremsstrahlung self)"},
	 { "ThermalBremsstrahlung_swigregister", ThermalBremsstrahlung_swigregister, METH_VARARGS, NULL},
	 { "ThermalSynchrotron_getProperties", _wrap_ThermalSynchrotron_getProperties, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_getProperties(ThermalSynchrotron self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThermalSynchrotron_plugins", _wrap_ThermalSynchrotron_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThermalSynchrotron_plugins(ThermalSynchrotron self) -> vector_string\n"
		""},
	 { "ThermalSynchrotron_clone", _wrap_ThermalSynchrotron_clone, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_clone(ThermalSynchrotron self) -> ThermalSynchrotron\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "ThermalSynchrotron___call__", _wrap_ThermalSynchrotron___call__, METH_VARARGS, (char *)"\n"
		"__call__(double nu, double opacity, double ds) -> double\n"
		"ThermalSynchrotron___call__(ThermalSynchrotron self, double nu) -> double\n"
		""},
	 { "ThermalSynchrotron_temperature", _wrap_ThermalSynchrotron_temperature, METH_VARARGS, (char *)"\n"
		"temperature() -> double\n"
		"ThermalSynchrotron_temperature(ThermalSynchrotron self, double tt)\n"
		""},
	 { "ThermalSynchrotron_numberdensityCGS", _wrap_ThermalSynchrotron_numberdensityCGS, METH_VARARGS, (char *)"\n"
		"numberdensityCGS() -> double\n"
		"ThermalSynchrotron_numberdensityCGS(ThermalSynchrotron self, double rho)\n"
		""},
	 { "ThermalSynchrotron_angle_B_pem", _wrap_ThermalSynchrotron_angle_B_pem, METH_VARARGS, (char *)"\n"
		"angle_B_pem() -> double\n"
		"ThermalSynchrotron_angle_B_pem(ThermalSynchrotron self, double rho)\n"
		""},
	 { "ThermalSynchrotron_cyclotron_freq", _wrap_ThermalSynchrotron_cyclotron_freq, METH_VARARGS, (char *)"\n"
		"cyclotron_freq() -> double\n"
		"ThermalSynchrotron_cyclotron_freq(ThermalSynchrotron self, double rho)\n"
		""},
	 { "ThermalSynchrotron_angle_averaged", _wrap_ThermalSynchrotron_angle_averaged, METH_VARARGS, (char *)"\n"
		"angle_averaged() -> bool\n"
		"ThermalSynchrotron_angle_averaged(ThermalSynchrotron self, bool ang)\n"
		""},
	 { "ThermalSynchrotron_besselK2", _wrap_ThermalSynchrotron_besselK2, METH_VARARGS, (char *)"\n"
		"besselK2() -> double\n"
		"ThermalSynchrotron_besselK2(ThermalSynchrotron self, double bessel)\n"
		""},
	 { "ThermalSynchrotron_jnuCGS", _wrap_ThermalSynchrotron_jnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_jnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the emission coefficient j_nu in cgs units i.e. erg cm^-3 s^-1\n"
		"ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_jQnuCGS", _wrap_ThermalSynchrotron_jQnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_jQnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes Q emission coefficient j_nu in cgs units i.e. erg\n"
		"cm^-3 s^-1 ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_jUnuCGS", _wrap_ThermalSynchrotron_jUnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_jUnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes U emission coefficient j_nu in cgs units i.e. erg\n"
		"cm^-3 s^-1 ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_jVnuCGS", _wrap_ThermalSynchrotron_jVnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_jVnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes V emission coefficient j_nu in cgs units i.e. erg\n"
		"cm^-3 s^-1 ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_alphanuCGS", _wrap_ThermalSynchrotron_alphanuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_alphanuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the absorption coefficient alpha_nu in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_alphaQnuCGS", _wrap_ThermalSynchrotron_alphaQnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_alphaQnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes Q absorption coefficient alpha_nu in cgs units\n"
		"[cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_alphaUnuCGS", _wrap_ThermalSynchrotron_alphaUnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_alphaUnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes U absorption coefficient alpha_nu in cgs units\n"
		"[cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_alphaVnuCGS", _wrap_ThermalSynchrotron_alphaVnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_alphaVnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes V absorption coefficient alpha_nu in cgs units\n"
		"[cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_rQnuCGS", _wrap_ThermalSynchrotron_rQnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_rQnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes Q Faraday rotation coefficient in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_rUnuCGS", _wrap_ThermalSynchrotron_rUnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_rUnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes U Faraday rotation coefficient in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_rVnuCGS", _wrap_ThermalSynchrotron_rVnuCGS, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron_rVnuCGS(ThermalSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes V Faraday rotation coefficient in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "ThermalSynchrotron_radiativeQ", _wrap_ThermalSynchrotron_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] jnu, double [] anu, double const [] nu_ems, size_t nbnu)\n"
		"ThermalSynchrotron_radiativeQ(ThermalSynchrotron self, double [] jInu, double [] jQnu, double [] jUnu, double [] jVnu, double [] aInu, double [] aQnu, double [] aUnu, double [] aVnu, double [] rQnu, double [] rUnu, double [] rVnu, double const [] nu_ems, size_t nbnu)\n"
		"\n"
		"\n"
		"\n"
		"Returns the emission, absorption and Fraday rotation coef in SI for\n"
		"the 4 Stokes parameters \n"
		""},
	 { "new_ThermalSynchrotron", _wrap_new_ThermalSynchrotron, METH_VARARGS, (char *)"\n"
		"ThermalSynchrotron()\n"
		"ThermalSynchrotron(ThermalSynchrotron arg2)\n"
		"ThermalSynchrotron(Spectrum base)\n"
		"new_ThermalSynchrotron(long address) -> ThermalSynchrotron\n"
		""},
	 { "delete_ThermalSynchrotron", _wrap_delete_ThermalSynchrotron, METH_VARARGS, (char *)"delete_ThermalSynchrotron(ThermalSynchrotron self)"},
	 { "ThermalSynchrotron_swigregister", ThermalSynchrotron_swigregister, METH_VARARGS, NULL},
	 { "PowerLawSynchrotron_getProperties", _wrap_PowerLawSynchrotron_getProperties, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_getProperties(PowerLawSynchrotron self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "PowerLawSynchrotron_plugins", _wrap_PowerLawSynchrotron_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"PowerLawSynchrotron_plugins(PowerLawSynchrotron self) -> vector_string\n"
		""},
	 { "PowerLawSynchrotron_clone", _wrap_PowerLawSynchrotron_clone, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_clone(PowerLawSynchrotron self) -> PowerLawSynchrotron\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "PowerLawSynchrotron___call__", _wrap_PowerLawSynchrotron___call__, METH_VARARGS, (char *)"\n"
		"__call__(double nu, double opacity, double ds) -> double\n"
		"PowerLawSynchrotron___call__(PowerLawSynchrotron self, double nu) -> double\n"
		""},
	 { "PowerLawSynchrotron_numberdensityCGS", _wrap_PowerLawSynchrotron_numberdensityCGS, METH_VARARGS, (char *)"\n"
		"numberdensityCGS() -> double\n"
		"PowerLawSynchrotron_numberdensityCGS(PowerLawSynchrotron self, double rho)\n"
		""},
	 { "PowerLawSynchrotron_angle_B_pem", _wrap_PowerLawSynchrotron_angle_B_pem, METH_VARARGS, (char *)"\n"
		"angle_B_pem() -> double\n"
		"PowerLawSynchrotron_angle_B_pem(PowerLawSynchrotron self, double rho)\n"
		""},
	 { "PowerLawSynchrotron_cyclotron_freq", _wrap_PowerLawSynchrotron_cyclotron_freq, METH_VARARGS, (char *)"\n"
		"cyclotron_freq() -> double\n"
		"PowerLawSynchrotron_cyclotron_freq(PowerLawSynchrotron self, double rho)\n"
		""},
	 { "PowerLawSynchrotron_PLindex", _wrap_PowerLawSynchrotron_PLindex, METH_VARARGS, (char *)"\n"
		"PLindex() -> double\n"
		"PowerLawSynchrotron_PLindex(PowerLawSynchrotron self, double ind)\n"
		""},
	 { "PowerLawSynchrotron_angle_averaged", _wrap_PowerLawSynchrotron_angle_averaged, METH_VARARGS, (char *)"\n"
		"angle_averaged() -> bool\n"
		"PowerLawSynchrotron_angle_averaged(PowerLawSynchrotron self, bool ang)\n"
		""},
	 { "PowerLawSynchrotron_gamma_min", _wrap_PowerLawSynchrotron_gamma_min, METH_VARARGS, (char *)"\n"
		"gamma_min() -> double\n"
		"PowerLawSynchrotron_gamma_min(PowerLawSynchrotron self, double gmin)\n"
		""},
	 { "PowerLawSynchrotron_gamma_max", _wrap_PowerLawSynchrotron_gamma_max, METH_VARARGS, (char *)"\n"
		"gamma_max() -> double\n"
		"PowerLawSynchrotron_gamma_max(PowerLawSynchrotron self, double gmax)\n"
		""},
	 { "PowerLawSynchrotron_jnuCGS", _wrap_PowerLawSynchrotron_jnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_jnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the emission coefficient j_nu in cgs units i.e. erg cm^-3 s^-1\n"
		"ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_jQnuCGS", _wrap_PowerLawSynchrotron_jQnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_jQnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes Q emission coefficient j_nu in cgs units i.e. erg\n"
		"cm^-3 s^-1 ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_jUnuCGS", _wrap_PowerLawSynchrotron_jUnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_jUnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes U emission coefficient j_nu in cgs units i.e. erg\n"
		"cm^-3 s^-1 ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_jVnuCGS", _wrap_PowerLawSynchrotron_jVnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_jVnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes V emission coefficient j_nu in cgs units i.e. erg\n"
		"cm^-3 s^-1 ster^-1 Hz^-1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_alphanuCGS", _wrap_PowerLawSynchrotron_alphanuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_alphanuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the absorption coefficient alpha_nu in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_alphaQnuCGS", _wrap_PowerLawSynchrotron_alphaQnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_alphaQnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes Q absorption coefficient alpha_nu in cgs units\n"
		"[cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_alphaUnuCGS", _wrap_PowerLawSynchrotron_alphaUnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_alphaUnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes U absorption coefficient alpha_nu in cgs units\n"
		"[cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_alphaVnuCGS", _wrap_PowerLawSynchrotron_alphaVnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_alphaVnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes V absorption coefficient alpha_nu in cgs units\n"
		"[cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_rQnuCGS", _wrap_PowerLawSynchrotron_rQnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_rQnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes Q Faraday rotation coefficient in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_rUnuCGS", _wrap_PowerLawSynchrotron_rUnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_rUnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes U Faraday rotation coefficient in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_rVnuCGS", _wrap_PowerLawSynchrotron_rVnuCGS, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron_rVnuCGS(PowerLawSynchrotron self, double nu) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the Stokes V Faraday rotation coefficient in cgs units [cm^-1]\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu:  frequency in Hz \n"
		""},
	 { "PowerLawSynchrotron_radiativeQ", _wrap_PowerLawSynchrotron_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] jnu, double [] anu, double const [] nu_ems, size_t nbnu)\n"
		"PowerLawSynchrotron_radiativeQ(PowerLawSynchrotron self, double [] jInu, double [] jQnu, double [] jUnu, double [] jVnu, double [] aInu, double [] aQnu, double [] aUnu, double [] aVnu, double [] rQnu, double [] rUnu, double [] rVnu, double const [] nu_ems, size_t nbnu)\n"
		"\n"
		"\n"
		"\n"
		"Returns the emission, absorption and Fraday rotation coef in SI for\n"
		"the 4 Stokes parameters \n"
		""},
	 { "new_PowerLawSynchrotron", _wrap_new_PowerLawSynchrotron, METH_VARARGS, (char *)"\n"
		"PowerLawSynchrotron()\n"
		"PowerLawSynchrotron(PowerLawSynchrotron arg2)\n"
		"PowerLawSynchrotron(Spectrum base)\n"
		"new_PowerLawSynchrotron(long address) -> PowerLawSynchrotron\n"
		""},
	 { "delete_PowerLawSynchrotron", _wrap_delete_PowerLawSynchrotron, METH_VARARGS, (char *)"delete_PowerLawSynchrotron(PowerLawSynchrotron self)"},
	 { "PowerLawSynchrotron_swigregister", PowerLawSynchrotron_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__GridData2D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::GridData2D *)  ((Gyoto::Astrobj::FlaredDiskSynchrotron *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__GridData2D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::GridData2D *)  ((Gyoto::Astrobj::ThinDiskGridIntensity *) x));
}
static void *_p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__FitsRW(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::FitsRW *)  ((Gyoto::Astrobj::Plasmoid *) x));
}
static void *_p_Gyoto__ScreenTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Screen *) x));
}
static void *_p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::RezzollaZhidenko *) x));
}
static void *_p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FreeStar *) x));
}
static void *_p_Gyoto__Astrobj__StarTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Star *) x));
}
static void *_p_Gyoto__Metric__KerrKSTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::KerrKS *) x));
}
static void *_p_Gyoto__Metric__KerrBLTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::KerrBL *) x));
}
static void *_p_Gyoto__Astrobj__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Astrobj::Generic *) x));
}
static void *_p_Gyoto__Metric__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Metric::Generic *) x));
}
static void *_p_Gyoto__Spectrum__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Spectrum::Generic *) x));
}
static void *_p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Spectrometer::Generic *) x));
}
static void *_p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FixedStar *) x));
}
static void *_p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::FlaredDiskSynchrotron *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskGridIntensity *) x));
}
static void *_p_Gyoto__Spectrum__ThermalSynchrotronTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::ThermalSynchrotron *) x));
}
static void *_p_Gyoto__Spectrum__PowerLawSynchrotronTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::PowerLawSynchrotron *) x));
}
static void *_p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Uniform *) x));
}
static void *_p_Gyoto__SceneryTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Scenery *) x));
}
static void *_p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::EquatorialHotSpot *) x));
}
static void *_p_Gyoto__Metric__MinkowskiTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Minkowski *) x));
}
static void *_p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::XillverReflection *) x));
}
static void *_p_Gyoto__Metric__ShiftTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Shift *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::DeformedTorus *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PatternDisk *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *) ((Gyoto::Astrobj::DynamicalDisk *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *) ((Gyoto::Astrobj::PatternDiskBB *) x));
}
static void *_p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PageThorneDisk *) x));
}
static void *_p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::PolishDoughnut *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__Astrobj__ComplexTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Complex *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskProfile *) x));
}
static void *_p_Gyoto__Metric__ComplexTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Complex *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Disk3D *) ((Gyoto::Astrobj::DynamicalDisk3D *) x));
}
static void *_p_Gyoto__Astrobj__Disk3DTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Disk3D *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskIronLine *) x));
}
static void *_p_Gyoto__Metric__HaywardTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Hayward *) x));
}
static void *_p_Gyoto__Astrobj__TorusTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Torus *) x));
}
static void *_p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::ThickDisk *) x));
}
static void *_p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::UniformSphere *) x));
}
static void *_p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Plasmoid *) x));
}
static void *_p_Gyoto__Spectrum__ThermalBremsstrahlungTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::ThermalBremsstrahlung *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *)(Gyoto::Astrobj::DynamicalDisk *) ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::OscilTorus *) x));
}
static void *_p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::DirectionalDisk *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__PhotonTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Photon *) x));
}
static void *_p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::SchwarzschildHarmonic *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskPL *) x));
}
static void *_p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::SphericalAccretion *) x));
}
static void *_p_Gyoto__Spectrum__PowerLawTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::PowerLaw *) x));
}
static void *_p_Gyoto__Spectrum__BlackBodyTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::BlackBody *) x));
}
static void *_p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Metric::Generic *)(Gyoto::Metric::KerrBL *) ((Gyoto::Metric::ChernSimons *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_Gyoto__Astrobj__JetTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Jet *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Astrobj__PatternDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::PatternDisk *)  ((Gyoto::Astrobj::PatternDiskBB *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__PatternDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::PatternDisk *) (Gyoto::Astrobj::PatternDiskBB *) ((Gyoto::Astrobj::DynamicalDisk *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__PatternDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::PatternDisk *) (Gyoto::Astrobj::PatternDiskBB *)(Gyoto::Astrobj::DynamicalDisk *) ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::FlaredDiskSynchrotron *) x));
}
static void *_p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::OscilTorus *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__WorldlineTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Worldline *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::ThinDiskGridIntensity *) x));
}
static void *_p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::PageThorneDisk *) x));
}
static void *_p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::PolishDoughnut *) x));
}
static void *_p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::SphericalAccretion *) x));
}
static void *_p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::ThickDisk *) x));
}
static void *_p_Gyoto__Metric__ShiftTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Metric::Shift *) x));
}
static void *_p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::XillverReflection *) x));
}
static void *_p_Gyoto__Astrobj__JetTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Astrobj::Jet *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__DynamicalDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::DynamicalDisk *)  ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_Gyoto__Metric__ComplexTo_p_Gyoto__WIP(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::WIP *)  ((Gyoto::Metric::Complex *) x));
}
static void *_p_Gyoto__PhotonTo_p_Gyoto__Worldline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Worldline *)  ((Gyoto::Photon *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Worldline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Worldline *) (Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Worldline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Worldline *) (Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__StarTo_p_Gyoto__Worldline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Worldline *)  ((Gyoto::Astrobj::Star *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__Worldline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Worldline *) (Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Worldline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Worldline *)  ((Gyoto::Astrobj::EquatorialHotSpot *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskIronLine *) x));
}
static void *_p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FixedStar *) x));
}
static void *_p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::DirectionalDisk *) x));
}
static void *_p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::FlaredDiskSynchrotron *) x));
}
static void *_p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::OscilTorus *) x));
}
static void *_p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::XillverReflection *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PatternDisk *) x));
}
static void *_p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::DeformedTorus *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *) ((Gyoto::Astrobj::DynamicalDisk *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *)(Gyoto::Astrobj::DynamicalDisk *) ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskProfile *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskPL *) x));
}
static void *_p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::PolishDoughnut *) x));
}
static void *_p_Gyoto__Astrobj__TorusTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Torus *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *) ((Gyoto::Astrobj::PatternDiskBB *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Plasmoid *) x));
}
static void *_p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::ThickDisk *) x));
}
static void *_p_Gyoto__Astrobj__JetTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Jet *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *)  ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::SphericalAccretion *) x));
}
static void *_p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::UniformSphere *) x));
}
static void *_p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::EquatorialHotSpot *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *)  ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PageThorneDisk *) x));
}
static void *_p_Gyoto__Astrobj__StarTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Star *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FreeStar *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskGridIntensity *) x));
}
static void *_p_Gyoto__Spectrum__ThermalSynchrotronTo_p_Gyoto__Spectrum__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Spectrum::Generic *)  ((Gyoto::Spectrum::ThermalSynchrotron *) x));
}
static void *_p_Gyoto__Spectrum__PowerLawSynchrotronTo_p_Gyoto__Spectrum__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Spectrum::Generic *)  ((Gyoto::Spectrum::PowerLawSynchrotron *) x));
}
static void *_p_Gyoto__Spectrum__ThermalBremsstrahlungTo_p_Gyoto__Spectrum__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Spectrum::Generic *)  ((Gyoto::Spectrum::ThermalBremsstrahlung *) x));
}
static void *_p_Gyoto__Spectrum__BlackBodyTo_p_Gyoto__Spectrum__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Spectrum::Generic *)  ((Gyoto::Spectrum::BlackBody *) x));
}
static void *_p_Gyoto__Spectrum__PowerLawTo_p_Gyoto__Spectrum__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Spectrum::Generic *)  ((Gyoto::Spectrum::PowerLaw *) x));
}
static void *_p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *) (Gyoto::Metric::KerrBL *) ((Gyoto::Metric::ChernSimons *) x));
}
static void *_p_Gyoto__Metric__ComplexTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::Complex *) x));
}
static void *_p_Gyoto__Metric__KerrBLTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::KerrBL *) x));
}
static void *_p_Gyoto__Metric__KerrKSTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::KerrKS *) x));
}
static void *_p_Gyoto__Metric__ShiftTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::Shift *) x));
}
static void *_p_Gyoto__Metric__MinkowskiTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::Minkowski *) x));
}
static void *_p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::RezzollaZhidenko *) x));
}
static void *_p_Gyoto__Metric__HaywardTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::Hayward *) x));
}
static void *_p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__Metric__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::Generic *)  ((Gyoto::Metric::SchwarzschildHarmonic *) x));
}
static void *_p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FixedStar *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskIronLine *) x));
}
static void *_p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::DirectionalDisk *) x));
}
static void *_p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::FlaredDiskSynchrotron *) x));
}
static void *_p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::OscilTorus *) x));
}
static void *_p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::XillverReflection *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PatternDisk *) x));
}
static void *_p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::DeformedTorus *) x));
}
static void *_p_Gyoto__Astrobj__ComplexTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *)  ((Gyoto::Astrobj::Complex *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *) ((Gyoto::Astrobj::DynamicalDisk *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *)(Gyoto::Astrobj::DynamicalDisk *) ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskProfile *) x));
}
static void *_p_Gyoto__Astrobj__Disk3DTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *)  ((Gyoto::Astrobj::Disk3D *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Disk3D *) ((Gyoto::Astrobj::DynamicalDisk3D *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskPL *) x));
}
static void *_p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::PolishDoughnut *) x));
}
static void *_p_Gyoto__Astrobj__TorusTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Torus *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *) ((Gyoto::Astrobj::PatternDiskBB *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Plasmoid *) x));
}
static void *_p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::ThickDisk *) x));
}
static void *_p_Gyoto__Astrobj__JetTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Jet *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *)  ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::SphericalAccretion *) x));
}
static void *_p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::UniformSphere *) x));
}
static void *_p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::EquatorialHotSpot *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *)  ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PageThorneDisk *) x));
}
static void *_p_Gyoto__Astrobj__StarTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Star *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FreeStar *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *) (Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskGridIntensity *) x));
}
static void *_p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Astrobj__UniformSphere(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::UniformSphere *)  ((Gyoto::Astrobj::FreeStar *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__UniformSphere(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::UniformSphere *) (Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__UniformSphere(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::UniformSphere *) (Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__StarTo_p_Gyoto__Astrobj__UniformSphere(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::UniformSphere *)  ((Gyoto::Astrobj::Star *) x));
}
static void *_p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Astrobj__UniformSphere(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::UniformSphere *)  ((Gyoto::Astrobj::FixedStar *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__UniformSphere(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::UniformSphere *) (Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Astrobj__UniformSphere(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::UniformSphere *)  ((Gyoto::Astrobj::Plasmoid *) x));
}
static void *_p_array_size_tTo_p_size_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((size_t *)  ((array_size_t *) x));
}
static void *_p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Uniform *) x));
}
static void *_p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *)(Gyoto::Metric::KerrBL *) ((Gyoto::Metric::ChernSimons *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__Metric__ComplexTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Complex *) x));
}
static void *_p_Gyoto__Metric__KerrBLTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::KerrBL *) x));
}
static void *_p_Gyoto__Metric__GenericTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *)  ((Gyoto::Metric::Generic *) x));
}
static void *_p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *)  ((Gyoto::Spectrometer::Generic *) x));
}
static void *_p_Gyoto__Metric__KerrKSTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::KerrKS *) x));
}
static void *_p_Gyoto__Metric__ShiftTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Shift *) x));
}
static void *_p_Gyoto__Metric__MinkowskiTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Minkowski *) x));
}
static void *_p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::RezzollaZhidenko *) x));
}
static void *_p_Gyoto__Metric__HaywardTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Hayward *) x));
}
static void *_p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::SchwarzschildHarmonic *) x));
}
static void *_p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Metric__KerrBL(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Metric::KerrBL *)  ((Gyoto::Metric::ChernSimons *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *) (Gyoto::Astrobj::PatternDisk *) ((Gyoto::Astrobj::PatternDiskBB *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::ThinDiskIronLine *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::ThinDiskGridIntensity *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::ThinDiskProfile *) x));
}
static void *_p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::PageThorneDisk *) x));
}
static void *_p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::EquatorialHotSpot *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::ThinDiskPL *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::PatternDisk *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *) (Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *) ((Gyoto::Astrobj::DynamicalDisk *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *) (Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *)(Gyoto::Astrobj::DynamicalDisk *) ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::DirectionalDisk *) x));
}
static void *_p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Astrobj__ThinDisk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::ThinDisk *)  ((Gyoto::Astrobj::XillverReflection *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__Star(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Star *)  ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__Star(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Star *)  ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__Star(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Star *)  ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__PatternDiskBB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::PatternDiskBB *)  ((Gyoto::Astrobj::DynamicalDisk *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__PatternDiskBB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::PatternDiskBB *) (Gyoto::Astrobj::DynamicalDisk *) ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_array_doubleTo_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double *)  ((array_double *) x));
}
static void *_p_p_array_doubleTo_p_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double **)  ((array_double **) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__Astrobj__Disk3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Disk3D *)  ((Gyoto::Astrobj::DynamicalDisk3D *) x));
}
static void *_p_Gyoto__ScreenTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Screen *) x));
}
static void *_p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::RezzollaZhidenko *) x));
}
static void *_p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FreeStar *) x));
}
static void *_p_Gyoto__Astrobj__StarTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Star *) x));
}
static void *_p_Gyoto__Metric__KerrKSTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::KerrKS *) x));
}
static void *_p_Gyoto__Metric__KerrBLTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::KerrBL *) x));
}
static void *_p_Gyoto__Astrobj__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Astrobj::Generic *) x));
}
static void *_p_Gyoto__Metric__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Metric::Generic *) x));
}
static void *_p_Gyoto__Spectrum__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Spectrum::Generic *) x));
}
static void *_p_Gyoto__Spectrometer__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Spectrometer::Generic *) x));
}
static void *_p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FixedStar *) x));
}
static void *_p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::FlaredDiskSynchrotron *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskGridIntensity *) x));
}
static void *_p_Gyoto__Spectrum__ThermalSynchrotronTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::ThermalSynchrotron *) x));
}
static void *_p_Gyoto__Spectrum__PowerLawSynchrotronTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::PowerLawSynchrotron *) x));
}
static void *_p_Gyoto__Spectrometer__UniformTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Uniform *) x));
}
static void *_p_Gyoto__Astrobj__PropertiesTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Astrobj::Properties *) x));
}
static void *_p_Gyoto__SceneryTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Scenery *) x));
}
static void *_p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::EquatorialHotSpot *) x));
}
static void *_p_Gyoto__Metric__MinkowskiTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Minkowski *) x));
}
static void *_p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::XillverReflection *) x));
}
static void *_p_Gyoto__Metric__ShiftTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Shift *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PatternDisk *) x));
}
static void *_p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::DeformedTorus *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *) ((Gyoto::Astrobj::DynamicalDisk *) x));
}
static void *_p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *) ((Gyoto::Astrobj::PatternDiskBB *) x));
}
static void *_p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::PageThorneDisk *) x));
}
static void *_p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::PolishDoughnut *) x));
}
static void *_p_Gyoto__Astrobj__ComplexTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Complex *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskProfile *) x));
}
static void *_p_Gyoto__Metric__ComplexTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Complex *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Disk3D *) ((Gyoto::Astrobj::DynamicalDisk3D *) x));
}
static void *_p_Gyoto__Astrobj__Disk3DTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Disk3D *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskIronLine *) x));
}
static void *_p_Gyoto__Metric__HaywardTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::Hayward *) x));
}
static void *_p_Gyoto__Astrobj__TorusTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Torus *) x));
}
static void *_p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::ThickDisk *) x));
}
static void *_p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::UniformSphere *) x));
}
static void *_p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Plasmoid *) x));
}
static void *_p_Gyoto__Spectrum__ThermalBremsstrahlungTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::ThermalBremsstrahlung *) x));
}
static void *_p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *)(Gyoto::Astrobj::PatternDisk *)(Gyoto::Astrobj::PatternDiskBB *)(Gyoto::Astrobj::DynamicalDisk *) ((Gyoto::Astrobj::DynamicalDiskBolometric *) x));
}
static void *_p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::OscilTorus *) x));
}
static void *_p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::DirectionalDisk *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__PhotonTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Photon *) x));
}
static void *_p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *) ((Gyoto::Metric::SchwarzschildHarmonic *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *)(Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::ThinDisk *) ((Gyoto::Astrobj::ThinDiskPL *) x));
}
static void *_p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::SphericalAccretion *) x));
}
static void *_p_Gyoto__Spectrum__PowerLawTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::PowerLaw *) x));
}
static void *_p_Gyoto__Spectrum__BlackBodyTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrum::Generic *) ((Gyoto::Spectrum::BlackBody *) x));
}
static void *_p_Gyoto__Units__UnitTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Units::Unit *) x));
}
static void *_p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Metric::Generic *)(Gyoto::Metric::KerrBL *) ((Gyoto::Metric::ChernSimons *) x));
}
static void *_p_Gyoto__Units__ConverterTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Units::Converter *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_Gyoto__Astrobj__JetTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *)(Gyoto::Astrobj::Standard *) ((Gyoto::Astrobj::Jet *) x));
}
static void *_p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *) (Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FixedStar *) x));
}
static void *_p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::FlaredDiskSynchrotron *) x));
}
static void *_p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::OscilTorus *) x));
}
static void *_p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::DeformedTorus *) x));
}
static void *_p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::PolishDoughnut *) x));
}
static void *_p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *) (Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Plasmoid *) x));
}
static void *_p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *) (Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::Blob *) x));
}
static void *_p_Gyoto__Astrobj__TorusTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::Torus *) x));
}
static void *_p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::ThickDisk *) x));
}
static void *_p_Gyoto__Astrobj__JetTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::Jet *) x));
}
static void *_p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *) (Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::StarTrace *) x));
}
static void *_p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::SphericalAccretion *) x));
}
static void *_p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *)  ((Gyoto::Astrobj::UniformSphere *) x));
}
static void *_p_Gyoto__Astrobj__StarTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *) (Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::Star *) x));
}
static void *_p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *) (Gyoto::Astrobj::UniformSphere *)(Gyoto::Astrobj::Star *) ((Gyoto::Astrobj::InflateStar *) x));
}
static void *_p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Astrobj__Standard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Standard *) (Gyoto::Astrobj::UniformSphere *) ((Gyoto::Astrobj::FreeStar *) x));
}
static swig_type_info _swigt__p_Eigen__Matrix4d = {"_p_Eigen__Matrix4d", "Eigen::Matrix4d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Blob = {"_p_Gyoto__Astrobj__Blob", "Gyoto::Astrobj::Blob *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Complex = {"_p_Gyoto__Astrobj__Complex", "Gyoto::Astrobj::Complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__DeformedTorus = {"_p_Gyoto__Astrobj__DeformedTorus", "Gyoto::Astrobj::DeformedTorus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__DirectionalDisk = {"_p_Gyoto__Astrobj__DirectionalDisk", "Gyoto::Astrobj::DirectionalDisk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Disk3D = {"_p_Gyoto__Astrobj__Disk3D", "Gyoto::Astrobj::Disk3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__DynamicalDisk = {"_p_Gyoto__Astrobj__DynamicalDisk", "Gyoto::Astrobj::DynamicalDisk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__DynamicalDisk3D = {"_p_Gyoto__Astrobj__DynamicalDisk3D", "Gyoto::Astrobj::DynamicalDisk3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric = {"_p_Gyoto__Astrobj__DynamicalDiskBolometric", "Gyoto::Astrobj::DynamicalDiskBolometric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__EquatorialHotSpot = {"_p_Gyoto__Astrobj__EquatorialHotSpot", "Gyoto::Astrobj::EquatorialHotSpot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__FixedStar = {"_p_Gyoto__Astrobj__FixedStar", "Gyoto::Astrobj::FixedStar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron = {"_p_Gyoto__Astrobj__FlaredDiskSynchrotron", "Gyoto::Astrobj::FlaredDiskSynchrotron *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__FreeStar = {"_p_Gyoto__Astrobj__FreeStar", "Gyoto::Astrobj::FreeStar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Generic = {"_p_Gyoto__Astrobj__Generic", "Gyoto::Astrobj::Generic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__InflateStar = {"_p_Gyoto__Astrobj__InflateStar", "Gyoto::Astrobj::InflateStar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Jet = {"_p_Gyoto__Astrobj__Jet", "Gyoto::Astrobj::Jet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__OscilTorus = {"_p_Gyoto__Astrobj__OscilTorus", "Gyoto::Astrobj::OscilTorus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__PageThorneDisk = {"_p_Gyoto__Astrobj__PageThorneDisk", "Gyoto::Astrobj::PageThorneDisk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__PatternDisk = {"_p_Gyoto__Astrobj__PatternDisk", "Gyoto::Astrobj::PatternDisk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__PatternDiskBB = {"_p_Gyoto__Astrobj__PatternDiskBB", "Gyoto::Astrobj::PatternDiskBB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Plasmoid = {"_p_Gyoto__Astrobj__Plasmoid", "Gyoto::Astrobj::Plasmoid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__PolishDoughnut = {"_p_Gyoto__Astrobj__PolishDoughnut", "Gyoto::Astrobj::PolishDoughnut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Properties = {"_p_Gyoto__Astrobj__Properties", "Gyoto::Astrobj::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__SphericalAccretion = {"_p_Gyoto__Astrobj__SphericalAccretion", "Gyoto::Astrobj::SphericalAccretion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Standard = {"_p_Gyoto__Astrobj__Standard", "Gyoto::Astrobj::Standard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Star = {"_p_Gyoto__Astrobj__Star", "Gyoto::Astrobj::Star *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__StarTrace = {"_p_Gyoto__Astrobj__StarTrace", "Gyoto::Astrobj::StarTrace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__ThickDisk = {"_p_Gyoto__Astrobj__ThickDisk", "Gyoto::Astrobj::ThickDisk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__ThinDisk = {"_p_Gyoto__Astrobj__ThinDisk", "Gyoto::Astrobj::ThinDisk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity = {"_p_Gyoto__Astrobj__ThinDiskGridIntensity", "Gyoto::Astrobj::ThinDiskGridIntensity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__ThinDiskIronLine = {"_p_Gyoto__Astrobj__ThinDiskIronLine", "Gyoto::Astrobj::ThinDiskIronLine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__ThinDiskPL = {"_p_Gyoto__Astrobj__ThinDiskPL", "Gyoto::Astrobj::ThinDiskPL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__ThinDiskProfile = {"_p_Gyoto__Astrobj__ThinDiskProfile", "Gyoto::Astrobj::ThinDiskProfile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Torus = {"_p_Gyoto__Astrobj__Torus", "Gyoto::Astrobj::Torus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__UniformSphere = {"_p_Gyoto__Astrobj__UniformSphere", "Gyoto::Astrobj::UniformSphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__XillverReflection = {"_p_Gyoto__Astrobj__XillverReflection", "Gyoto::Astrobj::XillverReflection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__FactoryMessenger = {"_p_Gyoto__FactoryMessenger", "Gyoto::FactoryMessenger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__FitsRW = {"_p_Gyoto__FitsRW", "Gyoto::FitsRW *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Functor__Double_constDoubleArray = {"_p_Gyoto__Functor__Double_constDoubleArray", "Gyoto::Functor::Double_constDoubleArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__GridData2D = {"_p_Gyoto__GridData2D", "Gyoto::GridData2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Hook__Listener = {"_p_Gyoto__Hook__Listener", "Gyoto::Hook::Listener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrometer__Complex = {"_p_Gyoto__Spectrometer__Complex", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Gyoto__Hook__Teller = {"_p_Gyoto__Hook__Teller", "Gyoto::Hook::Teller *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrometer__Uniform = {"_p_Gyoto__Spectrometer__Uniform", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrometer__Generic = {"_p_Gyoto__Spectrometer__Generic", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__ChernSimons = {"_p_Gyoto__Metric__ChernSimons", "Gyoto::Metric::ChernSimons *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__Complex = {"_p_Gyoto__Metric__Complex", "Gyoto::Metric::Complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__Generic = {"_p_Gyoto__Metric__Generic", "Gyoto::Metric::Generic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__Hayward = {"_p_Gyoto__Metric__Hayward", "Gyoto::Metric::Hayward *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__KerrBL = {"_p_Gyoto__Metric__KerrBL", "Gyoto::Metric::KerrBL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__KerrKS = {"_p_Gyoto__Metric__KerrKS", "Gyoto::Metric::KerrKS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__Minkowski = {"_p_Gyoto__Metric__Minkowski", "Gyoto::Metric::Minkowski *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__RezzollaZhidenko = {"_p_Gyoto__Metric__RezzollaZhidenko", "Gyoto::Metric::RezzollaZhidenko *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__SchwarzschildHarmonic = {"_p_Gyoto__Metric__SchwarzschildHarmonic", "Gyoto::Metric::SchwarzschildHarmonic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__Shift = {"_p_Gyoto__Metric__Shift", "Gyoto::Metric::Shift *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Object = {"_p_Gyoto__Object", "Gyoto::Object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Scenery = {"_p_Gyoto__Scenery", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Gyoto__Screen = {"_p_Gyoto__Screen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Gyoto__Photon = {"_p_Gyoto__Photon", "Gyoto::Photon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Property = {"_p_Gyoto__Property", "Gyoto::Property *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__SmartPointee = {"_p_Gyoto__SmartPointee", "Gyoto::SmartPointee *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Units__Unit = {"_p_Gyoto__Units__Unit", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Gyoto__Units__Converter = {"_p_Gyoto__Units__Converter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrum__BlackBody = {"_p_Gyoto__Spectrum__BlackBody", "Gyoto::Spectrum::BlackBody *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrum__Generic = {"_p_Gyoto__Spectrum__Generic", "Gyoto::Spectrum::Generic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrum__PowerLaw = {"_p_Gyoto__Spectrum__PowerLaw", "Gyoto::Spectrum::PowerLaw *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrum__PowerLawSynchrotron = {"_p_Gyoto__Spectrum__PowerLawSynchrotron", "Gyoto::Spectrum::PowerLawSynchrotron *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrum__ThermalBremsstrahlung = {"_p_Gyoto__Spectrum__ThermalBremsstrahlung", "Gyoto::Spectrum::ThermalBremsstrahlung *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrum__ThermalSynchrotron = {"_p_Gyoto__Spectrum__ThermalSynchrotron", "Gyoto::Spectrum::ThermalSynchrotron *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__WIP = {"_p_Gyoto__WIP", "Gyoto::WIP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Worldline = {"_p_Gyoto__Worldline", "Gyoto::Worldline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handler_t = {"_p_Handler_t", "Handler_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Subcontractor_t = {"_p_Subcontractor_t", "Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_array_double = {"_p_array_double", "array_double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_array_size_t = {"_p_array_size_t", "array_size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_array_unsigned_long = {"_p_array_unsigned_long", "array_unsigned_long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t", "Gyoto::SmartPointer< Gyoto::Astrobj::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)|Gyoto::Astrobj::Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t", "Gyoto::Metric::Subcontractor_t *|Gyoto::SmartPointer< Gyoto::Metric::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t", "Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)|Gyoto::Spectrometer::Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t", "Gyoto::SmartPointer< Gyoto::Spectrum::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)|Gyoto::Spectrum::Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_astrobj_t = {"_p_get_astrobj_t", "get_astrobj_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_bool_t = {"_p_get_bool_t", "get_bool_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_double_t = {"_p_get_double_t", "get_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_double_unit_t = {"_p_get_double_unit_t", "get_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_fname_t = {"_p_get_fname_t", "get_fname_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_long_t = {"_p_get_long_t", "get_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_metric_t = {"_p_get_metric_t", "get_metric_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_screen_t = {"_p_get_screen_t", "get_screen_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_size_t_t = {"_p_get_size_t_t", "get_size_t_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_spectrometer_t = {"_p_get_spectrometer_t", "get_spectrometer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_spectrum_t = {"_p_get_spectrum_t", "get_spectrum_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_string_t = {"_p_get_string_t", "get_string_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_unsigned_long_t = {"_p_get_unsigned_long_t", "get_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_vector_double_t = {"_p_get_vector_double_t", "get_vector_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_vector_double_unit_t = {"_p_get_vector_double_unit_t", "get_vector_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_vector_unsigned_long_t = {"_p_get_vector_unsigned_long_t", "get_vector_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_myCplxIdxExcept = {"_p_myCplxIdxExcept", "myCplxIdxExcept *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_array_double = {"_p_p_array_double", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_set_astrobj_t = {"_p_set_astrobj_t", "set_astrobj_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_bool_t = {"_p_set_bool_t", "set_bool_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_double_t = {"_p_set_double_t", "set_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_double_unit_t = {"_p_set_double_unit_t", "set_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_fname_t = {"_p_set_fname_t", "set_fname_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_long_t = {"_p_set_long_t", "set_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_metric_t = {"_p_set_metric_t", "set_metric_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_screen_t = {"_p_set_screen_t", "set_screen_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_size_t_t = {"_p_set_size_t_t", "set_size_t_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_spectrometer_t = {"_p_set_spectrometer_t", "set_spectrometer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_spectrum_t = {"_p_set_spectrum_t", "set_spectrum_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_string_t = {"_p_set_string_t", "set_string_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_unsigned_long_t = {"_p_set_unsigned_long_t", "set_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_vector_double_t = {"_p_set_vector_double_t", "set_vector_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_vector_double_unit_t = {"_p_set_vector_double_unit_t", "set_vector_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_vector_unsigned_long_t = {"_p_set_vector_unsigned_long_t", "set_vector_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|Gyoto::state_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "Gyoto::CoordKind_t *|unsigned int *|Gyoto::Verbosity_t *|Gyoto::Quantity_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Eigen__Matrix4d,
  &_swigt__p_Gyoto__Astrobj__Blob,
  &_swigt__p_Gyoto__Astrobj__Complex,
  &_swigt__p_Gyoto__Astrobj__DeformedTorus,
  &_swigt__p_Gyoto__Astrobj__DirectionalDisk,
  &_swigt__p_Gyoto__Astrobj__Disk3D,
  &_swigt__p_Gyoto__Astrobj__DynamicalDisk,
  &_swigt__p_Gyoto__Astrobj__DynamicalDisk3D,
  &_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric,
  &_swigt__p_Gyoto__Astrobj__EquatorialHotSpot,
  &_swigt__p_Gyoto__Astrobj__FixedStar,
  &_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron,
  &_swigt__p_Gyoto__Astrobj__FreeStar,
  &_swigt__p_Gyoto__Astrobj__Generic,
  &_swigt__p_Gyoto__Astrobj__InflateStar,
  &_swigt__p_Gyoto__Astrobj__Jet,
  &_swigt__p_Gyoto__Astrobj__OscilTorus,
  &_swigt__p_Gyoto__Astrobj__PageThorneDisk,
  &_swigt__p_Gyoto__Astrobj__PatternDisk,
  &_swigt__p_Gyoto__Astrobj__PatternDiskBB,
  &_swigt__p_Gyoto__Astrobj__Plasmoid,
  &_swigt__p_Gyoto__Astrobj__PolishDoughnut,
  &_swigt__p_Gyoto__Astrobj__Properties,
  &_swigt__p_Gyoto__Astrobj__SphericalAccretion,
  &_swigt__p_Gyoto__Astrobj__Standard,
  &_swigt__p_Gyoto__Astrobj__Star,
  &_swigt__p_Gyoto__Astrobj__StarTrace,
  &_swigt__p_Gyoto__Astrobj__ThickDisk,
  &_swigt__p_Gyoto__Astrobj__ThinDisk,
  &_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity,
  &_swigt__p_Gyoto__Astrobj__ThinDiskIronLine,
  &_swigt__p_Gyoto__Astrobj__ThinDiskPL,
  &_swigt__p_Gyoto__Astrobj__ThinDiskProfile,
  &_swigt__p_Gyoto__Astrobj__Torus,
  &_swigt__p_Gyoto__Astrobj__UniformSphere,
  &_swigt__p_Gyoto__Astrobj__XillverReflection,
  &_swigt__p_Gyoto__FactoryMessenger,
  &_swigt__p_Gyoto__FitsRW,
  &_swigt__p_Gyoto__Functor__Double_constDoubleArray,
  &_swigt__p_Gyoto__GridData2D,
  &_swigt__p_Gyoto__Hook__Listener,
  &_swigt__p_Gyoto__Hook__Teller,
  &_swigt__p_Gyoto__Metric__ChernSimons,
  &_swigt__p_Gyoto__Metric__Complex,
  &_swigt__p_Gyoto__Metric__Generic,
  &_swigt__p_Gyoto__Metric__Hayward,
  &_swigt__p_Gyoto__Metric__KerrBL,
  &_swigt__p_Gyoto__Metric__KerrKS,
  &_swigt__p_Gyoto__Metric__Minkowski,
  &_swigt__p_Gyoto__Metric__RezzollaZhidenko,
  &_swigt__p_Gyoto__Metric__SchwarzschildHarmonic,
  &_swigt__p_Gyoto__Metric__Shift,
  &_swigt__p_Gyoto__Object,
  &_swigt__p_Gyoto__Photon,
  &_swigt__p_Gyoto__Property,
  &_swigt__p_Gyoto__Scenery,
  &_swigt__p_Gyoto__Screen,
  &_swigt__p_Gyoto__SmartPointee,
  &_swigt__p_Gyoto__Spectrometer__Complex,
  &_swigt__p_Gyoto__Spectrometer__Generic,
  &_swigt__p_Gyoto__Spectrometer__Uniform,
  &_swigt__p_Gyoto__Spectrum__BlackBody,
  &_swigt__p_Gyoto__Spectrum__Generic,
  &_swigt__p_Gyoto__Spectrum__PowerLaw,
  &_swigt__p_Gyoto__Spectrum__PowerLawSynchrotron,
  &_swigt__p_Gyoto__Spectrum__ThermalBremsstrahlung,
  &_swigt__p_Gyoto__Spectrum__ThermalSynchrotron,
  &_swigt__p_Gyoto__Units__Converter,
  &_swigt__p_Gyoto__Units__Unit,
  &_swigt__p_Gyoto__WIP,
  &_swigt__p_Gyoto__Worldline,
  &_swigt__p_Handler_t,
  &_swigt__p_Subcontractor_t,
  &_swigt__p_allocator_type,
  &_swigt__p_array_double,
  &_swigt__p_array_size_t,
  &_swigt__p_array_unsigned_long,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t,
  &_swigt__p_get_astrobj_t,
  &_swigt__p_get_bool_t,
  &_swigt__p_get_double_t,
  &_swigt__p_get_double_unit_t,
  &_swigt__p_get_fname_t,
  &_swigt__p_get_long_t,
  &_swigt__p_get_metric_t,
  &_swigt__p_get_screen_t,
  &_swigt__p_get_size_t_t,
  &_swigt__p_get_spectrometer_t,
  &_swigt__p_get_spectrum_t,
  &_swigt__p_get_string_t,
  &_swigt__p_get_unsigned_long_t,
  &_swigt__p_get_vector_double_t,
  &_swigt__p_get_vector_double_unit_t,
  &_swigt__p_get_vector_unsigned_long_t,
  &_swigt__p_myCplxIdxExcept,
  &_swigt__p_p_array_double,
  &_swigt__p_p_double,
  &_swigt__p_set_astrobj_t,
  &_swigt__p_set_bool_t,
  &_swigt__p_set_double_t,
  &_swigt__p_set_double_unit_t,
  &_swigt__p_set_fname_t,
  &_swigt__p_set_long_t,
  &_swigt__p_set_metric_t,
  &_swigt__p_set_screen_t,
  &_swigt__p_set_size_t_t,
  &_swigt__p_set_spectrometer_t,
  &_swigt__p_set_spectrum_t,
  &_swigt__p_set_string_t,
  &_swigt__p_set_unsigned_long_t,
  &_swigt__p_set_vector_double_t,
  &_swigt__p_set_vector_double_unit_t,
  &_swigt__p_set_vector_unsigned_long_t,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_unsigned_int,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Eigen__Matrix4d[] = {  {&_swigt__p_Eigen__Matrix4d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Blob[] = {  {&_swigt__p_Gyoto__Astrobj__Blob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Complex[] = {  {&_swigt__p_Gyoto__Astrobj__Complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__DeformedTorus[] = {  {&_swigt__p_Gyoto__Astrobj__DeformedTorus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__DirectionalDisk[] = {  {&_swigt__p_Gyoto__Astrobj__DirectionalDisk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Disk3D[] = {  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk3D, _p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__Astrobj__Disk3D, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Disk3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__DynamicalDisk[] = {  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__DynamicalDisk, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__DynamicalDisk3D[] = {  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__DynamicalDiskBolometric[] = {  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__EquatorialHotSpot[] = {  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__FixedStar[] = {  {&_swigt__p_Gyoto__Astrobj__FixedStar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__FlaredDiskSynchrotron[] = {  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__FreeStar[] = {  {&_swigt__p_Gyoto__Astrobj__FreeStar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Generic[] = {  {&_swigt__p_Gyoto__Astrobj__FreeStar, _p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Generic, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, _p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, _p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FixedStar, _p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, _p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__XillverReflection, _p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDisk, _p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DeformedTorus, _p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, _p_Gyoto__Astrobj__StarTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, _p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDiskBB, _p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PageThorneDisk, _p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PolishDoughnut, _p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskProfile, _p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Complex, _p_Gyoto__Astrobj__ComplexTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk3D, _p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskIronLine, _p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThickDisk, _p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__UniformSphere, _p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Plasmoid, _p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Torus, _p_Gyoto__Astrobj__TorusTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__OscilTorus, _p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DirectionalDisk, _p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__SphericalAccretion, _p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskPL, _p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Disk3D, _p_Gyoto__Astrobj__Disk3DTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Jet, _p_Gyoto__Astrobj__JetTo_p_Gyoto__Astrobj__Generic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__InflateStar[] = {  {&_swigt__p_Gyoto__Astrobj__InflateStar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Jet[] = {  {&_swigt__p_Gyoto__Astrobj__Jet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__OscilTorus[] = {  {&_swigt__p_Gyoto__Astrobj__OscilTorus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__PageThorneDisk[] = {  {&_swigt__p_Gyoto__Astrobj__PageThorneDisk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__PatternDisk[] = {  {&_swigt__p_Gyoto__Astrobj__PatternDiskBB, _p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Astrobj__PatternDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDisk, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, _p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__PatternDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__PatternDisk, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__PatternDiskBB[] = {  {&_swigt__p_Gyoto__Astrobj__PatternDiskBB, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, _p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__PatternDiskBB, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__PatternDiskBB, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Plasmoid[] = {  {&_swigt__p_Gyoto__Astrobj__Plasmoid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__PolishDoughnut[] = {  {&_swigt__p_Gyoto__Astrobj__PolishDoughnut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Properties[] = {  {&_swigt__p_Gyoto__Astrobj__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__SphericalAccretion[] = {  {&_swigt__p_Gyoto__Astrobj__SphericalAccretion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Standard[] = {  {&_swigt__p_Gyoto__Astrobj__FixedStar, _p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Jet, _p_Gyoto__Astrobj__JetTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, _p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__OscilTorus, _p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DeformedTorus, _p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PolishDoughnut, _p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Plasmoid, _p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThickDisk, _p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Torus, _p_Gyoto__Astrobj__TorusTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, _p_Gyoto__Astrobj__StarTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__SphericalAccretion, _p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__UniformSphere, _p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__Standard, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FreeStar, _p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Astrobj__Standard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Star[] = {  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__Star, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__Star, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__Star, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__StarTrace[] = {  {&_swigt__p_Gyoto__Astrobj__StarTrace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__ThickDisk[] = {  {&_swigt__p_Gyoto__Astrobj__ThickDisk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__ThinDisk[] = {  {&_swigt__p_Gyoto__Astrobj__ThinDisk, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDiskBB, _p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskIronLine, _p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, _p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskProfile, _p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PageThorneDisk, _p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, _p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, _p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskPL, _p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDisk, _p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DirectionalDisk, _p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},  {&_swigt__p_Gyoto__Astrobj__XillverReflection, _p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Astrobj__ThinDisk, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__ThinDiskGridIntensity[] = {  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__ThinDiskIronLine[] = {  {&_swigt__p_Gyoto__Astrobj__ThinDiskIronLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__ThinDiskPL[] = {  {&_swigt__p_Gyoto__Astrobj__ThinDiskPL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__ThinDiskProfile[] = {  {&_swigt__p_Gyoto__Astrobj__ThinDiskProfile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Torus[] = {  {&_swigt__p_Gyoto__Astrobj__Torus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__UniformSphere[] = {  {&_swigt__p_Gyoto__Astrobj__FreeStar, _p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Astrobj__UniformSphere, 0, 0},  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Astrobj__UniformSphere, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Astrobj__UniformSphere, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FixedStar, _p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Astrobj__UniformSphere, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Plasmoid, _p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Astrobj__UniformSphere, 0, 0},  {&_swigt__p_Gyoto__Astrobj__UniformSphere, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, _p_Gyoto__Astrobj__StarTo_p_Gyoto__Astrobj__UniformSphere, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__Astrobj__UniformSphere, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__XillverReflection[] = {  {&_swigt__p_Gyoto__Astrobj__XillverReflection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__FactoryMessenger[] = {  {&_swigt__p_Gyoto__FactoryMessenger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__FitsRW[] = {  {&_swigt__p_Gyoto__FitsRW, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Plasmoid, _p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__FitsRW, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Functor__Double_constDoubleArray[] = {  {&_swigt__p_Gyoto__Astrobj__DirectionalDisk, _p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskIronLine, _p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FixedStar, _p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Jet, _p_Gyoto__Astrobj__JetTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, _p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__XillverReflection, _p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__OscilTorus, _p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DeformedTorus, _p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDisk, _p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, _p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskProfile, _p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Functor__Double_constDoubleArray, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskPL, _p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PolishDoughnut, _p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDiskBB, _p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Plasmoid, _p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Torus, _p_Gyoto__Astrobj__TorusTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThickDisk, _p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, _p_Gyoto__Astrobj__StarTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__SphericalAccretion, _p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__UniformSphere, _p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, _p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FreeStar, _p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, _p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PageThorneDisk, _p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__GridData2D[] = {  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, _p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__GridData2D, 0, 0},  {&_swigt__p_Gyoto__GridData2D, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, _p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__GridData2D, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrometer__Complex[] = {{&_swigt__p_Gyoto__Spectrometer__Complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Hook__Listener[] = {  {&_swigt__p_Gyoto__Photon, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Jet, _p_Gyoto__Astrobj__JetTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, _p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__OscilTorus, _p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__XillverReflection, _p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, 0, 0, 0},  {&_swigt__p_Gyoto__Worldline, _p_Gyoto__WorldlineTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PolishDoughnut, _p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThickDisk, _p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, 0, 0, 0},  {&_swigt__p_Gyoto__Hook__Listener, 0, 0, 0},  {&_swigt__p_Gyoto__Metric__Shift, _p_Gyoto__Metric__ShiftTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__StarTrace, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__SphericalAccretion, _p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PageThorneDisk, _p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, _p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrometer__Uniform[] = {{&_swigt__p_Gyoto__Spectrometer__Uniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrometer__Generic[] = {{&_swigt__p_Gyoto__Spectrometer__Generic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Hook__Teller[] = {  {&_swigt__p_Gyoto__Metric__KerrBL, _p_Gyoto__Metric__KerrBLTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__Hayward, _p_Gyoto__Metric__HaywardTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__Minkowski, _p_Gyoto__Metric__MinkowskiTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__RezzollaZhidenko, _p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__Complex, _p_Gyoto__Metric__ComplexTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrKS, _p_Gyoto__Metric__KerrKSTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__Shift, _p_Gyoto__Metric__ShiftTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Hook__Teller, 0, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Uniform, _p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__ChernSimons, _p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__SchwarzschildHarmonic, _p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__Generic, _p_Gyoto__Metric__GenericTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Generic, _p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Hook__Teller, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__ChernSimons[] = {  {&_swigt__p_Gyoto__Metric__ChernSimons, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__Complex[] = {  {&_swigt__p_Gyoto__Metric__Complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__Generic[] = {  {&_swigt__p_Gyoto__Metric__ChernSimons, _p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__Complex, _p_Gyoto__Metric__ComplexTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__Generic, 0, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrBL, _p_Gyoto__Metric__KerrBLTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrKS, _p_Gyoto__Metric__KerrKSTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__Minkowski, _p_Gyoto__Metric__MinkowskiTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__RezzollaZhidenko, _p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__Hayward, _p_Gyoto__Metric__HaywardTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__Shift, _p_Gyoto__Metric__ShiftTo_p_Gyoto__Metric__Generic, 0, 0},  {&_swigt__p_Gyoto__Metric__SchwarzschildHarmonic, _p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__Metric__Generic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__Hayward[] = {  {&_swigt__p_Gyoto__Metric__Hayward, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__KerrBL[] = {  {&_swigt__p_Gyoto__Metric__ChernSimons, _p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Metric__KerrBL, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrBL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__KerrKS[] = {  {&_swigt__p_Gyoto__Metric__KerrKS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__Minkowski[] = {  {&_swigt__p_Gyoto__Metric__Minkowski, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__RezzollaZhidenko[] = {  {&_swigt__p_Gyoto__Metric__RezzollaZhidenko, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__SchwarzschildHarmonic[] = {  {&_swigt__p_Gyoto__Metric__SchwarzschildHarmonic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__Shift[] = {  {&_swigt__p_Gyoto__Metric__Shift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Scenery[] = {{&_swigt__p_Gyoto__Scenery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Screen[] = {{&_swigt__p_Gyoto__Screen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Object[] = {  {&_swigt__p_Gyoto__Metric__RezzollaZhidenko, _p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FreeStar, _p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Photon, _p_Gyoto__PhotonTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Generic, _p_Gyoto__Astrobj__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__Generic, _p_Gyoto__Metric__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrum__Generic, _p_Gyoto__Spectrum__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Generic, _p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, _p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, _p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FixedStar, _p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrum__ThermalSynchrotron, _p_Gyoto__Spectrum__ThermalSynchrotronTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrum__PowerLawSynchrotron, _p_Gyoto__Spectrum__PowerLawSynchrotronTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Uniform, _p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Scenery, _p_Gyoto__SceneryTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, _p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__Minkowski, _p_Gyoto__Metric__MinkowskiTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Screen, _p_Gyoto__ScreenTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__XillverReflection, _p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrKS, _p_Gyoto__Metric__KerrKSTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrBL, _p_Gyoto__Metric__KerrBLTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DeformedTorus, _p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDisk, _p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, _p_Gyoto__Astrobj__StarTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, _p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__Shift, _p_Gyoto__Metric__ShiftTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDiskBB, _p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PageThorneDisk, _p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PolishDoughnut, _p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskProfile, _p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Complex, _p_Gyoto__Astrobj__ComplexTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__Complex, _p_Gyoto__Metric__ComplexTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk3D, _p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskIronLine, _p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__Hayward, _p_Gyoto__Metric__HaywardTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThickDisk, _p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__UniformSphere, _p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Plasmoid, _p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Object, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Torus, _p_Gyoto__Astrobj__TorusTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrum__ThermalBremsstrahlung, _p_Gyoto__Spectrum__ThermalBremsstrahlungTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__OscilTorus, _p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DirectionalDisk, _p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__SchwarzschildHarmonic, _p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__SphericalAccretion, _p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskPL, _p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Disk3D, _p_Gyoto__Astrobj__Disk3DTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrum__BlackBody, _p_Gyoto__Spectrum__BlackBodyTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrum__PowerLaw, _p_Gyoto__Spectrum__PowerLawTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__ChernSimons, _p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Jet, _p_Gyoto__Astrobj__JetTo_p_Gyoto__Object, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Photon[] = {  {&_swigt__p_Gyoto__Photon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Property[] = {  {&_swigt__p_Gyoto__Property, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Units__Unit[] = {{&_swigt__p_Gyoto__Units__Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Units__Converter[] = {{&_swigt__p_Gyoto__Units__Converter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__SmartPointee[] = {  {&_swigt__p_Gyoto__Metric__RezzollaZhidenko, _p_Gyoto__Metric__RezzollaZhidenkoTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FreeStar, _p_Gyoto__Astrobj__FreeStarTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Photon, _p_Gyoto__PhotonTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Generic, _p_Gyoto__Astrobj__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__Generic, _p_Gyoto__Metric__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrum__Generic, _p_Gyoto__Spectrum__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Generic, _p_Gyoto__Spectrometer__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskGridIntensity, _p_Gyoto__Astrobj__ThinDiskGridIntensityTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FlaredDiskSynchrotron, _p_Gyoto__Astrobj__FlaredDiskSynchrotronTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__FixedStar, _p_Gyoto__Astrobj__FixedStarTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrum__ThermalSynchrotron, _p_Gyoto__Spectrum__ThermalSynchrotronTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrum__PowerLawSynchrotron, _p_Gyoto__Spectrum__PowerLawSynchrotronTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Uniform, _p_Gyoto__Spectrometer__UniformTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Properties, _p_Gyoto__Astrobj__PropertiesTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Scenery, _p_Gyoto__SceneryTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, _p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__Minkowski, _p_Gyoto__Metric__MinkowskiTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Screen, _p_Gyoto__ScreenTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Units__Unit, _p_Gyoto__Units__UnitTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__XillverReflection, _p_Gyoto__Astrobj__XillverReflectionTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrKS, _p_Gyoto__Metric__KerrKSTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__KerrBL, _p_Gyoto__Metric__KerrBLTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DeformedTorus, _p_Gyoto__Astrobj__DeformedTorusTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDisk, _p_Gyoto__Astrobj__PatternDiskTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, _p_Gyoto__Astrobj__StarTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk, _p_Gyoto__Astrobj__DynamicalDiskTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__Shift, _p_Gyoto__Metric__ShiftTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PatternDiskBB, _p_Gyoto__Astrobj__PatternDiskBBTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PageThorneDisk, _p_Gyoto__Astrobj__PageThorneDiskTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__PolishDoughnut, _p_Gyoto__Astrobj__PolishDoughnutTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskProfile, _p_Gyoto__Astrobj__ThinDiskProfileTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Complex, _p_Gyoto__Astrobj__ComplexTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__Complex, _p_Gyoto__Metric__ComplexTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDisk3D, _p_Gyoto__Astrobj__DynamicalDisk3DTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskIronLine, _p_Gyoto__Astrobj__ThinDiskIronLineTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__Hayward, _p_Gyoto__Metric__HaywardTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThickDisk, _p_Gyoto__Astrobj__ThickDiskTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__UniformSphere, _p_Gyoto__Astrobj__UniformSphereTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Plasmoid, _p_Gyoto__Astrobj__PlasmoidTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Torus, _p_Gyoto__Astrobj__TorusTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrum__ThermalBremsstrahlung, _p_Gyoto__Spectrum__ThermalBremsstrahlungTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DynamicalDiskBolometric, _p_Gyoto__Astrobj__DynamicalDiskBolometricTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__OscilTorus, _p_Gyoto__Astrobj__OscilTorusTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__DirectionalDisk, _p_Gyoto__Astrobj__DirectionalDiskTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__SchwarzschildHarmonic, _p_Gyoto__Metric__SchwarzschildHarmonicTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__SphericalAccretion, _p_Gyoto__Astrobj__SphericalAccretionTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDiskPL, _p_Gyoto__Astrobj__ThinDiskPLTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Disk3D, _p_Gyoto__Astrobj__Disk3DTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrum__BlackBody, _p_Gyoto__Spectrum__BlackBodyTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrum__PowerLaw, _p_Gyoto__Spectrum__PowerLawTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__SmartPointee, 0, 0, 0},  {&_swigt__p_Gyoto__Metric__ChernSimons, _p_Gyoto__Metric__ChernSimonsTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Units__Converter, _p_Gyoto__Units__ConverterTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Jet, _p_Gyoto__Astrobj__JetTo_p_Gyoto__SmartPointee, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrum__BlackBody[] = {  {&_swigt__p_Gyoto__Spectrum__BlackBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrum__Generic[] = {  {&_swigt__p_Gyoto__Spectrum__ThermalSynchrotron, _p_Gyoto__Spectrum__ThermalSynchrotronTo_p_Gyoto__Spectrum__Generic, 0, 0},  {&_swigt__p_Gyoto__Spectrum__PowerLawSynchrotron, _p_Gyoto__Spectrum__PowerLawSynchrotronTo_p_Gyoto__Spectrum__Generic, 0, 0},  {&_swigt__p_Gyoto__Spectrum__ThermalBremsstrahlung, _p_Gyoto__Spectrum__ThermalBremsstrahlungTo_p_Gyoto__Spectrum__Generic, 0, 0},  {&_swigt__p_Gyoto__Spectrum__Generic, 0, 0, 0},  {&_swigt__p_Gyoto__Spectrum__BlackBody, _p_Gyoto__Spectrum__BlackBodyTo_p_Gyoto__Spectrum__Generic, 0, 0},  {&_swigt__p_Gyoto__Spectrum__PowerLaw, _p_Gyoto__Spectrum__PowerLawTo_p_Gyoto__Spectrum__Generic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrum__PowerLaw[] = {  {&_swigt__p_Gyoto__Spectrum__PowerLaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrum__PowerLawSynchrotron[] = {  {&_swigt__p_Gyoto__Spectrum__PowerLawSynchrotron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrum__ThermalBremsstrahlung[] = {  {&_swigt__p_Gyoto__Spectrum__ThermalBremsstrahlung, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrum__ThermalSynchrotron[] = {  {&_swigt__p_Gyoto__Spectrum__ThermalSynchrotron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__WIP[] = {  {&_swigt__p_Gyoto__WIP, 0, 0, 0},  {&_swigt__p_Gyoto__Metric__Complex, _p_Gyoto__Metric__ComplexTo_p_Gyoto__WIP, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Worldline[] = {  {&_swigt__p_Gyoto__Astrobj__StarTrace, _p_Gyoto__Astrobj__StarTraceTo_p_Gyoto__Worldline, 0, 0},  {&_swigt__p_Gyoto__Astrobj__InflateStar, _p_Gyoto__Astrobj__InflateStarTo_p_Gyoto__Worldline, 0, 0},  {&_swigt__p_Gyoto__Photon, _p_Gyoto__PhotonTo_p_Gyoto__Worldline, 0, 0},  {&_swigt__p_Gyoto__Worldline, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__EquatorialHotSpot, _p_Gyoto__Astrobj__EquatorialHotSpotTo_p_Gyoto__Worldline, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Star, _p_Gyoto__Astrobj__StarTo_p_Gyoto__Worldline, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Blob, _p_Gyoto__Astrobj__BlobTo_p_Gyoto__Worldline, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handler_t[] = {  {&_swigt__p_Handler_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Subcontractor_t[] = {  {&_swigt__p_Subcontractor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_array_double[] = {  {&_swigt__p_array_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_array_size_t[] = {  {&_swigt__p_array_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_array_unsigned_long[] = {  {&_swigt__p_array_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},  {&_swigt__p_array_double, _p_array_doubleTo_p_double, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_astrobj_t[] = {  {&_swigt__p_get_astrobj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_bool_t[] = {  {&_swigt__p_get_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_double_t[] = {  {&_swigt__p_get_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_double_unit_t[] = {  {&_swigt__p_get_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_fname_t[] = {  {&_swigt__p_get_fname_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_long_t[] = {  {&_swigt__p_get_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_metric_t[] = {  {&_swigt__p_get_metric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_screen_t[] = {  {&_swigt__p_get_screen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_size_t_t[] = {  {&_swigt__p_get_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_spectrometer_t[] = {  {&_swigt__p_get_spectrometer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_spectrum_t[] = {  {&_swigt__p_get_spectrum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_string_t[] = {  {&_swigt__p_get_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_unsigned_long_t[] = {  {&_swigt__p_get_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_vector_double_t[] = {  {&_swigt__p_get_vector_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_vector_double_unit_t[] = {  {&_swigt__p_get_vector_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_vector_unsigned_long_t[] = {  {&_swigt__p_get_vector_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_myCplxIdxExcept[] = {  {&_swigt__p_myCplxIdxExcept, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_array_double[] = {{&_swigt__p_p_array_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},  {&_swigt__p_p_array_double, _p_p_array_doubleTo_p_p_double, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_astrobj_t[] = {  {&_swigt__p_set_astrobj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_bool_t[] = {  {&_swigt__p_set_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_double_t[] = {  {&_swigt__p_set_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_double_unit_t[] = {  {&_swigt__p_set_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_fname_t[] = {  {&_swigt__p_set_fname_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_long_t[] = {  {&_swigt__p_set_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_metric_t[] = {  {&_swigt__p_set_metric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_screen_t[] = {  {&_swigt__p_set_screen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_size_t_t[] = {  {&_swigt__p_set_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_spectrometer_t[] = {  {&_swigt__p_set_spectrometer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_spectrum_t[] = {  {&_swigt__p_set_spectrum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_string_t[] = {  {&_swigt__p_set_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_unsigned_long_t[] = {  {&_swigt__p_set_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_vector_double_t[] = {  {&_swigt__p_set_vector_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_vector_double_unit_t[] = {  {&_swigt__p_set_vector_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_vector_unsigned_long_t[] = {  {&_swigt__p_set_vector_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},  {&_swigt__p_array_size_t, _p_array_size_tTo_p_size_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Eigen__Matrix4d,
  _swigc__p_Gyoto__Astrobj__Blob,
  _swigc__p_Gyoto__Astrobj__Complex,
  _swigc__p_Gyoto__Astrobj__DeformedTorus,
  _swigc__p_Gyoto__Astrobj__DirectionalDisk,
  _swigc__p_Gyoto__Astrobj__Disk3D,
  _swigc__p_Gyoto__Astrobj__DynamicalDisk,
  _swigc__p_Gyoto__Astrobj__DynamicalDisk3D,
  _swigc__p_Gyoto__Astrobj__DynamicalDiskBolometric,
  _swigc__p_Gyoto__Astrobj__EquatorialHotSpot,
  _swigc__p_Gyoto__Astrobj__FixedStar,
  _swigc__p_Gyoto__Astrobj__FlaredDiskSynchrotron,
  _swigc__p_Gyoto__Astrobj__FreeStar,
  _swigc__p_Gyoto__Astrobj__Generic,
  _swigc__p_Gyoto__Astrobj__InflateStar,
  _swigc__p_Gyoto__Astrobj__Jet,
  _swigc__p_Gyoto__Astrobj__OscilTorus,
  _swigc__p_Gyoto__Astrobj__PageThorneDisk,
  _swigc__p_Gyoto__Astrobj__PatternDisk,
  _swigc__p_Gyoto__Astrobj__PatternDiskBB,
  _swigc__p_Gyoto__Astrobj__Plasmoid,
  _swigc__p_Gyoto__Astrobj__PolishDoughnut,
  _swigc__p_Gyoto__Astrobj__Properties,
  _swigc__p_Gyoto__Astrobj__SphericalAccretion,
  _swigc__p_Gyoto__Astrobj__Standard,
  _swigc__p_Gyoto__Astrobj__Star,
  _swigc__p_Gyoto__Astrobj__StarTrace,
  _swigc__p_Gyoto__Astrobj__ThickDisk,
  _swigc__p_Gyoto__Astrobj__ThinDisk,
  _swigc__p_Gyoto__Astrobj__ThinDiskGridIntensity,
  _swigc__p_Gyoto__Astrobj__ThinDiskIronLine,
  _swigc__p_Gyoto__Astrobj__ThinDiskPL,
  _swigc__p_Gyoto__Astrobj__ThinDiskProfile,
  _swigc__p_Gyoto__Astrobj__Torus,
  _swigc__p_Gyoto__Astrobj__UniformSphere,
  _swigc__p_Gyoto__Astrobj__XillverReflection,
  _swigc__p_Gyoto__FactoryMessenger,
  _swigc__p_Gyoto__FitsRW,
  _swigc__p_Gyoto__Functor__Double_constDoubleArray,
  _swigc__p_Gyoto__GridData2D,
  _swigc__p_Gyoto__Hook__Listener,
  _swigc__p_Gyoto__Hook__Teller,
  _swigc__p_Gyoto__Metric__ChernSimons,
  _swigc__p_Gyoto__Metric__Complex,
  _swigc__p_Gyoto__Metric__Generic,
  _swigc__p_Gyoto__Metric__Hayward,
  _swigc__p_Gyoto__Metric__KerrBL,
  _swigc__p_Gyoto__Metric__KerrKS,
  _swigc__p_Gyoto__Metric__Minkowski,
  _swigc__p_Gyoto__Metric__RezzollaZhidenko,
  _swigc__p_Gyoto__Metric__SchwarzschildHarmonic,
  _swigc__p_Gyoto__Metric__Shift,
  _swigc__p_Gyoto__Object,
  _swigc__p_Gyoto__Photon,
  _swigc__p_Gyoto__Property,
  _swigc__p_Gyoto__Scenery,
  _swigc__p_Gyoto__Screen,
  _swigc__p_Gyoto__SmartPointee,
  _swigc__p_Gyoto__Spectrometer__Complex,
  _swigc__p_Gyoto__Spectrometer__Generic,
  _swigc__p_Gyoto__Spectrometer__Uniform,
  _swigc__p_Gyoto__Spectrum__BlackBody,
  _swigc__p_Gyoto__Spectrum__Generic,
  _swigc__p_Gyoto__Spectrum__PowerLaw,
  _swigc__p_Gyoto__Spectrum__PowerLawSynchrotron,
  _swigc__p_Gyoto__Spectrum__ThermalBremsstrahlung,
  _swigc__p_Gyoto__Spectrum__ThermalSynchrotron,
  _swigc__p_Gyoto__Units__Converter,
  _swigc__p_Gyoto__Units__Unit,
  _swigc__p_Gyoto__WIP,
  _swigc__p_Gyoto__Worldline,
  _swigc__p_Handler_t,
  _swigc__p_Subcontractor_t,
  _swigc__p_allocator_type,
  _swigc__p_array_double,
  _swigc__p_array_size_t,
  _swigc__p_array_unsigned_long,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t,
  _swigc__p_get_astrobj_t,
  _swigc__p_get_bool_t,
  _swigc__p_get_double_t,
  _swigc__p_get_double_unit_t,
  _swigc__p_get_fname_t,
  _swigc__p_get_long_t,
  _swigc__p_get_metric_t,
  _swigc__p_get_screen_t,
  _swigc__p_get_size_t_t,
  _swigc__p_get_spectrometer_t,
  _swigc__p_get_spectrum_t,
  _swigc__p_get_string_t,
  _swigc__p_get_unsigned_long_t,
  _swigc__p_get_vector_double_t,
  _swigc__p_get_vector_double_unit_t,
  _swigc__p_get_vector_unsigned_long_t,
  _swigc__p_myCplxIdxExcept,
  _swigc__p_p_array_double,
  _swigc__p_p_double,
  _swigc__p_set_astrobj_t,
  _swigc__p_set_bool_t,
  _swigc__p_set_double_t,
  _swigc__p_set_double_unit_t,
  _swigc__p_set_fname_t,
  _swigc__p_set_long_t,
  _swigc__p_set_metric_t,
  _swigc__p_set_screen_t,
  _swigc__p_set_size_t_t,
  _swigc__p_set_spectrometer_t,
  _swigc__p_set_spectrum_t,
  _swigc__p_set_string_t,
  _swigc__p_set_unsigned_long_t,
  _swigc__p_set_vector_double_t,
  _swigc__p_set_vector_double_unit_t,
  _swigc__p_set_vector_unsigned_long_t,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_unsigned_int,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  
  import_array();
  
  
  PyDict_SetItemString(md,(char *)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSphere_properties",Swig_var_UniformSphere_properties_get, Swig_var_UniformSphere_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSphere_builtinPluginValue",Swig_var_UniformSphere_builtinPluginValue_get, Swig_var_UniformSphere_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Star_properties",Swig_var_Star_properties_get, Swig_var_Star_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Star_builtinPluginValue",Swig_var_Star_builtinPluginValue_get, Swig_var_Star_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"StarTrace_properties",Swig_var_StarTrace_properties_get, Swig_var_StarTrace_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"StarTrace_builtinPluginValue",Swig_var_StarTrace_builtinPluginValue_get, Swig_var_StarTrace_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"FixedStar_properties",Swig_var_FixedStar_properties_get, Swig_var_FixedStar_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"FixedStar_builtinPluginValue",Swig_var_FixedStar_builtinPluginValue_get, Swig_var_FixedStar_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"FreeStar_properties",Swig_var_FreeStar_properties_get, Swig_var_FreeStar_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"FreeStar_builtinPluginValue",Swig_var_FreeStar_builtinPluginValue_get, Swig_var_FreeStar_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"InflateStar_properties",Swig_var_InflateStar_properties_get, Swig_var_InflateStar_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"InflateStar_builtinPluginValue",Swig_var_InflateStar_builtinPluginValue_get, Swig_var_InflateStar_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Torus_properties",Swig_var_Torus_properties_get, Swig_var_Torus_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Torus_builtinPluginValue",Swig_var_Torus_builtinPluginValue_get, Swig_var_Torus_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"OscilTorus_properties",Swig_var_OscilTorus_properties_get, Swig_var_OscilTorus_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"OscilTorus_builtinPluginValue",Swig_var_OscilTorus_builtinPluginValue_get, Swig_var_OscilTorus_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PageThorneDisk_properties",Swig_var_PageThorneDisk_properties_get, Swig_var_PageThorneDisk_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PageThorneDisk_builtinPluginValue",Swig_var_PageThorneDisk_builtinPluginValue_get, Swig_var_PageThorneDisk_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskPL_properties",Swig_var_ThinDiskPL_properties_get, Swig_var_ThinDiskPL_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskPL_builtinPluginValue",Swig_var_ThinDiskPL_builtinPluginValue_get, Swig_var_ThinDiskPL_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PolishDoughnut_properties",Swig_var_PolishDoughnut_properties_get, Swig_var_PolishDoughnut_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PolishDoughnut_builtinPluginValue",Swig_var_PolishDoughnut_builtinPluginValue_get, Swig_var_PolishDoughnut_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskIronLine_properties",Swig_var_ThinDiskIronLine_properties_get, Swig_var_ThinDiskIronLine_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskIronLine_builtinPluginValue",Swig_var_ThinDiskIronLine_builtinPluginValue_get, Swig_var_ThinDiskIronLine_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PatternDisk_properties",Swig_var_PatternDisk_properties_get, Swig_var_PatternDisk_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PatternDisk_builtinPluginValue",Swig_var_PatternDisk_builtinPluginValue_get, Swig_var_PatternDisk_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PatternDiskBB_properties",Swig_var_PatternDiskBB_properties_get, Swig_var_PatternDiskBB_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PatternDiskBB_builtinPluginValue",Swig_var_PatternDiskBB_builtinPluginValue_get, Swig_var_PatternDiskBB_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DynamicalDisk_properties",Swig_var_DynamicalDisk_properties_get, Swig_var_DynamicalDisk_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DynamicalDisk_builtinPluginValue",Swig_var_DynamicalDisk_builtinPluginValue_get, Swig_var_DynamicalDisk_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DynamicalDiskBolometric_properties",Swig_var_DynamicalDiskBolometric_properties_get, Swig_var_DynamicalDiskBolometric_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DynamicalDiskBolometric_builtinPluginValue",Swig_var_DynamicalDiskBolometric_builtinPluginValue_get, Swig_var_DynamicalDiskBolometric_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Disk3D_properties",Swig_var_Disk3D_properties_get, Swig_var_Disk3D_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Disk3D_builtinPluginValue",Swig_var_Disk3D_builtinPluginValue_get, Swig_var_Disk3D_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DynamicalDisk3D_properties",Swig_var_DynamicalDisk3D_properties_get, Swig_var_DynamicalDisk3D_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DynamicalDisk3D_builtinPluginValue",Swig_var_DynamicalDisk3D_builtinPluginValue_get, Swig_var_DynamicalDisk3D_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DirectionalDisk_properties",Swig_var_DirectionalDisk_properties_get, Swig_var_DirectionalDisk_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DirectionalDisk_builtinPluginValue",Swig_var_DirectionalDisk_builtinPluginValue_get, Swig_var_DirectionalDisk_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DeformedTorus_properties",Swig_var_DeformedTorus_properties_get, Swig_var_DeformedTorus_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"DeformedTorus_builtinPluginValue",Swig_var_DeformedTorus_builtinPluginValue_get, Swig_var_DeformedTorus_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"EquatorialHotSpot_properties",Swig_var_EquatorialHotSpot_properties_get, Swig_var_EquatorialHotSpot_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"EquatorialHotSpot_builtinPluginValue",Swig_var_EquatorialHotSpot_builtinPluginValue_get, Swig_var_EquatorialHotSpot_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"XillverReflection_properties",Swig_var_XillverReflection_properties_get, Swig_var_XillverReflection_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"XillverReflection_builtinPluginValue",Swig_var_XillverReflection_builtinPluginValue_get, Swig_var_XillverReflection_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Jet_properties",Swig_var_Jet_properties_get, Swig_var_Jet_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Jet_builtinPluginValue",Swig_var_Jet_builtinPluginValue_get, Swig_var_Jet_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Blob_properties",Swig_var_Blob_properties_get, Swig_var_Blob_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Blob_builtinPluginValue",Swig_var_Blob_builtinPluginValue_get, Swig_var_Blob_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Plasmoid_properties",Swig_var_Plasmoid_properties_get, Swig_var_Plasmoid_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Plasmoid_builtinPluginValue",Swig_var_Plasmoid_builtinPluginValue_get, Swig_var_Plasmoid_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"FlaredDiskSynchrotron_properties",Swig_var_FlaredDiskSynchrotron_properties_get, Swig_var_FlaredDiskSynchrotron_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"FlaredDiskSynchrotron_builtinPluginValue",Swig_var_FlaredDiskSynchrotron_builtinPluginValue_get, Swig_var_FlaredDiskSynchrotron_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskGridIntensity_properties",Swig_var_ThinDiskGridIntensity_properties_get, Swig_var_ThinDiskGridIntensity_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskGridIntensity_builtinPluginValue",Swig_var_ThinDiskGridIntensity_builtinPluginValue_get, Swig_var_ThinDiskGridIntensity_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThickDisk_properties",Swig_var_ThickDisk_properties_get, Swig_var_ThickDisk_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThickDisk_builtinPluginValue",Swig_var_ThickDisk_builtinPluginValue_get, Swig_var_ThickDisk_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"SphericalAccretion_properties",Swig_var_SphericalAccretion_properties_get, Swig_var_SphericalAccretion_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"SphericalAccretion_builtinPluginValue",Swig_var_SphericalAccretion_builtinPluginValue_get, Swig_var_SphericalAccretion_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskProfile_properties",Swig_var_ThinDiskProfile_properties_get, Swig_var_ThinDiskProfile_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDiskProfile_builtinPluginValue",Swig_var_ThinDiskProfile_builtinPluginValue_get, Swig_var_ThinDiskProfile_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Shift_properties",Swig_var_Shift_properties_get, Swig_var_Shift_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Shift_builtinPluginValue",Swig_var_Shift_builtinPluginValue_get, Swig_var_Shift_builtinPluginValue_set);
  SWIG_Python_SetConstant(d, "GYOTO_KERRBL_DEFAULT_DIFFTOL",SWIG_From_double(static_cast< double >(1e-2)));
  SWIG_addvarlink(SWIG_globals(),(char *)"KerrBL_properties",Swig_var_KerrBL_properties_get, Swig_var_KerrBL_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"KerrBL_builtinPluginValue",Swig_var_KerrBL_builtinPluginValue_get, Swig_var_KerrBL_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"KerrKS_properties",Swig_var_KerrKS_properties_get, Swig_var_KerrKS_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"KerrKS_builtinPluginValue",Swig_var_KerrKS_builtinPluginValue_get, Swig_var_KerrKS_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Minkowski_properties",Swig_var_Minkowski_properties_get, Swig_var_Minkowski_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Minkowski_builtinPluginValue",Swig_var_Minkowski_builtinPluginValue_get, Swig_var_Minkowski_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ChernSimons_properties",Swig_var_ChernSimons_properties_get, Swig_var_ChernSimons_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ChernSimons_builtinPluginValue",Swig_var_ChernSimons_builtinPluginValue_get, Swig_var_ChernSimons_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"RezzollaZhidenko_properties",Swig_var_RezzollaZhidenko_properties_get, Swig_var_RezzollaZhidenko_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"RezzollaZhidenko_builtinPluginValue",Swig_var_RezzollaZhidenko_builtinPluginValue_get, Swig_var_RezzollaZhidenko_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Hayward_properties",Swig_var_Hayward_properties_get, Swig_var_Hayward_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Hayward_builtinPluginValue",Swig_var_Hayward_builtinPluginValue_get, Swig_var_Hayward_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"SchwarzschildHarmonic_properties",Swig_var_SchwarzschildHarmonic_properties_get, Swig_var_SchwarzschildHarmonic_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"SchwarzschildHarmonic_builtinPluginValue",Swig_var_SchwarzschildHarmonic_builtinPluginValue_get, Swig_var_SchwarzschildHarmonic_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PowerLaw_properties",Swig_var_PowerLaw_properties_get, Swig_var_PowerLaw_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PowerLaw_builtinPluginValue",Swig_var_PowerLaw_builtinPluginValue_get, Swig_var_PowerLaw_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"BlackBody_properties",Swig_var_BlackBody_properties_get, Swig_var_BlackBody_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"BlackBody_builtinPluginValue",Swig_var_BlackBody_builtinPluginValue_get, Swig_var_BlackBody_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThermalBremsstrahlung_properties",Swig_var_ThermalBremsstrahlung_properties_get, Swig_var_ThermalBremsstrahlung_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThermalBremsstrahlung_builtinPluginValue",Swig_var_ThermalBremsstrahlung_builtinPluginValue_get, Swig_var_ThermalBremsstrahlung_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThermalSynchrotron_properties",Swig_var_ThermalSynchrotron_properties_get, Swig_var_ThermalSynchrotron_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThermalSynchrotron_builtinPluginValue",Swig_var_ThermalSynchrotron_builtinPluginValue_get, Swig_var_ThermalSynchrotron_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PowerLawSynchrotron_properties",Swig_var_PowerLawSynchrotron_properties_get, Swig_var_PowerLawSynchrotron_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"PowerLawSynchrotron_builtinPluginValue",Swig_var_PowerLawSynchrotron_builtinPluginValue_get, Swig_var_PowerLawSynchrotron_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"__class__",Swig_var___class___get, Swig_var___class___set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

