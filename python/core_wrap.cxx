/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

#ifdef METH_NOARGS
static PyObject*
SwigPyObject_disown2(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_disown(v);
}

static PyObject*
SwigPyObject_acquire2(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_acquire(v);
}
#endif

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown2, METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire2,METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr2,   METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Angles swig_types[0]
#define SWIGTYPE_p_Bucket swig_types[1]
#define SWIGTYPE_p_Coord1dSet swig_types[2]
#define SWIGTYPE_p_Coord2dSet swig_types[3]
#define SWIGTYPE_p_Eigen__Matrix4d swig_types[4]
#define SWIGTYPE_p_Eigen__Vector4d swig_types[5]
#define SWIGTYPE_p_Empty swig_types[6]
#define SWIGTYPE_p_Grid swig_types[7]
#define SWIGTYPE_p_Gyoto__Astrobj__Generic swig_types[8]
#define SWIGTYPE_p_Gyoto__Astrobj__Properties swig_types[9]
#define SWIGTYPE_p_Gyoto__Astrobj__Standard swig_types[10]
#define SWIGTYPE_p_Gyoto__Astrobj__ThinDisk swig_types[11]
#define SWIGTYPE_p_Gyoto__Error swig_types[12]
#define SWIGTYPE_p_Gyoto__Factory swig_types[13]
#define SWIGTYPE_p_Gyoto__FactoryMessenger swig_types[14]
#define SWIGTYPE_p_Gyoto__FitsRW swig_types[15]
#define SWIGTYPE_p_Gyoto__Functor__Double_Double_const swig_types[16]
#define SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray swig_types[17]
#define SWIGTYPE_p_Gyoto__GridData2D swig_types[18]
#define SWIGTYPE_p_Gyoto__Hook__Listener swig_types[19]
#define SWIGTYPE_p_Gyoto__Hook__Teller swig_types[20]
#define SWIGTYPE_p_Gyoto__Metric__Generic swig_types[21]
#define SWIGTYPE_p_Gyoto__Object swig_types[22]
#define SWIGTYPE_p_Gyoto__Photon swig_types[23]
#define SWIGTYPE_p_Gyoto__Property swig_types[24]
#define SWIGTYPE_p_Gyoto__Property__getter_t swig_types[25]
#define SWIGTYPE_p_Gyoto__Property__getter_unit_t swig_types[26]
#define SWIGTYPE_p_Gyoto__Property__setter_t swig_types[27]
#define SWIGTYPE_p_Gyoto__Property__setter_unit_t swig_types[28]
#define SWIGTYPE_p_Gyoto__Register__Entry swig_types[29]
#define SWIGTYPE_p_Gyoto__Scenery swig_types[30]
#define SWIGTYPE_p_Gyoto__Scenery__mpi_tag swig_types[31]
#define SWIGTYPE_p_Gyoto__Screen swig_types[32]
#define SWIGTYPE_p_Gyoto__SmartPointee swig_types[33]
#define SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t swig_types[34]
#define SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t swig_types[35]
#define SWIGTYPE_p_Gyoto__Spectrometer__Complex swig_types[36]
#define SWIGTYPE_p_Gyoto__Spectrometer__Generic swig_types[37]
#define SWIGTYPE_p_Gyoto__Spectrometer__Uniform swig_types[38]
#define SWIGTYPE_p_Gyoto__Spectrum__Generic swig_types[39]
#define SWIGTYPE_p_Gyoto__Units__Converter swig_types[40]
#define SWIGTYPE_p_Gyoto__Units__Unit swig_types[41]
#define SWIGTYPE_p_Gyoto__Value swig_types[42]
#define SWIGTYPE_p_Gyoto__WIP swig_types[43]
#define SWIGTYPE_p_Gyoto__Worldline swig_types[44]
#define SWIGTYPE_p_Handler_t swig_types[45]
#define SWIGTYPE_p_Indices swig_types[46]
#define SWIGTYPE_p_Photon swig_types[47]
#define SWIGTYPE_p_Range swig_types[48]
#define SWIGTYPE_p_RepeatAngle swig_types[49]
#define SWIGTYPE_p_Subcontractor_t swig_types[50]
#define SWIGTYPE_p_allocator_type swig_types[51]
#define SWIGTYPE_p_array_double swig_types[52]
#define SWIGTYPE_p_array_size_t swig_types[53]
#define SWIGTYPE_p_array_unsigned_long swig_types[54]
#define SWIGTYPE_p_boost__arrayT_double_2_t swig_types[55]
#define SWIGTYPE_p_boost__arrayT_size_t_2_t swig_types[56]
#define SWIGTYPE_p_boost__mpi__communicator swig_types[57]
#define SWIGTYPE_p_char swig_types[58]
#define SWIGTYPE_p_difference_type swig_types[59]
#define SWIGTYPE_p_double swig_types[60]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t swig_types[61]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t swig_types[62]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t swig_types[63]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t swig_types[64]
#define SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t swig_types[65]
#define SWIGTYPE_p_f_q_const__Gyoto__Error__void swig_types[66]
#define SWIGTYPE_p_fitsfile swig_types[67]
#define SWIGTYPE_p_get_astrobj_t swig_types[68]
#define SWIGTYPE_p_get_bool_t swig_types[69]
#define SWIGTYPE_p_get_double_t swig_types[70]
#define SWIGTYPE_p_get_double_unit_t swig_types[71]
#define SWIGTYPE_p_get_fname_t swig_types[72]
#define SWIGTYPE_p_get_long_t swig_types[73]
#define SWIGTYPE_p_get_metric_t swig_types[74]
#define SWIGTYPE_p_get_screen_t swig_types[75]
#define SWIGTYPE_p_get_size_t_t swig_types[76]
#define SWIGTYPE_p_get_spectrometer_t swig_types[77]
#define SWIGTYPE_p_get_spectrum_t swig_types[78]
#define SWIGTYPE_p_get_string_t swig_types[79]
#define SWIGTYPE_p_get_unsigned_long_t swig_types[80]
#define SWIGTYPE_p_get_vector_double_t swig_types[81]
#define SWIGTYPE_p_get_vector_double_unit_t swig_types[82]
#define SWIGTYPE_p_get_vector_unsigned_long_t swig_types[83]
#define SWIGTYPE_p_int swig_types[84]
#define SWIGTYPE_p_myCplxSpectroIdxExcept swig_types[85]
#define SWIGTYPE_p_p_Gyoto__FactoryMessenger swig_types[86]
#define SWIGTYPE_p_p_PyObject swig_types[87]
#define SWIGTYPE_p_p_array_double swig_types[88]
#define SWIGTYPE_p_p_double swig_types[89]
#define SWIGTYPE_p_set_astrobj_t swig_types[90]
#define SWIGTYPE_p_set_bool_t swig_types[91]
#define SWIGTYPE_p_set_double_t swig_types[92]
#define SWIGTYPE_p_set_double_unit_t swig_types[93]
#define SWIGTYPE_p_set_fname_t swig_types[94]
#define SWIGTYPE_p_set_long_t swig_types[95]
#define SWIGTYPE_p_set_metric_t swig_types[96]
#define SWIGTYPE_p_set_screen_t swig_types[97]
#define SWIGTYPE_p_set_size_t_t swig_types[98]
#define SWIGTYPE_p_set_spectrometer_t swig_types[99]
#define SWIGTYPE_p_set_spectrum_t swig_types[100]
#define SWIGTYPE_p_set_string_t swig_types[101]
#define SWIGTYPE_p_set_unsigned_long_t swig_types[102]
#define SWIGTYPE_p_set_vector_double_t swig_types[103]
#define SWIGTYPE_p_set_vector_double_unit_t swig_types[104]
#define SWIGTYPE_p_set_vector_unsigned_long_t swig_types[105]
#define SWIGTYPE_p_size_t swig_types[106]
#define SWIGTYPE_p_size_type swig_types[107]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[108]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[109]
#define SWIGTYPE_p_std__allocatorT_unsigned_long_t swig_types[110]
#define SWIGTYPE_p_std__invalid_argument swig_types[111]
#define SWIGTYPE_p_std__ostream swig_types[112]
#define SWIGTYPE_p_std__string swig_types[113]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[114]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[115]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[116]
#define SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t swig_types[117]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[118]
#define SWIGTYPE_p_unsigned_int swig_types[119]
#define SWIGTYPE_p_unsigned_long swig_types[120]
#define SWIGTYPE_p_ut_system swig_types[121]
#define SWIGTYPE_p_value_type swig_types[122]
#define SWIGTYPE_p_void swig_types[123]
#define SWIGTYPE_p_xercesc__DOMElement swig_types[124]
static swig_type_info *swig_types[126];
static swig_module_info swig_module = {swig_types, 125, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _core.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__core

#else
#  define SWIG_init    init_core

#endif
#define SWIG_name    "_core"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT
#define GYOTO_NO_DEPRECATED
#include "gyoto_swig.h"
using namespace Gyoto;

swig_type_info * __Gyoto_SWIGTYPE_p_Gyoto__Error() {
  return SWIGTYPE_p_Gyoto__Error;
}



#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

  typedef unsigned long unsignedlong;
  

namespace swig {
  template <> struct traits< unsigned long > {
    typedef value_category category;
    static const char* type_name() { return"unsigned long"; }
  };
  template <>  struct traits_asval< unsigned long > {
    typedef unsigned long value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_unsigned_SS_long (obj, val);
    }
  };
  template <>  struct traits_from< unsigned long > {
    typedef unsigned long value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_long  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< unsigned long, std::allocator< unsigned long > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned long" "," "std::allocator< unsigned long >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_unsigned_SS_long_Sg__iterator(std::vector< unsigned long > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_unsigned_SS_long_Sg____nonzero__(std::vector< unsigned long > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_unsigned_SS_long_Sg____bool__(std::vector< unsigned long > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned long >::size_type std_vector_Sl_unsigned_SS_long_Sg____len__(std::vector< unsigned long > const *self){
      return self->size();
    }
SWIGINTERN std::vector< unsigned long,std::allocator< unsigned long > > *std_vector_Sl_unsigned_SS_long_Sg____getslice__(std::vector< unsigned long > *self,std::vector< unsigned long >::difference_type i,std::vector< unsigned long >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____setslice____SWIG_0(std::vector< unsigned long > *self,std::vector< unsigned long >::difference_type i,std::vector< unsigned long >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< unsigned long,std::allocator< unsigned long > >());
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____setslice____SWIG_1(std::vector< unsigned long > *self,std::vector< unsigned long >::difference_type i,std::vector< unsigned long >::difference_type j,std::vector< unsigned long,std::allocator< unsigned long > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____delslice__(std::vector< unsigned long > *self,std::vector< unsigned long >::difference_type i,std::vector< unsigned long >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____delitem____SWIG_0(std::vector< unsigned long > *self,std::vector< unsigned long >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< unsigned long,std::allocator< unsigned long > > *std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG_0(std::vector< unsigned long > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type id = i;
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG_0(std::vector< unsigned long > *self,PySliceObject *slice,std::vector< unsigned long,std::allocator< unsigned long > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type id = i;
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG_1(std::vector< unsigned long > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type id = i;
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____delitem____SWIG_1(std::vector< unsigned long > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type id = i;
      std::vector< unsigned long,std::allocator< unsigned long > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< unsigned long >::value_type const &std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG_1(std::vector< unsigned long > const *self,std::vector< unsigned long >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG_2(std::vector< unsigned long > *self,std::vector< unsigned long >::difference_type i,std::vector< unsigned long >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< unsigned long >::value_type std_vector_Sl_unsigned_SS_long_Sg__pop(std::vector< unsigned long > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< unsigned long,std::allocator< unsigned long > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg__append(std::vector< unsigned long > *self,std::vector< unsigned long >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< unsigned long >::iterator std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_0(std::vector< unsigned long > *self,std::vector< unsigned long >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< unsigned long >::iterator std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_1(std::vector< unsigned long > *self,std::vector< unsigned long >::iterator first,std::vector< unsigned long >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< unsigned long >::iterator std_vector_Sl_unsigned_SS_long_Sg__insert__SWIG_0(std::vector< unsigned long > *self,std::vector< unsigned long >::iterator pos,std::vector< unsigned long >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg__insert__SWIG_1(std::vector< unsigned long > *self,std::vector< unsigned long >::iterator pos,std::vector< unsigned long >::size_type n,std::vector< unsigned long >::value_type const &x){ self->insert(pos, n, x); }

#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


typedef double array_double;

SWIGINTERN array_double *new_array_double(size_t nelements){
    return (new double[nelements]());
  }
SWIGINTERN void delete_array_double(array_double *self){
    delete[] self;
  }
SWIGINTERN double array_double___getitem__(array_double *self,size_t index){
    return self[index];
  }
SWIGINTERN void array_double___setitem__(array_double *self,size_t index,double value){
    self[index] = value;
  }
SWIGINTERN double *array_double_cast(array_double *self){
    return self;
  }
SWIGINTERN array_double *array_double_frompointer(double *t){
    return static_cast< array_double * >(t);
  }

#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_FORTRANORDER);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }



SWIGINTERN array_double *array_double_fromnumpy1(double *IN_ARRAY1,size_t DIM1){
    return static_cast< array_double * >(IN_ARRAY1);
  }
SWIGINTERN array_double *array_double_fromnumpy2(double *IN_ARRAY2,size_t DIM1,size_t DIM2){
    return static_cast< array_double * >(IN_ARRAY2);
  }
SWIGINTERN array_double *array_double_fromnumpy3(double *IN_ARRAY3,size_t DIM1,size_t DIM2,size_t DIM3){
    return static_cast< array_double * >(IN_ARRAY3);
  }
SWIGINTERN array_double *array_double_fromnumpy4(double *IN_ARRAY4,size_t DIM1,size_t DIM2,size_t DIM3,size_t DIM4){
    return static_cast< array_double * >(IN_ARRAY4);
  }

typedef size_t array_size_t;

SWIGINTERN array_size_t *new_array_size_t(size_t nelements){
    return (new size_t[nelements]());
  }
SWIGINTERN void delete_array_size_t(array_size_t *self){
    delete[] self;
  }
SWIGINTERN size_t array_size_t___getitem__(array_size_t *self,size_t index){
    return self[index];
  }
SWIGINTERN void array_size_t___setitem__(array_size_t *self,size_t index,size_t value){
    self[index] = value;
  }
SWIGINTERN size_t *array_size_t_cast(array_size_t *self){
    return self;
  }
SWIGINTERN array_size_t *array_size_t_frompointer(size_t *t){
    return static_cast< array_size_t * >(t);
  }
SWIGINTERN array_size_t *array_size_t_fromnumpy1(size_t *IN_ARRAY1,size_t DIM1){
    return static_cast< array_size_t * >(IN_ARRAY1);
  }
SWIGINTERN array_size_t *array_size_t_fromnumpy2(size_t *IN_ARRAY2,size_t DIM1,size_t DIM2){
    return static_cast< array_size_t * >(IN_ARRAY2);
  }
SWIGINTERN array_size_t *array_size_t_fromnumpy3(size_t *IN_ARRAY3,size_t DIM1,size_t DIM2,size_t DIM3){
    return static_cast< array_size_t * >(IN_ARRAY3);
  }
SWIGINTERN array_size_t *array_size_t_fromnumpy4(size_t *IN_ARRAY4,size_t DIM1,size_t DIM2,size_t DIM3,size_t DIM4){
    return static_cast< array_size_t * >(IN_ARRAY4);
  }

typedef unsigned long array_unsigned_long;

SWIGINTERN array_unsigned_long *new_array_unsigned_long(size_t nelements){
    return (new unsigned long[nelements]());
  }
SWIGINTERN void delete_array_unsigned_long(array_unsigned_long *self){
    delete[] self;
  }
SWIGINTERN unsigned long array_unsigned_long___getitem__(array_unsigned_long *self,size_t index){
    return self[index];
  }
SWIGINTERN void array_unsigned_long___setitem__(array_unsigned_long *self,size_t index,unsigned long value){
    self[index] = value;
  }
SWIGINTERN unsigned long *array_unsigned_long_cast(array_unsigned_long *self){
    return self;
  }
SWIGINTERN array_unsigned_long *array_unsigned_long_frompointer(unsigned long *t){
    return static_cast< array_unsigned_long * >(t);
  }
SWIGINTERN array_unsigned_long *array_unsigned_long_fromnumpy1(unsigned long *IN_ARRAY1,size_t DIM1){
    return static_cast< array_unsigned_long * >(IN_ARRAY1);
  }
SWIGINTERN array_unsigned_long *array_unsigned_long_fromnumpy2(unsigned long *IN_ARRAY2,size_t DIM1,size_t DIM2){
    return static_cast< array_unsigned_long * >(IN_ARRAY2);
  }
SWIGINTERN array_unsigned_long *array_unsigned_long_fromnumpy3(unsigned long *IN_ARRAY3,size_t DIM1,size_t DIM2,size_t DIM3){
    return static_cast< array_unsigned_long * >(IN_ARRAY3);
  }
SWIGINTERN array_unsigned_long *array_unsigned_long_fromnumpy4(unsigned long *IN_ARRAY4,size_t DIM1,size_t DIM2,size_t DIM3,size_t DIM4){
    return static_cast< array_unsigned_long * >(IN_ARRAY4);
  }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char const *Gyoto_Error___str__(Gyoto::Error *self){
    return *(self);
  }
SWIGINTERN long Gyoto_SmartPointee_getPointer(Gyoto::SmartPointee *self){
    return long(self);
  }




SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN size_t Gyoto_Value_toSizeT(Gyoto::Value *self){return size_t(*self);}
SWIGINTERN std::vector< unsigned long,std::allocator< unsigned long > > Gyoto_Value_toVULong(Gyoto::Value *self){return (self)->operator std::vector<unsigned long>();}
SWIGINTERN void Gyoto_Worldline_get_t__SWIG_1(Gyoto::Worldline *self,double *INPLACE_ARRAY1,size_t DIM1){
    if (DIM1 != (self)->get_nelements()) Gyoto::throwError(std::string("./gyoto.i" ":" "662" " in ")+ __PRETTY_FUNCTION__ + ": " + "wrong output array size");
    (self)->get_t(INPLACE_ARRAY1);
  }
SWIGINTERN void Gyoto_Worldline_get_xyz__SWIG_1(Gyoto::Worldline *self,double *x1dest,size_t n1,double *x2dest,size_t n2,double *x3dest,size_t n3){
    if (n1 != (self)->get_nelements() || n2 != n1 || n3 != n1)
      Gyoto::throwError(std::string("./gyoto.i" ":" "670" " in ")+ __PRETTY_FUNCTION__ + ": " + "wrong size for output array");
    (self)->get_xyz(x1dest, x2dest, x3dest);
  }
SWIGINTERN void Gyoto_Worldline_getSkyPos__SWIG_1(Gyoto::Worldline *self,Gyoto::SmartPointer< Gyoto::Screen > screen,double *x1dest,size_t n1,double *x2dest,size_t n2,double *x3dest,size_t n3){
    if (n1 != (self)->get_nelements() || n2 != n1 || n3 != n1)
      Gyoto::throwError(std::string("./gyoto.i" ":" "678" " in ")+ __PRETTY_FUNCTION__ + ": " + "wrong size for output array");
    (self)->getSkyPos(screen, x1dest, x2dest, x3dest);
  }
SWIGINTERN void Gyoto_Worldline_get_dot__SWIG_1(Gyoto::Worldline *self,double *x0dot,size_t n0d,double *x1dot,size_t n1d,double *x2dot,size_t n2d,double *x3dot,size_t n3d){
    if (n0d != (self)->get_nelements() || n1d != n0d || n2d != n0d || n3d != n0d)
      Gyoto::throwError(std::string("./gyoto.i" ":" "686" " in ")+ __PRETTY_FUNCTION__ + ": " + "wrong size for output array");
    (self)->get_dot(x0dot, x1dot, x2dot, x3dot);
  }
SWIGINTERN void Gyoto_Worldline_get_prime__SWIG_1(Gyoto::Worldline *self,double *x1dot,size_t n1d,double *x2dot,size_t n2d,double *x3dot,size_t n3d){
    if (n1d != (self)->get_nelements() || n2d != n1d || n3d != n1d)
      Gyoto::throwError(std::string("./gyoto.i" ":" "694" " in ")+ __PRETTY_FUNCTION__ + ": " + "wrong size for output array");
    (self)->get_prime(x1dot, x2dot, x3dot);
  }
SWIGINTERN void Gyoto_Worldline_getCartesianPos__SWIG_1(Gyoto::Worldline *self,size_t index,double ARGOUT_ARRAY1[8]){
    (self)->getCartesianPos(index, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Screen_getObserverPos__SWIG_1(Gyoto::Screen *self,double ARGOUT_ARRAY1[4]){
    (self)->getObserverPos(ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Screen_getFourVel__SWIG_1(Gyoto::Screen *self,double ARGOUT_ARRAY1[4]){
    (self)->getFourVel(ARGOUT_ARRAY1);
  }
SWIGINTERN std::string Gyoto_Screen___str__(Gyoto::Screen *self){
    return Gyoto::Factory(self).format();
  }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN std::string Gyoto_Scenery___str__(Gyoto::Scenery *self){
    return Gyoto::Factory(self).format();
  }
SWIGINTERN std::string Gyoto_Photon___str__(Gyoto::Photon *self){
    return Gyoto::Factory(self).format();
  }

  Gyoto::Register::Entry * getAstrobjRegister() { return Gyoto::Astrobj::Register_; }
 
SWIGINTERN Gyoto::Astrobj::Generic *new_Gyoto_Astrobj_Generic__SWIG_0(std::string nm){
    std::vector<std::string> plugin;
    Gyoto::Astrobj::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Astrobj::Generic> pres=
        Gyoto::Astrobj::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Astrobj::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Generic *new_Gyoto_Astrobj_Generic__SWIG_1(std::string nm,std::vector< std::string,std::allocator< std::string > > plugin){
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"plugin.size()" << "=" << plugin.size() << std::endl;
    Gyoto::Astrobj::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Astrobj::Generic> pres=
        Gyoto::Astrobj::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Astrobj::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Generic *new_Gyoto_Astrobj_Generic__SWIG_2(long address){
    Gyoto::Astrobj::Generic * res = (Gyoto::Astrobj::Generic *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Generic *new_Gyoto_Astrobj_Generic__SWIG_3(Gyoto::Astrobj::Generic *orig){
    return orig;
  }
SWIGINTERN std::string Gyoto_Astrobj_Generic___str__(Gyoto::Astrobj::Generic *self){
    return Gyoto::Factory(self).format();
  }
SWIGINTERN Gyoto::Units::Converter *Gyoto_Astrobj_Properties_binSpectrumConverter__SWIG_2(Gyoto::Astrobj::Properties *self){
  Gyoto::Units::Converter * res = self->binspectrum_converter_;
    if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Units::Converter *Gyoto_Astrobj_Properties_intensityConverter__SWIG_2(Gyoto::Astrobj::Properties *self){
  Gyoto::Units::Converter * res = self->intensity_converter_;
    if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Units::Converter *Gyoto_Astrobj_Properties_spectrumConverter__SWIG_2(Gyoto::Astrobj::Properties *self){
  Gyoto::Units::Converter * res = self->spectrum_converter_;
    if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDisk *new_Gyoto_Astrobj_ThinDisk__SWIG_3(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::ThinDisk * res = dynamic_cast< Gyoto::Astrobj::ThinDisk * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto.i" ":" "729" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""ThinDisk" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::ThinDisk *new_Gyoto_Astrobj_ThinDisk__SWIG_4(long address){
    Gyoto::Astrobj::ThinDisk * res = (Gyoto::Astrobj::ThinDisk *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Standard *new_Gyoto_Astrobj_Standard__SWIG_0(Gyoto::Astrobj::Generic *base){
    Gyoto::Astrobj::Standard * res = dynamic_cast< Gyoto::Astrobj::Standard * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto.i" ":" "735" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Astrobj" "::""Standard" "*'");
    return res;
  }
SWIGINTERN Gyoto::Astrobj::Standard *new_Gyoto_Astrobj_Standard__SWIG_1(long address){
    Gyoto::Astrobj::Standard * res = (Gyoto::Astrobj::Standard *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }

  Gyoto::Register::Entry * getMetricRegister() { return Gyoto::Metric::Register_; }
 
SWIGINTERN void Gyoto_Metric_Generic_circularVelocity__SWIG_2(Gyoto::Metric::Generic *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    (self)->circularVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_Generic_zamoVelocity__SWIG_1(Gyoto::Metric::Generic *self,double const IN_ARRAY1[4],double ARGOUT_ARRAY1[4]){
    (self)->zamoVelocity(IN_ARRAY1, ARGOUT_ARRAY1);
  }
SWIGINTERN void Gyoto_Metric_Generic_christoffel__SWIG_2(Gyoto::Metric::Generic *self,double ARGOUT_ARRAY3[4][4][4],double const IN_ARRAY1[4]){
    (self)->christoffel(ARGOUT_ARRAY3, IN_ARRAY1);
  }
SWIGINTERN Gyoto::Metric::Generic *new_Gyoto_Metric_Generic__SWIG_0(std::string nm){
    std::vector<std::string> plugin;
    Gyoto::Metric::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Metric::Generic> pres=
        Gyoto::Metric::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Metric::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Metric::Generic *new_Gyoto_Metric_Generic__SWIG_1(std::string nm,std::vector< std::string,std::allocator< std::string > > plugin){
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"plugin.size()" << "=" << plugin.size() << std::endl;
    Gyoto::Metric::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Metric::Generic> pres=
        Gyoto::Metric::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Metric::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Metric::Generic *new_Gyoto_Metric_Generic__SWIG_2(long address){
    Gyoto::Metric::Generic * res = (Gyoto::Metric::Generic *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Metric::Generic *new_Gyoto_Metric_Generic__SWIG_3(Gyoto::Metric::Generic *orig){
    return orig;
  }
SWIGINTERN std::string Gyoto_Metric_Generic___str__(Gyoto::Metric::Generic *self){
    return Gyoto::Factory(self).format();
  }

  Gyoto::Register::Entry * getSpectrumRegister() { return Gyoto::Spectrum::Register_; }
 
SWIGINTERN Gyoto::Spectrum::Generic *new_Gyoto_Spectrum_Generic__SWIG_0(std::string nm){
    std::vector<std::string> plugin;
    Gyoto::Spectrum::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Spectrum::Generic> pres=
        Gyoto::Spectrum::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Spectrum::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Spectrum::Generic *new_Gyoto_Spectrum_Generic__SWIG_1(std::string nm,std::vector< std::string,std::allocator< std::string > > plugin){
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"plugin.size()" << "=" << plugin.size() << std::endl;
    Gyoto::Spectrum::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Spectrum::Generic> pres=
        Gyoto::Spectrum::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Spectrum::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Spectrum::Generic *new_Gyoto_Spectrum_Generic__SWIG_2(long address){
    Gyoto::Spectrum::Generic * res = (Gyoto::Spectrum::Generic *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrum::Generic *new_Gyoto_Spectrum_Generic__SWIG_3(Gyoto::Spectrum::Generic *orig){
    return orig;
  }
SWIGINTERN std::string Gyoto_Spectrum_Generic___str__(Gyoto::Spectrum::Generic *self){
    return Gyoto::Factory(self).format();
  }

  Gyoto::Register::Entry * getSpectrometerRegister() { return Gyoto::Spectrometer::Register_; }
 
SWIGINTERN Gyoto::Spectrometer::Generic *new_Gyoto_Spectrometer_Generic__SWIG_0(std::string nm){
    std::vector<std::string> plugin;
    Gyoto::Spectrometer::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Spectrometer::Generic> pres=
        Gyoto::Spectrometer::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Spectrometer::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Spectrometer::Generic *new_Gyoto_Spectrometer_Generic__SWIG_1(std::string nm,std::vector< std::string,std::allocator< std::string > > plugin){
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"plugin.size()" << "=" << plugin.size() << std::endl;
    Gyoto::Spectrometer::Generic * res = NULL;
    {
      Gyoto::SmartPointer<Gyoto::Spectrometer::Generic> pres=
        Gyoto::Spectrometer::getSubcontractor(nm.c_str(), plugin)(NULL, plugin);
      res = (Gyoto::Spectrometer::Generic *)(pres);
      // We need to increment refcount, else the object is destroyed
      // when the original smartpoiter is:
      if (res) res -> incRefCount();
    }
    // Now that the original smartpointer has been detroyed, refcount is 1.
    // ref feature will increment it again, so we need to decrement is now:
    res->decRefCount();
    if (Gyoto::debug()) std::cerr << "DEBUG: " << __PRETTY_FUNCTION__ << ": " <<"res->getRefCount()" << "=" << res->getRefCount() << std::endl;
    // Special for Uniform spectrometer:
    // if 'res' can be cast to uniform spectrometer, set Kind.
    if(dynamic_cast<Gyoto::Spectrometer::Uniform*>(res))
      res->set("Kind", nm);
    // end special case
    return res;
  }
SWIGINTERN Gyoto::Spectrometer::Generic *new_Gyoto_Spectrometer_Generic__SWIG_2(long address){
    Gyoto::Spectrometer::Generic * res = (Gyoto::Spectrometer::Generic *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrometer::Generic *new_Gyoto_Spectrometer_Generic__SWIG_3(Gyoto::Spectrometer::Generic *orig){
    return orig;
  }
SWIGINTERN std::string Gyoto_Spectrometer_Generic___str__(Gyoto::Spectrometer::Generic *self){
    return Gyoto::Factory(self).format();
  }

  class myCplxSpectroIdxExcept {};

SWIGINTERN Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > Gyoto_Spectrometer_Complex___getitem__(Gyoto::Spectrometer::Complex *self,size_t i){
    if (i >= (self)->getCardinal()) {
      throw myCplxSpectroIdxExcept();
    }
    Gyoto::SmartPointer<Gyoto::Spectrometer::Generic> res = (self)->operator[](i);
    return res;
  }
SWIGINTERN void Gyoto_Spectrometer_Complex___setitem__(Gyoto::Spectrometer::Complex *self,int i,Gyoto::Spectrometer::Generic *p){
    (self)->operator[](i)=p;
  }
SWIGINTERN Gyoto::Spectrometer::Complex *new_Gyoto_Spectrometer_Complex__SWIG_2(Gyoto::Spectrometer::Generic *base){
    Gyoto::Spectrometer::Complex * res = dynamic_cast< Gyoto::Spectrometer::Complex * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto.i" ":" "796" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Spectrometer" "::""Complex" "*'");
    return res;
  }
SWIGINTERN Gyoto::Spectrometer::Complex *new_Gyoto_Spectrometer_Complex__SWIG_3(long address){
    Gyoto::Spectrometer::Complex * res = (Gyoto::Spectrometer::Complex *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::Spectrometer::Uniform *new_Gyoto_Spectrometer_Uniform__SWIG_3(Gyoto::Spectrometer::Generic *base){
    Gyoto::Spectrometer::Uniform * res = dynamic_cast< Gyoto::Spectrometer::Uniform * >(base);
    if (!res) Gyoto::throwError(std::string("./gyoto.i" ":" "797" " in ")+ __PRETTY_FUNCTION__ + ": " + "This pointer cannot be cast to 'Gyoto::""Spectrometer" "::""Uniform" "*'");
    return res;
  }
SWIGINTERN Gyoto::Spectrometer::Uniform *new_Gyoto_Spectrometer_Uniform__SWIG_4(long address){
    Gyoto::Spectrometer::Uniform * res = (Gyoto::Spectrometer::Uniform *)(address);
    // Should be done by ref feature:
    // if (res) res -> incRefCount();
    return res;
  }
SWIGINTERN Gyoto::SmartPointer< Gyoto::Scenery > Gyoto_Factory_getScenery(Gyoto::Factory *self){
    if(Gyoto::verbose()>=3) std::cerr<<"WARNING: " << "Factory::getScenery() is deprecated, use Factory::scenery() instead\n";
    return (self)->scenery();
  }
SWIGINTERN Gyoto::SmartPointer< Gyoto::Photon > Gyoto_Factory_getPhoton(Gyoto::Factory *self){
    if(Gyoto::verbose()>=3) std::cerr<<"WARNING: " << "Factory::getPhoton() is deprecated, use Factory::photon() instead\n";
    return (self)->photon();
  }

  typedef Gyoto::Screen::CoordType_e CoordType_e;
  typedef Gyoto::Screen::Coord1dSet Coord1dSet;
  typedef Gyoto::Screen::Coord2dSet Coord2dSet;
  typedef Gyoto::Screen::Grid Grid;
  typedef Gyoto::Screen::Bucket Bucket;
  typedef Gyoto::Screen::Empty Empty;
  typedef Gyoto::Screen::Range Range;
  typedef Gyoto::Screen::Indices Indices;
  typedef Gyoto::Screen::Angles Angles;
  typedef Gyoto::Screen::RepeatAngle RepeatAngle;

SWIGINTERN double boost_array_Sl_double_Sc_2_Sg____getitem__(boost::array< double,2 > *self,size_t c){
    return self->operator[](c);
  }
SWIGINTERN size_t boost_array_Sl_size_t_Sc_2_Sg____getitem__(boost::array< size_t,2 > *self,size_t c){
    return self->operator[](c);
  }
SWIGINTERN size_t Coord1dSet_value(Coord1dSet const *self){
    return **(self);
  }
SWIGINTERN Indices *new_Indices__SWIG_1(size_t DIM1,size_t *IN_ARRAY1){
    return new Indices(IN_ARRAY1, DIM1);
  }
SWIGINTERN Angles *new_Angles__SWIG_1(size_t DIM1,double *IN_ARRAY1){
    return new Angles(IN_ARRAY1, DIM1);
  }
SWIGINTERN std::string Gyoto_Units_Unit___str__(Gyoto::Units::Unit *self){
    return (std::string(*(self)));
  }

  namespace Gyoto {
    extern int __class__;
  }
  int Gyoto::__class__ = 0;

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->__next__();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vector_string_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vector_string___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_string___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vector_string")) SWIG_fail;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_string",&obj0)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->get_allocator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_string",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_string_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_string_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_string",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_string__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_string__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_string__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_string__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vector_string_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vector_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_string" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_string_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vector_double_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vector_double___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_double___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_double___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_double___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_double___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      try {
        result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vector_double")) SWIG_fail;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_double",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_double",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_double_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_double_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_double",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_double" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_double__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_double__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_double__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_double_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_double_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vector_double_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_double_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_double_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_double_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_double_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_double_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vector_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_double" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vector_unsigned_long_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_iterator" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_unsigned_SS_long_Sg__iterator(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___nonzero__" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_unsigned_SS_long_Sg____nonzero__((std::vector< unsigned long > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___bool__" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_unsigned_SS_long_Sg____bool__((std::vector< unsigned long > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___len__" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = std_vector_Sl_unsigned_SS_long_Sg____len__((std::vector< unsigned long > const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::difference_type arg2 ;
  std::vector< unsigned long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___getslice__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long___getslice__" "', argument " "2"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long___getslice__" "', argument " "3"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned long >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< unsigned long,std::allocator< unsigned long > > *)std_vector_Sl_unsigned_SS_long_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::difference_type arg2 ;
  std::vector< unsigned long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___setslice__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long___setslice__" "', argument " "2"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long___setslice__" "', argument " "3"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned long >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::difference_type arg2 ;
  std::vector< unsigned long >::difference_type arg3 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vector_unsigned_long___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___setslice__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long___setslice__" "', argument " "2"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long___setslice__" "', argument " "3"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned long >::difference_type >(val3);
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_unsigned_long___setslice__" "', argument " "4"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_unsigned_long___setslice__" "', argument " "4"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< unsigned long,std::allocator< unsigned long > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_unsigned_long___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_unsigned_long___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_unsigned_long___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::__setslice__(std::vector< unsigned long >::difference_type,std::vector< unsigned long >::difference_type)\n"
    "    std::vector< unsigned long >::__setslice__(std::vector< unsigned long >::difference_type,std::vector< unsigned long >::difference_type,std::vector< unsigned long,std::allocator< unsigned long > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::difference_type arg2 ;
  std::vector< unsigned long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___delslice__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long___delslice__" "', argument " "2"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long___delslice__" "', argument " "3"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned long >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___delitem__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long___delitem__" "', argument " "2"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___getitem__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< unsigned long,std::allocator< unsigned long > > *)std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___setitem__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_unsigned_long___setitem__" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_unsigned_long___setitem__" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned long,std::allocator< unsigned long > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___setitem__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___delitem__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_unsigned_long___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_unsigned_long___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_unsigned_long___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::__delitem__(std::vector< unsigned long >::difference_type)\n"
    "    std::vector< unsigned long >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned long >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___getitem__" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long___getitem__" "', argument " "2"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< unsigned long >::value_type *) &std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG_1((std::vector< unsigned long > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_unsigned_long___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_unsigned_long___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_unsigned_long___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::__getitem__(PySliceObject *)\n"
    "    std::vector< unsigned long >::__getitem__(std::vector< unsigned long >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::difference_type arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long___setitem__" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long___setitem__" "', argument " "2"" of type '" "std::vector< unsigned long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long___setitem__" "', argument " "3"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG_2(arg1,arg2,(unsigned long const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_unsigned_long___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_unsigned_long___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_unsigned_long___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_unsigned_long___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::__setitem__(PySliceObject *,std::vector< unsigned long,std::allocator< unsigned long > > const &)\n"
    "    std::vector< unsigned long >::__setitem__(PySliceObject *)\n"
    "    std::vector< unsigned long >::__setitem__(std::vector< unsigned long >::difference_type,std::vector< unsigned long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_pop" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      try {
        result = (std::vector< unsigned long >::value_type)std_vector_Sl_unsigned_SS_long_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned long >::value_type temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_append" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long_append" "', argument " "2"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned long >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_unsigned_SS_long_Sg__append(arg1,(unsigned long const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_unsigned_long__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vector_unsigned_long")) SWIG_fail;
  {
    try {
      result = (std::vector< unsigned long > *)new std::vector< unsigned long >();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_unsigned_long__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_unsigned_long",&obj0)) SWIG_fail;
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_unsigned_long" "', argument " "1"" of type '" "std::vector< unsigned long > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_unsigned_long" "', argument " "1"" of type '" "std::vector< unsigned long > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< unsigned long > *)new std::vector< unsigned long >((std::vector< unsigned long > const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_empty" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (bool)((std::vector< unsigned long > const *)arg1)->empty();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_size" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = ((std::vector< unsigned long > const *)arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_swap" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_unsigned_long_swap" "', argument " "2"" of type '" "std::vector< unsigned long > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_unsigned_long_swap" "', argument " "2"" of type '" "std::vector< unsigned long > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned long > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_begin" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_end" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_rbegin" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned long >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_rend" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned long >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_clear" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< unsigned long > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_get_allocator" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = ((std::vector< unsigned long > const *)arg1)->get_allocator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned long >::allocator_type(static_cast< const std::vector< unsigned long >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_unsigned_long_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_unsigned_long__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_unsigned_long",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_unsigned_long" "', argument " "1"" of type '" "std::vector< unsigned long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned long >::size_type >(val1);
  {
    try {
      result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_pop_back" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_resize" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long_resize" "', argument " "2"" of type '" "std::vector< unsigned long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_erase" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_erase" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_erase" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_0(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::iterator arg2 ;
  std::vector< unsigned long >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_erase" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_erase" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_erase" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_erase" "', argument " "3"" of type '" "std::vector< unsigned long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_erase" "', argument " "3"" of type '" "std::vector< unsigned long >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_1(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_unsigned_long_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_unsigned_long_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_unsigned_long_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::erase(std::vector< unsigned long >::iterator)\n"
    "    std::vector< unsigned long >::erase(std::vector< unsigned long >::iterator,std::vector< unsigned long >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_unsigned_long__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long >::size_type arg1 ;
  std::vector< unsigned long >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned long >::value_type temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_unsigned_long",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_unsigned_long" "', argument " "1"" of type '" "std::vector< unsigned long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned long >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_unsigned_long" "', argument " "2"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned long >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1,(std::vector< unsigned long >::value_type const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_unsigned_long(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_unsigned_long__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_unsigned_long__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_unsigned_long__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_unsigned_long__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_unsigned_long'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::vector()\n"
    "    std::vector< unsigned long >::vector(std::vector< unsigned long > const &)\n"
    "    std::vector< unsigned long >::vector(std::vector< unsigned long >::size_type)\n"
    "    std::vector< unsigned long >::vector(std::vector< unsigned long >::size_type,std::vector< unsigned long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned long >::value_type temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_push_back" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long_push_back" "', argument " "2"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned long >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< unsigned long >::value_type const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_front" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (std::vector< unsigned long >::value_type *) &((std::vector< unsigned long > const *)arg1)->front();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_back" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = (std::vector< unsigned long >::value_type *) &((std::vector< unsigned long > const *)arg1)->back();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_assign" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long_assign" "', argument " "2"" of type '" "std::vector< unsigned long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long_assign" "', argument " "3"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< unsigned long >::value_type const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_resize" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long_resize" "', argument " "2"" of type '" "std::vector< unsigned long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long_resize" "', argument " "3"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< unsigned long >::value_type const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_unsigned_long_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_unsigned_long_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_unsigned_long_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::resize(std::vector< unsigned long >::size_type)\n"
    "    std::vector< unsigned long >::resize(std::vector< unsigned long >::size_type,std::vector< unsigned long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::iterator arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned long >::value_type temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_unsigned_long_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_insert" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_insert" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_insert" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long_insert" "', argument " "3"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned long >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_unsigned_SS_long_Sg__insert__SWIG_0(arg1,arg2,(unsigned long const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::iterator arg2 ;
  std::vector< unsigned long >::size_type arg3 ;
  std::vector< unsigned long >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned long >::value_type temp4 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vector_unsigned_long_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_insert" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_insert" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_unsigned_long_insert" "', argument " "2"" of type '" "std::vector< unsigned long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_unsigned_long_insert" "', argument " "3"" of type '" "std::vector< unsigned long >::size_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned long >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_unsigned_long_insert" "', argument " "4"" of type '" "std::vector< unsigned long >::value_type""'");
  } 
  temp4 = static_cast< std::vector< unsigned long >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_unsigned_SS_long_Sg__insert__SWIG_1(arg1,arg2,arg3,(unsigned long const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_unsigned_long_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_unsigned_long_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_unsigned_long_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::insert(std::vector< unsigned long >::iterator,std::vector< unsigned long >::value_type const &)\n"
    "    std::vector< unsigned long >::insert(std::vector< unsigned long >::iterator,std::vector< unsigned long >::size_type,std::vector< unsigned long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_unsigned_long_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_reserve" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_unsigned_long_reserve" "', argument " "2"" of type '" "std::vector< unsigned long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned long >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_unsigned_long_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_unsigned_long_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_unsigned_long_capacity" "', argument " "1"" of type '" "std::vector< unsigned long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      result = ((std::vector< unsigned long > const *)arg1)->capacity();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_unsigned_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vector_unsigned_long",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_unsigned_long" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_unsigned_long_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_array_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  array_double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_array_double",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_array_double" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try {
      result = (array_double *)new_array_double(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_double, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_double *arg1 = (array_double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_array_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_double" "', argument " "1"" of type '" "array_double *""'"); 
  }
  arg1 = reinterpret_cast< array_double * >(argp1);
  {
    try {
      delete_array_double(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_double *arg1 = (array_double *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:array_double___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double___getitem__" "', argument " "1"" of type '" "array_double *""'"); 
  }
  arg1 = reinterpret_cast< array_double * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)array_double___getitem__(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_double *arg1 = (array_double *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:array_double___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double___setitem__" "', argument " "1"" of type '" "array_double *""'"); 
  }
  arg1 = reinterpret_cast< array_double * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      array_double___setitem__(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_double *arg1 = (array_double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_double_cast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_cast" "', argument " "1"" of type '" "array_double *""'"); 
  }
  arg1 = reinterpret_cast< array_double * >(argp1);
  {
    try {
      result = (double *)array_double_cast(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_frompointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array_double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_double_frompointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_frompointer" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  {
    try {
      result = (array_double *)array_double_frompointer(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_fromnumpy1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_double_fromnumpy1",&obj0)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
  }
  {
    try {
      result = (array_double *)array_double_fromnumpy1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_double, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_fromnumpy2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_double_fromnumpy2",&obj0)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
    arg3 = (size_t) array_size(array1,1);
  }
  {
    try {
      result = (array_double *)array_double_fromnumpy2(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_double, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_fromnumpy3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_double_fromnumpy3",&obj0)) SWIG_fail;
  {
    npy_intp size[3] = {
      -1, -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 3) ||
      !require_size(array1, size, 3)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
    arg3 = (size_t) array_size(array1,1);
    arg4 = (size_t) array_size(array1,2);
  }
  {
    try {
      result = (array_double *)array_double_fromnumpy3(arg1,arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_double, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_fromnumpy4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_double_fromnumpy4",&obj0)) SWIG_fail;
  {
    npy_intp size[4] = {
      -1, -1, -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 4) ||
      !require_size(array1, size, 4)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
    arg3 = (size_t) array_size(array1,1);
    arg4 = (size_t) array_size(array1,2);
    arg5 = (size_t) array_size(array1,3);
  }
  {
    try {
      result = (array_double *)array_double_fromnumpy4(arg1,arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_double, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *array_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_array_double, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_array_size_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  array_size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_array_size_t",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_array_size_t" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try {
      result = (array_size_t *)new_array_size_t(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_size_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_size_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_size_t *arg1 = (array_size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_array_size_t",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_size_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_size_t" "', argument " "1"" of type '" "array_size_t *""'"); 
  }
  arg1 = reinterpret_cast< array_size_t * >(argp1);
  {
    try {
      delete_array_size_t(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_size_t *arg1 = (array_size_t *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:array_size_t___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_size_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_size_t___getitem__" "', argument " "1"" of type '" "array_size_t *""'"); 
  }
  arg1 = reinterpret_cast< array_size_t * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_size_t___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = array_size_t___getitem__(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_size_t *arg1 = (array_size_t *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:array_size_t___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_size_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_size_t___setitem__" "', argument " "1"" of type '" "array_size_t *""'"); 
  }
  arg1 = reinterpret_cast< array_size_t * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_size_t___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_size_t___setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      array_size_t___setitem__(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_size_t *arg1 = (array_size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_size_t_cast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_size_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_size_t_cast" "', argument " "1"" of type '" "array_size_t *""'"); 
  }
  arg1 = reinterpret_cast< array_size_t * >(argp1);
  {
    try {
      result = (size_t *)array_size_t_cast(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_size_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t_frompointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array_size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_size_t_frompointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_size_t_frompointer" "', argument " "1"" of type '" "size_t *""'"); 
  }
  arg1 = reinterpret_cast< size_t * >(argp1);
  {
    try {
      result = (array_size_t *)array_size_t_frompointer(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_size_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t_fromnumpy1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  size_t arg2 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_size_t_fromnumpy1",&obj0)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_ULONG,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (size_t*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
  }
  {
    try {
      result = (array_size_t *)array_size_t_fromnumpy1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_size_t, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t_fromnumpy2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_size_t_fromnumpy2",&obj0)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_ULONG,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (size_t*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
    arg3 = (size_t) array_size(array1,1);
  }
  {
    try {
      result = (array_size_t *)array_size_t_fromnumpy2(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_size_t, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t_fromnumpy3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_size_t_fromnumpy3",&obj0)) SWIG_fail;
  {
    npy_intp size[3] = {
      -1, -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_ULONG,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 3) ||
      !require_size(array1, size, 3)) SWIG_fail;
    arg1 = (size_t*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
    arg3 = (size_t) array_size(array1,1);
    arg4 = (size_t) array_size(array1,2);
  }
  {
    try {
      result = (array_size_t *)array_size_t_fromnumpy3(arg1,arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_size_t, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_size_t_fromnumpy4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  array_size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_size_t_fromnumpy4",&obj0)) SWIG_fail;
  {
    npy_intp size[4] = {
      -1, -1, -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_ULONG,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 4) ||
      !require_size(array1, size, 4)) SWIG_fail;
    arg1 = (size_t*) array_data(array1);
    arg2 = (size_t) array_size(array1,0);
    arg3 = (size_t) array_size(array1,1);
    arg4 = (size_t) array_size(array1,2);
    arg5 = (size_t) array_size(array1,3);
  }
  {
    try {
      result = (array_size_t *)array_size_t_fromnumpy4(arg1,arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_size_t, 0 |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *array_size_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_array_size_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_array_unsigned_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  array_unsigned_long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_array_unsigned_long",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_array_unsigned_long" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try {
      result = (array_unsigned_long *)new_array_unsigned_long(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_unsigned_long, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_unsigned_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_unsigned_long *arg1 = (array_unsigned_long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_array_unsigned_long",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_unsigned_long, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_unsigned_long" "', argument " "1"" of type '" "array_unsigned_long *""'"); 
  }
  arg1 = reinterpret_cast< array_unsigned_long * >(argp1);
  {
    try {
      delete_array_unsigned_long(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_unsigned_long *arg1 = (array_unsigned_long *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:array_unsigned_long___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long___getitem__" "', argument " "1"" of type '" "array_unsigned_long *""'"); 
  }
  arg1 = reinterpret_cast< array_unsigned_long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_unsigned_long___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (unsigned long)array_unsigned_long___getitem__(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_unsigned_long *arg1 = (array_unsigned_long *) 0 ;
  size_t arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:array_unsigned_long___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long___setitem__" "', argument " "1"" of type '" "array_unsigned_long *""'"); 
  }
  arg1 = reinterpret_cast< array_unsigned_long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_unsigned_long___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_unsigned_long___setitem__" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    try {
      array_unsigned_long___setitem__(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array_unsigned_long *arg1 = (array_unsigned_long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_unsigned_long_cast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long_cast" "', argument " "1"" of type '" "array_unsigned_long *""'"); 
  }
  arg1 = reinterpret_cast< array_unsigned_long * >(argp1);
  {
    try {
      result = (unsigned long *)array_unsigned_long_cast(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long_frompointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array_unsigned_long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:array_unsigned_long_frompointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long_frompointer" "', argument " "1"" of type '" "unsigned long *""'"); 
  }
  arg1 = reinterpret_cast< unsigned long * >(argp1);
  {
    try {
      result = (array_unsigned_long *)array_unsigned_long_frompointer(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long_fromnumpy1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  array_unsigned_long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:array_unsigned_long_fromnumpy1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long_fromnumpy1" "', argument " "1"" of type '" "unsigned long *""'"); 
  }
  arg1 = reinterpret_cast< unsigned long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_unsigned_long_fromnumpy1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (array_unsigned_long *)array_unsigned_long_fromnumpy1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long_fromnumpy2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  array_unsigned_long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:array_unsigned_long_fromnumpy2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long_fromnumpy2" "', argument " "1"" of type '" "unsigned long *""'"); 
  }
  arg1 = reinterpret_cast< unsigned long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_unsigned_long_fromnumpy2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_unsigned_long_fromnumpy2" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (array_unsigned_long *)array_unsigned_long_fromnumpy2(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long_fromnumpy3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  array_unsigned_long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:array_unsigned_long_fromnumpy3",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long_fromnumpy3" "', argument " "1"" of type '" "unsigned long *""'"); 
  }
  arg1 = reinterpret_cast< unsigned long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_unsigned_long_fromnumpy3" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_unsigned_long_fromnumpy3" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "array_unsigned_long_fromnumpy3" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      result = (array_unsigned_long *)array_unsigned_long_fromnumpy3(arg1,arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_unsigned_long_fromnumpy4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  array_unsigned_long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:array_unsigned_long_fromnumpy4",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_unsigned_long_fromnumpy4" "', argument " "1"" of type '" "unsigned long *""'"); 
  }
  arg1 = reinterpret_cast< unsigned long * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_unsigned_long_fromnumpy4" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_unsigned_long_fromnumpy4" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "array_unsigned_long_fromnumpy4" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "array_unsigned_long_fromnumpy4" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      result = (array_unsigned_long *)array_unsigned_long_fromnumpy4(arg1,arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_array_unsigned_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *array_unsigned_long_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_array_unsigned_long, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Error__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Error *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Error",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Error" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Error *)new Gyoto::Error(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Error, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Error__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Error *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Error *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Error,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Error" "', argument " "1"" of type '" "Gyoto::Error const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Error" "', argument " "1"" of type '" "Gyoto::Error const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Error * >(argp1);
  {
    try {
      result = (Gyoto::Error *)new Gyoto::Error((Gyoto::Error const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Error, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Error(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Error, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Error__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Error__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Error'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Error::Error(std::string const)\n"
    "    Gyoto::Error::Error(Gyoto::Error const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Error_Report(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Error *arg1 = (Gyoto::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_Report",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_Report" "', argument " "1"" of type '" "Gyoto::Error const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Error * >(argp1);
  {
    try {
      ((Gyoto::Error const *)arg1)->Report();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_getErrcode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Error *arg1 = (Gyoto::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_getErrcode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_getErrcode" "', argument " "1"" of type '" "Gyoto::Error const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Error * >(argp1);
  {
    try {
      result = (int)((Gyoto::Error const *)arg1)->getErrcode();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_get_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Error *arg1 = (Gyoto::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_get_message",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_get_message" "', argument " "1"" of type '" "Gyoto::Error const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Error * >(argp1);
  {
    try {
      result = ((Gyoto::Error const *)arg1)->get_message();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_setHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Error::Handler_t *arg1 = (Gyoto::Error::Handler_t *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_setHandler",&obj0)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(obj0, (void**)(&arg1), SWIGTYPE_p_f_q_const__Gyoto__Error__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Error_setHandler" "', argument " "1"" of type '" "Gyoto::Error::Handler_t *""'"); 
    }
  }
  {
    try {
      Gyoto::Error::setHandler(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Error *arg1 = (Gyoto::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error___str__" "', argument " "1"" of type '" "Gyoto::Error *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Error * >(argp1);
  {
    try {
      result = (char *)Gyoto_Error___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Error *arg1 = (Gyoto::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Error, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Error" "', argument " "1"" of type '" "Gyoto::Error *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Error * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Error_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Error, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_throwError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:throwError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "throwError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      Gyoto::throwError(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SmartPointee__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::SmartPointee *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SmartPointee")) SWIG_fail;
  {
    try {
      result = (Gyoto::SmartPointee *)new Gyoto::SmartPointee();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__SmartPointee, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref SmartPointee
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SmartPointee(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::SmartPointee *arg1 = (Gyoto::SmartPointee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SmartPointee",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__SmartPointee, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmartPointee" "', argument " "1"" of type '" "Gyoto::SmartPointee *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::SmartPointee * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref SmartPointee
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SmartPointee__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::SmartPointee *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::SmartPointee *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SmartPointee",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__SmartPointee,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SmartPointee" "', argument " "1"" of type '" "Gyoto::SmartPointee const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmartPointee" "', argument " "1"" of type '" "Gyoto::SmartPointee const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::SmartPointee * >(argp1);
  {
    try {
      result = (Gyoto::SmartPointee *)new Gyoto::SmartPointee((Gyoto::SmartPointee const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__SmartPointee, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref SmartPointee
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SmartPointee(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SmartPointee__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__SmartPointee, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SmartPointee__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SmartPointee'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::SmartPointee::SmartPointee()\n"
    "    Gyoto::SmartPointee::SmartPointee(Gyoto::SmartPointee const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SmartPointee_incRefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::SmartPointee *arg1 = (Gyoto::SmartPointee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SmartPointee_incRefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__SmartPointee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartPointee_incRefCount" "', argument " "1"" of type '" "Gyoto::SmartPointee *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::SmartPointee * >(argp1);
  {
    try {
      (arg1)->incRefCount();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartPointee_decRefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::SmartPointee *arg1 = (Gyoto::SmartPointee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SmartPointee_decRefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__SmartPointee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartPointee_decRefCount" "', argument " "1"" of type '" "Gyoto::SmartPointee *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::SmartPointee * >(argp1);
  {
    try {
      result = (int)(arg1)->decRefCount();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartPointee_getRefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::SmartPointee *arg1 = (Gyoto::SmartPointee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SmartPointee_getRefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__SmartPointee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartPointee_getRefCount" "', argument " "1"" of type '" "Gyoto::SmartPointee *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::SmartPointee * >(argp1);
  {
    try {
      result = (int)(arg1)->getRefCount();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartPointee_getPointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::SmartPointee *arg1 = (Gyoto::SmartPointee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SmartPointee_getPointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__SmartPointee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartPointee_getPointer" "', argument " "1"" of type '" "Gyoto::SmartPointee *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::SmartPointee * >(argp1);
  {
    try {
      result = (long)Gyoto_SmartPointee_getPointer(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SmartPointee_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__SmartPointee, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_initRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:initRegister",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "initRegister" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      Gyoto::Register::init((char const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_initRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":initRegister")) SWIG_fail;
  {
    try {
      Gyoto::Register::init();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_initRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_initRegister__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_initRegister__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'initRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Register::init(char const *)\n"
    "    Gyoto::Register::init()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_listRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":listRegister")) SWIG_fail;
  {
    try {
      Gyoto::Register::list();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_loadPlugin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:loadPlugin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadPlugin" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "loadPlugin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (void *)Gyoto::loadPlugin((char const *)arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_loadPlugin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) (char *)0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:loadPlugin",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadPlugin" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (void *)Gyoto::loadPlugin((char const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_loadPlugin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_loadPlugin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_loadPlugin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'loadPlugin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::loadPlugin(char const *const,int)\n"
    "    Gyoto::loadPlugin(char const *const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_havePlugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:havePlugin",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "havePlugin" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)Gyoto::havePlugin(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_requirePlugin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:requirePlugin",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "requirePlugin" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "requirePlugin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      Gyoto::requirePlugin(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_requirePlugin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:requirePlugin",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "requirePlugin" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      Gyoto::requirePlugin(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_requirePlugin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_requirePlugin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_requirePlugin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'requirePlugin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::requirePlugin(std::string,int)\n"
    "    Gyoto::requirePlugin(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RegisterEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Gyoto::SmartPointee::Subcontractor_t *arg2 = (Gyoto::SmartPointee::Subcontractor_t *) 0 ;
  Gyoto::Register::Entry *arg3 = (Gyoto::Register::Entry *) 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Register::Entry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RegisterEntry",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RegisterEntry" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_RegisterEntry" "', argument " "2"" of type '" "Gyoto::SmartPointee::Subcontractor_t *""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gyoto__Register__Entry, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RegisterEntry" "', argument " "3"" of type '" "Gyoto::Register::Entry *""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Register::Entry * >(argp3);
  {
    try {
      result = (Gyoto::Register::Entry *)new Gyoto::Register::Entry(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Register__Entry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegisterEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Register::Entry *arg1 = (Gyoto::Register::Entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RegisterEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Register__Entry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegisterEntry" "', argument " "1"" of type '" "Gyoto::Register::Entry *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Register::Entry * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterEntry_getSubcontractor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Register::Entry *arg1 = (Gyoto::Register::Entry *) 0 ;
  std::string arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gyoto::SmartPointee::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RegisterEntry_getSubcontractor",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Register__Entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterEntry_getSubcontractor" "', argument " "1"" of type '" "Gyoto::Register::Entry *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Register::Entry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "RegisterEntry_getSubcontractor" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterEntry_getSubcontractor" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterEntry_getSubcontractor" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegisterEntry_getSubcontractor" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (Gyoto::SmartPointee::Subcontractor_t *)(arg1)->getSubcontractor(arg2,*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterEntry_getSubcontractor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Register::Entry *arg1 = (Gyoto::Register::Entry *) 0 ;
  std::string arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::SmartPointee::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegisterEntry_getSubcontractor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Register__Entry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterEntry_getSubcontractor" "', argument " "1"" of type '" "Gyoto::Register::Entry *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Register::Entry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "RegisterEntry_getSubcontractor" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegisterEntry_getSubcontractor" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterEntry_getSubcontractor" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  {
    try {
      result = (Gyoto::SmartPointee::Subcontractor_t *)(arg1)->getSubcontractor(arg2,*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegisterEntry_getSubcontractor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Register__Entry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RegisterEntry_getSubcontractor__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Register__Entry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegisterEntry_getSubcontractor__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RegisterEntry_getSubcontractor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Register::Entry::getSubcontractor(std::string,std::string &,int)\n"
    "    Gyoto::Register::Entry::getSubcontractor(std::string,std::string &)\n");
  return 0;
}


SWIGINTERN PyObject *RegisterEntry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Register__Entry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Functor__Double_constDoubleArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_constDoubleArray *arg1 = (Gyoto::Functor::Double_constDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Functor__Double_constDoubleArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Functor__Double_constDoubleArray" "', argument " "1"" of type '" "Gyoto::Functor::Double_constDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_constDoubleArray * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Functor__Double_constDoubleArray___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_constDoubleArray *arg1 = (Gyoto::Functor::Double_constDoubleArray *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Functor__Double_constDoubleArray___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Functor__Double_constDoubleArray___call__" "', argument " "1"" of type '" "Gyoto::Functor::Double_constDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_constDoubleArray * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *Functor__Double_constDoubleArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Functor__Double_Double_const(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_Double_const *arg1 = (Gyoto::Functor::Double_Double_const *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Functor__Double_Double_const",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_Double_const, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Functor__Double_Double_const" "', argument " "1"" of type '" "Gyoto::Functor::Double_Double_const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_Double_const * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Functor__Double_Double_const_status_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_Double_const *arg1 = (Gyoto::Functor::Double_Double_const *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Functor__Double_Double_const_status_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_Double_const, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Functor__Double_Double_const_status_set" "', argument " "1"" of type '" "Gyoto::Functor::Double_Double_const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_Double_const * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Functor__Double_Double_const_status_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->status = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Functor__Double_Double_const_status_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_Double_const *arg1 = (Gyoto::Functor::Double_Double_const *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Functor__Double_Double_const_status_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_Double_const, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Functor__Double_Double_const_status_get" "', argument " "1"" of type '" "Gyoto::Functor::Double_Double_const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_Double_const * >(argp1);
  result = (int) ((arg1)->status);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Functor__Double_Double_const___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_Double_const *arg1 = (Gyoto::Functor::Double_Double_const *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Functor__Double_Double_const___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_Double_const, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Functor__Double_Double_const___call__" "', argument " "1"" of type '" "Gyoto::Functor::Double_Double_const const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_Double_const * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Functor__Double_Double_const___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Functor::Double_Double_const const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Functor__Double_Double_const_ridders(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_Double_const *arg1 = (Gyoto::Functor::Double_Double_const *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Functor__Double_Double_const_ridders",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_Double_const, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Functor__Double_Double_const_ridders" "', argument " "1"" of type '" "Gyoto::Functor::Double_Double_const const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_Double_const * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Functor__Double_Double_const_ridders" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Functor__Double_Double_const_ridders" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Functor::Double_Double_const const *)arg1)->ridders(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Functor__Double_Double_const_secant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Functor::Double_Double_const *arg1 = (Gyoto::Functor::Double_Double_const *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Functor__Double_Double_const_secant",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Functor__Double_Double_const, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Functor__Double_Double_const_secant" "', argument " "1"" of type '" "Gyoto::Functor::Double_Double_const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Functor::Double_Double_const * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Functor__Double_Double_const_secant" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Functor__Double_Double_const_secant" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->secant(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Functor__Double_Double_const_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Functor__Double_Double_const, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Listener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Hook::Listener *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Listener")) SWIG_fail;
  {
    try {
      result = (Gyoto::Hook::Listener *)new Gyoto::Hook::Listener();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Hook__Listener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Listener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Hook::Listener *arg1 = (Gyoto::Hook::Listener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Listener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Hook__Listener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Listener" "', argument " "1"" of type '" "Gyoto::Hook::Listener *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Hook::Listener * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Listener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Hook__Listener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Teller__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Hook::Teller *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Teller")) SWIG_fail;
  {
    try {
      result = (Gyoto::Hook::Teller *)new Gyoto::Hook::Teller();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Hook__Teller, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Teller__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Hook::Teller *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Hook::Teller *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Teller",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Hook__Teller,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Teller" "', argument " "1"" of type '" "Gyoto::Hook::Teller const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Teller" "', argument " "1"" of type '" "Gyoto::Hook::Teller const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Hook::Teller * >(argp1);
  {
    try {
      result = (Gyoto::Hook::Teller *)new Gyoto::Hook::Teller((Gyoto::Hook::Teller const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Hook__Teller, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Teller(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Teller__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Hook__Teller, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Teller__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Teller'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Hook::Teller::Teller()\n"
    "    Gyoto::Hook::Teller::Teller(Gyoto::Hook::Teller const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Teller(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Hook::Teller *arg1 = (Gyoto::Hook::Teller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Teller",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Hook__Teller, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Teller" "', argument " "1"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Hook::Teller * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Teller_hook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Hook::Teller *arg1 = (Gyoto::Hook::Teller *) 0 ;
  Gyoto::Hook::Listener *arg2 = (Gyoto::Hook::Listener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Teller_hook",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Hook__Teller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Teller_hook" "', argument " "1"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Hook::Teller * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Hook__Listener, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Teller_hook" "', argument " "2"" of type '" "Gyoto::Hook::Listener *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Hook::Listener * >(argp2);
  {
    try {
      (arg1)->hook(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Teller_unhook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Hook::Teller *arg1 = (Gyoto::Hook::Teller *) 0 ;
  Gyoto::Hook::Listener *arg2 = (Gyoto::Hook::Listener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Teller_unhook",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Hook__Teller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Teller_unhook" "', argument " "1"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Hook::Teller * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Hook__Listener, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Teller_unhook" "', argument " "2"" of type '" "Gyoto::Hook::Listener *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Hook::Listener * >(argp2);
  {
    try {
      (arg1)->unhook(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Teller_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Hook__Teller, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WIP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::WIP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WIP")) SWIG_fail;
  {
    try {
      result = (Gyoto::WIP *)new Gyoto::WIP();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__WIP, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WIP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::WIP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WIP",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_WIP" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::WIP *)new Gyoto::WIP(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__WIP, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WIP(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_WIP__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WIP__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WIP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::WIP::WIP()\n"
    "    Gyoto::WIP::WIP(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_WIP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::WIP *arg1 = (Gyoto::WIP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WIP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__WIP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WIP" "', argument " "1"" of type '" "Gyoto::WIP *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::WIP * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WIP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__WIP, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Value")) SWIG_fail;
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Value" "', argument " "1"" of type '" "Gyoto::Value *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  Gyoto::Value *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Value_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_assign" "', argument " "1"" of type '" "Gyoto::Value *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Value,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Value_assign" "', argument " "2"" of type '" "Gyoto::Value const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Value_assign" "', argument " "2"" of type '" "Gyoto::Value const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Value * >(argp2);
  {
    try {
      result = (Gyoto::Value *) &(arg1)->operator =((Gyoto::Value const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_type_get" "', argument " "1"" of type '" "Gyoto::Value *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  result = (int) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toDouble" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = (double)((Gyoto::Value const *)arg1)->operator double();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Value" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value___nonzero__" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Value const *)arg1)->operator bool();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Value" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toLong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toLong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toLong" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = (long)((Gyoto::Value const *)arg1)->operator long();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Value" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toULong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toULong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toULong" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = (unsigned long)((Gyoto::Value const *)arg1)->operator unsigned long();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Value" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toString" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = ((Gyoto::Value const *)arg1)->operator std::string();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Value" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toVDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toVDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toVDouble" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = ((Gyoto::Value const *)arg1)->operator std::vector<double>();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned long,std::allocator< unsigned long > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Value" "', argument " "1"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toMetric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toMetric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toMetric" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = ((Gyoto::Value const *)arg1)->operator Gyoto::SmartPointer<Gyoto::Metric::Generic>();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toAstrobj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toAstrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toAstrobj" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = ((Gyoto::Value const *)arg1)->operator Gyoto::SmartPointer<Gyoto::Astrobj::Generic>();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrum::Generic" "*'");
    }
    Gyoto::Spectrum::Generic * kp=reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toSpectrum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toSpectrum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toSpectrum" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = ((Gyoto::Value const *)arg1)->operator Gyoto::SmartPointer<Gyoto::Spectrum::Generic>();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrometer::Generic" "*'");
    }
    Gyoto::Spectrometer::Generic * kp=reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toSpectrometer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toSpectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toSpectrometer" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = ((Gyoto::Value const *)arg1)->operator Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Value",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  {
    try {
      result = (Gyoto::Value *)new Gyoto::Value(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Value__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_9(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_11(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_12(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Value__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Value__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Value__SWIG_6(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Value::Value()\n"
    "    Gyoto::Value::Value(double)\n"
    "    Gyoto::Value::Value(bool)\n"
    "    Gyoto::Value::Value(long)\n"
    "    Gyoto::Value::Value(unsigned long)\n"
    "    Gyoto::Value::Value(std::string)\n"
    "    Gyoto::Value::Value(std::vector< double,std::allocator< double > >)\n"
    "    Gyoto::Value::Value(std::vector< unsigned long,std::allocator< unsigned long > >)\n"
    "    Gyoto::Value::Value(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Value::Value(Gyoto::SmartPointer< Gyoto::Astrobj::Generic >)\n"
    "    Gyoto::Value::Value(Gyoto::SmartPointer< Gyoto::Spectrum::Generic >)\n"
    "    Gyoto::Value::Value(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >)\n"
    "    Gyoto::Value::Value(Gyoto::SmartPointer< Gyoto::Screen >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Value_toScreen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toScreen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toScreen" "', argument " "1"" of type '" "Gyoto::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = ((Gyoto::Value const *)arg1)->operator Gyoto::SmartPointer<Gyoto::Screen>();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toSizeT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toSizeT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toSizeT" "', argument " "1"" of type '" "Gyoto::Value *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = Gyoto_Value_toSizeT(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toVULong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Value *arg1 = (Gyoto::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long,std::allocator< unsigned long > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Value_toVULong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toVULong" "', argument " "1"" of type '" "Gyoto::Value *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Value * >(argp1);
  {
    try {
      result = Gyoto_Value_toVULong(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< unsigned long,std::allocator< unsigned long > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Value_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Value, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Object_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Object const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Object_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Object_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Object_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Object::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Object_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_getProperties" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Object const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Object_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Object_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Object_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Object::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Object_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_plugins" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_plugins" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    try {
      result = ((Gyoto::Object const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Object_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Object_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Object_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Object::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Object::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Object__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Gyoto::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Object",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Object" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Object" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Gyoto::Object *)new Gyoto::Object((std::string const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Object, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Object__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Object")) SWIG_fail;
  {
    try {
      result = (Gyoto::Object *)new Gyoto::Object();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Object, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Object__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Object",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Object,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Object" "', argument " "1"" of type '" "Gyoto::Object const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Object" "', argument " "1"" of type '" "Gyoto::Object const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    try {
      result = (Gyoto::Object *)new Gyoto::Object((Gyoto::Object const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Object, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Object(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Object__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Object__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Object__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Object'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Object::Object(std::string const &)\n"
    "    Gyoto::Object::Object()\n"
    "    Gyoto::Object::Object(Gyoto::Object const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Object",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Object" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::Property *arg2 = 0 ;
  Gyoto::Value arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Object_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_set" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_set" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_set" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property * >(argp2);
  {
    int res=-1;
    void *argp=0;
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Metric::Generic> temp = reinterpret_cast< Gyoto::Metric::Generic * >(argp);
        if(temp) arg3 = Gyoto::Value(temp);
        else arg3 = Gyoto::Value();
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Value, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::Value * temp = reinterpret_cast< Gyoto::Value * >(argp);
        arg3 = *temp;
        if (SWIG_IsNewObj(res)) delete temp;
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Astrobj::Generic> temp = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrum::Generic> temp = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrometer::Generic> temp = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Screen> temp = reinterpret_cast< Gyoto::Screen * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      std::string *temp = 0;
      res = SWIG_AsPtr_std_string (obj2, &temp) ;
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<unsigned long> *temp=0;
      res = swig::traits_asptr< std::vector<unsigned long> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<double> *temp=0;
      res = swig::traits_asptr< std::vector<double> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      long temp=0;
      res = SWIG_AsVal_long (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res)) {
      double temp=0;
      res = SWIG_AsVal_double (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res))
    SWIG_exception_fail(SWIG_ArgError(res), "argument of type 'Gyoto::Value*'");
    
  }
  {
    try {
      (arg1)->set((Gyoto::Property const &)*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::Property *arg2 = 0 ;
  Gyoto::Value arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Object_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_set" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_set" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_set" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property * >(argp2);
  {
    int res=-1;
    void *argp=0;
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Metric::Generic> temp = reinterpret_cast< Gyoto::Metric::Generic * >(argp);
        if(temp) arg3 = Gyoto::Value(temp);
        else arg3 = Gyoto::Value();
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Value, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::Value * temp = reinterpret_cast< Gyoto::Value * >(argp);
        arg3 = *temp;
        if (SWIG_IsNewObj(res)) delete temp;
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Astrobj::Generic> temp = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrum::Generic> temp = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrometer::Generic> temp = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Screen> temp = reinterpret_cast< Gyoto::Screen * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      std::string *temp = 0;
      res = SWIG_AsPtr_std_string (obj2, &temp) ;
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<unsigned long> *temp=0;
      res = swig::traits_asptr< std::vector<unsigned long> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<double> *temp=0;
      res = swig::traits_asptr< std::vector<double> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      long temp=0;
      res = SWIG_AsVal_long (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res)) {
      double temp=0;
      res = SWIG_AsVal_double (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res))
    SWIG_exception_fail(SWIG_ArgError(res), "argument of type 'Gyoto::Value*'");
    
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Object_set" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_set" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->set((Gyoto::Property const &)*arg2,arg3,(std::string const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  std::string *arg2 = 0 ;
  Gyoto::Value arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Object_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_set" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    int res=-1;
    void *argp=0;
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Metric::Generic> temp = reinterpret_cast< Gyoto::Metric::Generic * >(argp);
        if(temp) arg3 = Gyoto::Value(temp);
        else arg3 = Gyoto::Value();
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Value, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::Value * temp = reinterpret_cast< Gyoto::Value * >(argp);
        arg3 = *temp;
        if (SWIG_IsNewObj(res)) delete temp;
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Astrobj::Generic> temp = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrum::Generic> temp = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrometer::Generic> temp = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Screen> temp = reinterpret_cast< Gyoto::Screen * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      std::string *temp = 0;
      res = SWIG_AsPtr_std_string (obj2, &temp) ;
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<unsigned long> *temp=0;
      res = swig::traits_asptr< std::vector<unsigned long> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<double> *temp=0;
      res = swig::traits_asptr< std::vector<double> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      long temp=0;
      res = SWIG_AsVal_long (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res)) {
      double temp=0;
      res = SWIG_AsVal_double (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res))
    SWIG_exception_fail(SWIG_ArgError(res), "argument of type 'Gyoto::Value*'");
    
  }
  {
    try {
      (arg1)->set((std::string const &)*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_set__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  std::string *arg2 = 0 ;
  Gyoto::Value arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Object_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_set" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    int res=-1;
    void *argp=0;
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Metric::Generic> temp = reinterpret_cast< Gyoto::Metric::Generic * >(argp);
        if(temp) arg3 = Gyoto::Value(temp);
        else arg3 = Gyoto::Value();
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Value, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::Value * temp = reinterpret_cast< Gyoto::Value * >(argp);
        arg3 = *temp;
        if (SWIG_IsNewObj(res)) delete temp;
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Astrobj::Generic> temp = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrum::Generic> temp = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Spectrometer::Generic> temp = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
      if (SWIG_IsOK(res)) {
        Gyoto::SmartPointer<Gyoto::Screen> temp = reinterpret_cast< Gyoto::Screen * >(argp);
        arg3 = Gyoto::Value(temp);
      }
    }
    
    if (!SWIG_IsOK(res)) {
      std::string *temp = 0;
      res = SWIG_AsPtr_std_string (obj2, &temp) ;
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<unsigned long> *temp=0;
      res = swig::traits_asptr< std::vector<unsigned long> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      std::vector<double> *temp=0;
      res = swig::traits_asptr< std::vector<double> >::asptr(obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(*temp);
      if (SWIG_IsNewObj(res) && temp) delete temp;
    }
    
    if (!SWIG_IsOK(res)) {
      long temp=0;
      res = SWIG_AsVal_long (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res)) {
      double temp=0;
      res = SWIG_AsVal_double (obj2, &temp);
      if (SWIG_IsOK(res)) arg3 = Gyoto::Value(temp);
    }
    
    if (!SWIG_IsOK(res))
    SWIG_exception_fail(SWIG_ArgError(res), "argument of type 'Gyoto::Value*'");
    
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Object_set" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_set" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->set((std::string const &)*arg2,arg3,(std::string const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_set(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gyoto__Property, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Value, 0);
          _v = res;
        }
        if (_v) {
          return _wrap_Object_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Value, 0);
          _v = res;
        }
        if (_v) {
          return _wrap_Object_set__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gyoto__Property, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Value, 0);
          _v = res;
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Object_set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Value, 0);
          _v = res;
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Object_set__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Object_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Object::set(Gyoto::Property const &,Gyoto::Value)\n"
    "    Gyoto::Object::set(Gyoto::Property const &,Gyoto::Value,std::string const &)\n"
    "    Gyoto::Object::set(std::string const &,Gyoto::Value)\n"
    "    Gyoto::Object::set(std::string const &,Gyoto::Value,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Object_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::Property *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_get" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_get" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_get" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property * >(argp2);
  {
    try {
      result = ((Gyoto::Object const *)arg1)->get((Gyoto::Property const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    switch ((&result)->type) {
    case Gyoto::Property::unsigned_long_t:
      resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result));
      break;
    case Gyoto::Property::long_t:
      resultobj = SWIG_From_long(long(result));
      break;
    case Gyoto::Property::bool_t:
      resultobj = SWIG_From_bool(bool(result));
      break;
    case Gyoto::Property::double_t:
      resultobj = SWIG_From_double(double(result));
      break;
    case Gyoto::Property::filename_t:
    case Gyoto::Property::string_t:
      resultobj = SWIG_From_std_string(static_cast< std::string >(result));
      break;
    case Gyoto::Property::vector_double_t:
      resultobj = swig::from((result).operator std::vector<double>());
      break;
    case Gyoto::Property::vector_unsigned_long_t:
      resultobj = swig::from((result).operator std::vector<unsigned long>());
      break;
    case Gyoto::Property::metric_t:
      {
        Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::astrobj_t:
      {
        Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrum_t:
      {
        Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrometer_t:
      {
        Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::screen_t:
      {
        Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
      }
      break;
    default:
      resultobj = SWIG_NewPointerObj((new Gyoto::Value(static_cast< const Gyoto::Value& >(result))), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_OWN |  0 );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_get" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((Gyoto::Object const *)arg1)->get((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    switch ((&result)->type) {
    case Gyoto::Property::unsigned_long_t:
      resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result));
      break;
    case Gyoto::Property::long_t:
      resultobj = SWIG_From_long(long(result));
      break;
    case Gyoto::Property::bool_t:
      resultobj = SWIG_From_bool(bool(result));
      break;
    case Gyoto::Property::double_t:
      resultobj = SWIG_From_double(double(result));
      break;
    case Gyoto::Property::filename_t:
    case Gyoto::Property::string_t:
      resultobj = SWIG_From_std_string(static_cast< std::string >(result));
      break;
    case Gyoto::Property::vector_double_t:
      resultobj = swig::from((result).operator std::vector<double>());
      break;
    case Gyoto::Property::vector_unsigned_long_t:
      resultobj = swig::from((result).operator std::vector<unsigned long>());
      break;
    case Gyoto::Property::metric_t:
      {
        Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::astrobj_t:
      {
        Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrum_t:
      {
        Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrometer_t:
      {
        Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::screen_t:
      {
        Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
      }
      break;
    default:
      resultobj = SWIG_NewPointerObj((new Gyoto::Value(static_cast< const Gyoto::Value& >(result))), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_OWN |  0 );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::Property *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Object_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_get" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_get" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_get" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Object_get" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_get" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = ((Gyoto::Object const *)arg1)->get((Gyoto::Property const &)*arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    switch ((&result)->type) {
    case Gyoto::Property::unsigned_long_t:
      resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result));
      break;
    case Gyoto::Property::long_t:
      resultobj = SWIG_From_long(long(result));
      break;
    case Gyoto::Property::bool_t:
      resultobj = SWIG_From_bool(bool(result));
      break;
    case Gyoto::Property::double_t:
      resultobj = SWIG_From_double(double(result));
      break;
    case Gyoto::Property::filename_t:
    case Gyoto::Property::string_t:
      resultobj = SWIG_From_std_string(static_cast< std::string >(result));
      break;
    case Gyoto::Property::vector_double_t:
      resultobj = swig::from((result).operator std::vector<double>());
      break;
    case Gyoto::Property::vector_unsigned_long_t:
      resultobj = swig::from((result).operator std::vector<unsigned long>());
      break;
    case Gyoto::Property::metric_t:
      {
        Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::astrobj_t:
      {
        Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrum_t:
      {
        Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrometer_t:
      {
        Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::screen_t:
      {
        Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
      }
      break;
    default:
      resultobj = SWIG_NewPointerObj((new Gyoto::Value(static_cast< const Gyoto::Value& >(result))), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_OWN |  0 );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Object_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_get" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Object_get" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_get" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = ((Gyoto::Object const *)arg1)->get((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    switch ((&result)->type) {
    case Gyoto::Property::unsigned_long_t:
      resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result));
      break;
    case Gyoto::Property::long_t:
      resultobj = SWIG_From_long(long(result));
      break;
    case Gyoto::Property::bool_t:
      resultobj = SWIG_From_bool(bool(result));
      break;
    case Gyoto::Property::double_t:
      resultobj = SWIG_From_double(double(result));
      break;
    case Gyoto::Property::filename_t:
    case Gyoto::Property::string_t:
      resultobj = SWIG_From_std_string(static_cast< std::string >(result));
      break;
    case Gyoto::Property::vector_double_t:
      resultobj = swig::from((result).operator std::vector<double>());
      break;
    case Gyoto::Property::vector_unsigned_long_t:
      resultobj = swig::from((result).operator std::vector<unsigned long>());
      break;
    case Gyoto::Property::metric_t:
      {
        Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::astrobj_t:
      {
        Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrum_t:
      {
        Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::spectrometer_t:
      {
        Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
      }
      break;
    case Gyoto::Property::screen_t:
      {
        Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
        if (normal_pointer) normal_pointer->incRefCount();
        resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
      }
      break;
    default:
      resultobj = SWIG_NewPointerObj((new Gyoto::Value(static_cast< const Gyoto::Value& >(result))), SWIGTYPE_p_Gyoto__Value, SWIG_POINTER_OWN |  0 );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_get(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gyoto__Property, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Object_get__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Object_get__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gyoto__Property, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Object_get__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Object_get__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Object_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Object::get(Gyoto::Property const &) const\n"
    "    Gyoto::Object::get(std::string const &) const\n"
    "    Gyoto::Object::get(Gyoto::Property const &,std::string const &) const\n"
    "    Gyoto::Object::get(std::string const &,std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Object_property(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_property",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_property" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Object_property" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Object const *)arg1)->property(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Object_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_fillProperty" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Object_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Object const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_fillElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_fillElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_fillElement" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_fillElement" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      ((Gyoto::Object const *)arg1)->fillElement(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_setParameters" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_setParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Object_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_setParameter" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Object_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Object_setParameter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Object_setParameter" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (int)(arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_setParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::Property *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Object_setParameter",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_setParameter" "', argument " "1"" of type '" "Gyoto::Object *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_setParameter" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_setParameter" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Object_setParameter" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_setParameter" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Object_setParameter" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_setParameter" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Object_setParameter" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_setParameter" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->setParameter((Gyoto::Property const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_setParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Object_setParameter__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gyoto__Property, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Object_setParameter__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Object_setParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Object::setParameter(std::string,std::string,std::string)\n"
    "    Gyoto::Object::setParameter(Gyoto::Property const &,std::string const &,std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Object_describeProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  Gyoto::Property *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_describeProperty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_describeProperty" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Object_describeProperty" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Object_describeProperty" "', argument " "2"" of type '" "Gyoto::Property const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property * >(argp2);
  {
    try {
      result = ((Gyoto::Object const *)arg1)->describeProperty((Gyoto::Property const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_help(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_help",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_help" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    try {
      ((Gyoto::Object const *)arg1)->help();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_kind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Object *arg1 = (Gyoto::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_kind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_kind" "', argument " "1"" of type '" "Gyoto::Object const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Object * >(argp1);
  {
    try {
      result = ((Gyoto::Object const *)arg1)->kind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Object_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Object, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Worldline_stopcond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_stopcond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_stopcond_set" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_stopcond_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->stopcond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_stopcond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_stopcond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_stopcond_get" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  result = (int) ((arg1)->stopcond);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Worldline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Worldline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Worldline" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getImin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_getImin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getImin" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->getImin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getImax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_getImax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getImax" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->getImax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getI0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_getI0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getI0" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->getI0();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_getMass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getMass" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->getMass();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_metric" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_metric" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_metric__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_metric__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Worldline::metric() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_initCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->initCoord((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_initCoord" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_initCoord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Worldline_initCoord__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::initCoord(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Worldline::initCoord() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  int arg3 ;
  double *arg4 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Worldline_setInitCoord",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setInitCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_setInitCoord" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,arg3,(double const (*))arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_setInitCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setInitCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_setInitCoord" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitCoord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_setInitCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setInitCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitCoord__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  double *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_setInitCoord",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setInitCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Worldline_setInitCoord" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitCoord__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_setInitCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setInitCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->setInitCoord((double const (*))arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Worldline_setInitCoord__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Worldline_setInitCoord__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_Worldline_setInitCoord__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Worldline_setInitCoord__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_Worldline_setInitCoord__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_setInitCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::setInitCoord(double const [8],int,double const [4],double const [4])\n"
    "    Gyoto::Worldline::setInitCoord(double const [8],int)\n"
    "    Gyoto::Worldline::setInitCoord(double const [8])\n"
    "    Gyoto::Worldline::setInitCoord(double const [4],double const [3],int)\n"
    "    Gyoto::Worldline::setInitCoord(double const [4],double const [3])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_setPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_setPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setPosition" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setPosition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_setVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setVelocity" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      3 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setVelocity((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_reset" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      (arg1)->reset();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_reInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_reInit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_reInit" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      (arg1)->reInit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_className" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_className_l" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_integrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_integrator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_integrator" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->integrator((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_integrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_integrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_integrator" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->integrator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_integrator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_integrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Worldline_integrator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_integrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::integrator(std::string const &)\n"
    "    Gyoto::Worldline::integrator() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_integ31__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_integ31",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_integ31" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_integ31" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->integ31(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_integ31__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_integ31",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_integ31" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Worldline const *)arg1)->integ31();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_integ31(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_integ31__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_integ31__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_integ31'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::integ31(bool)\n"
    "    Gyoto::Worldline::integ31() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_deltaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_deltaMin" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->deltaMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_deltaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_deltaMin" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_deltaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_deltaMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_deltaMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_deltaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::deltaMin() const\n"
    "    Gyoto::Worldline::deltaMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_deltaMax" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_absTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_absTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_absTol" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_absTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->absTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_absTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_absTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_absTol" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->absTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_absTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_absTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_absTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_absTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::absTol(double)\n"
    "    Gyoto::Worldline::absTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_relTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_relTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_relTol" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_relTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->relTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_relTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_relTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_relTol" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->relTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_relTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_relTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_relTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_relTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::relTol(double)\n"
    "    Gyoto::Worldline::relTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_maxCrossEqplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_maxCrossEqplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_maxCrossEqplane" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->maxCrossEqplane(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_maxCrossEqplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_maxCrossEqplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->maxCrossEqplane();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_maxCrossEqplane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_maxCrossEqplane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_maxCrossEqplane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_maxCrossEqplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::maxCrossEqplane(double)\n"
    "    Gyoto::Worldline::maxCrossEqplane() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_deltaMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_deltaMax" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_deltaMax" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->deltaMax((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMax__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_deltaMax" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_deltaMax__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_deltaMax__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Worldline_deltaMax__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::deltaMax() const\n"
    "    Gyoto::Worldline::deltaMax(double const [8],double) const\n"
    "    Gyoto::Worldline::deltaMax(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMaxOverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_deltaMaxOverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->deltaMaxOverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMaxOverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_deltaMaxOverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_deltaMaxOverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMaxOverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_deltaMaxOverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_deltaMaxOverR__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_deltaMaxOverR__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_deltaMaxOverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::deltaMaxOverR() const\n"
    "    Gyoto::Worldline::deltaMaxOverR(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_delta" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->delta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_delta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_delta" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->delta(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_delta__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_delta" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->delta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_delta__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_delta" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->delta((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_delta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_delta__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_delta__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Worldline_delta__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Worldline_delta__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::delta(double const)\n"
    "    Gyoto::Worldline::delta(double,std::string const &)\n"
    "    Gyoto::Worldline::delta() const\n"
    "    Gyoto::Worldline::delta(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_tMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_tMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_tMin" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->tMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_tMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_tMin" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Worldline const *)arg1)->tMin((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_tMin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_tMin" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_tMin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_tMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_tMin" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->tMin(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_tMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_tMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_tMin__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Worldline_tMin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Worldline_tMin__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_tMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::tMin() const\n"
    "    Gyoto::Worldline::tMin(std::string const &) const\n"
    "    Gyoto::Worldline::tMin(double)\n"
    "    Gyoto::Worldline::tMin(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_adaptive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_adaptive" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_adaptive" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->adaptive(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_adaptive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_adaptive" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Worldline const *)arg1)->adaptive();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_adaptive__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_adaptive__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::adaptive(bool)\n"
    "    Gyoto::Worldline::adaptive() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_secondary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_secondary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_secondary" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_secondary" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->secondary(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_secondary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_secondary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_secondary" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Worldline const *)arg1)->secondary();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_secondary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_secondary__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_secondary__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_secondary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::secondary(bool)\n"
    "    Gyoto::Worldline::secondary() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_parallelTransport__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_parallelTransport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_parallelTransport" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_parallelTransport" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->parallelTransport(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_parallelTransport__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_parallelTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_parallelTransport" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Worldline const *)arg1)->parallelTransport();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_parallelTransport(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_parallelTransport__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_parallelTransport__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_parallelTransport'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::parallelTransport(bool)\n"
    "    Gyoto::Worldline::parallelTransport() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_maxiter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_maxiter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_maxiter" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_maxiter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->maxiter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_maxiter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_maxiter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_maxiter" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->maxiter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_maxiter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_maxiter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_maxiter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_maxiter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::maxiter(size_t)\n"
    "    Gyoto::Worldline::maxiter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_getCst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_getCst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCst" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Worldline const *)arg1)->getCst();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setCst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_setCst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setCst" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (size_t) array_size(array2,0);
  }
  {
    try {
      (arg1)->setCst((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_constantsOfMotion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  std::vector< double,std::allocator< double > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_constantsOfMotion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_constantsOfMotion" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Worldline_constantsOfMotion" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->constantsOfMotion(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_constantsOfMotion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_constantsOfMotion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_constantsOfMotion" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->constantsOfMotion();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_constantsOfMotion(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Worldline_constantsOfMotion__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Worldline_constantsOfMotion__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_constantsOfMotion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::constantsOfMotion(std::vector< double,std::allocator< double > > const)\n"
    "    Gyoto::Worldline::constantsOfMotion() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitialCondition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Worldline_setInitialCondition",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Worldline_setInitialCondition" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj5,
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      (arg1)->setInitialCondition(arg2,(double const (*))arg3,arg4,(double const (*))arg5,(double const (*))arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitialCondition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  double *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_setInitialCondition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Worldline_setInitialCondition" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setInitialCondition(arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_setInitialCondition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Worldline_setInitialCondition__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) || PySequence_Check(argv[5]);
              }
              if (_v) {
                return _wrap_Worldline_setInitialCondition__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_setInitialCondition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic >,double const [8],int const,double const [4],double const [4])\n"
    "    Gyoto::Worldline::setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic >,double const [8],int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_getInitialCoord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_getInitialCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getInitialCoord" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getInitialCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_getInitialCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->getInitialCoord(*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  size_t arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_getCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->getCoord(arg2,*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  size_t arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_getCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  {
    try {
      (arg1)->getCoord(arg2,*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->getCoord(arg2,*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_getCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  {
    try {
      (arg1)->getCoord(arg2,*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesianPos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  size_t arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_getCartesianPos",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCartesianPos" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_getCartesianPos" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Worldline const *)arg1)->getCartesianPos(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_xStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  size_t arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_xStore",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_xStore" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_xStore" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_xStore" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Worldline_xStore" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Worldline_xStore" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->xStore(arg2,(Gyoto::state_t const &)*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_xFill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Worldline_xFill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_xFill" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_xFill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_xFill" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->xFill(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_xFill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_xFill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_xFill" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_xFill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->xFill(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_xFill(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_xFill__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Worldline_xFill__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_xFill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::xFill(double,bool)\n"
    "    Gyoto::Worldline::xFill(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_get_nelements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Worldline_get_nelements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_nelements" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    try {
      result = ((Gyoto::Worldline const *)arg1)->get_nelements();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_get_t",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_t" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_get_t" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->get_t(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_tau(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_get_tau",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_tau" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_get_tau" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->get_tau(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Worldline_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCartesian" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCartesian" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCartesian" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Worldline_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCartesian" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCartesian" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesian__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Worldline_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCartesian" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCartesian" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesian__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Worldline_getCartesian",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCartesian" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCartesian" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCartesian" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCartesian" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCartesian" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCartesian" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      (arg1)->getCartesian((double const *)arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Worldline_getCartesian__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Worldline_getCartesian__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Worldline_getCartesian__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Worldline_getCartesian__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_getCartesian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCartesian(double const *const,size_t const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCartesian(double const *const,size_t const,double *const,double *const,double *const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_get_xyz__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_get_xyz",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_xyz" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_get_xyz" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_get_xyz" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_get_xyz" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->get_xyz(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  double *arg16 = (double *) 0 ;
  double *arg17 = (double *) 0 ;
  double *arg18 = (double *) 0 ;
  double *arg19 = (double *) 0 ;
  bool arg20 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  void *argp16 = 0 ;
  int res16 = 0 ;
  void *argp17 = 0 ;
  int res17 = 0 ;
  void *argp18 = 0 ;
  int res18 = 0 ;
  void *argp19 = 0 ;
  int res19 = 0 ;
  bool val20 ;
  int ecode20 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  PyObject * obj16 = 0 ;
  PyObject * obj17 = 0 ;
  PyObject * obj18 = 0 ;
  PyObject * obj19 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18,&obj19)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Worldline_getCoord" "', argument " "14"" of type '" "double *""'"); 
  }
  arg14 = reinterpret_cast< double * >(argp14);
  res15 = SWIG_ConvertPtr(obj14, &argp15,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "Worldline_getCoord" "', argument " "15"" of type '" "double *""'"); 
  }
  arg15 = reinterpret_cast< double * >(argp15);
  res16 = SWIG_ConvertPtr(obj15, &argp16,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "Worldline_getCoord" "', argument " "16"" of type '" "double *""'"); 
  }
  arg16 = reinterpret_cast< double * >(argp16);
  res17 = SWIG_ConvertPtr(obj16, &argp17,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res17)) {
    SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "Worldline_getCoord" "', argument " "17"" of type '" "double *""'"); 
  }
  arg17 = reinterpret_cast< double * >(argp17);
  res18 = SWIG_ConvertPtr(obj17, &argp18,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res18)) {
    SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "Worldline_getCoord" "', argument " "18"" of type '" "double *""'"); 
  }
  arg18 = reinterpret_cast< double * >(argp18);
  res19 = SWIG_ConvertPtr(obj18, &argp19,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res19)) {
    SWIG_exception_fail(SWIG_ArgError(res19), "in method '" "Worldline_getCoord" "', argument " "19"" of type '" "double *""'"); 
  }
  arg19 = reinterpret_cast< double * >(argp19);
  ecode20 = SWIG_AsVal_bool(obj19, &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Worldline_getCoord" "', argument " "20"" of type '" "bool""'");
  } 
  arg20 = static_cast< bool >(val20);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  double *arg16 = (double *) 0 ;
  double *arg17 = (double *) 0 ;
  double *arg18 = (double *) 0 ;
  double *arg19 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  void *argp16 = 0 ;
  int res16 = 0 ;
  void *argp17 = 0 ;
  int res17 = 0 ;
  void *argp18 = 0 ;
  int res18 = 0 ;
  void *argp19 = 0 ;
  int res19 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  PyObject * obj16 = 0 ;
  PyObject * obj17 = 0 ;
  PyObject * obj18 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17,&obj18)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Worldline_getCoord" "', argument " "14"" of type '" "double *""'"); 
  }
  arg14 = reinterpret_cast< double * >(argp14);
  res15 = SWIG_ConvertPtr(obj14, &argp15,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "Worldline_getCoord" "', argument " "15"" of type '" "double *""'"); 
  }
  arg15 = reinterpret_cast< double * >(argp15);
  res16 = SWIG_ConvertPtr(obj15, &argp16,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "Worldline_getCoord" "', argument " "16"" of type '" "double *""'"); 
  }
  arg16 = reinterpret_cast< double * >(argp16);
  res17 = SWIG_ConvertPtr(obj16, &argp17,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res17)) {
    SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "Worldline_getCoord" "', argument " "17"" of type '" "double *""'"); 
  }
  arg17 = reinterpret_cast< double * >(argp17);
  res18 = SWIG_ConvertPtr(obj17, &argp18,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res18)) {
    SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "Worldline_getCoord" "', argument " "18"" of type '" "double *""'"); 
  }
  arg18 = reinterpret_cast< double * >(argp18);
  res19 = SWIG_ConvertPtr(obj18, &argp19,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res19)) {
    SWIG_exception_fail(SWIG_ArgError(res19), "in method '" "Worldline_getCoord" "', argument " "19"" of type '" "double *""'"); 
  }
  arg19 = reinterpret_cast< double * >(argp19);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  double *arg16 = (double *) 0 ;
  double *arg17 = (double *) 0 ;
  double *arg18 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  void *argp16 = 0 ;
  int res16 = 0 ;
  void *argp17 = 0 ;
  int res17 = 0 ;
  void *argp18 = 0 ;
  int res18 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  PyObject * obj16 = 0 ;
  PyObject * obj17 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Worldline_getCoord" "', argument " "14"" of type '" "double *""'"); 
  }
  arg14 = reinterpret_cast< double * >(argp14);
  res15 = SWIG_ConvertPtr(obj14, &argp15,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "Worldline_getCoord" "', argument " "15"" of type '" "double *""'"); 
  }
  arg15 = reinterpret_cast< double * >(argp15);
  res16 = SWIG_ConvertPtr(obj15, &argp16,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "Worldline_getCoord" "', argument " "16"" of type '" "double *""'"); 
  }
  arg16 = reinterpret_cast< double * >(argp16);
  res17 = SWIG_ConvertPtr(obj16, &argp17,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res17)) {
    SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "Worldline_getCoord" "', argument " "17"" of type '" "double *""'"); 
  }
  arg17 = reinterpret_cast< double * >(argp17);
  res18 = SWIG_ConvertPtr(obj17, &argp18,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res18)) {
    SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "Worldline_getCoord" "', argument " "18"" of type '" "double *""'"); 
  }
  arg18 = reinterpret_cast< double * >(argp18);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  double *arg16 = (double *) 0 ;
  double *arg17 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  void *argp16 = 0 ;
  int res16 = 0 ;
  void *argp17 = 0 ;
  int res17 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  PyObject * obj16 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Worldline_getCoord" "', argument " "14"" of type '" "double *""'"); 
  }
  arg14 = reinterpret_cast< double * >(argp14);
  res15 = SWIG_ConvertPtr(obj14, &argp15,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "Worldline_getCoord" "', argument " "15"" of type '" "double *""'"); 
  }
  arg15 = reinterpret_cast< double * >(argp15);
  res16 = SWIG_ConvertPtr(obj15, &argp16,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "Worldline_getCoord" "', argument " "16"" of type '" "double *""'"); 
  }
  arg16 = reinterpret_cast< double * >(argp16);
  res17 = SWIG_ConvertPtr(obj16, &argp17,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res17)) {
    SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "Worldline_getCoord" "', argument " "17"" of type '" "double *""'"); 
  }
  arg17 = reinterpret_cast< double * >(argp17);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  double *arg16 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  void *argp16 = 0 ;
  int res16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Worldline_getCoord" "', argument " "14"" of type '" "double *""'"); 
  }
  arg14 = reinterpret_cast< double * >(argp14);
  res15 = SWIG_ConvertPtr(obj14, &argp15,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "Worldline_getCoord" "', argument " "15"" of type '" "double *""'"); 
  }
  arg15 = reinterpret_cast< double * >(argp15);
  res16 = SWIG_ConvertPtr(obj15, &argp16,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "Worldline_getCoord" "', argument " "16"" of type '" "double *""'"); 
  }
  arg16 = reinterpret_cast< double * >(argp16);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Worldline_getCoord" "', argument " "14"" of type '" "double *""'"); 
  }
  arg14 = reinterpret_cast< double * >(argp14);
  res15 = SWIG_ConvertPtr(obj14, &argp15,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "Worldline_getCoord" "', argument " "15"" of type '" "double *""'"); 
  }
  arg15 = reinterpret_cast< double * >(argp15);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Worldline_getCoord" "', argument " "14"" of type '" "double *""'"); 
  }
  arg14 = reinterpret_cast< double * >(argp14);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Worldline_getCoord" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Worldline_getCoord" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  double *arg11 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Worldline_getCoord" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  double *arg10 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Worldline_getCoord" "', argument " "10"" of type '" "double *const""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  double *arg9 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Worldline_getCoord" "', argument " "9"" of type '" "double *const""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  double *arg8 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Worldline_getCoord" "', argument " "8"" of type '" "double *const""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  double *arg7 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Worldline_getCoord" "', argument " "7"" of type '" "double *const""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Worldline_getCoord" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      (arg1)->getCoord((double const *)arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Worldline_getCoord",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCoord" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_getCoord" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_getCoord" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getCoord" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getCoord" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->getCoord(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[21] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 20) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Worldline_getCoord__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Worldline_getCoord__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Worldline_getCoord__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Worldline_getCoord__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Worldline_getCoord__SWIG_19(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Worldline_getCoord__SWIG_18(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Worldline_getCoord__SWIG_17(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Worldline_getCoord__SWIG_16(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Worldline_getCoord__SWIG_15(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_Worldline_getCoord__SWIG_14(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_Worldline_getCoord__SWIG_13(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            return _wrap_Worldline_getCoord__SWIG_12(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              return _wrap_Worldline_getCoord__SWIG_11(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              void *vptr = 0;
                              int res = SWIG_ConvertPtr(argv[13], &vptr, SWIGTYPE_p_double, 0);
                              _v = SWIG_CheckState(res);
                              if (_v) {
                                return _wrap_Worldline_getCoord__SWIG_10(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 15) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              void *vptr = 0;
                              int res = SWIG_ConvertPtr(argv[13], &vptr, SWIGTYPE_p_double, 0);
                              _v = SWIG_CheckState(res);
                              if (_v) {
                                void *vptr = 0;
                                int res = SWIG_ConvertPtr(argv[14], &vptr, SWIGTYPE_p_double, 0);
                                _v = SWIG_CheckState(res);
                                if (_v) {
                                  return _wrap_Worldline_getCoord__SWIG_9(self, args);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              void *vptr = 0;
                              int res = SWIG_ConvertPtr(argv[13], &vptr, SWIGTYPE_p_double, 0);
                              _v = SWIG_CheckState(res);
                              if (_v) {
                                void *vptr = 0;
                                int res = SWIG_ConvertPtr(argv[14], &vptr, SWIGTYPE_p_double, 0);
                                _v = SWIG_CheckState(res);
                                if (_v) {
                                  void *vptr = 0;
                                  int res = SWIG_ConvertPtr(argv[15], &vptr, SWIGTYPE_p_double, 0);
                                  _v = SWIG_CheckState(res);
                                  if (_v) {
                                    return _wrap_Worldline_getCoord__SWIG_8(self, args);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 17) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              void *vptr = 0;
                              int res = SWIG_ConvertPtr(argv[13], &vptr, SWIGTYPE_p_double, 0);
                              _v = SWIG_CheckState(res);
                              if (_v) {
                                void *vptr = 0;
                                int res = SWIG_ConvertPtr(argv[14], &vptr, SWIGTYPE_p_double, 0);
                                _v = SWIG_CheckState(res);
                                if (_v) {
                                  void *vptr = 0;
                                  int res = SWIG_ConvertPtr(argv[15], &vptr, SWIGTYPE_p_double, 0);
                                  _v = SWIG_CheckState(res);
                                  if (_v) {
                                    void *vptr = 0;
                                    int res = SWIG_ConvertPtr(argv[16], &vptr, SWIGTYPE_p_double, 0);
                                    _v = SWIG_CheckState(res);
                                    if (_v) {
                                      return _wrap_Worldline_getCoord__SWIG_7(self, args);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 18) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              void *vptr = 0;
                              int res = SWIG_ConvertPtr(argv[13], &vptr, SWIGTYPE_p_double, 0);
                              _v = SWIG_CheckState(res);
                              if (_v) {
                                void *vptr = 0;
                                int res = SWIG_ConvertPtr(argv[14], &vptr, SWIGTYPE_p_double, 0);
                                _v = SWIG_CheckState(res);
                                if (_v) {
                                  void *vptr = 0;
                                  int res = SWIG_ConvertPtr(argv[15], &vptr, SWIGTYPE_p_double, 0);
                                  _v = SWIG_CheckState(res);
                                  if (_v) {
                                    void *vptr = 0;
                                    int res = SWIG_ConvertPtr(argv[16], &vptr, SWIGTYPE_p_double, 0);
                                    _v = SWIG_CheckState(res);
                                    if (_v) {
                                      void *vptr = 0;
                                      int res = SWIG_ConvertPtr(argv[17], &vptr, SWIGTYPE_p_double, 0);
                                      _v = SWIG_CheckState(res);
                                      if (_v) {
                                        return _wrap_Worldline_getCoord__SWIG_6(self, args);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 19) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              void *vptr = 0;
                              int res = SWIG_ConvertPtr(argv[13], &vptr, SWIGTYPE_p_double, 0);
                              _v = SWIG_CheckState(res);
                              if (_v) {
                                void *vptr = 0;
                                int res = SWIG_ConvertPtr(argv[14], &vptr, SWIGTYPE_p_double, 0);
                                _v = SWIG_CheckState(res);
                                if (_v) {
                                  void *vptr = 0;
                                  int res = SWIG_ConvertPtr(argv[15], &vptr, SWIGTYPE_p_double, 0);
                                  _v = SWIG_CheckState(res);
                                  if (_v) {
                                    void *vptr = 0;
                                    int res = SWIG_ConvertPtr(argv[16], &vptr, SWIGTYPE_p_double, 0);
                                    _v = SWIG_CheckState(res);
                                    if (_v) {
                                      void *vptr = 0;
                                      int res = SWIG_ConvertPtr(argv[17], &vptr, SWIGTYPE_p_double, 0);
                                      _v = SWIG_CheckState(res);
                                      if (_v) {
                                        void *vptr = 0;
                                        int res = SWIG_ConvertPtr(argv[18], &vptr, SWIGTYPE_p_double, 0);
                                        _v = SWIG_CheckState(res);
                                        if (_v) {
                                          return _wrap_Worldline_getCoord__SWIG_5(self, args);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 20) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          void *vptr = 0;
                          int res = SWIG_ConvertPtr(argv[11], &vptr, SWIGTYPE_p_double, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_double, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              void *vptr = 0;
                              int res = SWIG_ConvertPtr(argv[13], &vptr, SWIGTYPE_p_double, 0);
                              _v = SWIG_CheckState(res);
                              if (_v) {
                                void *vptr = 0;
                                int res = SWIG_ConvertPtr(argv[14], &vptr, SWIGTYPE_p_double, 0);
                                _v = SWIG_CheckState(res);
                                if (_v) {
                                  void *vptr = 0;
                                  int res = SWIG_ConvertPtr(argv[15], &vptr, SWIGTYPE_p_double, 0);
                                  _v = SWIG_CheckState(res);
                                  if (_v) {
                                    void *vptr = 0;
                                    int res = SWIG_ConvertPtr(argv[16], &vptr, SWIGTYPE_p_double, 0);
                                    _v = SWIG_CheckState(res);
                                    if (_v) {
                                      void *vptr = 0;
                                      int res = SWIG_ConvertPtr(argv[17], &vptr, SWIGTYPE_p_double, 0);
                                      _v = SWIG_CheckState(res);
                                      if (_v) {
                                        void *vptr = 0;
                                        int res = SWIG_ConvertPtr(argv[18], &vptr, SWIGTYPE_p_double, 0);
                                        _v = SWIG_CheckState(res);
                                        if (_v) {
                                          {
                                            int res = SWIG_AsVal_bool(argv[19], NULL);
                                            _v = SWIG_CheckState(res);
                                          }
                                          if (_v) {
                                            return _wrap_Worldline_getCoord__SWIG_4(self, args);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_getCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::getCoord(size_t,Gyoto::state_t &) const\n"
    "    Gyoto::Worldline::getCoord(size_t,Gyoto::state_t &)\n"
    "    Gyoto::Worldline::getCoord(double,Gyoto::state_t &,bool)\n"
    "    Gyoto::Worldline::getCoord(double,Gyoto::state_t &)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *,double *,double *,double *,double *,double *,double *,bool)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *,double *,double *,double *,double *,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *,double *,double *,double *,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *,double *,double *,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *,double *,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const,double *)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCoord(double const *const,size_t const,double *const,double *const,double *const)\n"
    "    Gyoto::Worldline::getCoord(double *,double *,double *,double *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_checkPhiTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_checkPhiTheta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_checkPhiTheta" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Worldline const *)arg1)->checkPhiTheta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getSkyPos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Worldline_getSkyPos",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getSkyPos" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_getSkyPos" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_getSkyPos" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_getSkyPos" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->getSkyPos(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_dot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Worldline_get_dot",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_dot" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_get_dot" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_get_dot" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_get_dot" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Worldline_get_dot" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->get_dot(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_prime__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_get_prime",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_prime" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_get_prime" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Worldline_get_prime" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Worldline_get_prime" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->get_prime(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_save_txyz__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_save_txyz",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_save_txyz" "', argument " "1"" of type '" "Gyoto::Worldline const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_save_txyz" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      ((Gyoto::Worldline const *)arg1)->save_txyz(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_save_txyz__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::string arg6 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Worldline_save_txyz",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_save_txyz" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_save_txyz" "', argument " "2"" of type '" "char *const""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_save_txyz" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Worldline_save_txyz" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Worldline_save_txyz" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Worldline_save_txyz" "', argument " "6"" of type '" "std::string const""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj6, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg7 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  {
    try {
      (arg1)->save_txyz(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_save_txyz__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::string arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Worldline_save_txyz",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_save_txyz" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Worldline_save_txyz" "', argument " "2"" of type '" "char *const""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Worldline_save_txyz" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Worldline_save_txyz" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Worldline_save_txyz" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Worldline_save_txyz" "', argument " "6"" of type '" "std::string const""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->save_txyz(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_save_txyz(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Worldline_save_txyz__SWIG_0(self, args);
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Worldline_save_txyz__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Worldline_save_txyz__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_save_txyz'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::save_txyz(char *) const\n"
    "    Gyoto::Worldline::save_txyz(char *const,double const,double const,double const,std::string const,Gyoto::SmartPointer< Gyoto::Screen >)\n"
    "    Gyoto::Worldline::save_txyz(char *const,double const,double const,double const,std::string const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_get_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_get_t",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_t" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  {
    try {
      Gyoto_Worldline_get_t__SWIG_1(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_t(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Worldline_get_t__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Worldline_get_t__SWIG_1(self, args);
        }
        return _wrap_Worldline_get_t__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_get_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::get_t(double *) const\n"
    "    Gyoto::Worldline::get_t(double *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_get_xyz__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  double *arg6 = (double *) 0 ;
  size_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyArrayObject *array4 = NULL ;
  int i4 = 1 ;
  PyArrayObject *array6 = NULL ;
  int i6 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_get_xyz",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_xyz" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  {
    array4 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_contiguous(array4)
      || !require_native(array4)) SWIG_fail;
    arg4 = (double*) array_data(array4);
    arg5 = 1;
    for (i4=0; i4 < array_numdims(array4); ++i4) arg5 *= array_size(array4,i4);
  }
  {
    array6 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_contiguous(array6)
      || !require_native(array6)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = 1;
    for (i6=0; i6 < array_numdims(array6); ++i6) arg7 *= array_size(array6,i6);
  }
  {
    try {
      Gyoto_Worldline_get_xyz__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_xyz(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Worldline_get_xyz__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Worldline_get_xyz__SWIG_1(self, args);
            }
            return _wrap_Worldline_get_xyz__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_get_xyz'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::get_xyz(double *,double *,double *) const\n"
    "    Gyoto::Worldline::get_xyz(double *,size_t,double *,size_t,double *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_getSkyPos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int i3 = 1 ;
  PyArrayObject *array5 = NULL ;
  int i5 = 1 ;
  PyArrayObject *array7 = NULL ;
  int i7 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Worldline_getSkyPos",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getSkyPos" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  {
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3)
      || !require_native(array3)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = 1;
    for (i3=0; i3 < array_numdims(array3); ++i3) arg4 *= array_size(array3,i3);
  }
  {
    array5 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5)
      || !require_native(array5)) SWIG_fail;
    arg5 = (double*) array_data(array5);
    arg6 = 1;
    for (i5=0; i5 < array_numdims(array5); ++i5) arg6 *= array_size(array5,i5);
  }
  {
    array7 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array7 || !require_dimensions(array7,1) || !require_contiguous(array7)
      || !require_native(array7)) SWIG_fail;
    arg7 = (double*) array_data(array7);
    arg8 = 1;
    for (i7=0; i7 < array_numdims(array7); ++i7) arg8 *= array_size(array7,i7);
  }
  {
    try {
      Gyoto_Worldline_getSkyPos__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getSkyPos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Worldline_getSkyPos__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) && PyArray_EquivTypenums(array_type(argv[4]),
                NPY_DOUBLE);
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_Worldline_getSkyPos__SWIG_1(self, args);
              }
              return _wrap_Worldline_getSkyPos__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_getSkyPos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::getSkyPos(Gyoto::SmartPointer< Gyoto::Screen >,double *,double *,double *) const\n"
    "    Gyoto::Worldline::getSkyPos(Gyoto::SmartPointer< Gyoto::Screen >,double *,size_t,double *,size_t,double *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_get_dot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  double *arg6 = (double *) 0 ;
  size_t arg7 ;
  double *arg8 = (double *) 0 ;
  size_t arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyArrayObject *array4 = NULL ;
  int i4 = 1 ;
  PyArrayObject *array6 = NULL ;
  int i6 = 1 ;
  PyArrayObject *array8 = NULL ;
  int i8 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Worldline_get_dot",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_dot" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  {
    array4 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_contiguous(array4)
      || !require_native(array4)) SWIG_fail;
    arg4 = (double*) array_data(array4);
    arg5 = 1;
    for (i4=0; i4 < array_numdims(array4); ++i4) arg5 *= array_size(array4,i4);
  }
  {
    array6 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_contiguous(array6)
      || !require_native(array6)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = 1;
    for (i6=0; i6 < array_numdims(array6); ++i6) arg7 *= array_size(array6,i6);
  }
  {
    array8 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array8 || !require_dimensions(array8,1) || !require_contiguous(array8)
      || !require_native(array8)) SWIG_fail;
    arg8 = (double*) array_data(array8);
    arg9 = 1;
    for (i8=0; i8 < array_numdims(array8); ++i8) arg9 *= array_size(array8,i8);
  }
  {
    try {
      Gyoto_Worldline_get_dot__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_dot(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Worldline_get_dot__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) && PyArray_EquivTypenums(array_type(argv[4]),
                NPY_DOUBLE);
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_Worldline_get_dot__SWIG_1(self, args);
              }
              return _wrap_Worldline_get_dot__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_get_dot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::get_dot(double *,double *,double *,double *) const\n"
    "    Gyoto::Worldline::get_dot(double *,size_t,double *,size_t,double *,size_t,double *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_get_prime__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  double *arg6 = (double *) 0 ;
  size_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyArrayObject *array4 = NULL ;
  int i4 = 1 ;
  PyArrayObject *array6 = NULL ;
  int i6 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Worldline_get_prime",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_get_prime" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  {
    array4 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_contiguous(array4)
      || !require_native(array4)) SWIG_fail;
    arg4 = (double*) array_data(array4);
    arg5 = 1;
    for (i4=0; i4 < array_numdims(array4); ++i4) arg5 *= array_size(array4,i4);
  }
  {
    array6 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_contiguous(array6)
      || !require_native(array6)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = 1;
    for (i6=0; i6 < array_numdims(array6); ++i6) arg7 *= array_size(array6,i6);
  }
  {
    try {
      Gyoto_Worldline_get_prime__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_get_prime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Worldline_get_prime__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Worldline_get_prime__SWIG_1(self, args);
            }
            return _wrap_Worldline_get_prime__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_get_prime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::get_prime(double *,double *,double *) const\n"
    "    Gyoto::Worldline::get_prime(double *,size_t,double *,size_t,double *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesianPos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Worldline *arg1 = (Gyoto::Worldline *) 0 ;
  size_t arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      8 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Worldline_getCartesianPos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Worldline_getCartesianPos" "', argument " "1"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Worldline * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Worldline_getCartesianPos" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      Gyoto_Worldline_getCartesianPos__SWIG_1(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Worldline_getCartesianPos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Worldline_getCartesianPos__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_Worldline_getCartesianPos__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Worldline_getCartesianPos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Worldline::getCartesianPos(size_t,double [4]) const\n"
    "    Gyoto::Worldline::getCartesianPos(size_t,double [8])\n");
  return 0;
}


SWIGINTERN PyObject *Worldline_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Worldline, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Screen_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Screen_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Screen_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Screen::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Screen_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getProperties" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Screen const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Screen_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Screen_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Screen_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Screen::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Screen_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_plugins" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_plugins" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Screen::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Screen const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Screen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Screen")) SWIG_fail;
  {
    try {
      result = (Gyoto::Screen *)new Gyoto::Screen();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Screen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Screen *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Screen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Screen,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Screen" "', argument " "1"" of type '" "Gyoto::Screen const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Screen" "', argument " "1"" of type '" "Gyoto::Screen const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (Gyoto::Screen *)new Gyoto::Screen((Gyoto::Screen const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Screen(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Screen__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Screen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Screen__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Screen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::Screen()\n"
    "    Gyoto::Screen::Screen(Gyoto::Screen const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Screen *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_clone" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (Gyoto::Screen *)((Gyoto::Screen const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Screen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Screen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Screen" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_setProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Screen_setProjection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_setProjection" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_setProjection" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_setProjection" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Screen_setProjection" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->setProjection(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_setProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Screen_setProjection",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_setProjection" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_setProjection" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_setProjection" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Screen_setProjection" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Screen_setProjection" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setProjection(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_setProjection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Screen_setProjection__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Screen_setProjection__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_setProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::setProjection(double const,double const,double const)\n"
    "    Gyoto::Screen::setProjection(double const,double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_distance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_distance" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_distance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->distance(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_dMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dMax" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_dMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_distance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_distance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_distance" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_distance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_distance" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_distance" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->distance(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_inclination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_inclination",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_inclination" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_inclination" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->inclination(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_inclination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_inclination",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_inclination" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_inclination" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_inclination" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_inclination" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->inclination(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_PALN__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_PALN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_PALN" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_PALN" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->PALN(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_PALN__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_PALN",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_PALN" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_PALN" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_PALN" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_PALN" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->PALN(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_argument__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_argument",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_argument" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_argument" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->argument(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_argument__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_argument",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_argument" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_argument" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_argument" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_argument" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->argument(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_spectrometer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_spectrometer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_spectrometer" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrometer::Generic" "*'");
    }
    Gyoto::Spectrometer::Generic * kp=reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(kp);
  }
  {
    try {
      (arg1)->spectrometer(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_spectrometer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_spectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_spectrometer" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->spectrometer();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_spectrometer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_spectrometer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_spectrometer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_spectrometer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::spectrometer(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >)\n"
    "    Gyoto::Screen::spectrometer() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_freqObs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_freqObs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_freqObs" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_freqObs" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->freqObs(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_freqObs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_freqObs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_freqObs" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_freqObs" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_freqObs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_freqObs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->freqObs(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_freqObs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_freqObs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_freqObs" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->freqObs();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_freqObs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_freqObs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_freqObs" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_freqObs" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_freqObs" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->freqObs((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_freqObs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_freqObs__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_freqObs__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_freqObs__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_freqObs__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_freqObs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::freqObs(double)\n"
    "    Gyoto::Screen::freqObs(double,std::string const &)\n"
    "    Gyoto::Screen::freqObs() const\n"
    "    Gyoto::Screen::freqObs(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_setObserverPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_setObserverPos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_setObserverPos" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setObserverPos((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_observerKind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_observerKind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_observerKind" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_observerKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_observerKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->observerKind((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_observerKind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_observerKind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_observerKind" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->observerKind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_observerKind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_observerKind__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_observerKind__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_observerKind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::observerKind(std::string const &)\n"
    "    Gyoto::Screen::observerKind() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_setFourVel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_setFourVel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_setFourVel" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setFourVel((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_setScreen1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_setScreen1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_setScreen1" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setScreen1((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_setScreen2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_setScreen2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_setScreen2" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setScreen2((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_setScreen3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_setScreen3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_setScreen3" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->setScreen3((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_coordKind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_coordKind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_coordKind" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (int)((Gyoto::Screen const *)arg1)->coordKind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_distance__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_distance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_distance" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->distance();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_distance__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_distance" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_distance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_distance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->distance((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_distance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_distance__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_distance__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_distance__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_distance__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_distance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::distance(double)\n"
    "    Gyoto::Screen::distance(double,std::string const &)\n"
    "    Gyoto::Screen::distance() const\n"
    "    Gyoto::Screen::distance(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_dMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_dMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dMax" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->dMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_dMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_dMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_dMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::dMax(double)\n"
    "    Gyoto::Screen::dMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_inclination__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_inclination",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_inclination" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->inclination();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_inclination__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_inclination",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_inclination" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_inclination" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_inclination" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->inclination((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_inclination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_inclination__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_inclination__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_inclination__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_inclination__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_inclination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::inclination(double)\n"
    "    Gyoto::Screen::inclination(double,std::string const &)\n"
    "    Gyoto::Screen::inclination() const\n"
    "    Gyoto::Screen::inclination(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_PALN__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_PALN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_PALN" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->PALN();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_PALN__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_PALN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_PALN" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_PALN" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_PALN" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->PALN((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_PALN(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_PALN__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_PALN__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_PALN__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_PALN__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_PALN'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::PALN(double)\n"
    "    Gyoto::Screen::PALN(double,std::string const &)\n"
    "    Gyoto::Screen::PALN() const\n"
    "    Gyoto::Screen::PALN(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_argument__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_argument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_argument" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->argument();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_argument__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_argument",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_argument" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_argument" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_argument" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->argument((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_argument(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_argument__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_argument__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_argument__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_argument__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_argument'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::argument(double)\n"
    "    Gyoto::Screen::argument(double,std::string const &)\n"
    "    Gyoto::Screen::argument() const\n"
    "    Gyoto::Screen::argument(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_metric" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_metric" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_metric__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::metric() const\n"
    "    Gyoto::Screen::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_time__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_time" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->time();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_time__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_time",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_time" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_time" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_time" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->time((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_time__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_time",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_time" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_time" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_time" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->time(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_time__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_time",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_time" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->time(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_time(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_time__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_time__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_time__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_time__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_time'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::time() const\n"
    "    Gyoto::Screen::time(std::string const &) const\n"
    "    Gyoto::Screen::time(double,std::string const &)\n"
    "    Gyoto::Screen::time(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_fieldOfView__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_fieldOfView",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fieldOfView" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->fieldOfView();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fieldOfView__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_fieldOfView",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fieldOfView" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_fieldOfView" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_fieldOfView" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->fieldOfView((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fieldOfView__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_fieldOfView",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fieldOfView" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_fieldOfView" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->fieldOfView(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fieldOfView__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_fieldOfView",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fieldOfView" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_fieldOfView" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_fieldOfView" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_fieldOfView" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->fieldOfView(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fieldOfView(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_fieldOfView__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_fieldOfView__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_fieldOfView__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_fieldOfView__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_fieldOfView'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::fieldOfView() const\n"
    "    Gyoto::Screen::fieldOfView(std::string const &) const\n"
    "    Gyoto::Screen::fieldOfView(double)\n"
    "    Gyoto::Screen::fieldOfView(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_azimuthalFieldOfView__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_azimuthalFieldOfView",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_azimuthalFieldOfView" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->azimuthalFieldOfView();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_azimuthalFieldOfView__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_azimuthalFieldOfView",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_azimuthalFieldOfView" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_azimuthalFieldOfView" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->azimuthalFieldOfView(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_azimuthalFieldOfView(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_azimuthalFieldOfView__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_azimuthalFieldOfView__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_azimuthalFieldOfView'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::azimuthalFieldOfView() const\n"
    "    Gyoto::Screen::azimuthalFieldOfView(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_dangle1__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_dangle1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle1" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_dangle1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dangle1(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle1__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_dangle1",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle1" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_dangle1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_dangle1" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_dangle1" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->dangle1(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle1__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_dangle1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle1" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->dangle1();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle1__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_dangle1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle1" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_dangle1" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_dangle1" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->dangle1((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle1(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_dangle1__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_dangle1__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_dangle1__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_dangle1__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_dangle1'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::dangle1(double)\n"
    "    Gyoto::Screen::dangle1(double,std::string const &)\n"
    "    Gyoto::Screen::dangle1() const\n"
    "    Gyoto::Screen::dangle1(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_dangle2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_dangle2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle2" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_dangle2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dangle2(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_dangle2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle2" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_dangle2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_dangle2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_dangle2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->dangle2(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_dangle2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle2" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->dangle2();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle2__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_dangle2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_dangle2" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_dangle2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_dangle2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Screen const *)arg1)->dangle2((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_dangle2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_dangle2__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_dangle2__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_dangle2__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Screen_dangle2__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_dangle2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::dangle2(double)\n"
    "    Gyoto::Screen::dangle2(double,std::string const &)\n"
    "    Gyoto::Screen::dangle2() const\n"
    "    Gyoto::Screen::dangle2(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_anglekind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_anglekind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_anglekind" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_anglekind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->anglekind(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_anglekind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_anglekind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_anglekind" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_anglekind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_anglekind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->anglekind((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_anglekind__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_anglekind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_anglekind" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->anglekind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_anglekind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_anglekind__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_anglekind__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_anglekind__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_anglekind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::anglekind(int)\n"
    "    Gyoto::Screen::anglekind(std::string const &)\n"
    "    Gyoto::Screen::anglekind() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_resolution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_resolution" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->resolution();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_resolution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_resolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_resolution" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_resolution" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->resolution(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_resolution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_resolution__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Screen_resolution__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_resolution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::resolution() const\n"
    "    Gyoto::Screen::resolution(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_mask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_mask",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_mask" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_mask" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_mask" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->mask((double const *)arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_mask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_mask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_mask" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_mask" "', argument " "2"" of type '" "double const *const""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      (arg1)->mask((double const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_mask__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_mask",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_mask" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Screen const *)arg1)->mask();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_mask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_mask__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_mask__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Screen_mask__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_mask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::mask(double const *const,size_t)\n"
    "    Gyoto::Screen::mask(double const *const)\n"
    "    Gyoto::Screen::mask() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_maskFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_maskFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_maskFile" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_maskFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_maskFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->maskFile((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_maskFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_maskFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_maskFile" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->maskFile();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_maskFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_maskFile__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_maskFile__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_maskFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::maskFile(std::string const &)\n"
    "    Gyoto::Screen::maskFile() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_fitsReadMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_fitsReadMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fitsReadMask" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_fitsReadMask" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_fitsReadMask" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->fitsReadMask((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fitsWriteMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_fitsWriteMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fitsWriteMask" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_fitsWriteMask" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_fitsWriteMask" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->fitsWriteMask((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen___call__" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen___call__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen___call__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (bool)(arg1)->operator ()(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getObserverPos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_getObserverPos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getObserverPos" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getObserverPos(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getFourVel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_getFourVel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getFourVel" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getFourVel(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fourVel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_fourVel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fourVel" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_fourVel" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_fourVel" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->fourVel((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fourVel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_fourVel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fourVel" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->fourVel();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fourVel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_fourVel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_fourVel__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_fourVel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::fourVel(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Screen::fourVel() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector1__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_screenVector1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_screenVector1" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_screenVector1" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_screenVector1" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->screenVector1((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector1__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_screenVector1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_screenVector1" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->screenVector1();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector1(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_screenVector1__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_screenVector1__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_screenVector1'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::screenVector1(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Screen::screenVector1() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_screenVector2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_screenVector2" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_screenVector2" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_screenVector2" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->screenVector2((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_screenVector2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_screenVector2" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->screenVector2();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_screenVector2__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_screenVector2__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_screenVector2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::screenVector2(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Screen::screenVector2() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_screenVector3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_screenVector3" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_screenVector3" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_screenVector3" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->screenVector3((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_screenVector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_screenVector3" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = ((Gyoto::Screen const *)arg1)->screenVector3();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_screenVector3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_screenVector3__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Screen_screenVector3__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_screenVector3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::screenVector3(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Screen::screenVector3() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_getScreen1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_getScreen1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getScreen1" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getScreen1(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getScreen2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_getScreen2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getScreen2" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getScreen2(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getScreen3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_getScreen3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getScreen3" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getScreen3(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 ;
  bool arg5 ;
  double *arg6 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  bool val5 ;
  int ecode5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Screen_getRayTriad" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array7 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
    if (!array7 || !require_dimensions(array7,1) || !require_size(array7, size, 1) ||
      !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 ;
  bool arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  bool val5 ;
  int ecode5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Screen_getRayTriad" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Screen_getRayTriad" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 ;
  bool arg5 ;
  double *arg6 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  bool val5 ;
  int ecode5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Screen_getRayTriad" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array7 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
    if (!array7 || !require_dimensions(array7,1) || !require_size(array7, size, 1) ||
      !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 ;
  bool arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  bool val5 ;
  int ecode5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Screen_getRayTriad" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Screen_getRayTriad" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Screen_getRayTriad",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getRayTriad" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Screen_getRayTriad" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Screen_getRayTriad" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->getRayTriad(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getRayTriad(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            return _wrap_Screen_getRayTriad__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            return _wrap_Screen_getRayTriad__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Screen_getRayTriad__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Screen_getRayTriad__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                return _wrap_Screen_getRayTriad__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                return _wrap_Screen_getRayTriad__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                {
                  _v = is_array(argv[6]) && PyArray_EquivTypenums(array_type(argv[6]),
                    NPY_DOUBLE);
                }
                if (_v) {
                  return _wrap_Screen_getRayTriad__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                {
                  _v = is_array(argv[6]) && PyArray_EquivTypenums(array_type(argv[6]),
                    NPY_DOUBLE);
                }
                if (_v) {
                  return _wrap_Screen_getRayTriad__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_getRayTriad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::getRayTriad(double,double,double [8],bool,double [4],double [4]) const\n"
    "    Gyoto::Screen::getRayTriad(double,double,double [8],bool,double [4]) const\n"
    "    Gyoto::Screen::getRayTriad(double,double,double [8],bool) const\n"
    "    Gyoto::Screen::getRayTriad(double,double,double [8]) const\n"
    "    Gyoto::Screen::getRayTriad(size_t const,size_t const,double [8],bool,double [4],double [4]) const\n"
    "    Gyoto::Screen::getRayTriad(size_t const,size_t const,double [8],bool,double [4]) const\n"
    "    Gyoto::Screen::getRayTriad(size_t const,size_t const,double [8],bool) const\n"
    "    Gyoto::Screen::getRayTriad(size_t const,size_t const,double [8]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_coordToSky__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  double *arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Screen_coordToSky",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_coordToSky" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Screen_coordToSky" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      ((Gyoto::Screen const *)arg1)->coordToSky((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_coordToSky__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_coordToSky",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_coordToSky" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->coordToSky((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_coordToSky(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_Screen_coordToSky__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Screen_coordToSky__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_coordToSky'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::coordToSky(double const [4],double [3],bool) const\n"
    "    Gyoto::Screen::coordToSky(double const [4],double [3]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_skyToCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  double *arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Screen_skyToCoord",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_skyToCoord" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      3 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Screen_skyToCoord" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      ((Gyoto::Screen const *)arg1)->skyToCoord((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_skyToCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_skyToCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_skyToCoord" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      3 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->skyToCoord((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_skyToCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_Screen_skyToCoord__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Screen_skyToCoord__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_skyToCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::skyToCoord(double const [3],double [4],bool) const\n"
    "    Gyoto::Screen::skyToCoord(double const [3],double [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_coordToXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_coordToXYZ",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_coordToXYZ" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Screen const *)arg1)->coordToXYZ((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_computeBaseVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_computeBaseVectors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_computeBaseVectors" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      (arg1)->computeBaseVectors();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen__print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen__print" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen__print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen__print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      result = (std::ostream *) &((Gyoto::Screen const *)arg1)->print(*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_printBaseVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Screen_printBaseVectors",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_printBaseVectors" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_printBaseVectors" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_printBaseVectors" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      result = (std::ostream *) &((Gyoto::Screen const *)arg1)->printBaseVectors(*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_mapPixUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_mapPixUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_mapPixUnit" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      (arg1)->mapPixUnit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_unmapPixUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_unmapPixUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_unmapPixUnit" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      (arg1)->unmapPixUnit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Screen_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_fillProperty" "', argument " "1"" of type '" "Gyoto::Screen const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Screen_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Screen_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Screen_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Screen const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_Subcontractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_Subcontractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_Subcontractor" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = Gyoto::Screen::Subcontractor(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getObserverPos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_getObserverPos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getObserverPos" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      Gyoto_Screen_getObserverPos__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getObserverPos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_getObserverPos__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        return _wrap_Screen_getObserverPos__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_getObserverPos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::getObserverPos(double [4]) const\n"
    "    Gyoto::Screen::getObserverPos(double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen_getFourVel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"O:Screen_getFourVel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen_getFourVel" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      Gyoto_Screen_getFourVel__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Screen_getFourVel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Screen_getFourVel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        return _wrap_Screen_getFourVel__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Screen_getFourVel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Screen::getFourVel(double [4]) const\n"
    "    Gyoto::Screen::getFourVel(double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Screen___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Screen *arg1 = (Gyoto::Screen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Screen___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Screen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Screen___str__" "', argument " "1"" of type '" "Gyoto::Screen *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Screen * >(argp1);
  {
    try {
      result = Gyoto_Screen___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Screen_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Screen, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Scenery_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_mpi_team__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  boost::mpi::communicator *arg2 = (boost::mpi::communicator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_mpi_team__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_mpi_team__set" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_boost__mpi__communicator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_mpi_team__set" "', argument " "2"" of type '" "boost::mpi::communicator *""'"); 
  }
  arg2 = reinterpret_cast< boost::mpi::communicator * >(argp2);
  if (arg1) (arg1)->mpi_team_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_mpi_team__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::mpi::communicator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_mpi_team__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_mpi_team__get" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  result = (boost::mpi::communicator *) ((arg1)->mpi_team_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__mpi__communicator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Scenery_am_worker_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Gyoto::Scenery::am_worker""' of type '""bool""'");
    }
    Gyoto::Scenery::am_worker = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Scenery_am_worker_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(Gyoto::Scenery::am_worker));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Scenery_am_worker_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Scenery_am_worker_get();
}


SWIGINTERN PyObject *_wrap_Scenery_am_worker_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Scenery_am_worker_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_mpiSpawn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_mpiSpawn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_mpiSpawn" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_mpiSpawn" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->mpiSpawn(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_mpiTerminate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_mpiTerminate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_mpiTerminate" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      (arg1)->mpiTerminate();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_mpiClone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_mpiClone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_mpiClone" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      (arg1)->mpiClone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_mpiTask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Gyoto::Scenery::mpi_tag *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_mpiTask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_mpiTask" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Scenery__mpi_tag,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_mpiTask" "', argument " "2"" of type '" "Gyoto::Scenery::mpi_tag &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_mpiTask" "', argument " "2"" of type '" "Gyoto::Scenery::mpi_tag &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Scenery::mpi_tag * >(argp2);
  {
    try {
      (arg1)->mpiTask(*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_mpiWorker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Scenery_mpiWorker")) SWIG_fail;
  {
    try {
      Gyoto::Scenery::mpiWorker();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Scenery_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scenery_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Scenery_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Scenery::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Scenery_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_getProperties" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Scenery const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Scenery_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scenery_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Scenery_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Scenery::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Scenery_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_plugins" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_plugins" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Scenery::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__delta" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_delta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery__delta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__delta" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scenery__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_delta(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__delta__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__delta" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_delta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__delta__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__delta" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_delta((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__delta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__delta__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__delta__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery__delta__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Scenery__delta__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_delta(double const)\n"
    "    Gyoto::Scenery::_delta(double,std::string const &)\n"
    "    Gyoto::Scenery::_delta() const\n"
    "    Gyoto::Scenery::_delta(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__tMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__tMin" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_tMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__tMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery__tMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__tMin" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scenery__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_tMin(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__tMin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__tMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__tMin" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_tMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__tMin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__tMin" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_tMin((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__tMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__tMin__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__tMin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery__tMin__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Scenery__tMin__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__tMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_tMin(double const)\n"
    "    Gyoto::Scenery::_tMin(double,std::string const &)\n"
    "    Gyoto::Scenery::_tMin() const\n"
    "    Gyoto::Scenery::_tMin(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__adaptive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__adaptive" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__adaptive" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_adaptive(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__adaptive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__adaptive" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->_adaptive();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__adaptive__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__adaptive__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_adaptive(bool)\n"
    "    Gyoto::Scenery::_adaptive() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__secondary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__secondary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__secondary" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__secondary" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_secondary(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__secondary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__secondary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__secondary" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->_secondary();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__secondary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__secondary__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__secondary__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__secondary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_secondary(bool)\n"
    "    Gyoto::Scenery::_secondary() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__integ31__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__integ31",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__integ31" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__integ31" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_integ31(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__integ31__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__integ31",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__integ31" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->_integ31();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__integ31(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__integ31__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__integ31__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__integ31'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_integ31(bool)\n"
    "    Gyoto::Scenery::_integ31() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__parallelTransport__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__parallelTransport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__parallelTransport" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__parallelTransport" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_parallelTransport(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__parallelTransport__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__parallelTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__parallelTransport" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->_parallelTransport();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__parallelTransport(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__parallelTransport__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__parallelTransport__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__parallelTransport'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_parallelTransport(bool)\n"
    "    Gyoto::Scenery::_parallelTransport() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__maxiter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__maxiter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__maxiter" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__maxiter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->_maxiter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__maxiter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__maxiter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__maxiter" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->_maxiter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__maxiter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__maxiter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__maxiter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__maxiter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_maxiter(size_t)\n"
    "    Gyoto::Scenery::_maxiter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__integrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__integrator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__integrator" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_integrator((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__integrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__integrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__integrator" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->_integrator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__integrator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__integrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery__integrator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__integrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_integrator(std::string const &)\n"
    "    Gyoto::Scenery::_integrator() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__deltaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__deltaMin" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_deltaMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__deltaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__deltaMin" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__deltaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__deltaMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__deltaMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__deltaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_deltaMin() const\n"
    "    Gyoto::Scenery::_deltaMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__absTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__absTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__absTol" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__absTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_absTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__absTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__absTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__absTol" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_absTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__absTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__absTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__absTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__absTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_absTol(double)\n"
    "    Gyoto::Scenery::_absTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__maxCrossEqplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__maxCrossEqplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__maxCrossEqplane" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_maxCrossEqplane(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__maxCrossEqplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__maxCrossEqplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_maxCrossEqplane();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__maxCrossEqplane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__maxCrossEqplane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__maxCrossEqplane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__maxCrossEqplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_maxCrossEqplane(double)\n"
    "    Gyoto::Scenery::_maxCrossEqplane() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__relTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__relTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__relTol" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__relTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_relTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__relTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__relTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__relTol" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_relTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__relTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__relTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__relTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__relTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_relTol(double)\n"
    "    Gyoto::Scenery::_relTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__deltaMax" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__deltaMax" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__deltaMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__deltaMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_deltaMax(double)\n"
    "    Gyoto::Scenery::_deltaMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMaxOverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__deltaMaxOverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->_deltaMaxOverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMaxOverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__deltaMaxOverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery__deltaMaxOverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMaxOverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__deltaMaxOverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__deltaMaxOverR__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__deltaMaxOverR__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__deltaMaxOverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_deltaMaxOverR() const\n"
    "    Gyoto::Scenery::_deltaMaxOverR(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__initCoord" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->_initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__initCoord" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_initCoord((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__initCoord__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery__initCoord__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_initCoord() const\n"
    "    Gyoto::Scenery::_initCoord(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery__metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery__metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__metric" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->_metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery__metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery__metric" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->_metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery__metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery__metric__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery__metric__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery__metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Scenery::_metric() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Scenery__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Scenery")) SWIG_fail;
  {
    try {
      result = (Gyoto::Scenery *)new Gyoto::Scenery();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scenery__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Scenery *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Scenery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Scenery,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Scenery" "', argument " "1"" of type '" "Gyoto::Scenery const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scenery" "', argument " "1"" of type '" "Gyoto::Scenery const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (Gyoto::Scenery *)new Gyoto::Scenery((Gyoto::Scenery const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Scenery *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_clone" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (Gyoto::Scenery *)((Gyoto::Scenery const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scenery__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg2 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Scenery *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Scenery",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg3 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Scenery *)new Gyoto::Scenery(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scenery(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Scenery__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Scenery, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Scenery__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Scenery__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Scenery'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::Scenery()\n"
    "    Gyoto::Scenery::Scenery(Gyoto::Scenery const &)\n"
    "    Gyoto::Scenery::Scenery(Gyoto::SmartPointer< Gyoto::Metric::Generic >,Gyoto::SmartPointer< Gyoto::Screen >,Gyoto::SmartPointer< Gyoto::Astrobj::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Scenery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Scenery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Scenery" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_metric" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_metric" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_metric__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::metric() const\n"
    "    Gyoto::Scenery::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_screen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_screen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_screen" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->screen();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_screen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_screen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_screen" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  {
    try {
      (arg1)->screen(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_screen(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_screen__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_screen__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_screen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::screen() const\n"
    "    Gyoto::Scenery::screen(Gyoto::SmartPointer< Gyoto::Screen >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_astrobj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_astrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_astrobj" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->astrobj();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_astrobj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_astrobj",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_astrobj" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    try {
      (arg1)->astrobj(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_astrobj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_astrobj__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_astrobj__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_astrobj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::astrobj() const\n"
    "    Gyoto::Scenery::astrobj(Gyoto::SmartPointer< Gyoto::Astrobj::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_clonePhoton__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Photon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_clonePhoton",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_clonePhoton" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->clonePhoton();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Photon* normal_pointer=(Gyoto::Photon *) (Gyoto::SmartPointer<Gyoto::Photon>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_clonePhoton__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Photon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery_clonePhoton",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_clonePhoton" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_clonePhoton" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scenery_clonePhoton" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (arg1)->clonePhoton(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Photon* normal_pointer=(Gyoto::Photon *) (Gyoto::SmartPointer<Gyoto::Photon>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_clonePhoton__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Photon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery_clonePhoton",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_clonePhoton" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_clonePhoton" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scenery_clonePhoton" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (arg1)->clonePhoton(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Photon* normal_pointer=(Gyoto::Photon *) (Gyoto::SmartPointer<Gyoto::Photon>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_clonePhoton(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_clonePhoton__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Scenery_clonePhoton__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Scenery_clonePhoton__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_clonePhoton'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::clonePhoton() const\n"
    "    Gyoto::Scenery::clonePhoton(size_t,size_t)\n"
    "    Gyoto::Scenery::clonePhoton(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_updatePhoton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_updatePhoton",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_updatePhoton" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      (arg1)->updatePhoton();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_delta" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->delta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_delta" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->delta((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_delta__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_delta" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->delta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_delta__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery_delta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_delta" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scenery_delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->delta(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_delta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_delta__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_delta__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_delta__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Scenery_delta__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::delta() const\n"
    "    Gyoto::Scenery::delta(std::string const &) const\n"
    "    Gyoto::Scenery::delta(double)\n"
    "    Gyoto::Scenery::delta(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::vector< double,std::allocator< double > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_initCoord" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scenery_initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->initCoord(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_initCoord" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_initCoord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_initCoord__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::initCoord(std::vector< double,std::allocator< double > >)\n"
    "    Gyoto::Scenery::initCoord() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_setRequestedQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Gyoto::Quantity_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_setRequestedQuantities",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_setRequestedQuantities" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_setRequestedQuantities" "', argument " "2"" of type '" "Gyoto::Quantity_t""'");
  } 
  arg2 = static_cast< Gyoto::Quantity_t >(val2);
  {
    try {
      (arg1)->setRequestedQuantities(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_requestedQuantitiesString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_requestedQuantitiesString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_requestedQuantitiesString" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_requestedQuantitiesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_requestedQuantitiesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->requestedQuantitiesString((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_getRequestedQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Quantity_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_getRequestedQuantities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_getRequestedQuantities" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (Gyoto::Quantity_t)((Gyoto::Scenery const *)arg1)->getRequestedQuantities();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_requestedQuantitiesString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_requestedQuantitiesString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_requestedQuantitiesString" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->requestedQuantitiesString();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_requestedQuantitiesString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_requestedQuantitiesString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_requestedQuantitiesString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_requestedQuantitiesString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::requestedQuantitiesString(std::string const &)\n"
    "    Gyoto::Scenery::requestedQuantitiesString() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_getScalarQuantitiesCount__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Gyoto::Quantity_t *arg2 = (Gyoto::Quantity_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_getScalarQuantitiesCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_getScalarQuantitiesCount" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_getScalarQuantitiesCount" "', argument " "2"" of type '" "Gyoto::Quantity_t *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Quantity_t * >(argp2);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->getScalarQuantitiesCount(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_getScalarQuantitiesCount__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_getScalarQuantitiesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_getScalarQuantitiesCount" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->getScalarQuantitiesCount();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_getScalarQuantitiesCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_getScalarQuantitiesCount__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_getScalarQuantitiesCount__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_getScalarQuantitiesCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::getScalarQuantitiesCount(Gyoto::Quantity_t *) const\n"
    "    Gyoto::Scenery::getScalarQuantitiesCount() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_getSpectralQuantitiesCount__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Gyoto::Quantity_t *arg2 = (Gyoto::Quantity_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_getSpectralQuantitiesCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_getSpectralQuantitiesCount" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_getSpectralQuantitiesCount" "', argument " "2"" of type '" "Gyoto::Quantity_t *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Quantity_t * >(argp2);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->getSpectralQuantitiesCount(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_getSpectralQuantitiesCount__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_getSpectralQuantitiesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_getSpectralQuantitiesCount" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->getSpectralQuantitiesCount();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_getSpectralQuantitiesCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_getSpectralQuantitiesCount__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_getSpectralQuantitiesCount__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_getSpectralQuantitiesCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::getSpectralQuantitiesCount(Gyoto::Quantity_t *) const\n"
    "    Gyoto::Scenery::getSpectralQuantitiesCount() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_tMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_tMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_tMin" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->tMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_tMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_tMin" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->tMin((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_tMin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_tMin" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_tMin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery_tMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_tMin" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scenery_tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->tMin(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_tMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_tMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_tMin__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_tMin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Scenery_tMin__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_tMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::tMin() const\n"
    "    Gyoto::Scenery::tMin(std::string const &) const\n"
    "    Gyoto::Scenery::tMin(double)\n"
    "    Gyoto::Scenery::tMin(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_adaptive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_adaptive" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_adaptive" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->adaptive(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_adaptive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_adaptive" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->adaptive();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_adaptive__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_adaptive__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::adaptive(bool)\n"
    "    Gyoto::Scenery::adaptive() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_integrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_integrator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_integrator" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scenery_integrator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->integrator(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_integrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_integrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_integrator" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->integrator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_integrator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_integrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scenery_integrator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_integrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::integrator(std::string)\n"
    "    Gyoto::Scenery::integrator() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_deltaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_deltaMin" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->deltaMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_deltaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_deltaMin" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_deltaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_deltaMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_deltaMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_deltaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::deltaMin() const\n"
    "    Gyoto::Scenery::deltaMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_deltaMax" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_deltaMax" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_deltaMax__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_deltaMax__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::deltaMax() const\n"
    "    Gyoto::Scenery::deltaMax(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMaxOverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_deltaMaxOverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->deltaMaxOverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMaxOverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_deltaMaxOverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_deltaMaxOverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMaxOverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_deltaMaxOverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_deltaMaxOverR__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_deltaMaxOverR__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_deltaMaxOverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::deltaMaxOverR() const\n"
    "    Gyoto::Scenery::deltaMaxOverR(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_absTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_absTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_absTol" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_absTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->absTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_absTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_absTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_absTol" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->absTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_absTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_absTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_absTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_absTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::absTol(double)\n"
    "    Gyoto::Scenery::absTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_relTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_relTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_relTol" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_relTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->relTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_relTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_relTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_relTol" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->relTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_relTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_relTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_relTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_relTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::relTol(double)\n"
    "    Gyoto::Scenery::relTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_maxCrossEqplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_maxCrossEqplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_maxCrossEqplane" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->maxCrossEqplane(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_maxCrossEqplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_maxCrossEqplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (double)((Gyoto::Scenery const *)arg1)->maxCrossEqplane();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_maxCrossEqplane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_maxCrossEqplane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_maxCrossEqplane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_maxCrossEqplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::maxCrossEqplane(double)\n"
    "    Gyoto::Scenery::maxCrossEqplane() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_secondary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_secondary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_secondary" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_secondary" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->secondary(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_secondary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_secondary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_secondary" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->secondary();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_secondary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_secondary__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_secondary__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_secondary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::secondary(bool)\n"
    "    Gyoto::Scenery::secondary() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_integ31__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_integ31",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_integ31" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_integ31" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->integ31(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_integ31__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_integ31",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_integ31" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->integ31();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_integ31(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_integ31__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_integ31__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_integ31'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::integ31(bool)\n"
    "    Gyoto::Scenery::integ31() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_parallelTransport__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_parallelTransport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_parallelTransport" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_parallelTransport" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->parallelTransport(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_parallelTransport__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_parallelTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_parallelTransport" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Scenery const *)arg1)->parallelTransport();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_parallelTransport(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_parallelTransport__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_parallelTransport__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_parallelTransport'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::parallelTransport(bool)\n"
    "    Gyoto::Scenery::parallelTransport() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_maxiter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_maxiter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_maxiter" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_maxiter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->maxiter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_maxiter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_maxiter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_maxiter" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->maxiter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_maxiter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_maxiter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_maxiter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_maxiter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::maxiter(size_t)\n"
    "    Gyoto::Scenery::maxiter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_nThreads__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_nThreads",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_nThreads" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_nThreads" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nThreads(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_nThreads__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_nThreads",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_nThreads" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->nThreads();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_nThreads(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_nThreads__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_nThreads__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_nThreads'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::nThreads(size_t)\n"
    "    Gyoto::Scenery::nThreads() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_nProcesses__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_nProcesses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_nProcesses" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery_nProcesses" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nProcesses(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_nProcesses__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_nProcesses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_nProcesses" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = ((Gyoto::Scenery const *)arg1)->nProcesses();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_nProcesses(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Scenery_nProcesses__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scenery_nProcesses__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_nProcesses'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::nProcesses(size_t)\n"
    "    Gyoto::Scenery::nProcesses() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_intensityConverter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_intensityConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_intensityConverter" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scenery_intensityConverter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->intensityConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_spectrumConverter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_spectrumConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_spectrumConverter" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scenery_spectrumConverter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->spectrumConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_binSpectrumConverter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_binSpectrumConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_binSpectrumConverter" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Scenery_binSpectrumConverter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->binSpectrumConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_setPropertyConverters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Gyoto::Astrobj::Properties *arg2 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_setPropertyConverters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_setPropertyConverters" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_setPropertyConverters" "', argument " "2"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp2);
  {
    try {
      (arg1)->setPropertyConverters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_rayTrace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Coord2dSet *arg2 = 0 ;
  Gyoto::Astrobj::Properties *arg3 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Scenery_rayTrace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_rayTrace" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Coord2dSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_rayTrace" "', argument " "2"" of type '" "Coord2dSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_rayTrace" "', argument " "2"" of type '" "Coord2dSet &""'"); 
  }
  arg2 = reinterpret_cast< Coord2dSet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scenery_rayTrace" "', argument " "3"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Scenery_rayTrace" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      (arg1)->rayTrace(*arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_rayTrace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Coord2dSet *arg2 = 0 ;
  Gyoto::Astrobj::Properties *arg3 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery_rayTrace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_rayTrace" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Coord2dSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_rayTrace" "', argument " "2"" of type '" "Coord2dSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_rayTrace" "', argument " "2"" of type '" "Coord2dSet &""'"); 
  }
  arg2 = reinterpret_cast< Coord2dSet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scenery_rayTrace" "', argument " "3"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp3);
  {
    try {
      (arg1)->rayTrace(*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_rayTrace(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Coord2dSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Scenery_rayTrace__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Coord2dSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Scenery_rayTrace__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery_rayTrace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::rayTrace(Coord2dSet &,Gyoto::Astrobj::Properties *,double *)\n"
    "    Gyoto::Scenery::rayTrace(Coord2dSet &,Gyoto::Astrobj::Properties *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg5 = (double *) 0 ;
  Photon *arg6 = (Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Scenery___call__",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery___call__" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery___call__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scenery___call__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Scenery___call__" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Scenery___call__" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Photon, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Scenery___call__" "', argument " "6"" of type '" "Photon *""'"); 
  }
  arg6 = reinterpret_cast< Photon * >(argp6);
  {
    try {
      (arg1)->operator ()(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Scenery___call__",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery___call__" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery___call__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scenery___call__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Scenery___call__" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Scenery___call__" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      (arg1)->operator ()(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery___call____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Scenery___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery___call__" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery___call__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scenery___call__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Scenery___call__" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      (arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery___call____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  Photon *arg5 = (Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Scenery___call__",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery___call__" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scenery___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Scenery___call__" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_Photon, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Scenery___call__" "', argument " "5"" of type '" "Photon *""'"); 
  }
  arg5 = reinterpret_cast< Photon * >(argp5);
  {
    try {
      (arg1)->operator ()(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery___call____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Scenery___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery___call__" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scenery___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scenery___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Scenery___call__" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      (arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Scenery___call____SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Scenery___call____SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Scenery___call____SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_Photon, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Scenery___call____SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_Photon, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Scenery___call____SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scenery___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Scenery::operator ()(size_t,size_t,Gyoto::Astrobj::Properties *,double *,Photon *)\n"
    "    Gyoto::Scenery::operator ()(size_t,size_t,Gyoto::Astrobj::Properties *,double *)\n"
    "    Gyoto::Scenery::operator ()(size_t,size_t,Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Scenery::operator ()(double,double,Gyoto::Astrobj::Properties *,Photon *)\n"
    "    Gyoto::Scenery::operator ()(double,double,Gyoto::Astrobj::Properties *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Scenery_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scenery_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_fillProperty" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scenery_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scenery_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Scenery const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_fillElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scenery_fillElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_fillElement" "', argument " "1"" of type '" "Gyoto::Scenery const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scenery_fillElement" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      ((Gyoto::Scenery const *)arg1)->fillElement(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery_Subcontractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Scenery > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery_Subcontractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery_Subcontractor" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = Gyoto::Scenery::Subcontractor(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Scenery* normal_pointer=(Gyoto::Scenery *) (Gyoto::SmartPointer<Gyoto::Scenery>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scenery___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Scenery *arg1 = (Gyoto::Scenery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scenery___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Scenery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scenery___str__" "', argument " "1"" of type '" "Gyoto::Scenery *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Scenery * >(argp1);
  {
    try {
      result = Gyoto_Scenery___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Scenery_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Scenery, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Photon_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Photon_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Photon_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Photon::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Photon_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_getProperties" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Photon const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Photon_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Photon_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Photon_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Photon::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Photon_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_plugins" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_plugins" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Photon_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Photon::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Photon const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__delta" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_delta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Photon__delta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__delta" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__delta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Photon__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon__delta" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_delta(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__delta__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__delta" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_delta();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__delta__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__delta" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon__delta" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_delta((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__delta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__delta__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__delta__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Photon__delta__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Photon__delta__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_delta(double const)\n"
    "    Gyoto::Photon::_delta(double,std::string const &)\n"
    "    Gyoto::Photon::_delta() const\n"
    "    Gyoto::Photon::_delta(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__tMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__tMin" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_tMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__tMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Photon__tMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__tMin" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__tMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Photon__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon__tMin" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->_tMin(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__tMin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__tMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__tMin" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_tMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__tMin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__tMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__tMin" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon__tMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_tMin((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__tMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__tMin__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__tMin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Photon__tMin__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Photon__tMin__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__tMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_tMin(double const)\n"
    "    Gyoto::Photon::_tMin(double,std::string const &)\n"
    "    Gyoto::Photon::_tMin() const\n"
    "    Gyoto::Photon::_tMin(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__adaptive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__adaptive" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__adaptive" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_adaptive(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__adaptive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__adaptive" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Photon const *)arg1)->_adaptive();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__adaptive__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__adaptive__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_adaptive(bool)\n"
    "    Gyoto::Photon::_adaptive() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__secondary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__secondary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__secondary" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__secondary" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_secondary(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__secondary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__secondary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__secondary" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Photon const *)arg1)->_secondary();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__secondary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__secondary__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__secondary__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__secondary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_secondary(bool)\n"
    "    Gyoto::Photon::_secondary() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__integ31__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__integ31",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__integ31" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__integ31" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_integ31(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__integ31__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__integ31",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__integ31" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Photon const *)arg1)->_integ31();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__integ31(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__integ31__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__integ31__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__integ31'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_integ31(bool)\n"
    "    Gyoto::Photon::_integ31() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__parallelTransport__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__parallelTransport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__parallelTransport" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__parallelTransport" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->_parallelTransport(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__parallelTransport__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__parallelTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__parallelTransport" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Photon const *)arg1)->_parallelTransport();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__parallelTransport(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__parallelTransport__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__parallelTransport__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__parallelTransport'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_parallelTransport(bool)\n"
    "    Gyoto::Photon::_parallelTransport() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__maxiter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__maxiter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__maxiter" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__maxiter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->_maxiter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__maxiter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__maxiter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__maxiter" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->_maxiter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__maxiter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__maxiter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__maxiter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__maxiter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_maxiter(size_t)\n"
    "    Gyoto::Photon::_maxiter() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__integrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__integrator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__integrator" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon__integrator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_integrator((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__integrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__integrator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__integrator" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->_integrator();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__integrator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__integrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Photon__integrator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__integrator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_integrator(std::string const &)\n"
    "    Gyoto::Photon::_integrator() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__deltaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__deltaMin" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_deltaMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__deltaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__deltaMin" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__deltaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__deltaMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__deltaMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__deltaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_deltaMin() const\n"
    "    Gyoto::Photon::_deltaMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__absTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__absTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__absTol" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__absTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_absTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__absTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__absTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__absTol" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_absTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__absTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__absTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__absTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__absTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_absTol(double)\n"
    "    Gyoto::Photon::_absTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__maxCrossEqplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__maxCrossEqplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__maxCrossEqplane" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_maxCrossEqplane(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__maxCrossEqplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__maxCrossEqplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__maxCrossEqplane" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_maxCrossEqplane();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__maxCrossEqplane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__maxCrossEqplane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__maxCrossEqplane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__maxCrossEqplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_maxCrossEqplane(double)\n"
    "    Gyoto::Photon::_maxCrossEqplane() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__relTol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__relTol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__relTol" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__relTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_relTol(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__relTol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__relTol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__relTol" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_relTol();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__relTol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__relTol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__relTol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__relTol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_relTol(double)\n"
    "    Gyoto::Photon::_relTol() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__deltaMax" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__deltaMax" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__deltaMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__deltaMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_deltaMax(double)\n"
    "    Gyoto::Photon::_deltaMax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMaxOverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__deltaMaxOverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->_deltaMaxOverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMaxOverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__deltaMaxOverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon__deltaMaxOverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->_deltaMaxOverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__deltaMaxOverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__deltaMaxOverR__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__deltaMaxOverR__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__deltaMaxOverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_deltaMaxOverR() const\n"
    "    Gyoto::Photon::_deltaMaxOverR(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__initCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__initCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__initCoord" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->_initCoord();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__initCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__initCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__initCoord" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon__initCoord" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->_initCoord((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__initCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__initCoord__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Photon__initCoord__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__initCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_initCoord() const\n"
    "    Gyoto::Photon::_initCoord(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon__metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon__metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__metric" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->_metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon__metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon__metric" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->_metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon__metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon__metric__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon__metric__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon__metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Photon::_metric() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_className",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_className" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->className();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_className_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_className_l",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_className_l" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->className_l();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Photon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Photon")) SWIG_fail;
  {
    try {
      result = (Gyoto::Photon *)new Gyoto::Photon();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Photon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Photon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Photon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Photon,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Photon" "', argument " "1"" of type '" "Gyoto::Photon const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Photon" "', argument " "1"" of type '" "Gyoto::Photon const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (Gyoto::Photon *)new Gyoto::Photon((Gyoto::Photon const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Photon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_clone" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (Gyoto::Photon *)((Gyoto::Photon const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Photon__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Photon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Photon",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Photon" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (Gyoto::Photon *)new Gyoto::Photon(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Photon__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg2 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg3 ;
  double arg4 ;
  double arg5 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Gyoto::Photon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Photon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg3 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Photon" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Photon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (Gyoto::Photon *)new Gyoto::Photon(arg1,arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Photon(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Photon__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Photon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Photon__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Photon__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Photon__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Photon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::Photon()\n"
    "    Gyoto::Photon::Photon(Gyoto::Photon const &)\n"
    "    Gyoto::Photon::Photon(Gyoto::SmartPointer< Gyoto::Metric::Generic >,Gyoto::SmartPointer< Gyoto::Astrobj::Generic >,double *)\n"
    "    Gyoto::Photon::Photon(Gyoto::SmartPointer< Gyoto::Metric::Generic >,Gyoto::SmartPointer< Gyoto::Astrobj::Generic >,Gyoto::SmartPointer< Gyoto::Screen >,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Photon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Photon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Photon" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_getMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_getMass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_getMass" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->getMass();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_astrobj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_astrobj",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_astrobj" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    try {
      (arg1)->astrobj(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_astrobj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_astrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_astrobj" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->astrobj();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_astrobj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_astrobj__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_astrobj__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_astrobj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::astrobj(Gyoto::SmartPointer< Gyoto::Astrobj::Generic >)\n"
    "    Gyoto::Photon::astrobj() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_metric__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_metric" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_metric__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_metric" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_metric" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_metric__SWIG_0_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_metric__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    metric() const\n"
    "    Gyoto::Photon::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_spectrometer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_spectrometer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_spectrometer" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrometer::Generic" "*'");
    }
    Gyoto::Spectrometer::Generic * kp=reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(kp);
  }
  {
    try {
      (arg1)->spectrometer(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_spectrometer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_spectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_spectrometer" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->spectrometer();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_spectrometer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_spectrometer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_spectrometer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_spectrometer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::spectrometer(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >)\n"
    "    Gyoto::Photon::spectrometer() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_freqObs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_freqObs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_freqObs" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon_freqObs" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->freqObs(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_freqObs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_freqObs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_freqObs" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->freqObs();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_freqObs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_freqObs__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_freqObs__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_freqObs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::freqObs(double)\n"
    "    Gyoto::Photon::freqObs() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_nb_cross_eqplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_nb_cross_eqplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_nb_cross_eqplane" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon_nb_cross_eqplane" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->nb_cross_eqplane(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_nb_cross_eqplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_nb_cross_eqplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_nb_cross_eqplane" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (int)((Gyoto::Photon const *)arg1)->nb_cross_eqplane();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_nb_cross_eqplane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_nb_cross_eqplane__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_nb_cross_eqplane__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_nb_cross_eqplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::nb_cross_eqplane(int)\n"
    "    Gyoto::Photon::nb_cross_eqplane() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_setInitialCondition__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Photon_setInitialCondition",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Photon_setInitialCondition" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj5,
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      (arg1)->setInitialCondition(arg2,(double const (*))arg3,arg4,(double const (*))arg5,(double const (*))arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_setInitialCondition__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  double *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Photon_setInitialCondition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Photon_setInitialCondition" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setInitialCondition(arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_setInitialCondition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Photon_setInitialCondition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg3 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      (arg1)->setInitialCondition(arg2,arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_setInitialCondition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Photon_setInitialCondition",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg3 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj5,
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      (arg1)->setInitialCondition(arg2,arg3,(double const (*))arg4,(double const (*))arg5,(double const (*))arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_setInitialCondition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg3 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Photon_setInitialCondition",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_setInitialCondition" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg3 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj3, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg4 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Photon_setInitialCondition" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Photon_setInitialCondition" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setInitialCondition(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_setInitialCondition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            return _wrap_Photon_setInitialCondition__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Photon_setInitialCondition__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Photon_setInitialCondition__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) || PySequence_Check(argv[5]);
              }
              if (_v) {
                return _wrap_Photon_setInitialCondition__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) || PySequence_Check(argv[5]);
              }
              if (_v) {
                return _wrap_Photon_setInitialCondition__SWIG_0_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_setInitialCondition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic >,double const [8],int const,double const [4],double const [4])\n"
    "    setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic >,double const [8],int const)\n"
    "    Gyoto::Photon::setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic >,Gyoto::SmartPointer< Gyoto::Astrobj::Generic >,double const [8])\n"
    "    Gyoto::Photon::setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic >,Gyoto::SmartPointer< Gyoto::Astrobj::Generic >,double const [8],double const [4],double const [4])\n"
    "    Gyoto::Photon::setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic >,Gyoto::SmartPointer< Gyoto::Astrobj::Generic >,Gyoto::SmartPointer< Gyoto::Screen >,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_hit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  Gyoto::Astrobj::Properties *arg2 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_hit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_hit" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon_hit" "', argument " "2"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp2);
  {
    try {
      result = (int)(arg1)->hit(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_hit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_hit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_hit" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (int)(arg1)->hit();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_hit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_hit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_hit__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_hit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::hit(Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Photon::hit()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_findMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  Gyoto::Functor::Double_constDoubleArray *arg2 = (Gyoto::Functor::Double_constDoubleArray *) 0 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Photon_findMin",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_findMin" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon_findMin" "', argument " "2"" of type '" "Gyoto::Functor::Double_constDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Functor::Double_constDoubleArray * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Photon_findMin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Photon_findMin" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Photon_findMin" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon_findMin" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Photon_findMin" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (double)(arg1)->findMin(arg2,arg3,arg4,*arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_findMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  Gyoto::Functor::Double_constDoubleArray *arg2 = (Gyoto::Functor::Double_constDoubleArray *) 0 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Photon_findMin",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_findMin" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon_findMin" "', argument " "2"" of type '" "Gyoto::Functor::Double_constDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Functor::Double_constDoubleArray * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Photon_findMin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Photon_findMin" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Photon_findMin" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon_findMin" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (double)(arg1)->findMin(arg2,arg3,arg4,*arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_findMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Photon_findMin__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Photon_findMin__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_findMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::findMin(Gyoto::Functor::Double_constDoubleArray *,double,double,double &,double)\n"
    "    Gyoto::Photon::findMin(Gyoto::Functor::Double_constDoubleArray *,double,double,double &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_findValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  Gyoto::Functor::Double_constDoubleArray *arg2 = (Gyoto::Functor::Double_constDoubleArray *) 0 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Photon_findValue",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_findValue" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Functor__Double_constDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon_findValue" "', argument " "2"" of type '" "Gyoto::Functor::Double_constDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Functor::Double_constDoubleArray * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Photon_findValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Photon_findValue" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Photon_findValue" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon_findValue" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      (arg1)->findValue(arg2,arg3,arg4,*arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_setParameters" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_Subcontractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Photon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_Subcontractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_Subcontractor" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = Gyoto::Photon::Subcontractor(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Photon* normal_pointer=(Gyoto::Photon *) (Gyoto::SmartPointer<Gyoto::Photon>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_resetTransmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_resetTransmission",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_resetTransmission" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      (arg1)->resetTransmission();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_resetTransmissionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_resetTransmissionMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_resetTransmissionMatrix" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      (arg1)->resetTransmissionMatrix();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_getTransmission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_getTransmission",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_getTransmission" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon_getTransmission" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->getTransmission(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_getTransmissionMatrix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Eigen::Matrix4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Photon_getTransmissionMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_getTransmissionMatrix" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon_getTransmissionMatrix" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = ((Gyoto::Photon const *)arg1)->getTransmissionMatrix(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix4d(static_cast< const Eigen::Matrix4d& >(result))), SWIGTYPE_p_Eigen__Matrix4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_getTransmissionMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_getTransmissionMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_getTransmissionMax" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double)((Gyoto::Photon const *)arg1)->getTransmissionMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_getTransmission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_getTransmission",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_getTransmission" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Photon const *)arg1)->getTransmission();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_getTransmission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_getTransmission__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_getTransmission__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_getTransmission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::getTransmission(size_t) const\n"
    "    Gyoto::Photon::getTransmission() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_getTransmissionMatrix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Eigen::Matrix4d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon_getTransmissionMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_getTransmissionMatrix" "', argument " "1"" of type '" "Gyoto::Photon const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = (Eigen::Matrix4d *)((Gyoto::Photon const *)arg1)->getTransmissionMatrix();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_getTransmissionMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Photon_getTransmissionMatrix__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Photon_getTransmissionMatrix__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_getTransmissionMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::getTransmissionMatrix(size_t) const\n"
    "    Gyoto::Photon::getTransmissionMatrix() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_transmit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Photon_transmit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_transmit" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon_transmit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Photon_transmit" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->transmit(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_transmit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  size_t arg2 ;
  Eigen::Matrix4d arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Photon_transmit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_transmit" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Photon_transmit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Eigen__Matrix4d,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Photon_transmit" "', argument " "3"" of type '" "Eigen::Matrix4d""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Photon_transmit" "', argument " "3"" of type '" "Eigen::Matrix4d""'");
    } else {
      Eigen::Matrix4d * temp = reinterpret_cast< Eigen::Matrix4d * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->transmit(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon_transmit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Eigen__Matrix4d, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Photon_transmit__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Photon_transmit__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Photon_transmit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Photon::transmit(size_t,double)\n"
    "    Gyoto::Photon::transmit(size_t,Eigen::Matrix4d)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Photon_transfer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  Eigen::Matrix4d *arg6 = (Eigen::Matrix4d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Photon_transfer",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon_transfer" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Photon_transfer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Photon_transfer" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Photon_transfer" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Photon_transfer" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Photon_transfer" "', argument " "6"" of type '" "Eigen::Matrix4d *""'"); 
  }
  arg6 = reinterpret_cast< Eigen::Matrix4d * >(argp6);
  {
    try {
      (arg1)->transfer(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Photon___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Photon *arg1 = (Gyoto::Photon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Photon___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Photon___str__" "', argument " "1"" of type '" "Gyoto::Photon *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Photon * >(argp1);
  {
    try {
      result = Gyoto_Photon___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Photon_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Photon, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getAstrobjRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Register::Entry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getAstrobjRegister")) SWIG_fail;
  {
    try {
      result = (Gyoto::Register::Entry *)getAstrobjRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Register__Entry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getAstrobjSubcontractor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int arg3 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Astrobj::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getAstrobjSubcontractor",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAstrobjSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getAstrobjSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getAstrobjSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getAstrobjSubcontractor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Gyoto::Astrobj::Subcontractor_t *)Gyoto::Astrobj::getSubcontractor(arg1,*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getAstrobjSubcontractor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Astrobj::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getAstrobjSubcontractor",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getAstrobjSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getAstrobjSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getAstrobjSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try {
      result = (Gyoto::Astrobj::Subcontractor_t *)Gyoto::Astrobj::getSubcontractor(arg1,*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getAstrobjSubcontractor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getAstrobjSubcontractor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_getAstrobjSubcontractor__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getAstrobjSubcontractor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &,int)\n"
    "    Gyoto::Astrobj::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &)\n");
  return 0;
}


SWIGINTERN int Swig_var_AstrobjRegister_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Gyoto__Register__Entry,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Gyoto::Astrobj::Register_""' of type '""Gyoto::Register::Entry *""'");
    }
    Gyoto::Astrobj::Register_ = reinterpret_cast< Gyoto::Register::Entry * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_AstrobjRegister_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Register_), SWIGTYPE_p_Gyoto__Register__Entry,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_initAstrobjRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":initAstrobjRegister")) SWIG_fail;
  {
    try {
      Gyoto::Astrobj::initRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_registerAstrobj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Gyoto::Astrobj::Subcontractor_t *arg2 = (Gyoto::Astrobj::Subcontractor_t *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:registerAstrobj",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "registerAstrobj" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "registerAstrobj" "', argument " "2"" of type '" "Gyoto::Astrobj::Subcontractor_t *""'"); 
    }
  }
  {
    try {
      Gyoto::Astrobj::Register(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Astrobj_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Astrobj_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Astrobj_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Generic::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Astrobj_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Generic const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Astrobj_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Astrobj_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Astrobj_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Generic::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Astrobj_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Astrobj_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Generic::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Generic *)((Gyoto::Astrobj::Generic const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Astrobj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Astrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Astrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_metric" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_metric__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Astrobj_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::metric() const\n"
    "    Gyoto::Astrobj::Generic::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_rMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (double)(arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_rMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->rMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rMax__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)(arg1)->rMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rMax__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_rMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->rMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_deltaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_deltaMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rMax__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_rMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_rMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rMax__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Astrobj_rMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_rMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_rMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_rMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->rMax(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_rMax__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_rMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Astrobj_rMax__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Astrobj_rMax__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Astrobj_rMax__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Astrobj_rMax__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_rMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::rMax()\n"
    "    Gyoto::Astrobj::Generic::rMax() const\n"
    "    Gyoto::Astrobj::Generic::rMax(std::string const &)\n"
    "    Gyoto::Astrobj::Generic::rMax(std::string const &) const\n"
    "    Gyoto::Astrobj::Generic::rMax(double)\n"
    "    Gyoto::Astrobj::Generic::rMax(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_deltaMaxInsideRMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_deltaMaxInsideRMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMaxInsideRMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_deltaMaxInsideRMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_deltaMaxInsideRMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->deltaMaxInsideRMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_deltaMaxInsideRMax__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Astrobj_deltaMaxInsideRMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->deltaMaxInsideRMax(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_deltaMaxInsideRMax__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_deltaMaxInsideRMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_deltaMaxInsideRMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->deltaMaxInsideRMax((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_deltaMaxInsideRMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_deltaMaxInsideRMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Astrobj_deltaMaxInsideRMax__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Astrobj_deltaMaxInsideRMax__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Astrobj_deltaMaxInsideRMax__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_deltaMaxInsideRMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::deltaMaxInsideRMax(double)\n"
    "    Gyoto::Astrobj::Generic::deltaMaxInsideRMax() const\n"
    "    Gyoto::Astrobj::Generic::deltaMaxInsideRMax(double,std::string const &)\n"
    "    Gyoto::Astrobj::Generic::deltaMaxInsideRMax(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_opticallyThin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_opticallyThin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_opticallyThin" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_opticallyThin" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->opticallyThin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_opticallyThin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_opticallyThin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_opticallyThin" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Generic const *)arg1)->opticallyThin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_opticallyThin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_opticallyThin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Astrobj_opticallyThin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_opticallyThin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::opticallyThin(bool)\n"
    "    Gyoto::Astrobj::Generic::opticallyThin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_showshadow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_showshadow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_showshadow" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_showshadow" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->showshadow(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_showshadow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_showshadow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_showshadow" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Generic const *)arg1)->showshadow();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_showshadow(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_showshadow__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Astrobj_showshadow__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_showshadow'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::showshadow(bool)\n"
    "    Gyoto::Astrobj::Generic::showshadow() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_redshift__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_redshift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_redshift" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_redshift" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->redshift(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_redshift__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_redshift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_redshift" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::Generic const *)arg1)->redshift();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_redshift(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Astrobj_redshift__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Astrobj_redshift__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_redshift'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::redshift(bool)\n"
    "    Gyoto::Astrobj::Generic::redshift() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_getDefaultQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Quantity_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj_getDefaultQuantities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_getDefaultQuantities" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Quantity_t)(arg1)->getDefaultQuantities();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Astrobj_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_setParameters" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Impact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Astrobj_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Impact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Astrobj_Impact",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Impact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Astrobj_Impact__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Astrobj_Impact__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_Impact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::Impact(Gyoto::Photon *,size_t,Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Astrobj::Generic::Impact(Gyoto::Photon *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_processHitQuantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  Gyoto::Astrobj::Properties *arg6 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_processHitQuantities",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_processHitQuantities" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_processHitQuantities" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_processHitQuantities" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_processHitQuantities" "', argument " "4"" of type '" "double const *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_processHitQuantities" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_processHitQuantities" "', argument " "6"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp6);
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->processHitQuantities(arg2,(Gyoto::state_t const &)*arg3,(double const *)arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Astrobj_emission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Astrobj_emission",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_emission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_emission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_emission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->emission(arg2,arg3,(Gyoto::state_t const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_emission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Astrobj_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj6,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6,(double const (*))arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_emission__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  size_t arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_emission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_emission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_emission" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_emission" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_emission" "', argument " "6"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->emission(arg2,(double const (*))arg3,arg4,arg5,(Gyoto::state_t const &)*arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Astrobj_emission__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = is_array(argv[4]) || PySequence_Check(argv[4]);
            }
            if (_v) {
              return _wrap_Astrobj_emission__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Astrobj_emission__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< double,std::allocator< double > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = is_array(argv[6]) || PySequence_Check(argv[6]);
                }
                if (_v) {
                  return _wrap_Astrobj_emission__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::emission(double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::Generic::emission(double,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::Generic::emission(double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::Generic::emission(double [],double const [],size_t,double,Gyoto::state_t const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_radiativeQ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Astrobj_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Astrobj_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double *) array_data(array8);
  }
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const (*))arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_radiativeQ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Astrobj_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_radiativeQ" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_radiativeQ" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Astrobj_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_radiativeQ" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->radiativeQ(arg2,arg3,(double const (*))arg4,arg5,arg6,(Gyoto::state_t const &)*arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_radiativeQ__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  Eigen::Matrix4d *arg6 = (Eigen::Matrix4d *) 0 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  double arg9 ;
  Gyoto::state_t *arg10 = 0 ;
  double *arg11 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 = SWIG_OLDOBJ ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Astrobj_radiativeQ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_radiativeQ" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_radiativeQ" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_radiativeQ" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_radiativeQ" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_radiativeQ" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_Eigen__Matrix4d, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_radiativeQ" "', argument " "6"" of type '" "Eigen::Matrix4d *""'"); 
  }
  arg6 = reinterpret_cast< Eigen::Matrix4d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Astrobj_radiativeQ" "', argument " "7"" of type '" "double const *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_size_t(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Astrobj_radiativeQ" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Astrobj_radiativeQ" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res10 = swig::asptr(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Astrobj_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_radiativeQ" "', argument " "10"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg10 = ptr;
  }
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Astrobj_radiativeQ" "', argument " "11"" of type '" "double const *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->radiativeQ(arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,(Gyoto::state_t const &)*arg10,(double const *)arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res10)) delete arg10;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res10)) delete arg10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_radiativeQ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Astrobj_radiativeQ__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    _v = is_array(argv[7]) || PySequence_Check(argv[7]);
                  }
                  if (_v) {
                    return _wrap_Astrobj_radiativeQ__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_Eigen__Matrix4d, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_size_t(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      int res = swig::asptr(argv[9], (std::vector< double,std::allocator< double > >**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_Astrobj_radiativeQ__SWIG_2(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_radiativeQ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::Generic::radiativeQ(double [],double [],double const [],size_t,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::Generic::radiativeQ(double *,double *,double *,double *,Eigen::Matrix4d *,double const *,size_t,double,Gyoto::state_t const &,double const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_integrateEmission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Gyoto::state_t *arg5 = 0 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_integrateEmission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_integrateEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_integrateEmission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_integrateEmission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_integrateEmission" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_integrateEmission" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_integrateEmission" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg5 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj5,
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->integrateEmission(arg2,arg3,arg4,(Gyoto::state_t const &)*arg5,(double const (*))arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_integrateEmission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Gyoto::state_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Astrobj_integrateEmission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_integrateEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_integrateEmission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_integrateEmission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_integrateEmission" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_integrateEmission" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_integrateEmission" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->integrateEmission(arg2,arg3,arg4,(Gyoto::state_t const &)*arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_integrateEmission__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  size_t arg5 ;
  double arg6 ;
  Gyoto::state_t *arg7 = 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Astrobj_integrateEmission",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_integrateEmission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Astrobj_integrateEmission" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_integrateEmission" "', argument " "3"" of type '" "double const *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_integrateEmission" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_integrateEmission" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_integrateEmission" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Astrobj_integrateEmission" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_integrateEmission" "', argument " "7"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg7 = ptr;
  }
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Astrobj_integrateEmission" "', argument " "8"" of type '" "double const *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->integrateEmission(arg2,(double const *)arg3,(size_t const *)arg4,arg5,arg6,(Gyoto::state_t const &)*arg7,(double const *)arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_integrateEmission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector< double,std::allocator< double > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Astrobj_integrateEmission__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector< double,std::allocator< double > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = is_array(argv[5]) || PySequence_Check(argv[5]);
              }
              if (_v) {
                return _wrap_Astrobj_integrateEmission__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector< double,std::allocator< double > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Astrobj_integrateEmission__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_integrateEmission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::integrateEmission(double,double,double,Gyoto::state_t const &,double const [8]) const\n"
    "    Gyoto::Astrobj::Generic::integrateEmission(double,double,double,Gyoto::state_t const &) const\n"
    "    Gyoto::Astrobj::Generic::integrateEmission(double *,double const *,size_t const *,size_t,double,Gyoto::state_t const &,double const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_transmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::state_t *arg4 = 0 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Astrobj_transmission",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_transmission" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_transmission" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_transmission" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_transmission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_transmission" "', argument " "4"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg4 = ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array5 = obj_to_array_contiguous_allow_conversion(obj4,
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->transmission(arg2,arg3,(Gyoto::state_t const &)*arg4,(double const (*))arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Omatrix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Eigen::Matrix4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Astrobj_Omatrix",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_Omatrix" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_Omatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_Omatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->Omatrix(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix4d(static_cast< const Eigen::Matrix4d& >(result))), SWIGTYPE_p_Eigen__Matrix4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Omatrix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  Eigen::Matrix4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Astrobj_Omatrix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_Omatrix" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_Omatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_Omatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_Omatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_Omatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_Omatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Astrobj_Omatrix" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Astrobj_Omatrix" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Astrobj_Omatrix" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Astrobj_Omatrix" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->Omatrix(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix4d(static_cast< const Eigen::Matrix4d& >(result))), SWIGTYPE_p_Eigen__Matrix4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Omatrix__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Eigen::Matrix4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_Omatrix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_Omatrix" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_Omatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_Omatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_Omatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->Omatrix(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix4d(static_cast< const Eigen::Matrix4d& >(result))), SWIGTYPE_p_Eigen__Matrix4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Omatrix__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  Eigen::Matrix4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Astrobj_Omatrix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_Omatrix" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_Omatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_Omatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_Omatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_Omatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_Omatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Astrobj_Omatrix" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Astrobj_Omatrix" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Astrobj_Omatrix" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Astrobj_Omatrix" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Astrobj_Omatrix" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->Omatrix(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix4d(static_cast< const Eigen::Matrix4d& >(result))), SWIGTYPE_p_Eigen__Matrix4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_Omatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Astrobj_Omatrix__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Astrobj_Omatrix__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_Astrobj_Omatrix__SWIG_1(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_Astrobj_Omatrix__SWIG_3(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_Omatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::Omatrix(double [4],double [3],double,double) const\n"
    "    Gyoto::Astrobj::Generic::Omatrix(double,double,double,double,double,double,double,double,double) const\n"
    "    Gyoto::Astrobj::Generic::Omatrix(double [4],double [3],double,double,double) const\n"
    "    Gyoto::Astrobj::Generic::Omatrix(double,double,double,double,double,double,double,double,double,double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_Pmatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  Eigen::Matrix4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Astrobj_Pmatrix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_Pmatrix" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_Pmatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_Pmatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_Pmatrix" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_Pmatrix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_Pmatrix" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Astrobj_Pmatrix" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Astrobj_Pmatrix" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Astrobj_Pmatrix" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Astrobj_Pmatrix" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Astrobj_Pmatrix" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->Pmatrix(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix4d(static_cast< const Eigen::Matrix4d& >(result))), SWIGTYPE_p_Eigen__Matrix4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rotateJs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Eigen::Vector4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Astrobj_rotateJs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rotateJs" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_rotateJs" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_rotateJs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_rotateJs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_rotateJs" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_rotateJs" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Astrobj_rotateJs" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->rotateJs(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Vector4d(static_cast< const Eigen::Vector4d& >(result))), SWIGTYPE_p_Eigen__Vector4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rotateJs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Eigen::Vector4d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_rotateJs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_rotateJs" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_rotateJs" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Astrobj_rotateJs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Astrobj_rotateJs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_rotateJs" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_rotateJs" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = ((Gyoto::Astrobj::Generic const *)arg1)->rotateJs(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Vector4d(static_cast< const Eigen::Vector4d& >(result))), SWIGTYPE_p_Eigen__Vector4d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_rotateJs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Astrobj_rotateJs__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Astrobj_rotateJs__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_rotateJs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::rotateJs(double,double,double,double,double,double) const\n"
    "    Gyoto::Astrobj::Generic::rotateJs(double,double,double,double,double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_getChi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Astrobj_getChi",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_getChi" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_getChi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_getChi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Astrobj_getChi" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->getChi((double const (*))arg2,(Gyoto::state_t const &)*arg3,(double const (*))arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_getChi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Astrobj_getChi",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_getChi" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_getChi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_getChi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->getChi((double const (*))arg2,(Gyoto::state_t const &)*arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_getChi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            return _wrap_Astrobj_getChi__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Astrobj_getChi__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_getChi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::getChi(double const [4],Gyoto::state_t const &,double const [4],bool) const\n"
    "    Gyoto::Astrobj::Generic::getChi(double const [4],Gyoto::state_t const &,double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_getSinCos2Chi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Astrobj_getSinCos2Chi",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_getSinCos2Chi" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_getSinCos2Chi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_getSinCos2Chi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_getSinCos2Chi" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_getSinCos2Chi" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Astrobj_getSinCos2Chi" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->getSinCos2Chi((double const (*))arg2,(Gyoto::state_t const &)*arg3,(double const (*))arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_getSinCos2Chi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  Gyoto::state_t *arg3 = 0 ;
  double *arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_getSinCos2Chi",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_getSinCos2Chi" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_getSinCos2Chi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_getSinCos2Chi" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_getSinCos2Chi" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_getSinCos2Chi" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->getSinCos2Chi((double const (*))arg2,(Gyoto::state_t const &)*arg3,(double const (*))arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_getSinCos2Chi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Astrobj_getSinCos2Chi__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Astrobj_getSinCos2Chi__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_getSinCos2Chi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::getSinCos2Chi(double const [4],Gyoto::state_t const &,double const [4],double *,double *,bool) const\n"
    "    Gyoto::Astrobj::Generic::getSinCos2Chi(double const [4],Gyoto::state_t const &,double const [4],double *,double *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj_computeB4vect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  std::string arg3 ;
  double *arg4 ;
  Gyoto::state_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Astrobj_computeB4vect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_computeB4vect" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Astrobj_computeB4vect" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_computeB4vect" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_computeB4vect" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->computeB4vect(arg2,arg3,(double const (*))arg4,(Gyoto::state_t const &)*arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_computeB4vect_ipole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  double *arg2 ;
  std::string arg3 ;
  double *arg4 ;
  Gyoto::state_t *arg5 = 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_computeB4vect_ipole",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_computeB4vect_ipole" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Astrobj_computeB4vect_ipole" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    npy_intp size[1] = {
      8 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_computeB4vect_ipole" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Astrobj_computeB4vect_ipole" "', argument " "5"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Astrobj_computeB4vect_ipole" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      ((Gyoto::Astrobj::Generic const *)arg1)->computeB4vect_ipole(arg2,arg3,(double const (*))arg4,(Gyoto::state_t const &)*arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_interpolate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  int arg2 ;
  double *arg3 = (double *) (double *)0 ;
  double *arg4 = (double *) (double *)0 ;
  double **arg5 = (double **) (double **)0 ;
  int *arg6 = (int *) (int *)0 ;
  std::string *arg7 = (std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Astrobj_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_interpolate" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_interpolate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_interpolate" "', argument " "3"" of type '" "double *const""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_interpolate" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_interpolate" "', argument " "5"" of type '" "double **const""'"); 
  }
  arg5 = reinterpret_cast< double ** >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_interpolate" "', argument " "6"" of type '" "int *const""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Astrobj_interpolate" "', argument " "7"" of type '" "std::string const *""'"); 
  }
  arg7 = reinterpret_cast< std::string * >(argp7);
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->interpolate(arg2,arg3,arg4,arg5,arg6,(std::string const *)arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_interpolate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  int arg2 ;
  double *arg3 = (double *) (double *)0 ;
  double *arg4 = (double *) (double *)0 ;
  double **arg5 = (double **) (double **)0 ;
  std::string *arg6 = (std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Astrobj_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj_interpolate" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Astrobj_interpolate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Astrobj_interpolate" "', argument " "3"" of type '" "double *const""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Astrobj_interpolate" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Astrobj_interpolate" "', argument " "5"" of type '" "double **const""'"); 
  }
  arg5 = reinterpret_cast< double ** >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Astrobj_interpolate" "', argument " "6"" of type '" "std::string const *""'"); 
  }
  arg6 = reinterpret_cast< std::string * >(argp6);
  {
    try {
      result = (double)((Gyoto::Astrobj::Generic const *)arg1)->interpolate(arg2,arg3,arg4,arg5,(std::string const *)arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Astrobj_interpolate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Astrobj_interpolate__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_int, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Astrobj_interpolate__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Astrobj_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::interpolate(int const,double *const,double *const,double **const,int *const,std::string const *) const\n"
    "    Gyoto::Astrobj::Generic::interpolate(int const,double *const,double *const,double **const,std::string const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Astrobj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Astrobj",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Astrobj" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Astrobj::Generic *)new_Gyoto_Astrobj_Generic__SWIG_0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Astrobj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Astrobj::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Astrobj",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Astrobj" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Astrobj" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Astrobj::Generic *)new_Gyoto_Astrobj_Generic__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Astrobj__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Astrobj",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Astrobj" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Generic *)new_Gyoto_Astrobj_Generic__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Astrobj__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Astrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Astrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Generic *)new_Gyoto_Astrobj_Generic__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Astrobj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Astrobj__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Astrobj__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Astrobj__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Astrobj__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Astrobj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Generic::Generic(std::string)\n"
    "    Gyoto::Astrobj::Generic::Generic(std::string,std::vector< std::string,std::allocator< std::string > >)\n"
    "    Gyoto::Astrobj::Generic::Generic(long)\n"
    "    Gyoto::Astrobj::Generic::Generic(Gyoto::Astrobj::Generic *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Astrobj___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Astrobj___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Astrobj___str__" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = Gyoto_Astrobj_Generic___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Astrobj_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AstrobjProperties_intensity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_intensity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_intensity_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_intensity_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->intensity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_intensity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_intensity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_intensity_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->intensity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_time_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_time_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_time_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->time);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_distance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_distance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_distance_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_distance_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->distance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_distance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_distance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_distance_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->distance);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_first_dmin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_first_dmin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_first_dmin_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_first_dmin_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->first_dmin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_first_dmin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_first_dmin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_first_dmin_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->first_dmin);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_first_dmin_found_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_first_dmin_found_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_first_dmin_found_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AstrobjProperties_first_dmin_found_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->first_dmin_found = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_first_dmin_found_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_first_dmin_found_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_first_dmin_found_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (int) ((arg1)->first_dmin_found);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_redshift_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_redshift_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_redshift_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_redshift_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->redshift = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_redshift_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_redshift_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_redshift_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->redshift);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_nbcrosseqplane_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_nbcrosseqplane_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_nbcrosseqplane_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_nbcrosseqplane_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->nbcrosseqplane = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_nbcrosseqplane_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_nbcrosseqplane_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_nbcrosseqplane_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->nbcrosseqplane);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_spectrum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_spectrum_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_spectrum_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->spectrum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_spectrum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_spectrum_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->spectrum);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_stokesQ_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_stokesQ_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_stokesQ_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_stokesQ_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->stokesQ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_stokesQ_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_stokesQ_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_stokesQ_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->stokesQ);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_stokesU_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_stokesU_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_stokesU_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_stokesU_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->stokesU = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_stokesU_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_stokesU_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_stokesU_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->stokesU);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_stokesV_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_stokesV_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_stokesV_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_stokesV_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->stokesV = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_stokesV_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_stokesV_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_stokesV_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->stokesV);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binspectrum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_binspectrum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_binspectrum_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_binspectrum_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->binspectrum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binspectrum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_binspectrum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_binspectrum_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->binspectrum);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_offset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_offset_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AstrobjProperties_offset_set" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  if (arg1) (arg1)->offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_offset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_offset_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result =  ((arg1)->offset);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_impactcoords_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_impactcoords_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_impactcoords_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_impactcoords_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->impactcoords = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_impactcoords_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_impactcoords_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_impactcoords_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->impactcoords);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_user1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user1_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_user1_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->user1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_user1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user1_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->user1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_user2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user2_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_user2_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->user2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_user2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user2_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->user2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_user3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user3_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_user3_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->user3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_user3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user3_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->user3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_user4_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user4_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_user4_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->user4 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_user4_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user4_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->user4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user5_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_user5_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user5_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_user5_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->user5 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_user5_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_user5_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_user5_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (double *) ((arg1)->user5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_intensity_converter__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  Gyoto::SmartPointer< Gyoto::Units::Converter > *arg2 = (Gyoto::SmartPointer< Gyoto::Units::Converter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_intensity_converter__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_intensity_converter__set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_intensity_converter__set" "', argument " "2"" of type '" "Gyoto::SmartPointer< Gyoto::Units::Converter > *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Units::Converter > * >(argp2);
  if (arg1) (arg1)->intensity_converter_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_intensity_converter__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::SmartPointer< Gyoto::Units::Converter > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_intensity_converter__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_intensity_converter__get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (Gyoto::SmartPointer< Gyoto::Units::Converter > *)& ((arg1)->intensity_converter_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrum_converter__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  Gyoto::SmartPointer< Gyoto::Units::Converter > *arg2 = (Gyoto::SmartPointer< Gyoto::Units::Converter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_spectrum_converter__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_spectrum_converter__set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_spectrum_converter__set" "', argument " "2"" of type '" "Gyoto::SmartPointer< Gyoto::Units::Converter > *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Units::Converter > * >(argp2);
  if (arg1) (arg1)->spectrum_converter_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrum_converter__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::SmartPointer< Gyoto::Units::Converter > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_spectrum_converter__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_spectrum_converter__get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (Gyoto::SmartPointer< Gyoto::Units::Converter > *)& ((arg1)->spectrum_converter_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binspectrum_converter__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  Gyoto::SmartPointer< Gyoto::Units::Converter > *arg2 = (Gyoto::SmartPointer< Gyoto::Units::Converter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_binspectrum_converter__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_binspectrum_converter__set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AstrobjProperties_binspectrum_converter__set" "', argument " "2"" of type '" "Gyoto::SmartPointer< Gyoto::Units::Converter > *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Units::Converter > * >(argp2);
  if (arg1) (arg1)->binspectrum_converter_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binspectrum_converter__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::SmartPointer< Gyoto::Units::Converter > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_binspectrum_converter__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_binspectrum_converter__get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (Gyoto::SmartPointer< Gyoto::Units::Converter > *)& ((arg1)->binspectrum_converter_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_alloc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_alloc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_alloc_set" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AstrobjProperties_alloc_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->alloc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_alloc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_alloc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_alloc_get" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  result = (bool) ((arg1)->alloc);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AstrobjProperties__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AstrobjProperties")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::Properties *)new Gyoto::Astrobj::Properties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Properties, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref SmartPointee
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AstrobjProperties__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Astrobj::Properties *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AstrobjProperties",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AstrobjProperties" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AstrobjProperties" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      result = (Gyoto::Astrobj::Properties *)new Gyoto::Astrobj::Properties(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Properties, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref SmartPointee
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AstrobjProperties(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AstrobjProperties__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_AstrobjProperties__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AstrobjProperties'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Properties::Properties()\n"
    "    Gyoto::Astrobj::Properties::Properties(double *,double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_init__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_init",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_init" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AstrobjProperties_init" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->init(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_init__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_init" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    try {
      (arg1)->init();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_init(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_AstrobjProperties_init__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AstrobjProperties_init__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AstrobjProperties_init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Properties::init(size_t)\n"
    "    Gyoto::Astrobj::Properties::init()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Properties *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_increment" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Properties *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Astrobj::Properties *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties___iadd__" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AstrobjProperties___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      result = (Gyoto::Astrobj::Properties *) &(arg1)->operator +=(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Properties, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref SmartPointee
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_intensityConverter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Units::Converter > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_intensityConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_intensityConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Units__Converter, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Units::Converter" "*'");
    }
    Gyoto::Units::Converter * kp=reinterpret_cast< Gyoto::Units::Converter * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Units::Converter>(kp);
  }
  {
    try {
      (arg1)->intensityConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_intensityConverter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_intensityConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_intensityConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AstrobjProperties_intensityConverter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->intensityConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrumConverter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Units::Converter > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_spectrumConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_spectrumConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Units__Converter, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Units::Converter" "*'");
    }
    Gyoto::Units::Converter * kp=reinterpret_cast< Gyoto::Units::Converter * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Units::Converter>(kp);
  }
  {
    try {
      (arg1)->spectrumConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrumConverter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_spectrumConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_spectrumConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AstrobjProperties_spectrumConverter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->spectrumConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binSpectrumConverter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Units::Converter > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_binSpectrumConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_binSpectrumConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Units__Converter, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Units::Converter" "*'");
    }
    Gyoto::Units::Converter * kp=reinterpret_cast< Gyoto::Units::Converter * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Units::Converter>(kp);
  }
  {
    try {
      (arg1)->binSpectrumConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binSpectrumConverter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AstrobjProperties_binSpectrumConverter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_binSpectrumConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AstrobjProperties_binSpectrumConverter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->binSpectrumConverter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binSpectrumConverter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Units::Converter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_binSpectrumConverter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_binSpectrumConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    try {
      result = (Gyoto::Units::Converter *)Gyoto_Astrobj_Properties_binSpectrumConverter__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Units__Converter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_binSpectrumConverter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_AstrobjProperties_binSpectrumConverter__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Units__Converter, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AstrobjProperties_binSpectrumConverter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AstrobjProperties_binSpectrumConverter__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AstrobjProperties_binSpectrumConverter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Properties::binSpectrumConverter(Gyoto::SmartPointer< Gyoto::Units::Converter >)\n"
    "    Gyoto::Astrobj::Properties::binSpectrumConverter(std::string)\n"
    "    Gyoto::Astrobj::Properties::binSpectrumConverter()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_intensityConverter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Units::Converter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_intensityConverter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_intensityConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    try {
      result = (Gyoto::Units::Converter *)Gyoto_Astrobj_Properties_intensityConverter__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Units__Converter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_intensityConverter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_AstrobjProperties_intensityConverter__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Units__Converter, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AstrobjProperties_intensityConverter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AstrobjProperties_intensityConverter__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AstrobjProperties_intensityConverter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Properties::intensityConverter(Gyoto::SmartPointer< Gyoto::Units::Converter >)\n"
    "    Gyoto::Astrobj::Properties::intensityConverter(std::string)\n"
    "    Gyoto::Astrobj::Properties::intensityConverter()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrumConverter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Units::Converter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AstrobjProperties_spectrumConverter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AstrobjProperties_spectrumConverter" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    try {
      result = (Gyoto::Units::Converter *)Gyoto_Astrobj_Properties_spectrumConverter__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Units__Converter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AstrobjProperties_spectrumConverter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_AstrobjProperties_spectrumConverter__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Units__Converter, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AstrobjProperties_spectrumConverter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AstrobjProperties_spectrumConverter__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AstrobjProperties_spectrumConverter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Properties::spectrumConverter(Gyoto::SmartPointer< Gyoto::Units::Converter >)\n"
    "    Gyoto::Astrobj::Properties::spectrumConverter(std::string)\n"
    "    Gyoto::Astrobj::Properties::spectrumConverter()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AstrobjProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Properties *arg1 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AstrobjProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Properties, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AstrobjProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref SmartPointee
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AstrobjProperties_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Properties, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ThinDisk_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDisk_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDisk_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::ThinDisk::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDisk_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::ThinDisk const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ThinDisk_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ThinDisk_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ThinDisk_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::ThinDisk::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ThinDisk_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDisk const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDisk_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDisk_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::ThinDisk::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThinDisk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDisk",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ThinDisk" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Astrobj::ThinDisk *)new Gyoto::Astrobj::ThinDisk(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDisk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThinDisk")) SWIG_fail;
  {
    try {
      result = (Gyoto::Astrobj::ThinDisk *)new Gyoto::Astrobj::ThinDisk();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDisk__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThinDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDisk *)new Gyoto::Astrobj::ThinDisk((Gyoto::Astrobj::ThinDisk const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_clone" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDisk *)((Gyoto::Astrobj::ThinDisk const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThinDisk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThinDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThinDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_innerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_innerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->innerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_innerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_innerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDisk_innerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_innerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->innerRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_innerRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_innerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_innerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->innerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_innerRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDisk_innerRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_innerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_innerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThinDisk_innerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_innerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->innerRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_innerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDisk_innerRadius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDisk_innerRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDisk_innerRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThinDisk_innerRadius__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_innerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::innerRadius() const\n"
    "    Gyoto::Astrobj::ThinDisk::innerRadius(std::string const &) const\n"
    "    Gyoto::Astrobj::ThinDisk::innerRadius(double)\n"
    "    Gyoto::Astrobj::ThinDisk::innerRadius(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDisk_outerRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_outerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->outerRadius();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_outerRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_outerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDisk_outerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_outerRadius" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->outerRadius((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_outerRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_outerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_outerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->outerRadius(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_outerRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDisk_outerRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_outerRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_outerRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThinDisk_outerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_outerRadius" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->outerRadius(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_outerRadius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDisk_outerRadius__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDisk_outerRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDisk_outerRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThinDisk_outerRadius__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_outerRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::outerRadius() const\n"
    "    Gyoto::Astrobj::ThinDisk::outerRadius(std::string const &) const\n"
    "    Gyoto::Astrobj::ThinDisk::outerRadius(double)\n"
    "    Gyoto::Astrobj::ThinDisk::outerRadius(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDisk_thickness__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_thickness",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_thickness" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->thickness();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_thickness__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_thickness",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_thickness" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDisk_thickness" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_thickness" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->thickness((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_thickness__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_thickness",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_thickness" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_thickness" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->thickness(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_thickness__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDisk_thickness",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_thickness" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_thickness" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThinDisk_thickness" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_thickness" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->thickness(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_thickness(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDisk_thickness__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDisk_thickness__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDisk_thickness__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThinDisk_thickness__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_thickness'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::thickness() const\n"
    "    Gyoto::Astrobj::ThinDisk::thickness(std::string const &) const\n"
    "    Gyoto::Astrobj::ThinDisk::thickness(double)\n"
    "    Gyoto::Astrobj::ThinDisk::thickness(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDisk_dir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_dir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_dir" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (int)((Gyoto::Astrobj::ThinDisk const *)arg1)->dir();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_dir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_dir",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_dir" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_dir" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->dir(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_dir(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDisk_dir__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDisk_dir__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_dir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::dir() const\n"
    "    Gyoto::Astrobj::ThinDisk::dir(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDisk_corotating__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_corotating",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_corotating" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Astrobj::ThinDisk const *)arg1)->corotating();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_corotating__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_corotating",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_corotating" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThinDisk_corotating" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->corotating(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_corotating(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDisk_corotating__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThinDisk_corotating__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_corotating'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::corotating() const\n"
    "    Gyoto::Astrobj::ThinDisk::corotating(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDisk_velocityKind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThinDisk_velocityKind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_velocityKind" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::ThinDisk const *)arg1)->velocityKind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_velocityKind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_velocityKind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_velocityKind" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDisk_velocityKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThinDisk_velocityKind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->velocityKind((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_velocityKind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ThinDisk_velocityKind__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ThinDisk_velocityKind__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_velocityKind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::velocityKind() const\n"
    "    Gyoto::Astrobj::ThinDisk::velocityKind(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ThinDisk___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_projectedRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_projectedRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_projectedRadius" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->projectedRadius((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_sphericalPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThinDisk_sphericalPhi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_sphericalPhi" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)((Gyoto::Astrobj::ThinDisk const *)arg1)->sphericalPhi((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDisk_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_Impact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThinDisk_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDisk_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDisk_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThinDisk_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_Impact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::ThinDisk *arg1 = (Gyoto::Astrobj::ThinDisk *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThinDisk_Impact",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThinDisk_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::ThinDisk *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::ThinDisk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThinDisk_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThinDisk_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThinDisk_Impact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ThinDisk_Impact__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ThinDisk_Impact__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ThinDisk_Impact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::Impact(Gyoto::Photon *,size_t,Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Astrobj::ThinDisk::Impact(Gyoto::Photon *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ThinDisk__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDisk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThinDisk" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDisk *)new_Gyoto_Astrobj_ThinDisk__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDisk__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::ThinDisk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThinDisk",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThinDisk" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::ThinDisk *)new_Gyoto_Astrobj_ThinDisk__SWIG_4(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThinDisk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThinDisk__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThinDisk__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDisk__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThinDisk__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThinDisk__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ThinDisk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::ThinDisk::ThinDisk(std::string)\n"
    "    Gyoto::Astrobj::ThinDisk::ThinDisk()\n"
    "    Gyoto::Astrobj::ThinDisk::ThinDisk(Gyoto::Astrobj::ThinDisk const &)\n"
    "    Gyoto::Astrobj::ThinDisk::ThinDisk(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::ThinDisk::ThinDisk(long)\n");
  return 0;
}


SWIGINTERN PyObject *ThinDisk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__ThinDisk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_StandardAstrobj_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StandardAstrobj_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_StandardAstrobj_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Astrobj::Standard::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StandardAstrobj_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_getProperties" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Astrobj::Standard const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_StandardAstrobj_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StandardAstrobj_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_StandardAstrobj_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Astrobj::Standard::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StandardAstrobj_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StandardAstrobj_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StandardAstrobj_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StandardAstrobj_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_plugins" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    try {
      result = ((Gyoto::Astrobj::Standard const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StandardAstrobj_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StandardAstrobj_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StandardAstrobj_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Standard::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Astrobj::Standard::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_StandardAstrobj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StandardAstrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StandardAstrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_safetyValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StandardAstrobj_safetyValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_safetyValue" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StandardAstrobj_safetyValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->safetyValue(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_safetyValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StandardAstrobj_safetyValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_safetyValue" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Standard const *)arg1)->safetyValue();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_safetyValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StandardAstrobj_safetyValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StandardAstrobj_safetyValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StandardAstrobj_safetyValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Standard::safetyValue(double)\n"
    "    Gyoto::Astrobj::Standard::safetyValue() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_deltaInObj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StandardAstrobj_deltaInObj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_deltaInObj" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    try {
      result = (double)((Gyoto::Astrobj::Standard const *)arg1)->deltaInObj();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_deltaInObj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StandardAstrobj_deltaInObj",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_deltaInObj" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StandardAstrobj_deltaInObj" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaInObj(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_deltaInObj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_StandardAstrobj_deltaInObj__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StandardAstrobj_deltaInObj__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StandardAstrobj_deltaInObj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Standard::deltaInObj() const\n"
    "    Gyoto::Astrobj::Standard::deltaInObj(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_Impact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  Gyoto::Astrobj::Properties *arg4 = (Gyoto::Astrobj::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StandardAstrobj_Impact",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StandardAstrobj_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StandardAstrobj_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Astrobj__Properties, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StandardAstrobj_Impact" "', argument " "4"" of type '" "Gyoto::Astrobj::Properties *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Astrobj::Properties * >(argp4);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_Impact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  Gyoto::Photon *arg2 = (Gyoto::Photon *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StandardAstrobj_Impact",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_Impact" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Photon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StandardAstrobj_Impact" "', argument " "2"" of type '" "Gyoto::Photon *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Photon * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StandardAstrobj_Impact" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (int)(arg1)->Impact(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_Impact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StandardAstrobj_Impact__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Standard, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Properties, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StandardAstrobj_Impact__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StandardAstrobj_Impact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Standard::Impact(Gyoto::Photon *,size_t,Gyoto::Astrobj::Properties *)\n"
    "    Gyoto::Astrobj::Standard::Impact(Gyoto::Photon *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StandardAstrobj___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj___call__" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->operator ()((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StandardAstrobj_getVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_getVelocity" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->getVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_StandardAstrobj_giveDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Standard *arg1 = (Gyoto::Astrobj::Standard *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StandardAstrobj_giveDelta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Standard, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StandardAstrobj_giveDelta" "', argument " "1"" of type '" "Gyoto::Astrobj::Standard *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Standard * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (double)(arg1)->giveDelta(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StandardAstrobj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Astrobj::Generic *arg1 = (Gyoto::Astrobj::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Standard *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StandardAstrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Astrobj__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StandardAstrobj" "', argument " "1"" of type '" "Gyoto::Astrobj::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Astrobj::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Astrobj::Standard *)new_Gyoto_Astrobj_Standard__SWIG_0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Standard, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StandardAstrobj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Astrobj::Standard *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StandardAstrobj",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StandardAstrobj" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Astrobj::Standard *)new_Gyoto_Astrobj_Standard__SWIG_1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Astrobj__Standard, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StandardAstrobj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StandardAstrobj__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StandardAstrobj__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StandardAstrobj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Astrobj::Standard::Standard(Gyoto::Astrobj::Generic *)\n"
    "    Gyoto::Astrobj::Standard::Standard(long)\n");
  return 0;
}


SWIGINTERN PyObject *StandardAstrobj_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Astrobj__Standard, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getMetricRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Register::Entry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getMetricRegister")) SWIG_fail;
  {
    try {
      result = (Gyoto::Register::Entry *)getMetricRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Register__Entry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getMetricSubcontractor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int arg3 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Metric::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getMetricSubcontractor",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getMetricSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getMetricSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetricSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getMetricSubcontractor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Gyoto::Metric::Subcontractor_t *)Gyoto::Metric::getSubcontractor(arg1,*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getMetricSubcontractor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Metric::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getMetricSubcontractor",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getMetricSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getMetricSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetricSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try {
      result = (Gyoto::Metric::Subcontractor_t *)Gyoto::Metric::getSubcontractor(arg1,*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getMetricSubcontractor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getMetricSubcontractor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_getMetricSubcontractor__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getMetricSubcontractor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &,int)\n"
    "    Gyoto::Metric::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &)\n");
  return 0;
}


SWIGINTERN int Swig_var_MetricRegister_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Gyoto__Register__Entry,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Gyoto::Metric::Register_""' of type '""Gyoto::Register::Entry *""'");
    }
    Gyoto::Metric::Register_ = reinterpret_cast< Gyoto::Register::Entry * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_MetricRegister_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::Register_), SWIGTYPE_p_Gyoto__Register__Entry,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_registerMetric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Gyoto::Metric::Subcontractor_t *arg2 = (Gyoto::Metric::Subcontractor_t *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:registerMetric",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "registerMetric" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "registerMetric" "', argument " "2"" of type '" "Gyoto::Metric::Subcontractor_t *""'"); 
    }
  }
  {
    try {
      Gyoto::Metric::Register(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_initMetricRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":initMetricRegister")) SWIG_fail;
  {
    try {
      Gyoto::Metric::initRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Metric_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Metric_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Metric_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Metric::Generic::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Metric_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_getProperties" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Metric::Generic const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Metric_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Metric_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Metric_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Metric::Generic::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Metric_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_plugins" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = ((Gyoto::Metric::Generic const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Metric_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Metric_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Metric::Generic::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_getRefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_getRefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_getRefCount" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (int)(arg1)->getRefCount();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Metric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Metric" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_clone" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Generic *)((Gyoto::Metric::Generic const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_mass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_mass" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_mass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->mass(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_mass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_mass" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_mass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_mass" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_mass" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->mass(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_coordKind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_coordKind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_coordKind" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->coordKind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_mass__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_mass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_mass" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->mass();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_mass__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_mass" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_mass" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_mass" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->mass((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_mass(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Metric_mass__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Metric_mass__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Metric_mass__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Metric_mass__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_mass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::mass(double const)\n"
    "    Gyoto::Metric::Generic::mass(double const,std::string const &)\n"
    "    Gyoto::Metric::Generic::mass() const\n"
    "    Gyoto::Metric::Generic::mass(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_unitLength__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_unitLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_unitLength" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->unitLength();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_unitLength__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_unitLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_unitLength" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_unitLength" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_unitLength" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->unitLength((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_unitLength(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Metric_unitLength__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Metric_unitLength__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_unitLength'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::unitLength() const\n"
    "    Gyoto::Metric::Generic::unitLength(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_getRmb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_getRmb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_getRmb" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->getRmb();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_getRms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_getRms",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_getRms" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->getRms();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_getSpecificAngularMomentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_getSpecificAngularMomentum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_getSpecificAngularMomentum" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_getSpecificAngularMomentum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->getSpecificAngularMomentum(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_getPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_getPotential",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_getPotential" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Metric_getPotential" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->getPotential((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_deltaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_deltaMin" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->deltaMin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_deltaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_deltaMin" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_deltaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Metric_deltaMin__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Metric_deltaMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_deltaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::deltaMin() const\n"
    "    Gyoto::Metric::Generic::deltaMin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_deltaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_deltaMax" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->deltaMax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_deltaMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_deltaMax" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Metric_deltaMax" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->deltaMax((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMax__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_deltaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_deltaMax" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_deltaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Metric_deltaMax__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Metric_deltaMax__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Metric_deltaMax__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_deltaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::deltaMax() const\n"
    "    Gyoto::Metric::Generic::deltaMax(double const [8],double) const\n"
    "    Gyoto::Metric::Generic::deltaMax(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMaxOverR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_deltaMaxOverR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->deltaMaxOverR();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMaxOverR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_deltaMaxOverR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_deltaMaxOverR" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_deltaMaxOverR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->deltaMaxOverR(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_deltaMaxOverR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Metric_deltaMaxOverR__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Metric_deltaMaxOverR__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_deltaMaxOverR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::deltaMaxOverR() const\n"
    "    Gyoto::Metric::Generic::deltaMaxOverR(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_keplerian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric_keplerian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_keplerian" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Metric::Generic const *)arg1)->keplerian();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_keplerian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_keplerian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_keplerian" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_keplerian" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->keplerian(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_keplerian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Metric_keplerian__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Metric_keplerian__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_keplerian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::keplerian() const\n"
    "    Gyoto::Metric::Generic::keplerian(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_cartesianVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_cartesianVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_cartesianVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      (arg1)->cartesianVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_SysPrimeToTdot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_SysPrimeToTdot",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_SysPrimeToTdot" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->SysPrimeToTdot((double const (*))arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_circularVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_circularVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_circularVelocity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->circularVelocity((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_circularVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_circularVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->circularVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_zamoVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_zamoVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->zamoVelocity((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_nullifyCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_nullifyCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_nullifyCoord" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->nullifyCoord(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_nullifyCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_nullifyCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_nullifyCoord" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_nullifyCoord" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_nullifyCoord" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->nullifyCoord(arg2,*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_nullifyCoord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        return _wrap_Metric_nullifyCoord__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Metric_nullifyCoord__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_nullifyCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::nullifyCoord(double [8]) const\n"
    "    Gyoto::Metric::Generic::nullifyCoord(double [8],double &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_normalizeFourVel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_normalizeFourVel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_normalizeFourVel" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->normalizeFourVel(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_normalizeFourVel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_normalizeFourVel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_normalizeFourVel" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->normalizeFourVel((double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_normalizeFourVel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        return _wrap_Metric_normalizeFourVel__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_Metric_normalizeFourVel__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_normalizeFourVel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::normalizeFourVel(double [8]) const\n"
    "    Gyoto::Metric::Generic::normalizeFourVel(double const [4],double [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_ScalarProd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_ScalarProd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_ScalarProd" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->ScalarProd((double const (*))arg2,(double const (*))arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_norm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_norm" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->norm((double const (*))arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_multiplyFourVect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_multiplyFourVect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_multiplyFourVect" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Metric_multiplyFourVect" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->multiplyFourVect(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_addFourVect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_addFourVect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_addFourVect" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->addFourVect(arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_projectFourVect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_projectFourVect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_projectFourVect" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->projectFourVect((double const (*))arg2,arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_dualOneForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject *array4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array4 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array4) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_dualOneForm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_dualOneForm" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->dualOneForm((double const (*))arg2,(double const (*))arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array4);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_observerTetrad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  unsigned int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  double *arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Metric_observerTetrad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_observerTetrad" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Metric_observerTetrad" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array7 = obj_to_array_no_conversion(obj6, NPY_DOUBLE);
    if (!array7 || !require_dimensions(array7,1) || !require_size(array7, size, 1) ||
      !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = (double *) array_data(array7);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->observerTetrad(arg2,(double const (*))arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_observerTetrad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Metric_observerTetrad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_observerTetrad" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->observerTetrad((double const (*))arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_observerTetrad(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) && PyArray_EquivTypenums(array_type(argv[4]),
                NPY_DOUBLE);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                return _wrap_Metric_observerTetrad__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            _v = is_array(argv[3]) && PyArray_EquivTypenums(array_type(argv[3]),
              NPY_DOUBLE);
          }
          if (_v) {
            {
              _v = is_array(argv[4]) && PyArray_EquivTypenums(array_type(argv[4]),
                NPY_DOUBLE);
            }
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_DOUBLE);
              }
              if (_v) {
                {
                  _v = is_array(argv[6]) && PyArray_EquivTypenums(array_type(argv[6]),
                    NPY_DOUBLE);
                }
                if (_v) {
                  return _wrap_Metric_observerTetrad__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_observerTetrad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::observerTetrad(unsigned int,double const [4],double [4],double [4],double [4],double [4]) const\n"
    "    Gyoto::Metric::Generic::observerTetrad(double const [4],double [4],double [4],double [4],double [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_GramSchmidt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  double *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Metric_GramSchmidt",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_GramSchmidt" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array5 = obj_to_array_no_conversion(obj4, NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_size(array5, size, 1) ||
      !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = (double *) array_data(array5);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_DOUBLE);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (double *) array_data(array6);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->GramSchmidt((double const (*))arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_gmunu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_gmunu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Metric_gmunu" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_gmunu" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->gmunu((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_gmunu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_gmunu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_gmunu" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->gmunu((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_gmunu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Metric_gmunu__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Metric_gmunu__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_gmunu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::gmunu(double const [4],int,int) const\n"
    "    Gyoto::Metric::Generic::gmunu(double [4][4],double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_gmunu_up__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_gmunu_up",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Metric_gmunu_up" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_gmunu_up" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->gmunu_up((double const (*))arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_gmunu_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double (*arg2)[4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_gmunu_up",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_gmunu_up" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->gmunu_up((double (*)[4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_gmunu_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Metric_gmunu_up__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Metric_gmunu_up__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_gmunu_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::gmunu_up(double const [4],int,int) const\n"
    "    Gyoto::Metric::Generic::gmunu_up(double [4][4],double const [4]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_jacobian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_jacobian" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->jacobian((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_gmunu_up_and_jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double (*arg2)[4] ;
  double (*arg3)[4][4] ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array2 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array3 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double (*)[4][4]) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_gmunu_up_and_jacobian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_gmunu_up_and_jacobian" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->gmunu_up_and_jacobian((double (*)[4])arg2,(double (*)[4][4])arg3,(double const (*))arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_computeNBeta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 = 0 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyArrayObject *array4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_computeNBeta",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_computeNBeta" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_computeNBeta" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_computeNBeta" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    npy_intp size[1] = {
      3 
    };
    array4 = obj_to_array_no_conversion(obj3, NPY_DOUBLE);
    if (!array4 || !require_dimensions(array4,1) || !require_size(array4, size, 1) ||
      !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->computeNBeta((double const (*))arg2,*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_christoffel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Metric_christoffel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Metric_christoffel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_christoffel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Metric_christoffel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)((Gyoto::Metric::Generic const *)arg1)->christoffel((double const (*))arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_christoffel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_christoffel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[3] = {
      4, 4, 4 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,3) || !require_size(array2, size, 3) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->christoffel((double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_myrk4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  Gyoto::Worldline *arg2 = (Gyoto::Worldline *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  Gyoto::state_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Metric_myrk4",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_myrk4" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_myrk4" "', argument " "2"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Worldline * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_myrk4" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_myrk4" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Metric_myrk4" "', argument " "5"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4" "', argument " "5"" of type '" "Gyoto::state_t &""'"); 
  }
  arg5 = reinterpret_cast< Gyoto::state_t * >(argp5);
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->myrk4(arg2,(Gyoto::state_t const &)*arg3,arg4,*arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_myrk4_adaptive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  Gyoto::Worldline *arg2 = (Gyoto::Worldline *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double arg7 ;
  double *arg8 = 0 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Metric_myrk4_adaptive",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_myrk4_adaptive" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_myrk4_adaptive" "', argument " "2"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Worldline * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_myrk4_adaptive" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Metric_myrk4_adaptive" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Metric_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::state_t * >(argp6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Metric_myrk4_adaptive" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Metric_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Metric_myrk4_adaptive" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->myrk4_adaptive(arg2,(Gyoto::state_t const &)*arg3,arg4,arg5,*arg6,arg7,*arg8,arg9);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_myrk4_adaptive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  Gyoto::Worldline *arg2 = (Gyoto::Worldline *) 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  Gyoto::state_t *arg6 = 0 ;
  double arg7 ;
  double *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Metric_myrk4_adaptive",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_myrk4_adaptive" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_myrk4_adaptive" "', argument " "2"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Worldline * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4_adaptive" "', argument " "3"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_myrk4_adaptive" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Metric_myrk4_adaptive" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Metric_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4_adaptive" "', argument " "6"" of type '" "Gyoto::state_t &""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::state_t * >(argp6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Metric_myrk4_adaptive" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Metric_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_myrk4_adaptive" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->myrk4_adaptive(arg2,(Gyoto::state_t const &)*arg3,arg4,arg5,*arg6,arg7,*arg8);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_myrk4_adaptive(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Metric_myrk4_adaptive__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Worldline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_Metric_myrk4_adaptive__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_myrk4_adaptive'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::myrk4_adaptive(Gyoto::Worldline *,Gyoto::state_t const &,double,double,Gyoto::state_t &,double,double &,double) const\n"
    "    Gyoto::Metric::Generic::myrk4_adaptive(Gyoto::Worldline *,Gyoto::state_t const &,double,double,Gyoto::state_t &,double,double &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_isStopCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_isStopCondition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_isStopCondition" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      8 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->isStopCondition((double const (*))arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  Gyoto::state_t *arg2 = 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_diff",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_diff" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_diff" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_diff" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_diff" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_diff" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_diff" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->diff((Gyoto::state_t const &)*arg2,*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_diff31(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  Gyoto::state_t *arg2 = 0 ;
  Gyoto::state_t *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Metric_diff31",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_diff31" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_diff31" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_diff31" "', argument " "2"" of type '" "Gyoto::state_t const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Metric_diff31" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metric_diff31" "', argument " "3"" of type '" "Gyoto::state_t &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::state_t * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Metric_diff31" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (int)((Gyoto::Metric::Generic const *)arg1)->diff31((Gyoto::state_t const &)*arg2,*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_setParticleProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  Gyoto::Worldline *arg2 = (Gyoto::Worldline *) 0 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Metric_setParticleProperties",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_setParticleProperties" "', argument " "1"" of type '" "Gyoto::Metric::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Worldline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metric_setParticleProperties" "', argument " "2"" of type '" "Gyoto::Worldline *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Worldline * >(argp2);
  {
    npy_intp size[1] = {
      8 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      ((Gyoto::Metric::Generic const *)arg1)->setParticleProperties(arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_circularVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_circularVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_circularVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Generic_circularVelocity__SWIG_2(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_circularVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Metric_circularVelocity__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_Metric_circularVelocity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Metric_circularVelocity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_circularVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::circularVelocity(double const [4],double [4],double) const\n"
    "    Gyoto::Metric::Generic::circularVelocity(double const [4],double [4]) const\n"
    "    Gyoto::Metric::Generic::circularVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_zamoVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double *arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      4 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_zamoVelocity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_zamoVelocity" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto_Metric_Generic_zamoVelocity__SWIG_1(arg1,(double const (*))arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array3);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_zamoVelocity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Metric_zamoVelocity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          return _wrap_Metric_zamoVelocity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_zamoVelocity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::zamoVelocity(double const [4],double [4]) const\n"
    "    Gyoto::Metric::Generic::zamoVelocity(double const [4],double [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric_christoffel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  double (*arg2)[4][4] ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[3] = {
      4, 4, 4 
    };
    array2 = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double (*)[4][4]) array_data(array2);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:Metric_christoffel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric_christoffel" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    npy_intp size[1] = {
      4 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  {
    try {
      Gyoto_Metric_Generic_christoffel__SWIG_2(arg1,(double (*)[4][4])arg2,(double const (*))arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metric_christoffel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Metric_christoffel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          return _wrap_Metric_christoffel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Metric_christoffel__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Metric_christoffel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::christoffel(double const [4],int const,int const,int const) const\n"
    "    Gyoto::Metric::Generic::christoffel(double [4][4][4],double const [4]) const\n"
    "    Gyoto::Metric::Generic::christoffel(double [4][4][4],double const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Metric",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Metric" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Metric::Generic *)new_Gyoto_Metric_Generic__SWIG_0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Metric::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Metric",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Metric" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Metric" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Metric::Generic *)new_Gyoto_Metric_Generic__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Metric__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Metric",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Metric" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Metric::Generic *)new_Gyoto_Metric_Generic__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Metric__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Metric::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Metric" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Metric::Generic *)new_Gyoto_Metric_Generic__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Metric__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Metric__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Metric__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Metric::Generic::Generic(std::string)\n"
    "    Gyoto::Metric::Generic::Generic(std::string,std::vector< std::string,std::allocator< std::string > >)\n"
    "    Gyoto::Metric::Generic::Generic(long)\n"
    "    Gyoto::Metric::Generic::Generic(Gyoto::Metric::Generic *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Metric___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Metric::Generic *arg1 = (Gyoto::Metric::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metric___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Metric__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metric___str__" "', argument " "1"" of type '" "Gyoto::Metric::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Metric::Generic * >(argp1);
  {
    try {
      result = Gyoto_Metric_Generic___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Metric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getSpectrumRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Register::Entry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getSpectrumRegister")) SWIG_fail;
  {
    try {
      result = (Gyoto::Register::Entry *)getSpectrumRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Register__Entry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_registerSpectrum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Gyoto::Spectrum::Subcontractor_t *arg2 = (Gyoto::Spectrum::Subcontractor_t *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:registerSpectrum",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "registerSpectrum" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "registerSpectrum" "', argument " "2"" of type '" "Gyoto::Spectrum::Subcontractor_t *""'"); 
    }
  }
  {
    try {
      Gyoto::Spectrum::Register(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getSpectrumSubcontractor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int arg3 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Spectrum::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getSpectrumSubcontractor",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getSpectrumSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getSpectrumSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getSpectrumSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getSpectrumSubcontractor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Gyoto::Spectrum::Subcontractor_t *)Gyoto::Spectrum::getSubcontractor(arg1,*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getSpectrumSubcontractor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Spectrum::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getSpectrumSubcontractor",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getSpectrumSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getSpectrumSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getSpectrumSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try {
      result = (Gyoto::Spectrum::Subcontractor_t *)Gyoto::Spectrum::getSubcontractor(arg1,*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getSpectrumSubcontractor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getSpectrumSubcontractor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_getSpectrumSubcontractor__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getSpectrumSubcontractor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &,int)\n"
    "    Gyoto::Spectrum::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &)\n");
  return 0;
}


SWIGINTERN int Swig_var_SpectrumRegister_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Gyoto__Register__Entry,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Gyoto::Spectrum::Register_""' of type '""Gyoto::Register::Entry *""'");
    }
    Gyoto::Spectrum::Register_ = reinterpret_cast< Gyoto::Register::Entry * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_SpectrumRegister_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrum::Register_), SWIGTYPE_p_Gyoto__Register__Entry,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_initSpectrumRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":initSpectrumRegister")) SWIG_fail;
  {
    try {
      Gyoto::Spectrum::initRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Spectrum_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spectrum_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spectrum_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrum::Generic::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Spectrum_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrum_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrum::Generic const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Spectrum_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spectrum_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spectrum_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrum::Generic::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Spectrum_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrum_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Spectrum_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Spectrum_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrum_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrum_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum_plugins" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrum::Generic const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrum_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Spectrum_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Spectrum_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrum_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::Generic::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrum::Generic::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrum_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrum_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum_clone" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::Generic *)((Gyoto::Spectrum::Generic const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Spectrum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Spectrum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Spectrum" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrum___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrum___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spectrum___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Spectrum::Generic const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrum___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Spectrum___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum___call__" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spectrum___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Spectrum___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Spectrum___call__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((Gyoto::Spectrum::Generic const *)arg1)->operator ()(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrum___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Spectrum___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Spectrum___call____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrum___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::Generic::operator ()(double) const\n"
    "    Gyoto::Spectrum::Generic::operator ()(double,double,double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrum_integrate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Spectrum_integrate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum_integrate" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spectrum_integrate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Spectrum_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->integrate(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrum_integrate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  double arg2 ;
  double arg3 ;
  Gyoto::Spectrum::Generic *arg4 = (Gyoto::Spectrum::Generic *) 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Spectrum_integrate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum_integrate" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spectrum_integrate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Spectrum_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Spectrum_integrate" "', argument " "4"" of type '" "Gyoto::Spectrum::Generic const *""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Spectrum_integrate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)(arg1)->integrate(arg2,arg3,(Gyoto::Spectrum::Generic const *)arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrum_integrate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Spectrum_integrate__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Spectrum_integrate__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrum_integrate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::Generic::integrate(double,double)\n"
    "    Gyoto::Spectrum::Generic::integrate(double,double,Gyoto::Spectrum::Generic const *,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Spectrum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Spectrum",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Spectrum" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Spectrum::Generic *)new_Gyoto_Spectrum_Generic__SWIG_0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Spectrum::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Spectrum",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Spectrum" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Spectrum" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Spectrum::Generic *)new_Gyoto_Spectrum_Generic__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrum__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Spectrum",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Spectrum" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrum::Generic *)new_Gyoto_Spectrum_Generic__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrum__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrum::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Spectrum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Spectrum" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrum::Generic *)new_Gyoto_Spectrum_Generic__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Spectrum__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Spectrum__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Spectrum__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Spectrum__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Spectrum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrum::Generic::Generic(std::string)\n"
    "    Gyoto::Spectrum::Generic::Generic(std::string,std::vector< std::string,std::allocator< std::string > >)\n"
    "    Gyoto::Spectrum::Generic::Generic(long)\n"
    "    Gyoto::Spectrum::Generic::Generic(Gyoto::Spectrum::Generic *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrum___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrum::Generic *arg1 = (Gyoto::Spectrum::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrum___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrum__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrum___str__" "', argument " "1"" of type '" "Gyoto::Spectrum::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrum::Generic * >(argp1);
  {
    try {
      result = Gyoto_Spectrum_Generic___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Spectrum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getSpectrometerRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Register::Entry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getSpectrometerRegister")) SWIG_fail;
  {
    try {
      result = (Gyoto::Register::Entry *)getSpectrometerRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Register__Entry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getSpectrometerSubcontractor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int arg3 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Gyoto::Spectrometer::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getSpectrometerSubcontractor",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getSpectrometerSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getSpectrometerSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getSpectrometerSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getSpectrometerSubcontractor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Gyoto::Spectrometer::Subcontractor_t *)Gyoto::Spectrometer::getSubcontractor(arg1,*arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getSpectrometerSubcontractor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Spectrometer::Subcontractor_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getSpectrometerSubcontractor",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getSpectrometerSubcontractor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getSpectrometerSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getSpectrometerSubcontractor" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try {
      result = (Gyoto::Spectrometer::Subcontractor_t *)Gyoto::Spectrometer::getSubcontractor(arg1,*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getSpectrometerSubcontractor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getSpectrometerSubcontractor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_getSpectrometerSubcontractor__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getSpectrometerSubcontractor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &,int)\n"
    "    Gyoto::Spectrometer::getSubcontractor(std::string,std::vector< std::string,std::allocator< std::string > > &)\n");
  return 0;
}


SWIGINTERN int Swig_var_SpectrometerRegister_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_Gyoto__Register__Entry,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Gyoto::Spectrometer::Register_""' of type '""Gyoto::Register::Entry *""'");
    }
    Gyoto::Spectrometer::Register_ = reinterpret_cast< Gyoto::Register::Entry * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_SpectrometerRegister_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrometer::Register_), SWIGTYPE_p_Gyoto__Register__Entry,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_initSpectrometerRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":initSpectrometerRegister")) SWIG_fail;
  {
    try {
      Gyoto::Spectrometer::initRegister();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_registerSpectrometer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Gyoto::Spectrometer::Subcontractor_t *arg2 = (Gyoto::Spectrometer::Subcontractor_t *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:registerSpectrometer",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "registerSpectrometer" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "registerSpectrometer" "', argument " "2"" of type '" "Gyoto::Spectrometer::Subcontractor_t *""'"); 
    }
  }
  {
    try {
      Gyoto::Spectrometer::Register(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_nsamples__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_nsamples__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_nsamples__set" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spectrometer_nsamples__set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->nsamples_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_nsamples__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_nsamples__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_nsamples__get" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  result =  ((arg1)->nsamples_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_nboundaries__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_nboundaries__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_nboundaries__set" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spectrometer_nboundaries__set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->nboundaries_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_nboundaries__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_nboundaries__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_nboundaries__get" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  result =  ((arg1)->nboundaries_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_boundaries__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_boundaries__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_boundaries__set" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Spectrometer_boundaries__set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->boundaries_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_boundaries__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_boundaries__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_boundaries__get" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  result = (double *) ((arg1)->boundaries_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_chanind__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_chanind__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_chanind__set" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Spectrometer_chanind__set" "', argument " "2"" of type '" "size_t *""'"); 
  }
  arg2 = reinterpret_cast< size_t * >(argp2);
  if (arg1) (arg1)->chanind_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_chanind__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_chanind__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_chanind__get" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  result = (size_t *) ((arg1)->chanind_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_size_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_midpoints__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_midpoints__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_midpoints__set" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Spectrometer_midpoints__set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->midpoints_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_midpoints__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_midpoints__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_midpoints__get" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  result = (double *) ((arg1)->midpoints_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_widths__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_widths__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_widths__set" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Spectrometer_widths__set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->widths_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_widths__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_widths__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_widths__get" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  result = (double *) ((arg1)->widths_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Spectrometer_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spectrometer_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spectrometer_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrometer::Generic::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrometer::Generic const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Spectrometer_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spectrometer_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spectrometer_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrometer::Generic::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Spectrometer_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_plugins" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Spectrometer_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Spectrometer_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_plugins" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Generic const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Spectrometer_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Spectrometer_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrometer_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Generic::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrometer::Generic::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrometer_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_clone" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Generic *)((Gyoto::Spectrometer::Generic const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Spectrometer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Spectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Spectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_kindid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::kind_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_kindid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_kindid" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::kind_t)((Gyoto::Spectrometer::Generic const *)arg1)->kindid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_kindid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  Gyoto::Spectrometer::kind_t arg2 = (Gyoto::Spectrometer::kind_t) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Spectrometer_kindid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_kindid" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Spectrometer_kindid" "', argument " "2"" of type '" "Gyoto::Spectrometer::kind_t""'");
  }
  arg2 = reinterpret_cast< Gyoto::Spectrometer::kind_t >(buf2);
  {
    try {
      (arg1)->kindid(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_kindid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Spectrometer_kindid__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Spectrometer_kindid__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrometer_kindid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Generic::kindid() const\n"
    "    Gyoto::Spectrometer::Generic::kindid(Gyoto::Spectrometer::kind_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrometer_nSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_nSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_nSamples" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Generic const *)arg1)->nSamples();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getNBoundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_getNBoundaries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getNBoundaries" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Generic const *)arg1)->getNBoundaries();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getMidpoints__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_getMidpoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getMidpoints" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Spectrometer::Generic const *)arg1)->getMidpoints();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getMidpoints__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  double *arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Spectrometer_getMidpoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getMidpoints" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Spectrometer_getMidpoints" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->getMidpoints(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getMidpoints(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Spectrometer_getMidpoints__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Spectrometer_getMidpoints__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrometer_getMidpoints'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Generic::getMidpoints() const\n"
    "    Gyoto::Spectrometer::Generic::getMidpoints(double [],std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getChannelBoundaries__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  double *arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Spectrometer_getChannelBoundaries",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getChannelBoundaries" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Spectrometer_getChannelBoundaries" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->getChannelBoundaries(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getChannelBoundaries__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_getChannelBoundaries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getChannelBoundaries" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Spectrometer::Generic const *)arg1)->getChannelBoundaries();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getChannelBoundaries(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Spectrometer_getChannelBoundaries__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Spectrometer_getChannelBoundaries__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrometer_getChannelBoundaries'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Generic::getChannelBoundaries(double [],std::string)\n"
    "    Gyoto::Spectrometer::Generic::getChannelBoundaries() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getChannelIndices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_getChannelIndices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getChannelIndices" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (size_t *)((Gyoto::Spectrometer::Generic const *)arg1)->getChannelIndices();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_size_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getWidths__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer_getWidths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getWidths" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Spectrometer::Generic const *)arg1)->getWidths();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getWidths__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  double *arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Spectrometer_getWidths",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer_getWidths" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Spectrometer_getWidths" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->getWidths(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Spectrometer_getWidths(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Spectrometer_getWidths__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Spectrometer_getWidths__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Spectrometer_getWidths'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Generic::getWidths() const\n"
    "    Gyoto::Spectrometer::Generic::getWidths(double [],std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Spectrometer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Spectrometer",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Spectrometer" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Spectrometer::Generic *)new_Gyoto_Spectrometer_Generic__SWIG_0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrometer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Spectrometer::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Spectrometer",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Spectrometer" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Spectrometer" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Spectrometer::Generic *)new_Gyoto_Spectrometer_Generic__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrometer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Spectrometer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Spectrometer" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrometer::Generic *)new_Gyoto_Spectrometer_Generic__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrometer__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Spectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Spectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Generic *)new_Gyoto_Spectrometer_Generic__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Spectrometer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Spectrometer__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Spectrometer__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Spectrometer__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Spectrometer__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Spectrometer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Generic::Generic(std::string)\n"
    "    Gyoto::Spectrometer::Generic::Generic(std::string,std::vector< std::string,std::allocator< std::string > >)\n"
    "    Gyoto::Spectrometer::Generic::Generic(long)\n"
    "    Gyoto::Spectrometer::Generic::Generic(Gyoto::Spectrometer::Generic *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Spectrometer___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Spectrometer___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spectrometer___str__" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = Gyoto_Spectrometer_Generic___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Spectrometer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_myCplxSpectroIdxExcept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  myCplxSpectroIdxExcept *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_myCplxSpectroIdxExcept")) SWIG_fail;
  {
    try {
      result = (myCplxSpectroIdxExcept *)new myCplxSpectroIdxExcept();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_myCplxSpectroIdxExcept, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_myCplxSpectroIdxExcept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  myCplxSpectroIdxExcept *arg1 = (myCplxSpectroIdxExcept *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_myCplxSpectroIdxExcept",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_myCplxSpectroIdxExcept, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_myCplxSpectroIdxExcept" "', argument " "1"" of type '" "myCplxSpectroIdxExcept *""'"); 
  }
  arg1 = reinterpret_cast< myCplxSpectroIdxExcept * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *myCplxSpectroIdxExcept_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_myCplxSpectroIdxExcept, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ComplexSpectrometer_isThreadSafe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexSpectrometer_isThreadSafe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_isThreadSafe" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Spectrometer::Complex const *)arg1)->isThreadSafe();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexSpectrometer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexSpectrometer")) SWIG_fail;
  {
    try {
      result = (Gyoto::Spectrometer::Complex *)new Gyoto::Spectrometer::Complex();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexSpectrometer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexSpectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Spectrometer__Complex,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ComplexSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Complex *)new Gyoto::Spectrometer::Complex((Gyoto::Spectrometer::Complex const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexSpectrometer_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_clone" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Complex *)((Gyoto::Spectrometer::Complex const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Complex, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComplexSpectrometer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexSpectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexSpectrometer_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_append" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrometer::Generic" "*'");
    }
    Gyoto::Spectrometer::Generic * kp=reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(kp);
  }
  {
    try {
      (arg1)->append(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexSpectrometer_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_remove" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexSpectrometer_remove" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->remove(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer_getCardinal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexSpectrometer_getCardinal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_getCardinal" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Complex const *)arg1)->getCardinal();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer_tell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  Gyoto::Hook::Teller *arg2 = (Gyoto::Hook::Teller *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexSpectrometer_tell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_tell" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Hook__Teller, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexSpectrometer_tell" "', argument " "2"" of type '" "Gyoto::Hook::Teller *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Hook::Teller * >(argp2);
  {
    try {
      (arg1)->tell(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer_fillElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexSpectrometer_fillElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_fillElement" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexSpectrometer_fillElement" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      ((Gyoto::Spectrometer::Complex const *)arg1)->fillElement(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexSpectrometer_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer_setParameters" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexSpectrometer_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ComplexSpectrometer_Kind_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ComplexSpectrometer_Kind is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ComplexSpectrometer_Kind_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(Gyoto::Spectrometer::Complex::Kind);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexSpectrometer___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer___getitem__" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexSpectrometer___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = Gyoto_Spectrometer_Complex___getitem__(arg1,arg2); ;
    } catch (myCplxSpectroIdxExcept e) {
      SWIG_exception_fail(SWIG_IndexError, "Index out of bounds");
    }
  }
  {
    Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexSpectrometer___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Complex *arg1 = (Gyoto::Spectrometer::Complex *) 0 ;
  int arg2 ;
  Gyoto::Spectrometer::Generic *arg3 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComplexSpectrometer___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexSpectrometer___setitem__" "', argument " "1"" of type '" "Gyoto::Spectrometer::Complex *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Complex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexSpectrometer___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComplexSpectrometer___setitem__" "', argument " "3"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp3);
  {
    try {
      Gyoto_Spectrometer_Complex___setitem__(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexSpectrometer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexSpectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Complex *)new_Gyoto_Spectrometer_Complex__SWIG_2(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexSpectrometer__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexSpectrometer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ComplexSpectrometer" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrometer::Complex *)new_Gyoto_Spectrometer_Complex__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Complex, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexSpectrometer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ComplexSpectrometer__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Spectrometer__Complex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ComplexSpectrometer__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexSpectrometer__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexSpectrometer__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ComplexSpectrometer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Complex::Complex()\n"
    "    Gyoto::Spectrometer::Complex::Complex(Gyoto::Spectrometer::Complex const &)\n"
    "    Gyoto::Spectrometer::Complex::Complex(Gyoto::Spectrometer::Generic *)\n"
    "    Gyoto::Spectrometer::Complex::Complex(long)\n");
  return 0;
}


SWIGINTERN PyObject *ComplexSpectrometer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrometer__Complex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_UniformSpectrometer_properties_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSpectrometer_properties is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSpectrometer_properties_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Gyoto::Spectrometer::Uniform::properties), SWIGTYPE_p_Gyoto__Property,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_getProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_getProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_getProperties" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = (Gyoto::Property *)((Gyoto::Spectrometer::Uniform const *)arg1)->getProperties();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_UniformSpectrometer_builtinPluginValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSpectrometer_builtinPluginValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSpectrometer_builtinPluginValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(Gyoto::Spectrometer::Uniform::builtinPluginValue));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_plugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_plugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_plugins" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_plugins" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->plugins((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_plugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_plugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_plugins" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Uniform const *)arg1)->plugins();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_plugins(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSpectrometer_plugins__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSpectrometer_plugins__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSpectrometer_plugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Uniform::plugins(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    Gyoto::Spectrometer::Uniform::plugins() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_UniformSpectrometer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UniformSpectrometer")) SWIG_fail;
  {
    try {
      result = (Gyoto::Spectrometer::Uniform *)new Gyoto::Spectrometer::Uniform();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Uniform, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformSpectrometer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  Gyoto::Spectrometer::kind_t arg4 = (Gyoto::Spectrometer::kind_t) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Gyoto::Spectrometer::Uniform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_UniformSpectrometer",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UniformSpectrometer" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UniformSpectrometer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UniformSpectrometer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_UniformSpectrometer" "', argument " "4"" of type '" "Gyoto::Spectrometer::kind_t""'");
  }
  arg4 = reinterpret_cast< Gyoto::Spectrometer::kind_t >(buf4);
  {
    try {
      result = (Gyoto::Spectrometer::Uniform *)new Gyoto::Spectrometer::Uniform(arg1,arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Uniform, SWIG_POINTER_NEW |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformSpectrometer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Uniform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UniformSpectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Spectrometer__Uniform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Uniform *)new Gyoto::Spectrometer::Uniform((Gyoto::Spectrometer::Uniform const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Uniform, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Generic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_clone" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Generic *)((Gyoto::Spectrometer::Uniform const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UniformSpectrometer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UniformSpectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UniformSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Generic
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_kindid__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::kind_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_kindid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_kindid" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::kind_t)((Gyoto::Spectrometer::Uniform const *)arg1)->kindid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_kindid__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  Gyoto::Spectrometer::kind_t arg2 = (Gyoto::Spectrometer::kind_t) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_kindid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_kindid" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_kindid" "', argument " "2"" of type '" "Gyoto::Spectrometer::kind_t""'");
  }
  arg2 = reinterpret_cast< Gyoto::Spectrometer::kind_t >(buf2);
  {
    try {
      (arg1)->kindid(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_kindid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  Gyoto::Spectrometer::kind_t arg2 = (Gyoto::Spectrometer::kind_t) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_kindid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_kindid" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_kindid" "', argument " "2"" of type '" "Gyoto::Spectrometer::kind_t""'");
  }
  arg2 = reinterpret_cast< Gyoto::Spectrometer::kind_t >(buf2);
  {
    try {
      (arg1)->kindid(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_kindid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSpectrometer_kindid__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSpectrometer_kindid__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSpectrometer_kindid__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSpectrometer_kindid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    kindid() const\n"
    "    kindid(Gyoto::Spectrometer::kind_t)\n"
    "    Gyoto::Spectrometer::Uniform::kindid(Gyoto::Spectrometer::kind_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_kind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_kind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_kind" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_kind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_kind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->kind((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_kind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_kind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_kind" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Uniform const *)arg1)->kind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_kind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSpectrometer_kind__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSpectrometer_kind__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSpectrometer_kind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Uniform::kind(std::string const &)\n"
    "    Gyoto::Spectrometer::Uniform::kind() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_nSamples__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_nSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_nSamples" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Uniform const *)arg1)->nSamples();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_nSamples__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_nSamples",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_nSamples" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformSpectrometer_nSamples" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nSamples(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_nSamples(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSpectrometer_nSamples__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UniformSpectrometer_nSamples__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSpectrometer_nSamples'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nSamples() const\n"
    "    Gyoto::Spectrometer::Uniform::nSamples(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_band",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_band" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_band" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_band" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->band((std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UniformSpectrometer_band",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_band" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_band" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_band" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UniformSpectrometer_band" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_band" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->band((std::vector< double,std::allocator< double > > const &)*arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_band",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_band" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = ((Gyoto::Spectrometer::Uniform const *)arg1)->band();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_band",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_band" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_band" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_band" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((Gyoto::Spectrometer::Uniform const *)arg1)->band((std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_band",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_band" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    npy_intp size[1] = {
      2 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      (arg1)->band(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  double *arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UniformSpectrometer_band",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_band" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    npy_intp size[1] = {
      2 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UniformSpectrometer_band" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_band" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UniformSpectrometer_band" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_band" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->band(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  double *arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UniformSpectrometer_band",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_band" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UniformSpectrometer_band" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_band" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->band(arg2,(std::string const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_band(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_UniformSpectrometer_band__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSpectrometer_band__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UniformSpectrometer_band__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        return _wrap_UniformSpectrometer_band__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UniformSpectrometer_band__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UniformSpectrometer_band__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_UniformSpectrometer_band__SWIG_5(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UniformSpectrometer_band'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Uniform::band(std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::Spectrometer::Uniform::band(std::vector< double,std::allocator< double > > const &,std::string const &)\n"
    "    Gyoto::Spectrometer::Uniform::band() const\n"
    "    Gyoto::Spectrometer::Uniform::band(std::string const &) const\n"
    "    Gyoto::Spectrometer::Uniform::band(double [2])\n"
    "    Gyoto::Spectrometer::Uniform::band(double [2],std::string const &,std::string const &)\n"
    "    Gyoto::Spectrometer::Uniform::band(double [],std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_getBand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UniformSpectrometer_getBand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_getBand" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  {
    try {
      result = (double *)((Gyoto::Spectrometer::Uniform const *)arg1)->getBand();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_fillProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  Gyoto::Property *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UniformSpectrometer_fillProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_fillProperty" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_fillProperty" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Property,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UniformSpectrometer_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniformSpectrometer_fillProperty" "', argument " "3"" of type '" "Gyoto::Property const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Property * >(argp3);
  {
    try {
      ((Gyoto::Spectrometer::Uniform const *)arg1)->fillProperty(arg2,(Gyoto::Property const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformSpectrometer_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Uniform *arg1 = (Gyoto::Spectrometer::Uniform *) 0 ;
  Gyoto::FactoryMessenger *arg2 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UniformSpectrometer_setParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformSpectrometer_setParameters" "', argument " "1"" of type '" "Gyoto::Spectrometer::Uniform *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Uniform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UniformSpectrometer_setParameters" "', argument " "2"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp2);
  {
    try {
      (arg1)->setParameters(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_UniformSpectrometer_WaveKind_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSpectrometer_WaveKind is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSpectrometer_WaveKind_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(Gyoto::Spectrometer::Uniform::WaveKind);
  return pyobj;
}


SWIGINTERN int Swig_var_UniformSpectrometer_WaveLogKind_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSpectrometer_WaveLogKind is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSpectrometer_WaveLogKind_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(Gyoto::Spectrometer::Uniform::WaveLogKind);
  return pyobj;
}


SWIGINTERN int Swig_var_UniformSpectrometer_FreqKind_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSpectrometer_FreqKind is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSpectrometer_FreqKind_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(Gyoto::Spectrometer::Uniform::FreqKind);
  return pyobj;
}


SWIGINTERN int Swig_var_UniformSpectrometer_FreqLogKind_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformSpectrometer_FreqLogKind is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformSpectrometer_FreqLogKind_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(Gyoto::Spectrometer::Uniform::FreqLogKind);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_UniformSpectrometer__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Spectrometer::Generic *arg1 = (Gyoto::Spectrometer::Generic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Uniform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UniformSpectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformSpectrometer" "', argument " "1"" of type '" "Gyoto::Spectrometer::Generic *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp1);
  {
    try {
      result = (Gyoto::Spectrometer::Uniform *)new_Gyoto_Spectrometer_Uniform__SWIG_3(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Uniform, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformSpectrometer__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Spectrometer::Uniform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UniformSpectrometer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UniformSpectrometer" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gyoto::Spectrometer::Uniform *)new_Gyoto_Spectrometer_Uniform__SWIG_4(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Spectrometer__Uniform, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Generic
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformSpectrometer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UniformSpectrometer__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Spectrometer__Uniform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UniformSpectrometer__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UniformSpectrometer__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UniformSpectrometer__SWIG_4(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_UniformSpectrometer__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UniformSpectrometer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Spectrometer::Uniform::Uniform()\n"
    "    Gyoto::Spectrometer::Uniform::Uniform(size_t,double,double,Gyoto::Spectrometer::kind_t)\n"
    "    Gyoto::Spectrometer::Uniform::Uniform(Gyoto::Spectrometer::Uniform const &)\n"
    "    Gyoto::Spectrometer::Uniform::Uniform(Gyoto::Spectrometer::Generic *)\n"
    "    Gyoto::Spectrometer::Uniform::Uniform(long)\n");
  return 0;
}


SWIGINTERN PyObject *UniformSpectrometer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Spectrometer__Uniform, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_debug__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:debug",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "debug" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      Gyoto::debug(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_debug__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":debug")) SWIG_fail;
  {
    try {
      result = (int)Gyoto::debug();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_debug(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_debug__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_debug__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'debug'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::debug(int)\n"
    "    Gyoto::debug()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_verbose__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:verbose",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "verbose" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      Gyoto::verbose(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_verbose__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":verbose")) SWIG_fail;
  {
    try {
      result = (int)Gyoto::verbose();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_verbose(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_verbose__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_verbose__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'verbose'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::verbose(int)\n"
    "    Gyoto::verbose()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_convert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) (double *)0 ;
  std::size_t arg2 ;
  double arg3 ;
  double arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:convert",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "convert" "', argument " "1"" of type '" "double *const""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "convert" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "convert" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "convert" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "convert" "', argument " "5"" of type '" "std::string const""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      Gyoto::convert(arg1,arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atof",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atof" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (double)Gyoto::atof((char const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_help(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:help",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "help" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      Gyoto::help(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_split(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:split",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "split" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "split" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "split" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "split" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = Gyoto::split((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bessi0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bessi0",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bessi0" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)Gyoto::bessi0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bessi1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bessi1",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bessi1" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)Gyoto::bessi1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bessk0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bessk0",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bessk0" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)Gyoto::bessk0(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bessk1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bessk1",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bessk1" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)Gyoto::bessk1(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bessk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bessk",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bessk" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bessk" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gyoto::bessk(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hypergeom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hypergeom",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hypergeom" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hypergeom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gyoto::hypergeom(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cartesianToSpherical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  double *arg2 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cartesianToSpherical",&obj0,&obj1)) SWIG_fail;
  {
    npy_intp size[1] = {
      3 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double *) array_data(array1);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto::cartesianToSpherical((double const (*))arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_sphericalToCartesian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  double *arg2 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyArrayObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sphericalToCartesian",&obj0,&obj1)) SWIG_fail;
  {
    npy_intp size[1] = {
      3 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double *) array_data(array1);
  }
  {
    npy_intp size[1] = {
      3 
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  {
    try {
      Gyoto::sphericalToCartesian((double const (*))arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix4Invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double (*arg1)[4] ;
  double (*arg2)[4] ;
  PyObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array1 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array1) SWIG_fail;
    arg1 = (double (*)[4]) array_data(array1);
  }
  if (!PyArg_ParseTuple(args,(char *)"O:matrix4Invert",&obj0)) SWIG_fail;
  {
    npy_intp size[2] = {
      4, 4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 2) ||
      !require_size(array2, size, 2)) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  {
    try {
      Gyoto::matrix4Invert((double (*)[4])arg1,(double const (*)[4])arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array1);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix4CircularInvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double (*arg1)[4] ;
  double (*arg2)[4] ;
  PyObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  
  {
    npy_intp dims[2] = {
      4, 4 
    };
    array1 = PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if (!array1) SWIG_fail;
    arg1 = (double (*)[4]) array_data(array1);
  }
  if (!PyArg_ParseTuple(args,(char *)"O:matrix4CircularInvert",&obj0)) SWIG_fail;
  {
    npy_intp size[2] = {
      4, 4 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 2) ||
      !require_size(array2, size, 2)) SWIG_fail;
    arg2 = (double (*)[4]) array_data(array2);
  }
  {
    try {
      Gyoto::matrix4CircularInvert((double (*)[4])arg1,(double const (*)[4])arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array1);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Factory" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Scenery > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Scenery, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Scenery" "*'");
    }
    Gyoto::Scenery * kp=reinterpret_cast< Gyoto::Scenery * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Scenery>(kp);
  }
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrum::Generic" "*'");
    }
    Gyoto::Spectrum::Generic * kp=reinterpret_cast< Gyoto::Spectrum::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Photon > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Photon, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Photon" "*'");
    }
    Gyoto::Photon * kp=reinterpret_cast< Gyoto::Photon * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Photon>(kp);
  }
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Factory",&obj0)) SWIG_fail;
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj0, &argp, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Spectrometer::Generic" "*'");
    }
    Gyoto::Spectrometer::Generic * kp=reinterpret_cast< Gyoto::Spectrometer::Generic * >(argp);
    arg1 = Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(kp);
  }
  {
    try {
      result = (Gyoto::Factory *)new Gyoto::Factory(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factory(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Scenery, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factory__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factory__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factory__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrum__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factory__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factory__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Photon, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factory__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Spectrometer__Generic, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factory__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Factory__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Factory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Factory::Factory(char *)\n"
    "    Gyoto::Factory::Factory(Gyoto::SmartPointer< Gyoto::Scenery >)\n"
    "    Gyoto::Factory::Factory(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n"
    "    Gyoto::Factory::Factory(Gyoto::SmartPointer< Gyoto::Astrobj::Generic >)\n"
    "    Gyoto::Factory::Factory(Gyoto::SmartPointer< Gyoto::Spectrum::Generic >)\n"
    "    Gyoto::Factory::Factory(Gyoto::SmartPointer< Gyoto::Screen >)\n"
    "    Gyoto::Factory::Factory(Gyoto::SmartPointer< Gyoto::Photon >)\n"
    "    Gyoto::Factory::Factory(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Factory" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_kind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_kind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_kind" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->kind();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_scenery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Scenery > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_scenery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_scenery" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->scenery();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Scenery* normal_pointer=(Gyoto::Scenery *) (Gyoto::SmartPointer<Gyoto::Scenery>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_metric" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_screen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_screen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_screen" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->screen();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_astrobj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_astrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_astrobj" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->astrobj();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_photon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Photon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_photon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_photon" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->photon();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Photon* normal_pointer=(Gyoto::Photon *) (Gyoto::SmartPointer<Gyoto::Photon>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_spectrum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrum::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_spectrum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_spectrum" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->spectrum();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrum::Generic* normal_pointer=(Gyoto::Spectrum::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrum::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrum__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_spectrometer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_spectrometer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_spectrometer" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->spectrometer();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Spectrometer::Generic* normal_pointer=(Gyoto::Spectrometer::Generic *) (Gyoto::SmartPointer<Gyoto::Spectrometer::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Spectrometer__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Factory_write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_write" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factory_write" "', argument " "2"" of type '" "char const *const""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->write((char const *)arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_write",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_write" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      (arg1)->write();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_write(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factory_write__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Factory_write__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Factory_write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Factory::write(char const *const)\n"
    "    Gyoto::Factory::write()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Factory_format(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_format",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_format" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = (arg1)->format();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  xercesc::DOMElement *arg3 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Factory_metric",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_metric" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_metric" "', argument " "3"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg3 = reinterpret_cast< xercesc::DOMElement * >(argp3);
  {
    try {
      (arg1)->metric(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factory_metric__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Factory_metric__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Factory_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Factory::metric()\n"
    "    Gyoto::Factory::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >,xercesc::DOMElement *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Factory_astrobj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg2 ;
  xercesc::DOMElement *arg3 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Factory_astrobj",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_astrobj" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_astrobj" "', argument " "3"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg3 = reinterpret_cast< xercesc::DOMElement * >(argp3);
  {
    try {
      (arg1)->astrobj(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_astrobj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factory_astrobj__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Factory_astrobj__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Factory_astrobj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Factory::astrobj()\n"
    "    Gyoto::Factory::astrobj(Gyoto::SmartPointer< Gyoto::Astrobj::Generic >,xercesc::DOMElement *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Factory_screen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg2 ;
  xercesc::DOMElement *arg3 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Factory_screen",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_screen" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_screen" "', argument " "3"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg3 = reinterpret_cast< xercesc::DOMElement * >(argp3);
  {
    try {
      (arg1)->screen(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_screen(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factory_screen__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Factory_screen__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Factory_screen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Factory::screen()\n"
    "    Gyoto::Factory::screen(Gyoto::SmartPointer< Gyoto::Screen >,xercesc::DOMElement *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Factory_setContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  xercesc::DOMElement *arg3 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Factory_setContent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setContent" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setContent" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_setContent" "', argument " "3"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg3 = reinterpret_cast< xercesc::DOMElement * >(argp3);
  {
    try {
      (arg1)->setContent(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  xercesc::DOMElement *arg3 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Factory_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg3 = reinterpret_cast< xercesc::DOMElement * >(argp3);
  {
    try {
      (arg1)->setParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  double arg3 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  int arg3 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  long arg3 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  unsigned long arg3 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  double *arg3 ;
  size_t arg4 ;
  xercesc::DOMElement *arg5 = (xercesc::DOMElement *) 0 ;
  Gyoto::FactoryMessenger **arg6 = (Gyoto::FactoryMessenger **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Factory_setParameter" "', argument " "5"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg5 = reinterpret_cast< xercesc::DOMElement * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Factory_setParameter" "', argument " "6"" of type '" "Gyoto::FactoryMessenger **""'"); 
  }
  arg6 = reinterpret_cast< Gyoto::FactoryMessenger ** >(argp6);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  double *arg3 ;
  size_t arg4 ;
  xercesc::DOMElement *arg5 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Factory_setParameter" "', argument " "5"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg5 = reinterpret_cast< xercesc::DOMElement * >(argp5);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  Gyoto::FactoryMessenger **arg5 = (Gyoto::FactoryMessenger **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Factory_setParameter" "', argument " "5"" of type '" "Gyoto::FactoryMessenger **""'"); 
  }
  arg5 = reinterpret_cast< Gyoto::FactoryMessenger ** >(argp5);
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg3 = 0 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  Gyoto::FactoryMessenger **arg5 = (Gyoto::FactoryMessenger **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Factory_setParameter" "', argument " "5"" of type '" "Gyoto::FactoryMessenger **""'"); 
  }
  arg5 = reinterpret_cast< Gyoto::FactoryMessenger ** >(argp5);
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< unsigned long,std::allocator< unsigned long > > const &)*arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg3 = 0 ;
  xercesc::DOMElement *arg4 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Factory_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_setParameter" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factory_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factory_setParameter" "', argument " "4"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg4 = reinterpret_cast< xercesc::DOMElement * >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< unsigned long,std::allocator< unsigned long > > const &)*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_setParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Factory_setParameter__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Factory_setParameter__SWIG_12(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Factory_setParameter__SWIG_11(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Factory_setParameter__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Factory_setParameter__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Factory_setParameter__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Factory_setParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Factory::setParameter(std::string,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,double,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,int,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,unsigned int,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,long,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,unsigned long,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,std::string,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,double [],size_t,xercesc::DOMElement *,Gyoto::FactoryMessenger **)\n"
    "    Gyoto::Factory::setParameter(std::string,double [],size_t,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,std::vector< double,std::allocator< double > > const &,xercesc::DOMElement *,Gyoto::FactoryMessenger **)\n"
    "    Gyoto::Factory::setParameter(std::string,std::vector< double,std::allocator< double > > const &,xercesc::DOMElement *)\n"
    "    Gyoto::Factory::setParameter(std::string,std::vector< unsigned long,std::allocator< unsigned long > > const &,xercesc::DOMElement *,Gyoto::FactoryMessenger **)\n"
    "    Gyoto::Factory::setParameter(std::string,std::vector< unsigned long,std::allocator< unsigned long > > const &,xercesc::DOMElement *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Factory_fullPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Factory_fullPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_fullPath" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Factory_fullPath" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->fullPath(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_getScenery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Scenery > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_getScenery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_getScenery" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = Gyoto_Factory_getScenery(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Scenery* normal_pointer=(Gyoto::Scenery *) (Gyoto::SmartPointer<Gyoto::Scenery>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Scenery, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factory_getPhoton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Photon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Factory_getPhoton",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factory_getPhoton" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  {
    try {
      result = Gyoto_Factory_getPhoton(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Photon* normal_pointer=(Gyoto::Photon *) (Gyoto::SmartPointer<Gyoto::Photon>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FactoryMessenger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Factory *arg1 = (Gyoto::Factory *) 0 ;
  xercesc::DOMElement *arg2 = (xercesc::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::FactoryMessenger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FactoryMessenger",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FactoryMessenger" "', argument " "1"" of type '" "Gyoto::Factory *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_xercesc__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FactoryMessenger" "', argument " "2"" of type '" "xercesc::DOMElement *""'"); 
  }
  arg2 = reinterpret_cast< xercesc::DOMElement * >(argp2);
  {
    try {
      result = (Gyoto::FactoryMessenger *)new Gyoto::FactoryMessenger(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__FactoryMessenger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FactoryMessenger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::FactoryMessenger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FactoryMessenger",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__FactoryMessenger,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FactoryMessenger" "', argument " "1"" of type '" "Gyoto::FactoryMessenger const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FactoryMessenger" "', argument " "1"" of type '" "Gyoto::FactoryMessenger const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FactoryMessenger" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::FactoryMessenger *)new Gyoto::FactoryMessenger((Gyoto::FactoryMessenger const &)*arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__FactoryMessenger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FactoryMessenger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_xercesc__DOMElement, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FactoryMessenger__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FactoryMessenger__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FactoryMessenger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::FactoryMessenger(Gyoto::Factory *,xercesc::DOMElement *)\n"
    "    Gyoto::FactoryMessenger::FactoryMessenger(Gyoto::FactoryMessenger const &,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_reset" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      (arg1)->reset();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_metric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_metric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_metric" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = (arg1)->metric();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Metric::Generic* normal_pointer=(Gyoto::Metric::Generic *) (Gyoto::SmartPointer<Gyoto::Metric::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Metric__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_screen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_screen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_screen" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = (arg1)->screen();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Screen* normal_pointer=(Gyoto::Screen *) (Gyoto::SmartPointer<Gyoto::Screen>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Screen, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_photon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Photon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_photon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_photon" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = (arg1)->photon();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Photon* normal_pointer=(Gyoto::Photon *) (Gyoto::SmartPointer<Gyoto::Photon>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Photon, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_astrobj__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_astrobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_astrobj" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = (arg1)->astrobj();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  {
    Gyoto::Astrobj::Generic* normal_pointer=(Gyoto::Astrobj::Generic *) (Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(result));
    if (normal_pointer) normal_pointer->incRefCount();
    resultobj = SWIG_NewPointerObj( normal_pointer, SWIGTYPE_p_Gyoto__Astrobj__Generic, SWIG_POINTER_OWN |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_getNextParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string *arg4 = (std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FactoryMessenger_getNextParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_getNextParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactoryMessenger_getNextParameter" "', argument " "2"" of type '" "std::string *""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactoryMessenger_getNextParameter" "', argument " "3"" of type '" "std::string *""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FactoryMessenger_getNextParameter" "', argument " "4"" of type '" "std::string *""'"); 
  }
  arg4 = reinterpret_cast< std::string * >(argp4);
  {
    try {
      result = (int)(arg1)->getNextParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_getNextParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_getNextParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_getNextParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactoryMessenger_getNextParameter" "', argument " "2"" of type '" "std::string *""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactoryMessenger_getNextParameter" "', argument " "3"" of type '" "std::string *""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  {
    try {
      result = (int)(arg1)->getNextParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_getNextParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactoryMessenger_getNextParameter__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FactoryMessenger_getNextParameter__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FactoryMessenger_getNextParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::getNextParameter(std::string *,std::string *,std::string *)\n"
    "    Gyoto::FactoryMessenger::getNextParameter(std::string *,std::string *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_getSelfAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_getSelfAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_getSelfAttribute" "', argument " "1"" of type '" "Gyoto::FactoryMessenger const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_getSelfAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = ((Gyoto::FactoryMessenger const *)arg1)->getSelfAttribute(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_getAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_getAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_getAttribute" "', argument " "1"" of type '" "Gyoto::FactoryMessenger const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_getAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = ((Gyoto::FactoryMessenger const *)arg1)->getAttribute(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_getFullContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_getFullContent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_getFullContent" "', argument " "1"" of type '" "Gyoto::FactoryMessenger const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = ((Gyoto::FactoryMessenger const *)arg1)->getFullContent();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_getChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::FactoryMessenger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_getChild",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_getChild" "', argument " "1"" of type '" "Gyoto::FactoryMessenger const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      result = (Gyoto::FactoryMessenger *)((Gyoto::FactoryMessenger const *)arg1)->getChild();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_fullPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_fullPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_fullPath" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_fullPath" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (arg1)->fullPath(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_metric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Metric::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_metric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_metric" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Metric::Generic" "*'");
    }
    Gyoto::Metric::Generic * kp=reinterpret_cast< Gyoto::Metric::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Metric::Generic>(kp);
  }
  {
    try {
      (arg1)->metric(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_metric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FactoryMessenger_metric__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Metric__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactoryMessenger_metric__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FactoryMessenger_metric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::metric()\n"
    "    Gyoto::FactoryMessenger::metric(Gyoto::SmartPointer< Gyoto::Metric::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_astrobj__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Astrobj::Generic > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_astrobj",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_astrobj" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Astrobj::Generic" "*'");
    }
    Gyoto::Astrobj::Generic * kp=reinterpret_cast< Gyoto::Astrobj::Generic * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Astrobj::Generic>(kp);
  }
  {
    try {
      (arg1)->astrobj(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_astrobj(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FactoryMessenger_astrobj__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Astrobj__Generic, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactoryMessenger_astrobj__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FactoryMessenger_astrobj'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::astrobj()\n"
    "    Gyoto::FactoryMessenger::astrobj(Gyoto::SmartPointer< Gyoto::Astrobj::Generic >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_screen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  SwigValueWrapper< Gyoto::SmartPointer< Gyoto::Screen > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_screen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_screen" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    int res=0;
    void *argp=0;
    res=SWIG_ConvertPtr(obj1, &argp, SWIGTYPE_p_Gyoto__Screen, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "argument of type '""Gyoto::Screen" "*'");
    }
    Gyoto::Screen * kp=reinterpret_cast< Gyoto::Screen * >(argp);
    arg2 = Gyoto::SmartPointer<Gyoto::Screen>(kp);
  }
  {
    try {
      (arg1)->screen(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_screen(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FactoryMessenger_screen__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gyoto__Screen, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactoryMessenger_screen__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FactoryMessenger_screen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::screen()\n"
    "    Gyoto::FactoryMessenger::screen(Gyoto::SmartPointer< Gyoto::Screen >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_setParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setParameter(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (arg1)->setParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      (arg1)->setParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    try {
      (arg1)->setParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setParameter(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  double *arg3 ;
  size_t arg4 ;
  Gyoto::FactoryMessenger **arg5 = (Gyoto::FactoryMessenger **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FactoryMessenger_setParameter" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FactoryMessenger_setParameter" "', argument " "5"" of type '" "Gyoto::FactoryMessenger **""'"); 
  }
  arg5 = reinterpret_cast< Gyoto::FactoryMessenger ** >(argp5);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  double *arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    npy_intp size[1] = {
      
    };
    array3 = obj_to_array_no_conversion(obj2, NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_size(array3, size, 1) ||
      !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FactoryMessenger_setParameter" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      (arg1)->setParameter(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  Gyoto::FactoryMessenger **arg4 = (Gyoto::FactoryMessenger **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FactoryMessenger_setParameter" "', argument " "4"" of type '" "Gyoto::FactoryMessenger **""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::FactoryMessenger ** >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg3 = 0 ;
  Gyoto::FactoryMessenger **arg4 = (Gyoto::FactoryMessenger **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FactoryMessenger_setParameter" "', argument " "4"" of type '" "Gyoto::FactoryMessenger **""'"); 
  }
  arg4 = reinterpret_cast< Gyoto::FactoryMessenger ** >(argp4);
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< unsigned long,std::allocator< unsigned long > > const &)*arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setParameter" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setParameter" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< unsigned long,std::allocator< unsigned long > > *ptr = (std::vector< unsigned long,std::allocator< unsigned long > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactoryMessenger_setParameter" "', argument " "3"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setParameter(arg2,(std::vector< unsigned long,std::allocator< unsigned long > > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactoryMessenger_setParameter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactoryMessenger_setParameter__SWIG_12(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< unsigned long,std::allocator< unsigned long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FactoryMessenger_setParameter__SWIG_11(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FactoryMessenger_setParameter__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FactoryMessenger_setParameter__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]) && PyArray_EquivTypenums(array_type(argv[2]),
            NPY_DOUBLE);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_p_Gyoto__FactoryMessenger, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_FactoryMessenger_setParameter__SWIG_7(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FactoryMessenger_setParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,double)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,long)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,unsigned int)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,unsigned long)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,int)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,std::string)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,double [],size_t,Gyoto::FactoryMessenger **)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,double [],size_t)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,std::vector< double,std::allocator< double > > const &,Gyoto::FactoryMessenger **)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,std::vector< double,std::allocator< double > > const &)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,std::vector< unsigned long,std::allocator< unsigned long > > const &,Gyoto::FactoryMessenger **)\n"
    "    Gyoto::FactoryMessenger::setParameter(std::string,std::vector< unsigned long,std::allocator< unsigned long > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setSelfAttribute__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setSelfAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setSelfAttribute(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setSelfAttribute__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setSelfAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    try {
      (arg1)->setSelfAttribute(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setSelfAttribute__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setSelfAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      (arg1)->setSelfAttribute(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setSelfAttribute__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_setSelfAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_setSelfAttribute" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setSelfAttribute(arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setSelfAttribute(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setSelfAttribute__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setSelfAttribute__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_setSelfAttribute__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FactoryMessenger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactoryMessenger_setSelfAttribute__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FactoryMessenger_setSelfAttribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::setSelfAttribute(std::string,std::string)\n"
    "    Gyoto::FactoryMessenger::setSelfAttribute(std::string,unsigned long)\n"
    "    Gyoto::FactoryMessenger::setSelfAttribute(std::string,unsigned int)\n"
    "    Gyoto::FactoryMessenger::setSelfAttribute(std::string,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_setFullContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_setFullContent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_setFullContent" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_setFullContent" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setFullContent(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_makeChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::FactoryMessenger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FactoryMessenger_makeChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactoryMessenger_makeChild" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_makeChild" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::FactoryMessenger *)(arg1)->makeChild(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__FactoryMessenger, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_parseArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  double *arg2 ;
  size_t arg3 ;
  PyArrayObject *array2 = NULL ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FactoryMessenger_parseArray",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_parseArray" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    npy_intp size[1] = {
      
    };
    array2 = obj_to_array_no_conversion(obj1, NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_size(array2, size, 1) ||
      !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = (double *) array_data(array2);
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactoryMessenger_parseArray" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = Gyoto::FactoryMessenger::parseArray(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_parseArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_parseArray",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_parseArray" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = Gyoto::FactoryMessenger::parseArray(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_parseArray(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FactoryMessenger_parseArray__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) && PyArray_EquivTypenums(array_type(argv[1]),
          NPY_DOUBLE);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactoryMessenger_parseArray__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FactoryMessenger_parseArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FactoryMessenger::parseArray(std::string,double [],size_t)\n"
    "    Gyoto::FactoryMessenger::parseArray(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FactoryMessenger_parseArrayULong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned long,std::allocator< unsigned long > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FactoryMessenger_parseArrayULong",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactoryMessenger_parseArrayULong" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = Gyoto::FactoryMessenger::parseArrayULong(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< unsigned long,std::allocator< unsigned long > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FactoryMessenger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FactoryMessenger *arg1 = (Gyoto::FactoryMessenger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FactoryMessenger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FactoryMessenger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FactoryMessenger" "', argument " "1"" of type '" "Gyoto::FactoryMessenger *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FactoryMessenger * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FactoryMessenger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__FactoryMessenger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ARRAY_double_2___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::array< double,2 > *arg1 = (boost::array< double,2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ARRAY_double_2___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ARRAY_double_2___getitem__" "', argument " "1"" of type '" "boost::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ARRAY_double_2___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (double)boost_array_Sl_double_Sc_2_Sg____getitem__(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ARRAY_double_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::array< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ARRAY_double_2")) SWIG_fail;
  {
    try {
      result = (boost::array< double,2 > *)new boost::array< double,2 >();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__arrayT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ARRAY_double_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::array< double,2 > *arg1 = (boost::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ARRAY_double_2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__arrayT_double_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ARRAY_double_2" "', argument " "1"" of type '" "boost::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::array< double,2 > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ARRAY_double_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__arrayT_double_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ARRAY_size_t_2___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::array< size_t,2 > *arg1 = (boost::array< size_t,2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ARRAY_size_t_2___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__arrayT_size_t_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ARRAY_size_t_2___getitem__" "', argument " "1"" of type '" "boost::array< size_t,2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::array< size_t,2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ARRAY_size_t_2___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = boost_array_Sl_size_t_Sc_2_Sg____getitem__(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ARRAY_size_t_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::array< size_t,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ARRAY_size_t_2")) SWIG_fail;
  {
    try {
      result = (boost::array< size_t,2 > *)new boost::array< size_t,2 >();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__arrayT_size_t_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ARRAY_size_t_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::array< size_t,2 > *arg1 = (boost::array< size_t,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ARRAY_size_t_2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__arrayT_size_t_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ARRAY_size_t_2" "', argument " "1"" of type '" "boost::array< size_t,2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::array< size_t,2 > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ARRAY_size_t_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__arrayT_size_t_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Coord1dSet_kind_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CoordType_e result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet_kind_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet_kind_get" "', argument " "1"" of type '" "Coord1dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  result = (CoordType_e)(CoordType_e) ((arg1)->kind);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord1dSet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet_begin" "', argument " "1"" of type '" "Coord1dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord1dSet_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet_valid" "', argument " "1"" of type '" "Coord1dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord1dSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet_size" "', argument " "1"" of type '" "Coord1dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord1dSet___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet___ref__" "', argument " "1"" of type '" "Coord1dSet const *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      result = ((Coord1dSet const *)arg1)->operator *();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord1dSet_angle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet_angle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet_angle" "', argument " "1"" of type '" "Coord1dSet const *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      result = (double)((Coord1dSet const *)arg1)->angle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord1dSet_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord1dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet_increment" "', argument " "1"" of type '" "Coord1dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      result = (Coord1dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord1dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord1dSet_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord1dSet_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord1dSet_value" "', argument " "1"" of type '" "Coord1dSet const *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      result = Coord1dSet_value((Coord1dSet const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Coord1dSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = (Coord1dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Coord1dSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord1dSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coord1dSet" "', argument " "1"" of type '" "Coord1dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Coord1dSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Coord1dSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Coord2dSet_kind_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CoordType_e result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord2dSet_kind_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord2dSet_kind_get" "', argument " "1"" of type '" "Coord2dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  result = (CoordType_e)(CoordType_e) ((arg1)->kind);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord2dSet_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord2dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord2dSet_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord2dSet_increment" "', argument " "1"" of type '" "Coord2dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  {
    try {
      result = (Coord2dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord2dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord2dSet___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::array< size_t,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord2dSet___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord2dSet___ref__" "', argument " "1"" of type '" "Coord2dSet const *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  {
    try {
      result = ((Coord2dSet const *)arg1)->operator *();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new boost::array< size_t,2 >(static_cast< const boost::array< size_t,2 >& >(result))), SWIGTYPE_p_boost__arrayT_size_t_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord2dSet_angles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::array< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord2dSet_angles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord2dSet_angles" "', argument " "1"" of type '" "Coord2dSet const *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  {
    try {
      result = ((Coord2dSet const *)arg1)->angles();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new boost::array< double,2 >(static_cast< const boost::array< double,2 >& >(result))), SWIGTYPE_p_boost__arrayT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord2dSet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord2dSet_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord2dSet_begin" "', argument " "1"" of type '" "Coord2dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord2dSet_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord2dSet_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord2dSet_valid" "', argument " "1"" of type '" "Coord2dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coord2dSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coord2dSet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coord2dSet_size" "', argument " "1"" of type '" "Coord2dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Coord2dSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord2dSet *arg1 = (Coord2dSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Coord2dSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Coord2dSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coord2dSet" "', argument " "1"" of type '" "Coord2dSet *""'"); 
  }
  arg1 = reinterpret_cast< Coord2dSet * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Coord2dSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Coord2dSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Grid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = 0 ;
  Coord1dSet *arg2 = 0 ;
  char *arg3 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Grid",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Coord1dSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Grid" "', argument " "1"" of type '" "Coord1dSet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Grid" "', argument " "1"" of type '" "Coord1dSet &""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Coord1dSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Grid" "', argument " "2"" of type '" "Coord1dSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Grid" "', argument " "2"" of type '" "Coord1dSet &""'"); 
  }
  arg2 = reinterpret_cast< Coord1dSet * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Grid" "', argument " "3"" of type '" "char const *const""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (Grid *)new Grid(*arg1,*arg2,(char const *)arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = 0 ;
  Coord1dSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Grid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Coord1dSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Grid" "', argument " "1"" of type '" "Coord1dSet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Grid" "', argument " "1"" of type '" "Coord1dSet &""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Coord1dSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Grid" "', argument " "2"" of type '" "Coord1dSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Grid" "', argument " "2"" of type '" "Coord1dSet &""'"); 
  }
  arg2 = reinterpret_cast< Coord1dSet * >(argp2);
  {
    try {
      result = (Grid *)new Grid(*arg1,*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Coord1dSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Coord1dSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Grid__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Coord1dSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Coord1dSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Grid__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Grid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Grid::Grid(Coord1dSet &,Coord1dSet &,char const *const)\n"
    "    Grid::Grid(Coord1dSet &,Coord1dSet &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Grid_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord2dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_increment" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (Coord2dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord2dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::array< size_t,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid___ref__" "', argument " "1"" of type '" "Grid const *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = ((Grid const *)arg1)->operator *();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new boost::array< size_t,2 >(static_cast< const boost::array< size_t,2 >& >(result))), SWIGTYPE_p_boost__arrayT_size_t_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_begin" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_valid" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_size" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Grid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Grid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Grid" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Grid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Grid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Bucket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Coord1dSet *arg1 = 0 ;
  Coord1dSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bucket *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Bucket",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Coord1dSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Bucket" "', argument " "1"" of type '" "Coord1dSet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Bucket" "', argument " "1"" of type '" "Coord1dSet &""'"); 
  }
  arg1 = reinterpret_cast< Coord1dSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Coord1dSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Bucket" "', argument " "2"" of type '" "Coord1dSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Bucket" "', argument " "2"" of type '" "Coord1dSet &""'"); 
  }
  arg2 = reinterpret_cast< Coord1dSet * >(argp2);
  {
    try {
      result = (Bucket *)new Bucket(*arg1,*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Bucket, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bucket_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bucket *arg1 = (Bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord2dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bucket_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bucket_increment" "', argument " "1"" of type '" "Bucket *""'"); 
  }
  arg1 = reinterpret_cast< Bucket * >(argp1);
  {
    try {
      result = (Coord2dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord2dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bucket_angles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bucket *arg1 = (Bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::array< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bucket_angles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bucket_angles" "', argument " "1"" of type '" "Bucket const *""'"); 
  }
  arg1 = reinterpret_cast< Bucket * >(argp1);
  {
    try {
      result = ((Bucket const *)arg1)->angles();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new boost::array< double,2 >(static_cast< const boost::array< double,2 >& >(result))), SWIGTYPE_p_boost__arrayT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bucket___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bucket *arg1 = (Bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::array< size_t,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bucket___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bucket___ref__" "', argument " "1"" of type '" "Bucket const *""'"); 
  }
  arg1 = reinterpret_cast< Bucket * >(argp1);
  {
    try {
      result = ((Bucket const *)arg1)->operator *();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new boost::array< size_t,2 >(static_cast< const boost::array< size_t,2 >& >(result))), SWIGTYPE_p_boost__arrayT_size_t_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bucket_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bucket *arg1 = (Bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bucket_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bucket_begin" "', argument " "1"" of type '" "Bucket *""'"); 
  }
  arg1 = reinterpret_cast< Bucket * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bucket_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bucket *arg1 = (Bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bucket_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bucket_valid" "', argument " "1"" of type '" "Bucket *""'"); 
  }
  arg1 = reinterpret_cast< Bucket * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bucket_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bucket *arg1 = (Bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bucket_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bucket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bucket_size" "', argument " "1"" of type '" "Bucket *""'"); 
  }
  arg1 = reinterpret_cast< Bucket * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Bucket(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Bucket *arg1 = (Bucket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Bucket",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Bucket, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bucket" "', argument " "1"" of type '" "Bucket *""'"); 
  }
  arg1 = reinterpret_cast< Bucket * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Bucket_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Bucket, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Empty *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Empty")) SWIG_fail;
  {
    try {
      result = (Empty *)new Empty();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Empty, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Empty_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Empty *arg1 = (Empty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord2dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Empty_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Empty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Empty_increment" "', argument " "1"" of type '" "Empty *""'"); 
  }
  arg1 = reinterpret_cast< Empty * >(argp1);
  {
    try {
      result = (Coord2dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord2dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Empty_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Empty *arg1 = (Empty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Empty_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Empty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Empty_begin" "', argument " "1"" of type '" "Empty *""'"); 
  }
  arg1 = reinterpret_cast< Empty * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Empty_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Empty *arg1 = (Empty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Empty_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Empty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Empty_valid" "', argument " "1"" of type '" "Empty *""'"); 
  }
  arg1 = reinterpret_cast< Empty * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Empty_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Empty *arg1 = (Empty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Empty_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Empty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Empty_size" "', argument " "1"" of type '" "Empty *""'"); 
  }
  arg1 = reinterpret_cast< Empty * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Empty *arg1 = (Empty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Empty, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Empty" "', argument " "1"" of type '" "Empty *""'"); 
  }
  arg1 = reinterpret_cast< Empty * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Empty_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Empty, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Range *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Range",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Range" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Range" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Range" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = (Range *)new Range(arg1,arg2,arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Range, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Range *arg1 = (Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_begin" "', argument " "1"" of type '" "Range *""'"); 
  }
  arg1 = reinterpret_cast< Range * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Range *arg1 = (Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_valid" "', argument " "1"" of type '" "Range *""'"); 
  }
  arg1 = reinterpret_cast< Range * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Range *arg1 = (Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_size" "', argument " "1"" of type '" "Range *""'"); 
  }
  arg1 = reinterpret_cast< Range * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Range *arg1 = (Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord1dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range_increment" "', argument " "1"" of type '" "Range *""'"); 
  }
  arg1 = reinterpret_cast< Range * >(argp1);
  {
    try {
      result = (Coord1dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord1dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Range___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Range *arg1 = (Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Range___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Range, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Range___ref__" "', argument " "1"" of type '" "Range const *""'"); 
  }
  arg1 = reinterpret_cast< Range * >(argp1);
  {
    try {
      result = ((Range const *)arg1)->operator *();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Range *arg1 = (Range *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Range",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Range, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Range" "', argument " "1"" of type '" "Range *""'"); 
  }
  arg1 = reinterpret_cast< Range * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Range_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Range, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Indices__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Indices *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Indices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Indices" "', argument " "1"" of type '" "size_t *""'"); 
  }
  arg1 = reinterpret_cast< size_t * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Indices" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (Indices *)new Indices(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Indices, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Indices_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Indices *arg1 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Indices_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Indices, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Indices_begin" "', argument " "1"" of type '" "Indices *""'"); 
  }
  arg1 = reinterpret_cast< Indices * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Indices_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Indices *arg1 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Indices_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Indices, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Indices_valid" "', argument " "1"" of type '" "Indices *""'"); 
  }
  arg1 = reinterpret_cast< Indices * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Indices_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Indices *arg1 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Indices_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Indices, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Indices_size" "', argument " "1"" of type '" "Indices *""'"); 
  }
  arg1 = reinterpret_cast< Indices * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Indices_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Indices *arg1 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord1dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Indices_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Indices, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Indices_increment" "', argument " "1"" of type '" "Indices *""'"); 
  }
  arg1 = reinterpret_cast< Indices * >(argp1);
  {
    try {
      result = (Coord1dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord1dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Indices___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Indices *arg1 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Indices___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Indices, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Indices___ref__" "', argument " "1"" of type '" "Indices const *""'"); 
  }
  arg1 = reinterpret_cast< Indices * >(argp1);
  {
    try {
      result = ((Indices const *)arg1)->operator *();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Indices_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Indices *arg1 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Indices_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Indices, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Indices_index" "', argument " "1"" of type '" "Indices const *""'"); 
  }
  arg1 = reinterpret_cast< Indices * >(argp1);
  {
    try {
      result = ((Indices const *)arg1)->index();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Indices__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  Indices *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Indices",&obj0)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_ULONG,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (size_t) array_size(array1,0);
    arg2 = (size_t*) array_data(array1);
  }
  {
    try {
      result = (Indices *)new_Indices__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Indices, SWIG_POINTER_NEW |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Indices(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      _v = is_array(argv[0]) || PySequence_Check(argv[0]);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Indices__SWIG_1(self, args);
      }
      return _wrap_new_Indices__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Indices__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Indices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Indices::Indices(size_t *,size_t)\n"
    "    Indices::Indices(size_t,size_t *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Indices *arg1 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Indices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Indices, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Indices" "', argument " "1"" of type '" "Indices *""'"); 
  }
  arg1 = reinterpret_cast< Indices * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Indices_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Indices, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Angles__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Angles *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Angles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Angles" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Angles" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (Angles *)new Angles(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Angles, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Angles_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Angles *arg1 = (Angles *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Angles_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Angles, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Angles_begin" "', argument " "1"" of type '" "Angles *""'"); 
  }
  arg1 = reinterpret_cast< Angles * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Angles_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Angles *arg1 = (Angles *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Angles_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Angles, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Angles_valid" "', argument " "1"" of type '" "Angles *""'"); 
  }
  arg1 = reinterpret_cast< Angles * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Angles_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Angles *arg1 = (Angles *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Angles_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Angles, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Angles_size" "', argument " "1"" of type '" "Angles *""'"); 
  }
  arg1 = reinterpret_cast< Angles * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Angles_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Angles *arg1 = (Angles *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord1dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Angles_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Angles, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Angles_increment" "', argument " "1"" of type '" "Angles *""'"); 
  }
  arg1 = reinterpret_cast< Angles * >(argp1);
  {
    try {
      result = (Coord1dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord1dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Angles_angle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Angles *arg1 = (Angles *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Angles_angle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Angles, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Angles_angle" "', argument " "1"" of type '" "Angles const *""'"); 
  }
  arg1 = reinterpret_cast< Angles * >(argp1);
  {
    try {
      result = (double)((Angles const *)arg1)->angle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Angles__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  Angles *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Angles",&obj0)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (size_t) array_size(array1,0);
    arg2 = (double*) array_data(array1);
  }
  {
    try {
      result = (Angles *)new_Angles__SWIG_1(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Angles, SWIG_POINTER_NEW |  0 );
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Angles(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      _v = is_array(argv[0]) || PySequence_Check(argv[0]);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Angles__SWIG_1(self, args);
      }
      return _wrap_new_Angles__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Angles__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Angles'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Angles::Angles(double *,size_t)\n"
    "    Angles::Angles(size_t,double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Angles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Angles *arg1 = (Angles *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Angles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Angles, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Angles" "', argument " "1"" of type '" "Angles *""'"); 
  }
  arg1 = reinterpret_cast< Angles * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Angles_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Angles, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RepeatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  size_t arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RepeatAngle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RepeatAngle",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RepeatAngle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RepeatAngle" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (RepeatAngle *)new RepeatAngle(arg1,arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RepeatAngle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatAngle_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RepeatAngle *arg1 = (RepeatAngle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RepeatAngle_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RepeatAngle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatAngle_begin" "', argument " "1"" of type '" "RepeatAngle *""'"); 
  }
  arg1 = reinterpret_cast< RepeatAngle * >(argp1);
  {
    try {
      (arg1)->begin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatAngle_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RepeatAngle *arg1 = (RepeatAngle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RepeatAngle_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RepeatAngle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatAngle_valid" "', argument " "1"" of type '" "RepeatAngle *""'"); 
  }
  arg1 = reinterpret_cast< RepeatAngle * >(argp1);
  {
    try {
      result = (bool)(arg1)->valid();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatAngle_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RepeatAngle *arg1 = (RepeatAngle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RepeatAngle_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RepeatAngle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatAngle_size" "', argument " "1"" of type '" "RepeatAngle *""'"); 
  }
  arg1 = reinterpret_cast< RepeatAngle * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatAngle_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RepeatAngle *arg1 = (RepeatAngle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Coord1dSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RepeatAngle_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RepeatAngle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatAngle_increment" "', argument " "1"" of type '" "RepeatAngle *""'"); 
  }
  arg1 = reinterpret_cast< RepeatAngle * >(argp1);
  {
    try {
      result = (Coord1dSet *) &(arg1)->operator ++();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Coord1dSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatAngle_angle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RepeatAngle *arg1 = (RepeatAngle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RepeatAngle_angle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RepeatAngle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatAngle_angle" "', argument " "1"" of type '" "RepeatAngle const *""'"); 
  }
  arg1 = reinterpret_cast< RepeatAngle * >(argp1);
  {
    try {
      result = (double)((RepeatAngle const *)arg1)->angle();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RepeatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RepeatAngle *arg1 = (RepeatAngle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RepeatAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RepeatAngle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RepeatAngle" "', argument " "1"" of type '" "RepeatAngle *""'"); 
  }
  arg1 = reinterpret_cast< RepeatAngle * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RepeatAngle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RepeatAngle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Property_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_name_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Property_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Property_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_name_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (std::string *) & ((arg1)->name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_name_false_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_name_false_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_name_false_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Property_name_false_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Property_name_false_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name_false = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_name_false_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_name_false_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_name_false_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (std::string *) & ((arg1)->name_false);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_type_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Property_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_type_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (int) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_setter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  Gyoto::Property::setter_t *arg2 = (Gyoto::Property::setter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_setter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_setter_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Property__setter_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Property_setter_set" "', argument " "2"" of type '" "Gyoto::Property::setter_t *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property::setter_t * >(argp2);
  if (arg1) (arg1)->setter = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_setter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property::setter_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_setter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_setter_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (Gyoto::Property::setter_t *)& ((arg1)->setter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property__setter_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_getter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  Gyoto::Property::getter_t *arg2 = (Gyoto::Property::getter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_getter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_getter_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Property__getter_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Property_getter_set" "', argument " "2"" of type '" "Gyoto::Property::getter_t *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property::getter_t * >(argp2);
  if (arg1) (arg1)->getter = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_getter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property::getter_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_getter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_getter_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (Gyoto::Property::getter_t *)& ((arg1)->getter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property__getter_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_setter_unit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  Gyoto::Property::setter_unit_t *arg2 = (Gyoto::Property::setter_unit_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_setter_unit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_setter_unit_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Property__setter_unit_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Property_setter_unit_set" "', argument " "2"" of type '" "Gyoto::Property::setter_unit_t *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property::setter_unit_t * >(argp2);
  if (arg1) (arg1)->setter_unit = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_setter_unit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property::setter_unit_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_setter_unit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_setter_unit_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (Gyoto::Property::setter_unit_t *)& ((arg1)->setter_unit);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property__setter_unit_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_getter_unit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  Gyoto::Property::getter_unit_t *arg2 = (Gyoto::Property::getter_unit_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_getter_unit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_getter_unit_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gyoto__Property__getter_unit_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Property_getter_unit_set" "', argument " "2"" of type '" "Gyoto::Property::getter_unit_t *""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Property::getter_unit_t * >(argp2);
  if (arg1) (arg1)->getter_unit = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_getter_unit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property::getter_unit_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_getter_unit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_getter_unit_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (Gyoto::Property::getter_unit_t *)& ((arg1)->getter_unit);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property__getter_unit_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_doc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Property_doc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_doc_set" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Property_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Property_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->doc = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_doc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_doc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_doc_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (std::string *) & ((arg1)->doc);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property___nonzero__" "', argument " "1"" of type '" "Gyoto::Property const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  {
    try {
      result = (bool)((Gyoto::Property const *)arg1)->operator bool();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_parent_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_parent_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Property_parent_get" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  result = (Gyoto::Property *)(Gyoto::Property *) ((arg1)->parent);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Property, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Property_typeFromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Gyoto::Property::type_e result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Property_typeFromString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Property_typeFromString" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Gyoto::Property::type_e)Gyoto::Property::typeFromString(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Property(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Property *arg1 = (Gyoto::Property *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Property",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Property, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Property" "', argument " "1"" of type '" "Gyoto::Property *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Property * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Property_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Property, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ut_system *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getSystem")) SWIG_fail;
  {
    try {
      result = (ut_system *)Gyoto::Units::getSystem();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ut_system, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Init")) SWIG_fail;
  {
    try {
      Gyoto::Units::Init();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToMeters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ToMeters",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToMeters" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ToMeters" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToMeters" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::ToMeters(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToMeters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ToMeters",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToMeters" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::ToMeters(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToMeters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ToMeters__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ToMeters__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ToMeters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Units::ToMeters(double,std::string const &,Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)\n"
    "    Gyoto::Units::ToMeters(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FromMeters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FromMeters",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromMeters" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FromMeters" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromMeters" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::FromMeters(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromMeters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FromMeters",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromMeters" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromMeters" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::FromMeters(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromMeters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FromMeters__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FromMeters__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FromMeters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Units::FromMeters(double,std::string const &,Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)\n"
    "    Gyoto::Units::FromMeters(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ToSeconds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ToSeconds",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToSeconds" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ToSeconds" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToSeconds" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::ToSeconds(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToSeconds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ToSeconds",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToSeconds" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::ToSeconds(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToSeconds(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ToSeconds__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ToSeconds__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ToSeconds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Units::ToSeconds(double,std::string const &,Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)\n"
    "    Gyoto::Units::ToSeconds(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FromSeconds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FromSeconds",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromSeconds" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FromSeconds" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromSeconds" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::FromSeconds(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromSeconds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FromSeconds",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromSeconds" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromSeconds" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::FromSeconds(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromSeconds(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FromSeconds__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FromSeconds__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FromSeconds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Units::FromSeconds(double,std::string const &,Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)\n"
    "    Gyoto::Units::FromSeconds(double,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ToKilograms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ToKilograms",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToKilograms" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToKilograms" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToKilograms" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::ToKilograms(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromKilograms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FromKilograms",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromKilograms" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromKilograms" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromKilograms" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::FromKilograms(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToGeometrical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ToGeometrical",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToGeometrical" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToGeometrical" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToGeometrical" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ToGeometrical" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToGeometrical" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::ToGeometrical(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromGeometrical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FromGeometrical",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromGeometrical" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromGeometrical" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromGeometrical" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FromGeometrical" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromGeometrical" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::FromGeometrical(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToGeometricalTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ToGeometricalTime",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToGeometricalTime" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToGeometricalTime" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToGeometricalTime" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ToGeometricalTime" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToGeometricalTime" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::ToGeometricalTime(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromGeometricalTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  Gyoto::SmartPointer< Gyoto::Metric::Generic > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FromGeometricalTime",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromGeometricalTime" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromGeometricalTime" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromGeometricalTime" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FromGeometricalTime" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromGeometricalTime" "', argument " "3"" of type '" "Gyoto::SmartPointer< Gyoto::Metric::Generic > const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::SmartPointer< Gyoto::Metric::Generic > * >(argp3);
  {
    try {
      result = (double)Gyoto::Units::FromGeometricalTime(arg1,(std::string const &)*arg2,(Gyoto::SmartPointer< Gyoto::Metric::Generic > const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToHerz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ToHerz",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToHerz" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToHerz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToHerz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::ToHerz(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FromHerz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::string *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FromHerz",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FromHerz" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromHerz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromHerz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)Gyoto::Units::FromHerz(arg1,(std::string const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_areConvertible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Unit *arg1 = 0 ;
  Gyoto::Units::Unit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:areConvertible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "areConvertible" "', argument " "1"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "areConvertible" "', argument " "1"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "areConvertible" "', argument " "2"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "areConvertible" "', argument " "2"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Units::Unit * >(argp2);
  {
    try {
      result = (bool)Gyoto::Units::areConvertible((Gyoto::Units::Unit const &)*arg1,(Gyoto::Units::Unit const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Unit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Gyoto::Units::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Unit",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Unit" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Unit" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Gyoto::Units::Unit *)new Gyoto::Units::Unit((std::string const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Units__Unit, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  result->incRefCount();//ref Unit
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Unit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) (char *)0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::Units::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Unit",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Unit" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (Gyoto::Units::Unit *)new Gyoto::Units::Unit((char const *)arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Units__Unit, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  result->incRefCount();//ref Unit
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Unit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Unit__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Unit__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Unit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Units::Unit::Unit(std::string const &)\n"
    "    Gyoto::Units::Unit::Unit(char const *const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Unit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Unit *arg1 = (Gyoto::Units::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Unit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Unit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Unit" "', argument " "1"" of type '" "Gyoto::Units::Unit *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Unit * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Unit
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_To(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Unit *arg1 = (Gyoto::Units::Unit *) 0 ;
  double arg2 ;
  Gyoto::Units::Unit *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unit_To",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_To" "', argument " "1"" of type '" "Gyoto::Units::Unit *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Unit * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Unit_To" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unit_To" "', argument " "3"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_To" "', argument " "3"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Units::Unit * >(argp3);
  {
    try {
      result = (double)(arg1)->To(arg2,(Gyoto::Units::Unit const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_From(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Unit *arg1 = (Gyoto::Units::Unit *) 0 ;
  double arg2 ;
  Gyoto::Units::Unit *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unit_From",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_From" "', argument " "1"" of type '" "Gyoto::Units::Unit *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Unit * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Unit_From" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unit_From" "', argument " "3"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_From" "', argument " "3"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Units::Unit * >(argp3);
  {
    try {
      result = (double)(arg1)->From(arg2,(Gyoto::Units::Unit const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Unit *arg1 = (Gyoto::Units::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit___str__" "', argument " "1"" of type '" "Gyoto::Units::Unit *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Unit * >(argp1);
  {
    try {
      result = Gyoto_Units_Unit___str__(arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Unit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Units__Unit, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Converter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Converter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Converter")) SWIG_fail;
  {
    try {
      result = (Gyoto::Units::Converter *)new Gyoto::Units::Converter();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Units__Converter, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Converter
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Converter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Unit *arg1 = 0 ;
  Gyoto::Units::Unit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Gyoto::Units::Converter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Converter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Converter" "', argument " "1"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Converter" "', argument " "1"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Converter" "', argument " "2"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Converter" "', argument " "2"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Units::Unit * >(argp2);
  {
    try {
      result = (Gyoto::Units::Converter *)new Gyoto::Units::Converter((Gyoto::Units::Unit const &)*arg1,(Gyoto::Units::Unit const &)*arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__Units__Converter, SWIG_POINTER_NEW |  0 );
  result->incRefCount();//ref Converter
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Converter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Converter__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__Units__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gyoto__Units__Unit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Converter__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Converter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Units::Converter::Converter()\n"
    "    Gyoto::Units::Converter::Converter(Gyoto::Units::Unit const &,Gyoto::Units::Unit const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Converter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Converter *arg1 = (Gyoto::Units::Converter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Converter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Converter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Converter" "', argument " "1"" of type '" "Gyoto::Units::Converter *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Converter * >(argp1);
  {
    try {
      arg1->decRefCount(); if (!arg1->getRefCount()) delete arg1;//unref Converter
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Converter_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Converter *arg1 = (Gyoto::Units::Converter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Converter_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Converter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Converter_reset" "', argument " "1"" of type '" "Gyoto::Units::Converter *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Converter * >(argp1);
  {
    try {
      (arg1)->reset();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Converter_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Converter *arg1 = (Gyoto::Units::Converter *) 0 ;
  Gyoto::Units::Unit *arg2 = 0 ;
  Gyoto::Units::Unit *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Converter_reset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Converter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Converter_reset" "', argument " "1"" of type '" "Gyoto::Units::Converter *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Converter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Converter_reset" "', argument " "2"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Converter_reset" "', argument " "2"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg2 = reinterpret_cast< Gyoto::Units::Unit * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gyoto__Units__Unit,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Converter_reset" "', argument " "3"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Converter_reset" "', argument " "3"" of type '" "Gyoto::Units::Unit const &""'"); 
  }
  arg3 = reinterpret_cast< Gyoto::Units::Unit * >(argp3);
  {
    try {
      (arg1)->reset((Gyoto::Units::Unit const &)*arg2,(Gyoto::Units::Unit const &)*arg3);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Converter_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Units__Converter, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Converter_reset__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__Units__Converter, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gyoto__Units__Unit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gyoto__Units__Unit, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Converter_reset__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Converter_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::Units::Converter::reset()\n"
    "    Gyoto::Units::Converter::reset(Gyoto::Units::Unit const &,Gyoto::Units::Unit const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Converter___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::Units::Converter *arg1 = (Gyoto::Units::Converter *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Converter___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__Units__Converter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Converter___call__" "', argument " "1"" of type '" "Gyoto::Units::Converter const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::Units::Converter * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Converter___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((Gyoto::Units::Converter const *)arg1)->operator ()(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Converter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__Units__Converter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GridData2D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GridData2D")) SWIG_fail;
  {
    try {
      result = (Gyoto::GridData2D *)new Gyoto::GridData2D();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__GridData2D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridData2D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::GridData2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GridData2D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__GridData2D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GridData2D" "', argument " "1"" of type '" "Gyoto::GridData2D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GridData2D" "', argument " "1"" of type '" "Gyoto::GridData2D const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (Gyoto::GridData2D *)new Gyoto::GridData2D((Gyoto::GridData2D const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__GridData2D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridData2D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GridData2D__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GridData2D__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GridData2D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::GridData2D()\n"
    "    Gyoto::GridData2D::GridData2D(Gyoto::GridData2D const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::GridData2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_clone" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (Gyoto::GridData2D *)((Gyoto::GridData2D const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GridData2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GridData2D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GridData2D" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_rmin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_rmin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_rmin" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_rmin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rmin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_rmin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_rmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_rmin" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->rmin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_rmin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_rmin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_rmin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_rmin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::rmin(double)\n"
    "    Gyoto::GridData2D::rmin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_rmax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_rmax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_rmax" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_rmax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->rmax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_rmax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_rmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_rmax" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->rmax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_rmax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_rmax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_rmax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_rmax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::rmax(double)\n"
    "    Gyoto::GridData2D::rmax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_nr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_nr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_nr" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_nr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nr(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_nr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_nr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_nr" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = ((Gyoto::GridData2D const *)arg1)->nr();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_nr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_nr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_nr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_nr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::nr(size_t)\n"
    "    Gyoto::GridData2D::nr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_dr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_dr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_dr" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_dr" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dr(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_dr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_dr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_dr" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->dr();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_dr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_dr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_dr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_dr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::dr(double)\n"
    "    Gyoto::GridData2D::dr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_phimin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_phimin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_phimin" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_phimin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->phimin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_phimin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_phimin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_phimin" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->phimin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_phimin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_phimin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_phimin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_phimin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::phimin(double)\n"
    "    Gyoto::GridData2D::phimin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_phimax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_phimax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_phimax" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_phimax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->phimax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_phimax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_phimax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_phimax" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->phimax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_phimax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_phimax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_phimax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_phimax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::phimax(double)\n"
    "    Gyoto::GridData2D::phimax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_dphi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_dphi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_dphi" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_dphi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dphi(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_dphi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_dphi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_dphi" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->dphi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_dphi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_dphi__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_dphi__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_dphi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::dphi(double)\n"
    "    Gyoto::GridData2D::dphi() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_tmin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_tmin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_tmin" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_tmin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tmin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_tmin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_tmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_tmin" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->tmin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_tmin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_tmin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_tmin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_tmin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::tmin(double)\n"
    "    Gyoto::GridData2D::tmin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_tmax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_tmax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_tmax" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_tmax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tmax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_tmax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_tmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_tmax" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->tmax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_tmax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_tmax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_tmax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_tmax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::tmax(double)\n"
    "    Gyoto::GridData2D::tmax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_nt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_nt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_nt" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_nt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nt(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_nt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_nt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_nt" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = ((Gyoto::GridData2D const *)arg1)->nt();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_nt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_nt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_nt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_nt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::nt(size_t)\n"
    "    Gyoto::GridData2D::nt() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_nphi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_nphi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_nphi" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_nphi" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nphi(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_nphi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridData2D_nphi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_nphi" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    try {
      result = ((Gyoto::GridData2D const *)arg1)->nphi();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_nphi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridData2D_nphi__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridData2D_nphi__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_nphi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::nphi(size_t)\n"
    "    Gyoto::GridData2D::nphi() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsReadHDU__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  std::string arg3 ;
  double **arg4 = 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< std::vector< size_t,std::allocator< size_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GridData2D_fitsReadHDU",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_fitsReadHDU" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridData2D_fitsReadHDU" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GridData2D_fitsReadHDU" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GridData2D_fitsReadHDU" "', argument " "4"" of type '" "double *&""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridData2D_fitsReadHDU" "', argument " "4"" of type '" "double *&""'"); 
  }
  arg4 = reinterpret_cast< double ** >(argp4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GridData2D_fitsReadHDU" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      result = (arg1)->fitsReadHDU(arg2,arg3,*arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< size_t,std::allocator< size_t > >(static_cast< const std::vector< size_t,std::allocator< size_t > >& >(result))), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsReadHDU__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  std::string arg3 ;
  double **arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< std::vector< size_t,std::allocator< size_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GridData2D_fitsReadHDU",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_fitsReadHDU" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridData2D_fitsReadHDU" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GridData2D_fitsReadHDU" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GridData2D_fitsReadHDU" "', argument " "4"" of type '" "double *&""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridData2D_fitsReadHDU" "', argument " "4"" of type '" "double *&""'"); 
  }
  arg4 = reinterpret_cast< double ** >(argp4);
  {
    try {
      result = (arg1)->fitsReadHDU(arg2,arg3,*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< size_t,std::allocator< size_t > >(static_cast< const std::vector< size_t,std::allocator< size_t > >& >(result))), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsReadHDU(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fitsfile, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GridData2D_fitsReadHDU__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fitsfile, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GridData2D_fitsReadHDU__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_fitsReadHDU'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::fitsReadHDU(fitsfile *,std::string,double *&,size_t)\n"
    "    Gyoto::GridData2D::fitsReadHDU(fitsfile *,std::string,double *&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fitsfile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_fitsCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_fitsCreate" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GridData2D_fitsCreate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (fitsfile *)(arg1)->fitsCreate(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fitsfile, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsClose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridData2D_fitsClose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_fitsClose" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridData2D_fitsClose" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    try {
      (arg1)->fitsClose(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsWriteHDU__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  std::string arg3 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GridData2D_fitsWriteHDU",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_fitsWriteHDU" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridData2D_fitsWriteHDU" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GridData2D_fitsWriteHDU" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GridData2D_fitsWriteHDU" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GridData2D_fitsWriteHDU" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    try {
      (arg1)->fitsWriteHDU(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsWriteHDU__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  std::string arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GridData2D_fitsWriteHDU",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_fitsWriteHDU" "', argument " "1"" of type '" "Gyoto::GridData2D *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridData2D_fitsWriteHDU" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GridData2D_fitsWriteHDU" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GridData2D_fitsWriteHDU" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      (arg1)->fitsWriteHDU(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_fitsWriteHDU(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fitsfile, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GridData2D_fitsWriteHDU__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fitsfile, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GridData2D_fitsWriteHDU__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_fitsWriteHDU'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::fitsWriteHDU(fitsfile *,std::string,double *,size_t)\n"
    "    Gyoto::GridData2D::fitsWriteHDU(fitsfile *,std::string,double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_getIndices__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  size_t *arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GridData2D_getIndices",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_getIndices" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridData2D_getIndices" "', argument " "2"" of type '" "size_t [3]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridData2D_getIndices" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GridData2D_getIndices" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GridData2D_getIndices" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GridData2D_getIndices" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      ((Gyoto::GridData2D const *)arg1)->getIndices(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_getIndices__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  size_t *arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GridData2D_getIndices",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_getIndices" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridData2D_getIndices" "', argument " "2"" of type '" "size_t [3]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridData2D_getIndices" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GridData2D_getIndices" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GridData2D_getIndices" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      ((Gyoto::GridData2D const *)arg1)->getIndices(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_getIndices(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_size_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GridData2D_getIndices__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_size_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_GridData2D_getIndices__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_getIndices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::getIndices(size_t [3],double const,double const,double const,double *const) const\n"
    "    Gyoto::GridData2D::getIndices(size_t [3],double const,double const,double const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridData2D_interpolate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) (double *)0 ;
  double *arg6 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GridData2D_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_interpolate" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_interpolate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridData2D_interpolate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GridData2D_interpolate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GridData2D_interpolate" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GridData2D_interpolate" "', argument " "6"" of type '" "double *const""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->interpolate(arg2,arg3,arg4,arg5,arg6);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_interpolate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::GridData2D *arg1 = (Gyoto::GridData2D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GridData2D_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__GridData2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridData2D_interpolate" "', argument " "1"" of type '" "Gyoto::GridData2D const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::GridData2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridData2D_interpolate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridData2D_interpolate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GridData2D_interpolate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GridData2D_interpolate" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (double)((Gyoto::GridData2D const *)arg1)->interpolate(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridData2D_interpolate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_GridData2D_interpolate__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__GridData2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_GridData2D_interpolate__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridData2D_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::GridData2D::interpolate(double,double,double,double *const,double *const) const\n"
    "    Gyoto::GridData2D::interpolate(double,double,double,double *const) const\n");
  return 0;
}


SWIGINTERN PyObject *GridData2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__GridData2D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FitsRW__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FitsRW")) SWIG_fail;
  {
    try {
      result = (Gyoto::FitsRW *)new Gyoto::FitsRW();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__FitsRW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FitsRW__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::FitsRW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FitsRW",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gyoto__FitsRW,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FitsRW" "', argument " "1"" of type '" "Gyoto::FitsRW const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FitsRW" "', argument " "1"" of type '" "Gyoto::FitsRW const &""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = (Gyoto::FitsRW *)new Gyoto::FitsRW((Gyoto::FitsRW const &)*arg1);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__FitsRW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FitsRW(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FitsRW__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FitsRW__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FitsRW'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::FitsRW()\n"
    "    Gyoto::FitsRW::FitsRW(Gyoto::FitsRW const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Gyoto::FitsRW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_clone" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = (Gyoto::FitsRW *)((Gyoto::FitsRW const *)arg1)->clone();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FitsRW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FitsRW",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FitsRW" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_numin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_numin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_numin" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_numin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_numin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_numin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_numin" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = (double)((Gyoto::FitsRW const *)arg1)->numin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_numin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FitsRW_numin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FitsRW_numin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FitsRW_numin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::numin(double)\n"
    "    Gyoto::FitsRW::numin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_numax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_numax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_numax" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_numax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->numax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_numax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_numax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_numax" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = (double)((Gyoto::FitsRW const *)arg1)->numax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_numax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FitsRW_numax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FitsRW_numax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FitsRW_numax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::numax(double)\n"
    "    Gyoto::FitsRW::numax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_nnu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_nnu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_nnu" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_nnu" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nnu(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_nnu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_nnu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_nnu" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = ((Gyoto::FitsRW const *)arg1)->nnu();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_nnu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FitsRW_nnu__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FitsRW_nnu__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FitsRW_nnu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::nnu(size_t)\n"
    "    Gyoto::FitsRW::nnu() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_tmin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_tmin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_tmin" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_tmin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tmin(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_tmin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_tmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_tmin" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = (double)((Gyoto::FitsRW const *)arg1)->tmin();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_tmin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FitsRW_tmin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FitsRW_tmin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FitsRW_tmin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::tmin(double)\n"
    "    Gyoto::FitsRW::tmin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_tmax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_tmax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_tmax" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_tmax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->tmax(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_tmax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_tmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_tmax" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = (double)((Gyoto::FitsRW const *)arg1)->tmax();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_tmax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FitsRW_tmax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FitsRW_tmax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FitsRW_tmax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::tmax(double)\n"
    "    Gyoto::FitsRW::tmax() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_nt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_nt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_nt" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_nt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->nt(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_nt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_nt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_nt" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = ((Gyoto::FitsRW const *)arg1)->nt();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_nt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FitsRW_nt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FitsRW_nt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FitsRW_nt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::nt(size_t)\n"
    "    Gyoto::FitsRW::nt() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_dt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_dt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_dt" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_dt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->dt(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_dt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitsRW_dt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_dt" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    try {
      result = (double)((Gyoto::FitsRW const *)arg1)->dt();
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_dt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FitsRW_dt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gyoto__FitsRW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FitsRW_dt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FitsRW_dt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyoto::FitsRW::dt(double)\n"
    "    Gyoto::FitsRW::dt() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FitsRW_fitsCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fitsfile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_fitsCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_fitsCreate" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FitsRW_fitsCreate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (fitsfile *)(arg1)->fitsCreate(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fitsfile, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_fitsClose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FitsRW_fitsClose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_fitsClose" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FitsRW_fitsClose" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    try {
      (arg1)->fitsClose(arg2);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_fitsWriteHDU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  std::string arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FitsRW_fitsWriteHDU",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_fitsWriteHDU" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FitsRW_fitsWriteHDU" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FitsRW_fitsWriteHDU" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FitsRW_fitsWriteHDU" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      (arg1)->fitsWriteHDU(arg2,arg3,arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_fitsWriteParams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:FitsRW_fitsWriteParams",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_fitsWriteParams" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FitsRW_fitsWriteParams" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FitsRW_fitsWriteParams" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FitsRW_fitsWriteParams" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FitsRW_fitsWriteParams" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FitsRW_fitsWriteParams" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FitsRW_fitsWriteParams" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->fitsWriteParams(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_fitsReadHDU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  fitsfile *arg2 = (fitsfile *) 0 ;
  std::string arg3 ;
  double **arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< std::vector< size_t,std::allocator< size_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FitsRW_fitsReadHDU",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_fitsReadHDU" "', argument " "1"" of type '" "Gyoto::FitsRW *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fitsfile, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FitsRW_fitsReadHDU" "', argument " "2"" of type '" "fitsfile *""'"); 
  }
  arg2 = reinterpret_cast< fitsfile * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FitsRW_fitsReadHDU" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FitsRW_fitsReadHDU" "', argument " "4"" of type '" "double *&""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FitsRW_fitsReadHDU" "', argument " "4"" of type '" "double *&""'"); 
  }
  arg4 = reinterpret_cast< double ** >(argp4);
  {
    try {
      result = (arg1)->fitsReadHDU(arg2,arg3,*arg4);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< size_t,std::allocator< size_t > >(static_cast< const std::vector< size_t,std::allocator< size_t > >& >(result))), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_getIndices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  size_t *arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FitsRW_getIndices",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_getIndices" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FitsRW_getIndices" "', argument " "2"" of type '" "size_t [2]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FitsRW_getIndices" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FitsRW_getIndices" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FitsRW_getIndices" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      ((Gyoto::FitsRW const *)arg1)->getIndices(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitsRW_interpolate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gyoto::FitsRW *arg1 = (Gyoto::FitsRW *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FitsRW_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gyoto__FitsRW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitsRW_interpolate" "', argument " "1"" of type '" "Gyoto::FitsRW const *""'"); 
  }
  arg1 = reinterpret_cast< Gyoto::FitsRW * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FitsRW_interpolate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FitsRW_interpolate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FitsRW_interpolate" "', argument " "4"" of type '" "double *const""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FitsRW_interpolate" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (double)((Gyoto::FitsRW const *)arg1)->interpolate(arg2,arg3,arg4,arg5);
    }
    catch (Gyoto::Error e) {
      //    PyErr_SetString(PyErr_NewException("gyoto.Error", NULL, NULL), e);
      SWIG_Python_Raise
      (SWIG_NewPointerObj
        ((new Gyoto::Error(static_cast<const Gyoto::Error& >(e))),
          __Gyoto_SWIGTYPE_p_Gyoto__Error(),SWIG_POINTER_NEW),
        "gyoto.Error", __Gyoto_SWIGTYPE_p_Gyoto__Error());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FitsRW_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gyoto__FitsRW, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var___class___set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Gyoto::__class__""' of type '""int""'");
    }
    Gyoto::__class__ = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var___class___get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(Gyoto::__class__));
  return pyobj;
}


static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { "vector_string_iterator", _wrap_vector_string_iterator, METH_VARARGS, (char *)"vector_string_iterator(vector_string self) -> SwigPyIterator"},
	 { "vector_string___nonzero__", _wrap_vector_string___nonzero__, METH_VARARGS, (char *)"vector_string___nonzero__(vector_string self) -> bool"},
	 { "vector_string___bool__", _wrap_vector_string___bool__, METH_VARARGS, (char *)"vector_string___bool__(vector_string self) -> bool"},
	 { "vector_string___len__", _wrap_vector_string___len__, METH_VARARGS, (char *)"vector_string___len__(vector_string self) -> std::vector< std::string >::size_type"},
	 { "vector_string___getslice__", _wrap_vector_string___getslice__, METH_VARARGS, (char *)"vector_string___getslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string"},
	 { "vector_string___setslice__", _wrap_vector_string___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)\n"
		"vector_string___setslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string v)\n"
		""},
	 { "vector_string___delslice__", _wrap_vector_string___delslice__, METH_VARARGS, (char *)"vector_string___delslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"},
	 { "vector_string___delitem__", _wrap_vector_string___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< std::string >::difference_type i)\n"
		"vector_string___delitem__(vector_string self, PySliceObject * slice)\n"
		""},
	 { "vector_string___getitem__", _wrap_vector_string___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> vector_string\n"
		"vector_string___getitem__(vector_string self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &\n"
		""},
	 { "vector_string___setitem__", _wrap_vector_string___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, vector_string v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"vector_string___setitem__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)\n"
		""},
	 { "vector_string_pop", _wrap_vector_string_pop, METH_VARARGS, (char *)"vector_string_pop(vector_string self) -> std::vector< std::string >::value_type"},
	 { "vector_string_append", _wrap_vector_string_append, METH_VARARGS, (char *)"vector_string_append(vector_string self, std::vector< std::string >::value_type const & x)"},
	 { "vector_string_empty", _wrap_vector_string_empty, METH_VARARGS, (char *)"vector_string_empty(vector_string self) -> bool"},
	 { "vector_string_size", _wrap_vector_string_size, METH_VARARGS, (char *)"vector_string_size(vector_string self) -> std::vector< std::string >::size_type"},
	 { "vector_string_swap", _wrap_vector_string_swap, METH_VARARGS, (char *)"vector_string_swap(vector_string self, vector_string v)"},
	 { "vector_string_begin", _wrap_vector_string_begin, METH_VARARGS, (char *)"vector_string_begin(vector_string self) -> std::vector< std::string >::iterator"},
	 { "vector_string_end", _wrap_vector_string_end, METH_VARARGS, (char *)"vector_string_end(vector_string self) -> std::vector< std::string >::iterator"},
	 { "vector_string_rbegin", _wrap_vector_string_rbegin, METH_VARARGS, (char *)"vector_string_rbegin(vector_string self) -> std::vector< std::string >::reverse_iterator"},
	 { "vector_string_rend", _wrap_vector_string_rend, METH_VARARGS, (char *)"vector_string_rend(vector_string self) -> std::vector< std::string >::reverse_iterator"},
	 { "vector_string_clear", _wrap_vector_string_clear, METH_VARARGS, (char *)"vector_string_clear(vector_string self)"},
	 { "vector_string_get_allocator", _wrap_vector_string_get_allocator, METH_VARARGS, (char *)"vector_string_get_allocator(vector_string self) -> std::vector< std::string >::allocator_type"},
	 { "vector_string_pop_back", _wrap_vector_string_pop_back, METH_VARARGS, (char *)"vector_string_pop_back(vector_string self)"},
	 { "vector_string_erase", _wrap_vector_string_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator\n"
		"vector_string_erase(vector_string self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator\n"
		""},
	 { "new_vector_string", _wrap_new_vector_string, METH_VARARGS, (char *)"\n"
		"vector_string()\n"
		"vector_string(vector_string arg2)\n"
		"vector_string(std::vector< std::string >::size_type size)\n"
		"new_vector_string(std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string\n"
		""},
	 { "vector_string_push_back", _wrap_vector_string_push_back, METH_VARARGS, (char *)"vector_string_push_back(vector_string self, std::vector< std::string >::value_type const & x)"},
	 { "vector_string_front", _wrap_vector_string_front, METH_VARARGS, (char *)"vector_string_front(vector_string self) -> std::vector< std::string >::value_type const &"},
	 { "vector_string_back", _wrap_vector_string_back, METH_VARARGS, (char *)"vector_string_back(vector_string self) -> std::vector< std::string >::value_type const &"},
	 { "vector_string_assign", _wrap_vector_string_assign, METH_VARARGS, (char *)"vector_string_assign(vector_string self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"},
	 { "vector_string_resize", _wrap_vector_string_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< std::string >::size_type new_size)\n"
		"vector_string_resize(vector_string self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)\n"
		""},
	 { "vector_string_insert", _wrap_vector_string_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator\n"
		"vector_string_insert(vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)\n"
		""},
	 { "vector_string_reserve", _wrap_vector_string_reserve, METH_VARARGS, (char *)"vector_string_reserve(vector_string self, std::vector< std::string >::size_type n)"},
	 { "vector_string_capacity", _wrap_vector_string_capacity, METH_VARARGS, (char *)"vector_string_capacity(vector_string self) -> std::vector< std::string >::size_type"},
	 { "delete_vector_string", _wrap_delete_vector_string, METH_VARARGS, (char *)"delete_vector_string(vector_string self)"},
	 { "vector_string_swigregister", vector_string_swigregister, METH_VARARGS, NULL},
	 { "vector_double_iterator", _wrap_vector_double_iterator, METH_VARARGS, (char *)"vector_double_iterator(vector_double self) -> SwigPyIterator"},
	 { "vector_double___nonzero__", _wrap_vector_double___nonzero__, METH_VARARGS, (char *)"vector_double___nonzero__(vector_double self) -> bool"},
	 { "vector_double___bool__", _wrap_vector_double___bool__, METH_VARARGS, (char *)"vector_double___bool__(vector_double self) -> bool"},
	 { "vector_double___len__", _wrap_vector_double___len__, METH_VARARGS, (char *)"vector_double___len__(vector_double self) -> std::vector< double >::size_type"},
	 { "vector_double___getslice__", _wrap_vector_double___getslice__, METH_VARARGS, (char *)"vector_double___getslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vector_double"},
	 { "vector_double___setslice__", _wrap_vector_double___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< double >::difference_type i, std::vector< double >::difference_type j)\n"
		"vector_double___setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vector_double v)\n"
		""},
	 { "vector_double___delslice__", _wrap_vector_double___delslice__, METH_VARARGS, (char *)"vector_double___delslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"},
	 { "vector_double___delitem__", _wrap_vector_double___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< double >::difference_type i)\n"
		"vector_double___delitem__(vector_double self, PySliceObject * slice)\n"
		""},
	 { "vector_double___getitem__", _wrap_vector_double___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> vector_double\n"
		"vector_double___getitem__(vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &\n"
		""},
	 { "vector_double___setitem__", _wrap_vector_double___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, vector_double v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"vector_double___setitem__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)\n"
		""},
	 { "vector_double_pop", _wrap_vector_double_pop, METH_VARARGS, (char *)"vector_double_pop(vector_double self) -> std::vector< double >::value_type"},
	 { "vector_double_append", _wrap_vector_double_append, METH_VARARGS, (char *)"vector_double_append(vector_double self, std::vector< double >::value_type const & x)"},
	 { "vector_double_empty", _wrap_vector_double_empty, METH_VARARGS, (char *)"vector_double_empty(vector_double self) -> bool"},
	 { "vector_double_size", _wrap_vector_double_size, METH_VARARGS, (char *)"vector_double_size(vector_double self) -> std::vector< double >::size_type"},
	 { "vector_double_swap", _wrap_vector_double_swap, METH_VARARGS, (char *)"vector_double_swap(vector_double self, vector_double v)"},
	 { "vector_double_begin", _wrap_vector_double_begin, METH_VARARGS, (char *)"vector_double_begin(vector_double self) -> std::vector< double >::iterator"},
	 { "vector_double_end", _wrap_vector_double_end, METH_VARARGS, (char *)"vector_double_end(vector_double self) -> std::vector< double >::iterator"},
	 { "vector_double_rbegin", _wrap_vector_double_rbegin, METH_VARARGS, (char *)"vector_double_rbegin(vector_double self) -> std::vector< double >::reverse_iterator"},
	 { "vector_double_rend", _wrap_vector_double_rend, METH_VARARGS, (char *)"vector_double_rend(vector_double self) -> std::vector< double >::reverse_iterator"},
	 { "vector_double_clear", _wrap_vector_double_clear, METH_VARARGS, (char *)"vector_double_clear(vector_double self)"},
	 { "vector_double_get_allocator", _wrap_vector_double_get_allocator, METH_VARARGS, (char *)"vector_double_get_allocator(vector_double self) -> std::vector< double >::allocator_type"},
	 { "vector_double_pop_back", _wrap_vector_double_pop_back, METH_VARARGS, (char *)"vector_double_pop_back(vector_double self)"},
	 { "vector_double_erase", _wrap_vector_double_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< double >::iterator pos) -> std::vector< double >::iterator\n"
		"vector_double_erase(vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator\n"
		""},
	 { "new_vector_double", _wrap_new_vector_double, METH_VARARGS, (char *)"\n"
		"vector_double()\n"
		"vector_double(vector_double arg2)\n"
		"vector_double(std::vector< double >::size_type size)\n"
		"new_vector_double(std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double\n"
		""},
	 { "vector_double_push_back", _wrap_vector_double_push_back, METH_VARARGS, (char *)"vector_double_push_back(vector_double self, std::vector< double >::value_type const & x)"},
	 { "vector_double_front", _wrap_vector_double_front, METH_VARARGS, (char *)"vector_double_front(vector_double self) -> std::vector< double >::value_type const &"},
	 { "vector_double_back", _wrap_vector_double_back, METH_VARARGS, (char *)"vector_double_back(vector_double self) -> std::vector< double >::value_type const &"},
	 { "vector_double_assign", _wrap_vector_double_assign, METH_VARARGS, (char *)"vector_double_assign(vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"},
	 { "vector_double_resize", _wrap_vector_double_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< double >::size_type new_size)\n"
		"vector_double_resize(vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)\n"
		""},
	 { "vector_double_insert", _wrap_vector_double_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator\n"
		"vector_double_insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)\n"
		""},
	 { "vector_double_reserve", _wrap_vector_double_reserve, METH_VARARGS, (char *)"vector_double_reserve(vector_double self, std::vector< double >::size_type n)"},
	 { "vector_double_capacity", _wrap_vector_double_capacity, METH_VARARGS, (char *)"vector_double_capacity(vector_double self) -> std::vector< double >::size_type"},
	 { "delete_vector_double", _wrap_delete_vector_double, METH_VARARGS, (char *)"delete_vector_double(vector_double self)"},
	 { "vector_double_swigregister", vector_double_swigregister, METH_VARARGS, NULL},
	 { "vector_unsigned_long_iterator", _wrap_vector_unsigned_long_iterator, METH_VARARGS, (char *)"vector_unsigned_long_iterator(vector_unsigned_long self) -> SwigPyIterator"},
	 { "vector_unsigned_long___nonzero__", _wrap_vector_unsigned_long___nonzero__, METH_VARARGS, (char *)"vector_unsigned_long___nonzero__(vector_unsigned_long self) -> bool"},
	 { "vector_unsigned_long___bool__", _wrap_vector_unsigned_long___bool__, METH_VARARGS, (char *)"vector_unsigned_long___bool__(vector_unsigned_long self) -> bool"},
	 { "vector_unsigned_long___len__", _wrap_vector_unsigned_long___len__, METH_VARARGS, (char *)"vector_unsigned_long___len__(vector_unsigned_long self) -> std::vector< unsigned long >::size_type"},
	 { "vector_unsigned_long___getslice__", _wrap_vector_unsigned_long___getslice__, METH_VARARGS, (char *)"vector_unsigned_long___getslice__(vector_unsigned_long self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j) -> vector_unsigned_long"},
	 { "vector_unsigned_long___setslice__", _wrap_vector_unsigned_long___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)\n"
		"vector_unsigned_long___setslice__(vector_unsigned_long self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j, vector_unsigned_long v)\n"
		""},
	 { "vector_unsigned_long___delslice__", _wrap_vector_unsigned_long___delslice__, METH_VARARGS, (char *)"vector_unsigned_long___delslice__(vector_unsigned_long self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)"},
	 { "vector_unsigned_long___delitem__", _wrap_vector_unsigned_long___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< unsigned long >::difference_type i)\n"
		"vector_unsigned_long___delitem__(vector_unsigned_long self, PySliceObject * slice)\n"
		""},
	 { "vector_unsigned_long___getitem__", _wrap_vector_unsigned_long___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> vector_unsigned_long\n"
		"vector_unsigned_long___getitem__(vector_unsigned_long self, std::vector< unsigned long >::difference_type i) -> std::vector< unsigned long >::value_type const &\n"
		""},
	 { "vector_unsigned_long___setitem__", _wrap_vector_unsigned_long___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, vector_unsigned_long v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"vector_unsigned_long___setitem__(vector_unsigned_long self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::value_type const & x)\n"
		""},
	 { "vector_unsigned_long_pop", _wrap_vector_unsigned_long_pop, METH_VARARGS, (char *)"vector_unsigned_long_pop(vector_unsigned_long self) -> std::vector< unsigned long >::value_type"},
	 { "vector_unsigned_long_append", _wrap_vector_unsigned_long_append, METH_VARARGS, (char *)"vector_unsigned_long_append(vector_unsigned_long self, std::vector< unsigned long >::value_type const & x)"},
	 { "vector_unsigned_long_empty", _wrap_vector_unsigned_long_empty, METH_VARARGS, (char *)"vector_unsigned_long_empty(vector_unsigned_long self) -> bool"},
	 { "vector_unsigned_long_size", _wrap_vector_unsigned_long_size, METH_VARARGS, (char *)"vector_unsigned_long_size(vector_unsigned_long self) -> std::vector< unsigned long >::size_type"},
	 { "vector_unsigned_long_swap", _wrap_vector_unsigned_long_swap, METH_VARARGS, (char *)"vector_unsigned_long_swap(vector_unsigned_long self, vector_unsigned_long v)"},
	 { "vector_unsigned_long_begin", _wrap_vector_unsigned_long_begin, METH_VARARGS, (char *)"vector_unsigned_long_begin(vector_unsigned_long self) -> std::vector< unsigned long >::iterator"},
	 { "vector_unsigned_long_end", _wrap_vector_unsigned_long_end, METH_VARARGS, (char *)"vector_unsigned_long_end(vector_unsigned_long self) -> std::vector< unsigned long >::iterator"},
	 { "vector_unsigned_long_rbegin", _wrap_vector_unsigned_long_rbegin, METH_VARARGS, (char *)"vector_unsigned_long_rbegin(vector_unsigned_long self) -> std::vector< unsigned long >::reverse_iterator"},
	 { "vector_unsigned_long_rend", _wrap_vector_unsigned_long_rend, METH_VARARGS, (char *)"vector_unsigned_long_rend(vector_unsigned_long self) -> std::vector< unsigned long >::reverse_iterator"},
	 { "vector_unsigned_long_clear", _wrap_vector_unsigned_long_clear, METH_VARARGS, (char *)"vector_unsigned_long_clear(vector_unsigned_long self)"},
	 { "vector_unsigned_long_get_allocator", _wrap_vector_unsigned_long_get_allocator, METH_VARARGS, (char *)"vector_unsigned_long_get_allocator(vector_unsigned_long self) -> std::vector< unsigned long >::allocator_type"},
	 { "vector_unsigned_long_pop_back", _wrap_vector_unsigned_long_pop_back, METH_VARARGS, (char *)"vector_unsigned_long_pop_back(vector_unsigned_long self)"},
	 { "vector_unsigned_long_erase", _wrap_vector_unsigned_long_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< unsigned long >::iterator pos) -> std::vector< unsigned long >::iterator\n"
		"vector_unsigned_long_erase(vector_unsigned_long self, std::vector< unsigned long >::iterator first, std::vector< unsigned long >::iterator last) -> std::vector< unsigned long >::iterator\n"
		""},
	 { "new_vector_unsigned_long", _wrap_new_vector_unsigned_long, METH_VARARGS, (char *)"\n"
		"vector_unsigned_long()\n"
		"vector_unsigned_long(vector_unsigned_long arg2)\n"
		"vector_unsigned_long(std::vector< unsigned long >::size_type size)\n"
		"new_vector_unsigned_long(std::vector< unsigned long >::size_type size, std::vector< unsigned long >::value_type const & value) -> vector_unsigned_long\n"
		""},
	 { "vector_unsigned_long_push_back", _wrap_vector_unsigned_long_push_back, METH_VARARGS, (char *)"vector_unsigned_long_push_back(vector_unsigned_long self, std::vector< unsigned long >::value_type const & x)"},
	 { "vector_unsigned_long_front", _wrap_vector_unsigned_long_front, METH_VARARGS, (char *)"vector_unsigned_long_front(vector_unsigned_long self) -> std::vector< unsigned long >::value_type const &"},
	 { "vector_unsigned_long_back", _wrap_vector_unsigned_long_back, METH_VARARGS, (char *)"vector_unsigned_long_back(vector_unsigned_long self) -> std::vector< unsigned long >::value_type const &"},
	 { "vector_unsigned_long_assign", _wrap_vector_unsigned_long_assign, METH_VARARGS, (char *)"vector_unsigned_long_assign(vector_unsigned_long self, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)"},
	 { "vector_unsigned_long_resize", _wrap_vector_unsigned_long_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< unsigned long >::size_type new_size)\n"
		"vector_unsigned_long_resize(vector_unsigned_long self, std::vector< unsigned long >::size_type new_size, std::vector< unsigned long >::value_type const & x)\n"
		""},
	 { "vector_unsigned_long_insert", _wrap_vector_unsigned_long_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::value_type const & x) -> std::vector< unsigned long >::iterator\n"
		"vector_unsigned_long_insert(vector_unsigned_long self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)\n"
		""},
	 { "vector_unsigned_long_reserve", _wrap_vector_unsigned_long_reserve, METH_VARARGS, (char *)"vector_unsigned_long_reserve(vector_unsigned_long self, std::vector< unsigned long >::size_type n)"},
	 { "vector_unsigned_long_capacity", _wrap_vector_unsigned_long_capacity, METH_VARARGS, (char *)"vector_unsigned_long_capacity(vector_unsigned_long self) -> std::vector< unsigned long >::size_type"},
	 { "delete_vector_unsigned_long", _wrap_delete_vector_unsigned_long, METH_VARARGS, (char *)"delete_vector_unsigned_long(vector_unsigned_long self)"},
	 { "vector_unsigned_long_swigregister", vector_unsigned_long_swigregister, METH_VARARGS, NULL},
	 { "new_array_double", _wrap_new_array_double, METH_VARARGS, (char *)"new_array_double(size_t nelements) -> array_double"},
	 { "delete_array_double", _wrap_delete_array_double, METH_VARARGS, (char *)"delete_array_double(array_double self)"},
	 { "array_double___getitem__", _wrap_array_double___getitem__, METH_VARARGS, (char *)"array_double___getitem__(array_double self, size_t index) -> double"},
	 { "array_double___setitem__", _wrap_array_double___setitem__, METH_VARARGS, (char *)"array_double___setitem__(array_double self, size_t index, double value)"},
	 { "array_double_cast", _wrap_array_double_cast, METH_VARARGS, (char *)"array_double_cast(array_double self) -> double *"},
	 { "array_double_frompointer", _wrap_array_double_frompointer, METH_VARARGS, (char *)"array_double_frompointer(double * t) -> array_double"},
	 { "array_double_fromnumpy1", _wrap_array_double_fromnumpy1, METH_VARARGS, (char *)"array_double_fromnumpy1(double * IN_ARRAY1) -> array_double"},
	 { "array_double_fromnumpy2", _wrap_array_double_fromnumpy2, METH_VARARGS, (char *)"array_double_fromnumpy2(double * IN_ARRAY2) -> array_double"},
	 { "array_double_fromnumpy3", _wrap_array_double_fromnumpy3, METH_VARARGS, (char *)"array_double_fromnumpy3(double * IN_ARRAY3) -> array_double"},
	 { "array_double_fromnumpy4", _wrap_array_double_fromnumpy4, METH_VARARGS, (char *)"array_double_fromnumpy4(double * IN_ARRAY4) -> array_double"},
	 { "array_double_swigregister", array_double_swigregister, METH_VARARGS, NULL},
	 { "new_array_size_t", _wrap_new_array_size_t, METH_VARARGS, (char *)"new_array_size_t(size_t nelements) -> array_size_t"},
	 { "delete_array_size_t", _wrap_delete_array_size_t, METH_VARARGS, (char *)"delete_array_size_t(array_size_t self)"},
	 { "array_size_t___getitem__", _wrap_array_size_t___getitem__, METH_VARARGS, (char *)"array_size_t___getitem__(array_size_t self, size_t index) -> size_t"},
	 { "array_size_t___setitem__", _wrap_array_size_t___setitem__, METH_VARARGS, (char *)"array_size_t___setitem__(array_size_t self, size_t index, size_t value)"},
	 { "array_size_t_cast", _wrap_array_size_t_cast, METH_VARARGS, (char *)"array_size_t_cast(array_size_t self) -> size_t *"},
	 { "array_size_t_frompointer", _wrap_array_size_t_frompointer, METH_VARARGS, (char *)"array_size_t_frompointer(size_t * t) -> array_size_t"},
	 { "array_size_t_fromnumpy1", _wrap_array_size_t_fromnumpy1, METH_VARARGS, (char *)"array_size_t_fromnumpy1(size_t * IN_ARRAY1) -> array_size_t"},
	 { "array_size_t_fromnumpy2", _wrap_array_size_t_fromnumpy2, METH_VARARGS, (char *)"array_size_t_fromnumpy2(size_t * IN_ARRAY2) -> array_size_t"},
	 { "array_size_t_fromnumpy3", _wrap_array_size_t_fromnumpy3, METH_VARARGS, (char *)"array_size_t_fromnumpy3(size_t * IN_ARRAY3) -> array_size_t"},
	 { "array_size_t_fromnumpy4", _wrap_array_size_t_fromnumpy4, METH_VARARGS, (char *)"array_size_t_fromnumpy4(size_t * IN_ARRAY4) -> array_size_t"},
	 { "array_size_t_swigregister", array_size_t_swigregister, METH_VARARGS, NULL},
	 { "new_array_unsigned_long", _wrap_new_array_unsigned_long, METH_VARARGS, (char *)"new_array_unsigned_long(size_t nelements) -> array_unsigned_long"},
	 { "delete_array_unsigned_long", _wrap_delete_array_unsigned_long, METH_VARARGS, (char *)"delete_array_unsigned_long(array_unsigned_long self)"},
	 { "array_unsigned_long___getitem__", _wrap_array_unsigned_long___getitem__, METH_VARARGS, (char *)"array_unsigned_long___getitem__(array_unsigned_long self, size_t index) -> unsigned long"},
	 { "array_unsigned_long___setitem__", _wrap_array_unsigned_long___setitem__, METH_VARARGS, (char *)"array_unsigned_long___setitem__(array_unsigned_long self, size_t index, unsigned long value)"},
	 { "array_unsigned_long_cast", _wrap_array_unsigned_long_cast, METH_VARARGS, (char *)"array_unsigned_long_cast(array_unsigned_long self) -> unsigned long *"},
	 { "array_unsigned_long_frompointer", _wrap_array_unsigned_long_frompointer, METH_VARARGS, (char *)"array_unsigned_long_frompointer(unsigned long * t) -> array_unsigned_long"},
	 { "array_unsigned_long_fromnumpy1", _wrap_array_unsigned_long_fromnumpy1, METH_VARARGS, (char *)"array_unsigned_long_fromnumpy1(unsigned long * IN_ARRAY1, size_t DIM1) -> array_unsigned_long"},
	 { "array_unsigned_long_fromnumpy2", _wrap_array_unsigned_long_fromnumpy2, METH_VARARGS, (char *)"array_unsigned_long_fromnumpy2(unsigned long * IN_ARRAY2, size_t DIM1, size_t DIM2) -> array_unsigned_long"},
	 { "array_unsigned_long_fromnumpy3", _wrap_array_unsigned_long_fromnumpy3, METH_VARARGS, (char *)"array_unsigned_long_fromnumpy3(unsigned long * IN_ARRAY3, size_t DIM1, size_t DIM2, size_t DIM3) -> array_unsigned_long"},
	 { "array_unsigned_long_fromnumpy4", _wrap_array_unsigned_long_fromnumpy4, METH_VARARGS, (char *)"array_unsigned_long_fromnumpy4(unsigned long * IN_ARRAY4, size_t DIM1, size_t DIM2, size_t DIM3, size_t DIM4) -> array_unsigned_long"},
	 { "array_unsigned_long_swigregister", array_unsigned_long_swigregister, METH_VARARGS, NULL},
	 { "new_Error", _wrap_new_Error, METH_VARARGS, (char *)"\n"
		"Error(std::string const m)\n"
		"new_Error(Error o) -> Error\n"
		""},
	 { "Error_Report", _wrap_Error_Report, METH_VARARGS, (char *)"\n"
		"Error_Report(Error self)\n"
		"\n"
		"\n"
		"\n"
		"Print-out error message on standard error. \n"
		""},
	 { "Error_getErrcode", _wrap_Error_getErrcode, METH_VARARGS, (char *)"\n"
		"Error_getErrcode(Error self) -> int\n"
		"\n"
		"\n"
		"\n"
		"Retrieve error code.\n"
		"\n"
		"See also operator const char * () const and get_message().  Error code\n"
		"\n"
		""},
	 { "Error_get_message", _wrap_Error_get_message, METH_VARARGS, (char *)"\n"
		"Error_get_message(Error self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Retrieve error message for custom handling of the exception.\n"
		"\n"
		"See also operator const char * () const and getErrCode(). char*\n"
		"message : pointer to the error message \n"
		""},
	 { "Error_setHandler", _wrap_Error_setHandler, METH_VARARGS, (char *)"Error_setHandler(Gyoto::Error::Handler_t * phandler)"},
	 { "Error___str__", _wrap_Error___str__, METH_VARARGS, (char *)"Error___str__(Error self) -> char const *"},
	 { "delete_Error", _wrap_delete_Error, METH_VARARGS, (char *)"delete_Error(Error self)"},
	 { "Error_swigregister", Error_swigregister, METH_VARARGS, NULL},
	 { "throwError", _wrap_throwError, METH_VARARGS, (char *)"throwError(std::string arg1)"},
	 { "delete_SmartPointee", _wrap_delete_SmartPointee, METH_VARARGS, (char *)"delete_SmartPointee(SmartPointee self)"},
	 { "new_SmartPointee", _wrap_new_SmartPointee, METH_VARARGS, (char *)"\n"
		"SmartPointee()\n"
		"new_SmartPointee(SmartPointee arg2) -> SmartPointee\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "SmartPointee_incRefCount", _wrap_SmartPointee_incRefCount, METH_VARARGS, (char *)"\n"
		"SmartPointee_incRefCount(SmartPointee self)\n"
		"\n"
		"\n"
		"\n"
		"Increment the reference counter. Warning: Don't mess with the counter.\n"
		"\n"
		""},
	 { "SmartPointee_decRefCount", _wrap_SmartPointee_decRefCount, METH_VARARGS, (char *)"\n"
		"SmartPointee_decRefCount(SmartPointee self) -> int\n"
		"\n"
		"\n"
		"\n"
		"Decrement the reference counter and return current value. Warning:\n"
		"Don't mess with the counter. \n"
		""},
	 { "SmartPointee_getRefCount", _wrap_SmartPointee_getRefCount, METH_VARARGS, (char *)"\n"
		"SmartPointee_getRefCount(SmartPointee self) -> int\n"
		"\n"
		"\n"
		"\n"
		"Get the current number of references. \n"
		""},
	 { "SmartPointee_getPointer", _wrap_SmartPointee_getPointer, METH_VARARGS, (char *)"SmartPointee_getPointer(SmartPointee self) -> long"},
	 { "SmartPointee_swigregister", SmartPointee_swigregister, METH_VARARGS, NULL},
	 { "initRegister", _wrap_initRegister, METH_VARARGS, (char *)"\n"
		"initRegister(char const * pluglist=None)\n"
		"initRegister()\n"
		"\n"
		"\n"
		"\n"
		"Initialise the various registers.\n"
		"\n"
		"Normally called once at application start-up, Register::init()\n"
		"initiaizes the registers, loads the plug-ins, and fills the registers\n"
		"as appropriate.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pluglist:  Coma-separated list of plug-ins to load. If NULL, default\n"
		"to the environment variable GYOTO_PLUGINS, if it exists. Else use\n"
		"GYOTO_DEFAULT_PLUGINS. Failing to load a plug-in prepended with\n"
		"\"nofail:\" is not fatal. \n"
		""},
	 { "listRegister", _wrap_listRegister, METH_VARARGS, (char *)"\n"
		"listRegister()\n"
		"\n"
		"\n"
		"\n"
		"List the various registers. \n"
		""},
	 { "loadPlugin", _wrap_loadPlugin, METH_VARARGS, (char *)"\n"
		"loadPlugin(char const *const plugname, int nofail=0)\n"
		"loadPlugin(char const *const plugname) -> void *\n"
		""},
	 { "havePlugin", _wrap_havePlugin, METH_VARARGS, (char *)"havePlugin(std::string plugname) -> bool"},
	 { "requirePlugin", _wrap_requirePlugin, METH_VARARGS, (char *)"\n"
		"requirePlugin(std::string plugname, int nofail=0)\n"
		"requirePlugin(std::string plugname)\n"
		""},
	 { "new_RegisterEntry", _wrap_new_RegisterEntry, METH_VARARGS, (char *)"\n"
		"new_RegisterEntry(std::string name, Gyoto::SmartPointee::Subcontractor_t * subcontractor, RegisterEntry next) -> RegisterEntry\n"
		"\n"
		"\n"
		"\n"
		"Constructor. \n"
		""},
	 { "delete_RegisterEntry", _wrap_delete_RegisterEntry, METH_VARARGS, (char *)"\n"
		"delete_RegisterEntry(RegisterEntry self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "RegisterEntry_getSubcontractor", _wrap_RegisterEntry_getSubcontractor, METH_VARARGS, (char *)"\n"
		"getSubcontractor(std::string name, std::string & plugin, int errmode=0) -> Gyoto::SmartPointee::Subcontractor_t\n"
		"RegisterEntry_getSubcontractor(RegisterEntry self, std::string name, std::string & plugin) -> Gyoto::SmartPointee::Subcontractor_t *\n"
		"\n"
		"\n"
		"\n"
		"Get subcontractor for a given name.\n"
		"\n"
		"Search through the register for an Entry matching name and return the\n"
		"corresponding subcontractor. If plugin is specified, only a\n"
		"subcontractor matching both name and plugin will be returned. Note\n"
		"that Gyoto::Entry::getSubcontractor() will not load the plug-in for\n"
		"you, contrary to e.g. Gyoto::Metric::getSubcontractor(). If plugin is\n"
		"the empty string, then the first subcontractor matching name will be\n"
		"returned, and the name of the plug-in it belongs to will be returned\n"
		"in plugin upon output.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  Name of the kind to look for.\n"
		"\n"
		"plugin:  e.g. \"stdplug\".\n"
		"\n"
		"errmode:  1 if getSubContractor() should return NULL upon failure.\n"
		"Else a Gyoto::Error is thrown.\n"
		"\n"
		"Pointer to subcontractor function. \n"
		""},
	 { "RegisterEntry_swigregister", RegisterEntry_swigregister, METH_VARARGS, NULL},
	 { "delete_Functor__Double_constDoubleArray", _wrap_delete_Functor__Double_constDoubleArray, METH_VARARGS, (char *)"delete_Functor__Double_constDoubleArray(Functor__Double_constDoubleArray self)"},
	 { "Functor__Double_constDoubleArray___call__", _wrap_Functor__Double_constDoubleArray___call__, METH_VARARGS, (char *)"Functor__Double_constDoubleArray___call__(Functor__Double_constDoubleArray self, double const [] data) -> double"},
	 { "Functor__Double_constDoubleArray_swigregister", Functor__Double_constDoubleArray_swigregister, METH_VARARGS, NULL},
	 { "delete_Functor__Double_Double_const", _wrap_delete_Functor__Double_Double_const, METH_VARARGS, (char *)"delete_Functor__Double_Double_const(Functor__Double_Double_const self)"},
	 { "Functor__Double_Double_const_status_set", _wrap_Functor__Double_Double_const_status_set, METH_VARARGS, (char *)"Functor__Double_Double_const_status_set(Functor__Double_Double_const self, int status)"},
	 { "Functor__Double_Double_const_status_get", _wrap_Functor__Double_Double_const_status_get, METH_VARARGS, (char *)"Functor__Double_Double_const_status_get(Functor__Double_Double_const self) -> int"},
	 { "Functor__Double_Double_const___call__", _wrap_Functor__Double_Double_const___call__, METH_VARARGS, (char *)"Functor__Double_Double_const___call__(Functor__Double_Double_const self, double arg3) -> double"},
	 { "Functor__Double_Double_const_ridders", _wrap_Functor__Double_Double_const_ridders, METH_VARARGS, (char *)"\n"
		"Functor__Double_Double_const_ridders(Functor__Double_Double_const self, double arg3, double to) -> double\n"
		"\n"
		"\n"
		"\n"
		"Ridder's root-finding method applied on operator()()\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"from:  to:  boundaries for root-searching\n"
		"\n"
		"the root \n"
		""},
	 { "Functor__Double_Double_const_secant", _wrap_Functor__Double_Double_const_secant, METH_VARARGS, (char *)"\n"
		"Functor__Double_Double_const_secant(Functor__Double_Double_const self, double arg3, double to) -> double\n"
		"\n"
		"\n"
		"\n"
		"Secant root-finding method applied on operator()()\n"
		"\n"
		"Sets status to -0 in case of convergence -1 if two distinct inputs\n"
		"evaluated to the same output -2 if maximum number of iterations (20)\n"
		"reached\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"from:  to:  boundaries for root-finding\n"
		"\n"
		"the root \n"
		""},
	 { "Functor__Double_Double_const_swigregister", Functor__Double_Double_const_swigregister, METH_VARARGS, NULL},
	 { "new_Listener", _wrap_new_Listener, METH_VARARGS, (char *)"\n"
		"new_Listener() -> Listener\n"
		"\n"
		"\n"
		"\n"
		"Constructor. \n"
		""},
	 { "delete_Listener", _wrap_delete_Listener, METH_VARARGS, (char *)"\n"
		"delete_Listener(Listener self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Listener_swigregister", Listener_swigregister, METH_VARARGS, NULL},
	 { "new_Teller", _wrap_new_Teller, METH_VARARGS, (char *)"\n"
		"Teller()\n"
		"new_Teller(Teller arg2) -> Teller\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "delete_Teller", _wrap_delete_Teller, METH_VARARGS, (char *)"\n"
		"delete_Teller(Teller self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Teller_hook", _wrap_Teller_hook, METH_VARARGS, (char *)"\n"
		"Teller_hook(Teller self, Listener listener)\n"
		"\n"
		"\n"
		"\n"
		"Start listening.\n"
		"\n"
		"Use from a Hook::Listener object method: where \"this\" is a Listener\n"
		"and \"teller\" is a Teller.\n"
		"\n"
		"Use unhook() later to stop listening to a given Teller.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"listener:  pointer to the new listener \n"
		""},
	 { "Teller_unhook", _wrap_Teller_unhook, METH_VARARGS, (char *)"\n"
		"Teller_unhook(Teller self, Listener listener)\n"
		"\n"
		"\n"
		"\n"
		"Stop listening.\n"
		"\n"
		"Use from a Hook::Listener object method:\n"
		"\n"
		"where \"this\" is a Listener, \"teller\" is a Teller, and \"this\" has\n"
		"called teller->hook(this) previously.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"listener:  pointer to the listener \n"
		""},
	 { "Teller_swigregister", Teller_swigregister, METH_VARARGS, NULL},
	 { "new_WIP", _wrap_new_WIP, METH_VARARGS, (char *)"\n"
		"WIP()\n"
		"new_WIP(std::string classname) -> WIP\n"
		"\n"
		"\n"
		"\n"
		"Issue a warning specifying the name of the derived class.\n"
		"\n"
		"If classname is the empty string (\"\"), the warning is not issued.\n"
		"Use this to mark that a class is no more work in progress without\n"
		"breaking the ABI (i.e. in the Gyoto stable branch). \n"
		""},
	 { "delete_WIP", _wrap_delete_WIP, METH_VARARGS, (char *)"delete_WIP(WIP self)"},
	 { "WIP_swigregister", WIP_swigregister, METH_VARARGS, NULL},
	 { "delete_Value", _wrap_delete_Value, METH_VARARGS, (char *)"\n"
		"delete_Value(Value self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Value_assign", _wrap_Value_assign, METH_VARARGS, (char *)"Value_assign(Value self, Value arg3) -> Value"},
	 { "Value_type_get", _wrap_Value_type_get, METH_VARARGS, (char *)"Value_type_get(Value self) -> int"},
	 { "Value_toDouble", _wrap_Value_toDouble, METH_VARARGS, (char *)"Value_toDouble(Value self) -> double"},
	 { "Value___nonzero__", _wrap_Value___nonzero__, METH_VARARGS, (char *)"Value___nonzero__(Value self) -> bool"},
	 { "Value_toLong", _wrap_Value_toLong, METH_VARARGS, (char *)"Value_toLong(Value self) -> long"},
	 { "Value_toULong", _wrap_Value_toULong, METH_VARARGS, (char *)"Value_toULong(Value self) -> unsigned long"},
	 { "Value_toString", _wrap_Value_toString, METH_VARARGS, (char *)"Value_toString(Value self) -> std::string"},
	 { "Value_toVDouble", _wrap_Value_toVDouble, METH_VARARGS, (char *)"Value_toVDouble(Value self) -> vector_double"},
	 { "Value_toMetric", _wrap_Value_toMetric, METH_VARARGS, (char *)"Value_toMetric(Value self) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >"},
	 { "Value_toAstrobj", _wrap_Value_toAstrobj, METH_VARARGS, (char *)"Value_toAstrobj(Value self) -> Gyoto::SmartPointer< Gyoto::Astrobj::Generic >"},
	 { "Value_toSpectrum", _wrap_Value_toSpectrum, METH_VARARGS, (char *)"Value_toSpectrum(Value self) -> Gyoto::SmartPointer< Gyoto::Spectrum::Generic >"},
	 { "Value_toSpectrometer", _wrap_Value_toSpectrometer, METH_VARARGS, (char *)"Value_toSpectrometer(Value self) -> Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >"},
	 { "new_Value", _wrap_new_Value, METH_VARARGS, (char *)"\n"
		"Value()\n"
		"Value(double arg2)\n"
		"Value(bool arg2)\n"
		"Value(long arg2)\n"
		"Value(unsigned long arg2)\n"
		"Value(std::string arg2)\n"
		"Value(vector_double arg2)\n"
		"Value(vector_unsigned_long arg2)\n"
		"Value(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"Value(Gyoto::SmartPointer< Gyoto::Astrobj::Generic > arg2)\n"
		"Value(Gyoto::SmartPointer< Gyoto::Spectrum::Generic > arg2)\n"
		"Value(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > arg2)\n"
		"new_Value(Gyoto::SmartPointer< Gyoto::Screen > arg2) -> Value\n"
		"\n"
		"\n"
		"\n"
		"Cast from Screen. \n"
		""},
	 { "Value_toScreen", _wrap_Value_toScreen, METH_VARARGS, (char *)"Value_toScreen(Value self) -> Gyoto::SmartPointer< Gyoto::Screen >"},
	 { "Value_toSizeT", _wrap_Value_toSizeT, METH_VARARGS, (char *)"Value_toSizeT(Value self) -> size_t"},
	 { "Value_toVULong", _wrap_Value_toVULong, METH_VARARGS, (char *)"Value_toVULong(Value self) -> vector_unsigned_long"},
	 { "Value_swigregister", Value_swigregister, METH_VARARGS, NULL},
	 { "Object_isThreadSafe", _wrap_Object_isThreadSafe, METH_VARARGS, (char *)"\n"
		"Object_isThreadSafe(Object self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "Object_getProperties", _wrap_Object_getProperties, METH_VARARGS, (char *)"\n"
		"Object_getProperties(Object self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Object_plugins", _wrap_Object_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Object_plugins(Object self) -> vector_string\n"
		""},
	 { "new_Object", _wrap_new_Object, METH_VARARGS, (char *)"\n"
		"Object(std::string const & kind)\n"
		"Object()\n"
		"new_Object(Object orig) -> Object\n"
		"\n"
		"\n"
		"\n"
		"Deep copy constructor. \n"
		""},
	 { "delete_Object", _wrap_delete_Object, METH_VARARGS, (char *)"\n"
		"delete_Object(Object self)\n"
		"\n"
		"\n"
		"\n"
		"Virtual destructor. \n"
		""},
	 { "Object_set", _wrap_Object_set, METH_VARARGS, (char *)"\n"
		"set(Property p, Value val)\n"
		"set(Property p, Value val, std::string const & unit)\n"
		"set(std::string const & pname, Value val)\n"
		"Object_set(Object self, std::string const & pname, Value val, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set Value (expressed in unit) of a Property. \n"
		""},
	 { "Object_get", _wrap_Object_get, METH_VARARGS, (char *)"\n"
		"get(Property p) -> Value\n"
		"get(std::string const & pname) -> Value\n"
		"get(Property p, std::string const & unit) -> Value\n"
		"Object_get(Object self, std::string const & pname, std::string const & unit) -> Value\n"
		"\n"
		"\n"
		"\n"
		"Get Value of a Property, converted to unit. \n"
		""},
	 { "Object_property", _wrap_Object_property, METH_VARARGS, (char *)"\n"
		"Object_property(Object self, std::string const pname) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Find property by name.\n"
		"\n"
		"Look into the Property list for a Property whose name (or name_false,\n"
		"for a boolean Property) is pname. Return a const pointer to the first\n"
		"such property found, or NULL if none is found. \n"
		""},
	 { "Object_fillProperty", _wrap_Object_fillProperty, METH_VARARGS, (char *)"\n"
		"Object_fillProperty(Object self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "Object_fillElement", _wrap_Object_fillElement, METH_VARARGS, (char *)"\n"
		"Object_fillElement(Object self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Fill the XML element for this Object.\n"
		"\n"
		"The base implementation simply calls fillProperty() for each Property\n"
		"defined for the Object.\n"
		"\n"
		"Derived classes should avoid overriding fillElement(). It may make\n"
		"sense occasionally, e.g. to make sure that the metric is output first.\n"
		"\n"
		"To customize how a given Property is rendered, it is better to\n"
		"override fillProperty().\n"
		"\n"
		"If this method is overridden, the implementation should in general\n"
		"call fillElement() on the direct base. \n"
		""},
	 { "Object_setParameters", _wrap_Object_setParameters, METH_VARARGS, (char *)"\n"
		"Object_setParameters(Object self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop for parsing Properties from XML description.\n"
		"\n"
		"This function queries the FactoryMessenger for elements to parse, and\n"
		"tries to matche each element to a Property to set it  accordingly. Any\n"
		"class that tries to be buildable from XML must supply a subcontractor\n"
		"(for base classes such as Metric, Astrobj, Spectrum  and Spectrometer,\n"
		"it is done as a template that must be  specialized for each class).\n"
		"This subcontractor typically looks somewhat like this: Although this\n"
		"is discouraged, it is possible to override the following functions to\n"
		"customize how XML entities are parsed:    - setParameters() if low-\n"
		"level access to the      FactoryMessenger is required;    -\n"
		"setParameter(std::string name, std::string content,\n"
		"std::string unit)      to interpret an entity that does not match a\n"
		"Property      (e.g. alternative name);    -\n"
		"setParameter(Gyoto::Property const &p, std::string const &name,\n"
		"std::string const &content, std::string const &unit)      to change\n"
		"how a Property is interpreted. \n"
		""},
	 { "Object_setParameter", _wrap_Object_setParameter, METH_VARARGS, (char *)"\n"
		"setParameter(std::string name, std::string content, std::string unit) -> int\n"
		"Object_setParameter(Object self, Property p, std::string const & name, std::string const & content, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set parameter by Property (and name)\n"
		"\n"
		"This function is used when parsing an XML description, if Property (\n"
		"p) of this name is found (i.e. either p.name or p.name_false is equal\n"
		"to name). Implementation should fall-back on calling the direct's\n"
		"parent implementation:\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"p:   Property that matches name ( p.name == name or p.name_false ==\n"
		"name)\n"
		"\n"
		"name:  XML name of the parameter (XML entity)\n"
		"\n"
		"content:  string representation of the value\n"
		"\n"
		"unit:  string representation of the unit \n"
		""},
	 { "Object_describeProperty", _wrap_Object_describeProperty, METH_VARARGS, (char *)"\n"
		"Object_describeProperty(Object self, Property p) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Format desrciption for a property.\n"
		"\n"
		"Returns a string containing the name(s) and type of the property, as\n"
		"well as whether it supports unit. \n"
		""},
	 { "Object_help", _wrap_Object_help, METH_VARARGS, (char *)"\n"
		"Object_help(Object self)\n"
		"\n"
		"\n"
		"\n"
		"Print (to stdout) some help on this class.\n"
		"\n"
		"Describe all properties that this instance supports. \n"
		""},
	 { "Object_kind", _wrap_Object_kind, METH_VARARGS, (char *)"\n"
		"Object_kind(Object self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Get kind_. \n"
		""},
	 { "Object_swigregister", Object_swigregister, METH_VARARGS, NULL},
	 { "Worldline_stopcond_set", _wrap_Worldline_stopcond_set, METH_VARARGS, (char *)"Worldline_stopcond_set(Worldline self, int stopcond)"},
	 { "Worldline_stopcond_get", _wrap_Worldline_stopcond_get, METH_VARARGS, (char *)"Worldline_stopcond_get(Worldline self) -> int"},
	 { "delete_Worldline", _wrap_delete_Worldline, METH_VARARGS, (char *)"\n"
		"delete_Worldline(Worldline self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Worldline_getImin", _wrap_Worldline_getImin, METH_VARARGS, (char *)"\n"
		"Worldline_getImin(Worldline self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get imin_. \n"
		""},
	 { "Worldline_getImax", _wrap_Worldline_getImax, METH_VARARGS, (char *)"\n"
		"Worldline_getImax(Worldline self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get imax_. \n"
		""},
	 { "Worldline_getI0", _wrap_Worldline_getI0, METH_VARARGS, (char *)"\n"
		"Worldline_getI0(Worldline self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get i0_. \n"
		""},
	 { "Worldline_getMass", _wrap_Worldline_getMass, METH_VARARGS, (char *)"\n"
		"Worldline_getMass(Worldline self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get mass of particule. \n"
		""},
	 { "Worldline_metric", _wrap_Worldline_metric, METH_VARARGS, (char *)"\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"Worldline_metric(Worldline self) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get metric. \n"
		""},
	 { "Worldline_initCoord", _wrap_Worldline_initCoord, METH_VARARGS, (char *)"\n"
		"initCoord(vector_double arg2)\n"
		"Worldline_initCoord(Worldline self) -> vector_double\n"
		""},
	 { "Worldline_setInitCoord", _wrap_Worldline_setInitCoord, METH_VARARGS, (char *)"\n"
		"setInitCoord(double const [8] coord, int dir, double const [4] Ephi, double const [4] Etheta)\n"
		"setInitCoord(double const [8] coord, int dir=0)\n"
		"setInitCoord(double const [8] coord)\n"
		"setInitCoord(double const [4] pos, double const [3] vel, int dir=0)\n"
		"Worldline_setInitCoord(Worldline self, double const [4] pos, double const [3] vel)\n"
		"\n"
		"\n"
		"\n"
		"Set initial coordinate.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  initial 4-position\n"
		"\n"
		"vel:  initial 3-velocity\n"
		"\n"
		"dir:  direction of integration \n"
		""},
	 { "Worldline_setPosition", _wrap_Worldline_setPosition, METH_VARARGS, (char *)"\n"
		"Worldline_setPosition(Worldline self, double const [4] pos)\n"
		"\n"
		"\n"
		"\n"
		"Set initial 4-position. \n"
		""},
	 { "Worldline_setVelocity", _wrap_Worldline_setVelocity, METH_VARARGS, (char *)"\n"
		"Worldline_setVelocity(Worldline self, double const [3] vel)\n"
		"\n"
		"\n"
		"\n"
		"Set initial 3-velocity. \n"
		""},
	 { "Worldline_reset", _wrap_Worldline_reset, METH_VARARGS, (char *)"\n"
		"Worldline_reset(Worldline self)\n"
		"\n"
		"\n"
		"\n"
		"Forget integration, keeping initial contition. \n"
		""},
	 { "Worldline_reInit", _wrap_Worldline_reInit, METH_VARARGS, (char *)"\n"
		"Worldline_reInit(Worldline self)\n"
		"\n"
		"\n"
		"\n"
		"Reset and recompute particle properties. \n"
		""},
	 { "Worldline_className", _wrap_Worldline_className, METH_VARARGS, (char *)"\n"
		"Worldline_className(Worldline self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"Worldline\" \n"
		""},
	 { "Worldline_className_l", _wrap_Worldline_className_l, METH_VARARGS, (char *)"\n"
		"Worldline_className_l(Worldline self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"worldline\" \n"
		""},
	 { "Worldline_integrator", _wrap_Worldline_integrator, METH_VARARGS, (char *)"\n"
		"integrator(std::string const & type)\n"
		"Worldline_integrator(Worldline self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Describe the integrator used by state_. \n"
		""},
	 { "Worldline_integ31", _wrap_Worldline_integ31, METH_VARARGS, (char *)"\n"
		"integ31(bool integ)\n"
		"Worldline_integ31(Worldline self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get the kind of geodesic equation integrated by state_. \n"
		""},
	 { "Worldline_deltaMin", _wrap_Worldline_deltaMin, METH_VARARGS, (char *)"\n"
		"deltaMin() -> double\n"
		"Worldline_deltaMin(Worldline self, double h1)\n"
		"\n"
		"\n"
		"\n"
		"Set delta_min_. \n"
		""},
	 { "Worldline_absTol", _wrap_Worldline_absTol, METH_VARARGS, (char *)"\n"
		"absTol(double arg2)\n"
		"Worldline_absTol(Worldline self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get abstol_. \n"
		""},
	 { "Worldline_relTol", _wrap_Worldline_relTol, METH_VARARGS, (char *)"\n"
		"relTol(double arg2)\n"
		"Worldline_relTol(Worldline self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get reltol_. \n"
		""},
	 { "Worldline_maxCrossEqplane", _wrap_Worldline_maxCrossEqplane, METH_VARARGS, (char *)"\n"
		"maxCrossEqplane(double arg2)\n"
		"Worldline_maxCrossEqplane(Worldline self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get maxCrossEqplane_. \n"
		""},
	 { "Worldline_deltaMax", _wrap_Worldline_deltaMax, METH_VARARGS, (char *)"\n"
		"deltaMax() -> double\n"
		"deltaMax(double const [8] pos, double delta_max_external) -> double\n"
		"Worldline_deltaMax(Worldline self, double h1)\n"
		"\n"
		"\n"
		"\n"
		"Set delta_max_ \n"
		""},
	 { "Worldline_deltaMaxOverR", _wrap_Worldline_deltaMaxOverR, METH_VARARGS, (char *)"\n"
		"deltaMaxOverR() -> double\n"
		"Worldline_deltaMaxOverR(Worldline self, double t)\n"
		"\n"
		"\n"
		"\n"
		"Set delta_max_over_r_. \n"
		""},
	 { "Worldline_delta", _wrap_Worldline_delta, METH_VARARGS, (char *)"\n"
		"delta(double const delta)\n"
		"delta(double arg2, std::string const & unit)\n"
		"delta() -> double\n"
		"Worldline_delta(Worldline self, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get delta_ in specified units. \n"
		""},
	 { "Worldline_tMin", _wrap_Worldline_tMin, METH_VARARGS, (char *)"\n"
		"tMin() -> double\n"
		"tMin(std::string const & unit) -> double\n"
		"tMin(double tlim)\n"
		"Worldline_tMin(Worldline self, double arg3, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set tmin_ in specified unit. \n"
		""},
	 { "Worldline_adaptive", _wrap_Worldline_adaptive, METH_VARARGS, (char *)"\n"
		"adaptive(bool mode)\n"
		"Worldline_adaptive(Worldline self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get adaptive_. \n"
		""},
	 { "Worldline_secondary", _wrap_Worldline_secondary, METH_VARARGS, (char *)"\n"
		"secondary(bool sec)\n"
		"Worldline_secondary(Worldline self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get secondary_. \n"
		""},
	 { "Worldline_parallelTransport", _wrap_Worldline_parallelTransport, METH_VARARGS, (char *)"\n"
		"parallelTransport(bool pt)\n"
		"Worldline_parallelTransport(Worldline self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get parallel_transport_. \n"
		""},
	 { "Worldline_maxiter", _wrap_Worldline_maxiter, METH_VARARGS, (char *)"\n"
		"maxiter(size_t miter)\n"
		"Worldline_maxiter(Worldline self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get maxiter_. \n"
		""},
	 { "Worldline_getCst", _wrap_Worldline_getCst, METH_VARARGS, (char *)"\n"
		"Worldline_getCst(Worldline self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Returns the worldline's cst of motion (if any)\n"
		"\n"
		"Return pointer to array holding the previously set Metric-specific\n"
		"constants of motion.\n"
		"\n"
		"This function returns a pointer to the actual storage location and\n"
		"should be handled with care. std::vector<double> Worldline:\n"
		"constantsOfMotion() constprovides a convenient way to retrieve a copy\n"
		"of the content. \n"
		""},
	 { "Worldline_setCst", _wrap_Worldline_setCst, METH_VARARGS, (char *)"\n"
		"Worldline_setCst(Worldline self, double const * cst)\n"
		"\n"
		"\n"
		"\n"
		"Set Metric-specific constants of motion.\n"
		"\n"
		"The will (re)allocate Worldline::cst_, copy cst into it, and set\n"
		"Worldline::cst_n_.\n"
		"\n"
		"This is the same as void Worldline:\n"
		"constantsOfMotion(std::vector<double> const cstv) using a C-style\n"
		"array instead of a vector. \n"
		""},
	 { "Worldline_constantsOfMotion", _wrap_Worldline_constantsOfMotion, METH_VARARGS, (char *)"\n"
		"constantsOfMotion(vector_double cstv)\n"
		"Worldline_constantsOfMotion(Worldline self) -> vector_double\n"
		"\n"
		"\n"
		"\n"
		"Return a copy of the Metric-specific constants of motion.\n"
		"\n"
		"This funtion return a copy of the constants of motion. getCst() can be\n"
		"used to retrieve a pointer to the actual array used internally which\n"
		"is slightly more efficient for read-only access. \n"
		""},
	 { "Worldline_setInitialCondition", _wrap_Worldline_setInitialCondition, METH_VARARGS, (char *)"\n"
		"setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, double const [8] coord, int const dir, double const [4] Ephi, double const [4] Etheta)\n"
		"Worldline_setInitialCondition(Worldline self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, double const [8] coord, int const dir)\n"
		"\n"
		"\n"
		"\n"
		"Set or re-set the initial condition prior to integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gg:   Gyoto::SmartPointer to the Gyoto::Metric in this universe;\n"
		"\n"
		"coord:  8 element array containing the initial condition, i.e. the\n"
		"4-position and the 4-velocity of the Photon at the receiving end;\n"
		"\n"
		"dir:  direction: 1 for future, -1 for past. \n"
		""},
	 { "Worldline_getInitialCoord", _wrap_Worldline_getInitialCoord, METH_VARARGS, (char *)"\n"
		"Worldline_getInitialCoord(Worldline self, vector_double dest)\n"
		"\n"
		"\n"
		"\n"
		"Get initial coordinates + base vectors.\n"
		"\n"
		"Depending on the size of dest and on the value of parallel_transport_,\n"
		"get position (xi_), velocity (xidot_) and possibly other triad vectors\n"
		"(epi_ and eti_). \n"
		""},
	 { "Worldline_xStore", _wrap_Worldline_xStore, METH_VARARGS, (char *)"\n"
		"Worldline_xStore(Worldline self, size_t ind, vector_double coord, double tau)\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "Worldline_xFill", _wrap_Worldline_xFill, METH_VARARGS, (char *)"\n"
		"xFill(double tlim, bool proper=False)\n"
		"Worldline_xFill(Worldline self, double tlim)\n"
		"\n"
		"\n"
		"\n"
		"Fill x0, x1... by integrating the Worldline from previously set\n"
		"inittial condition to time tlim. \n"
		""},
	 { "Worldline_get_nelements", _wrap_Worldline_get_nelements, METH_VARARGS, (char *)"\n"
		"Worldline_get_nelements(Worldline self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get number of computed dates. \n"
		""},
	 { "Worldline_get_tau", _wrap_Worldline_get_tau, METH_VARARGS, (char *)"\n"
		"Worldline_get_tau(Worldline self, double * dest)\n"
		"\n"
		"\n"
		"\n"
		"Get computed proper times or values of the affine parameter. \n"
		""},
	 { "Worldline_getCartesian", _wrap_Worldline_getCartesian, METH_VARARGS, (char *)"\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None, double *const yprime=None, double *const zprime=None)\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None, double *const yprime=None)\n"
		"getCartesian(double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z, double *const xprime=None)\n"
		"Worldline_getCartesian(Worldline self, double const *const dates, size_t const n_dates, double *const x, double *const y, double *const z)\n"
		"\n"
		"\n"
		"\n"
		"Get the 6 Cartesian coordinates for specific dates.\n"
		"\n"
		"The 6 coordinates (x, y, z, dx/dt, dy/dt, dz/dt) will be computed\n"
		"using the integrator and interpolated if necessary, so they will be as\n"
		"accurate as possible. Transforming to Cartesian coordinates is not\n"
		"necessarily meaningful.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"dates:  List of dates for which the coordinates are to be computed;\n"
		"\n"
		"n_dates:  Number of dates to compute ;\n"
		"\n"
		"x:  y:  z:  xprime:  yprime:  zprime:  Arrays in which to store the\n"
		"result. These pointer may be set to NULL to retrieve only part of the\n"
		"information. Else, they must be pre- allocated. \n"
		""},
	 { "Worldline_getCoord", _wrap_Worldline_getCoord, METH_VARARGS, (char *)"\n"
		"getCoord(size_t index, vector_double dest)\n"
		"getCoord(size_t index, vector_double dest)\n"
		"getCoord(double date, vector_double dest, bool proper=False)\n"
		"getCoord(double date, vector_double dest)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None, double * ep3=None, double * et0=None, double * et1=None, double * et2=None, double * et3=None, double * otime=None, bool proper=False)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None, double * ep3=None, double * et0=None, double * et1=None, double * et2=None, double * et3=None, double * otime=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None, double * ep3=None, double * et0=None, double * et1=None, double * et2=None, double * et3=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None, double * ep3=None, double * et0=None, double * et1=None, double * et2=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None, double * ep3=None, double * et0=None, double * et1=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None, double * ep3=None, double * et0=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None, double * ep3=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None, double * ep2=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None, double * ep1=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None, double * ep0=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None, double *const x3dot=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None, double *const x2dot=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None, double *const x1dot=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest, double *const x0dot=None)\n"
		"getCoord(double const *const dates, size_t const n_dates, double *const x1dest, double *const x2dest, double *const x3dest)\n"
		"Worldline_getCoord(Worldline self, double * x0, double * x1, double * x2, double * x3)\n"
		"\n"
		"\n"
		"\n"
		"Get all computed positions.\n"
		"\n"
		"Get all the pre-computed 8 coordinates (e.g. thanks to a prior call to\n"
		"xFill()) of this worldline. \n"
		""},
	 { "Worldline_checkPhiTheta", _wrap_Worldline_checkPhiTheta, METH_VARARGS, (char *)"\n"
		"Worldline_checkPhiTheta(Worldline self, double [8] coord)\n"
		"\n"
		"\n"
		"\n"
		"Bring in [0,] and in [0,2].\n"
		"\n"
		"checkPhiTheta() Modifies coord if the corrdinates are spherical-like\n"
		"so that coord[2]=theta is in [0,pi] and coord[3]=phi is in [0,2pi].\n"
		"Important to use in all astrobj in spherical coordinates to prevent\n"
		"\"z-axis problems\". \n"
		""},
	 { "Worldline_save_txyz", _wrap_Worldline_save_txyz, METH_VARARGS, (char *)"\n"
		"save_txyz(char * fichierxyz)\n"
		"save_txyz(char *const filename, double const t1, double const mass_sun, double const distance_kpc, std::string const unit, Gyoto::SmartPointer< Gyoto::Screen > sc=0)\n"
		"Worldline_save_txyz(Worldline self, char *const filename, double const t1, double const mass_sun, double const distance_kpc, std::string const unit)\n"
		"\n"
		"\n"
		"\n"
		"Save, converted. \n"
		""},
	 { "Worldline_get_t", _wrap_Worldline_get_t, METH_VARARGS, (char *)"\n"
		"get_t(double * dest)\n"
		"Worldline_get_t(Worldline self, double * INPLACE_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Get computed dates. \n"
		""},
	 { "Worldline_get_xyz", _wrap_Worldline_get_xyz, METH_VARARGS, (char *)"\n"
		"get_xyz(double * x, double * y, double * z)\n"
		"Worldline_get_xyz(Worldline self, double * x1dest, double * x2dest, double * x3dest)\n"
		"\n"
		"\n"
		"\n"
		"Get 3-position in cartesian coordinates for computed dates. \n"
		""},
	 { "Worldline_getSkyPos", _wrap_Worldline_getSkyPos, METH_VARARGS, (char *)"\n"
		"getSkyPos(Gyoto::SmartPointer< Gyoto::Screen > screen, double * dalpha, double * ddellta, double * dD)\n"
		"Worldline_getSkyPos(Worldline self, Gyoto::SmartPointer< Gyoto::Screen > screen, double * x1dest, double * x2dest, double * x3dest)\n"
		"\n"
		"\n"
		"\n"
		"Get computed positions in sky coordinates. \n"
		""},
	 { "Worldline_get_dot", _wrap_Worldline_get_dot, METH_VARARGS, (char *)"\n"
		"get_dot(double * x0dot, double * x1dot, double * x2dot, double * x3dot)\n"
		"Worldline_get_dot(Worldline self, double * x0dot, double * x1dot, double * x2dot, double * x3dot)\n"
		"\n"
		"\n"
		"\n"
		"Get computed 4-velocities. \n"
		""},
	 { "Worldline_get_prime", _wrap_Worldline_get_prime, METH_VARARGS, (char *)"\n"
		"get_prime(double * x1prime, double * x2prime, double * x3prime)\n"
		"Worldline_get_prime(Worldline self, double * x1dot, double * x2dot, double * x3dot)\n"
		"\n"
		"\n"
		"\n"
		"Get computed 3-velocities. \n"
		""},
	 { "Worldline_getCartesianPos", _wrap_Worldline_getCartesianPos, METH_VARARGS, (char *)"\n"
		"getCartesianPos(size_t index, double [4] dest)\n"
		"Worldline_getCartesianPos(Worldline self, size_t index)\n"
		"\n"
		"\n"
		"\n"
		"Get Cartesian expression of 4-position at index. \n"
		""},
	 { "Worldline_swigregister", Worldline_swigregister, METH_VARARGS, NULL},
	 { "Screen_getProperties", _wrap_Screen_getProperties, METH_VARARGS, (char *)"\n"
		"Screen_getProperties(Screen self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Screen_plugins", _wrap_Screen_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Screen_plugins(Screen self) -> vector_string\n"
		""},
	 { "Screen_isThreadSafe", _wrap_Screen_isThreadSafe, METH_VARARGS, (char *)"\n"
		"Screen_isThreadSafe(Screen self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "new_Screen", _wrap_new_Screen, METH_VARARGS, (char *)"\n"
		"Screen()\n"
		"new_Screen(Screen arg2) -> Screen\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Screen_clone", _wrap_Screen_clone, METH_VARARGS, (char *)"\n"
		"Screen_clone(Screen self) -> Screen\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_Screen", _wrap_delete_Screen, METH_VARARGS, (char *)"\n"
		"delete_Screen(Screen self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Screen_setProjection", _wrap_Screen_setProjection, METH_VARARGS, (char *)"\n"
		"setProjection(double const paln, double const inclination, double const argument)\n"
		"Screen_setProjection(Screen self, double const distance, double const paln, double const inclination, double const argument)\n"
		"\n"
		"\n"
		"\n"
		"Set distance, inclination etc. \n"
		""},
	 { "Screen_spectrometer", _wrap_Screen_spectrometer, METH_VARARGS, (char *)"\n"
		"spectrometer(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > spectro)\n"
		"Screen_spectrometer(Screen self) -> Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get Screen::spectro_. \n"
		""},
	 { "Screen_freqObs", _wrap_Screen_freqObs, METH_VARARGS, (char *)"\n"
		"freqObs(double fo)\n"
		"freqObs(double fo, std::string const & unit)\n"
		"freqObs() -> double\n"
		"Screen_freqObs(Screen self, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get freq_obs_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"unit:  string: unit in which freq_obs_ should be returned is\n"
		"expressed, convertible to Herz or meters or energy. \n"
		""},
	 { "Screen_setObserverPos", _wrap_Screen_setObserverPos, METH_VARARGS, (char *)"\n"
		"Screen_setObserverPos(Screen self, double const [4] pos)\n"
		"\n"
		"\n"
		"\n"
		"Alternative way to set projection.\n"
		"\n"
		"Beware : paln can not be set this way, setting later other parameters\n"
		"change the observer's coordinates. For observationnal ray-tracing\n"
		"purposes, prefer setProjection().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  position of observer in Screen's coordinate system. Content is\n"
		"copied. \n"
		""},
	 { "Screen_observerKind", _wrap_Screen_observerKind, METH_VARARGS, (char *)"\n"
		"observerKind(std::string const & kind)\n"
		"Screen_observerKind(Screen self) -> std::string\n"
		""},
	 { "Screen_setFourVel", _wrap_Screen_setFourVel, METH_VARARGS, (char *)"\n"
		"Screen_setFourVel(Screen self, double const [4] coord)\n"
		"\n"
		"\n"
		"\n"
		"Sets the observer's 4-velocity. \n"
		""},
	 { "Screen_setScreen1", _wrap_Screen_setScreen1, METH_VARARGS, (char *)"\n"
		"Screen_setScreen1(Screen self, double const [4] coord)\n"
		"\n"
		"\n"
		"\n"
		"Sets the screen vector e1. \n"
		""},
	 { "Screen_setScreen2", _wrap_Screen_setScreen2, METH_VARARGS, (char *)"\n"
		"Screen_setScreen2(Screen self, double const [4] coord)\n"
		"\n"
		"\n"
		"\n"
		"Sets the screen vector e2. \n"
		""},
	 { "Screen_setScreen3", _wrap_Screen_setScreen3, METH_VARARGS, (char *)"\n"
		"Screen_setScreen3(Screen self, double const [4] coord)\n"
		"\n"
		"\n"
		"\n"
		"Sets the screen vector e3 (normal) \n"
		""},
	 { "Screen_coordKind", _wrap_Screen_coordKind, METH_VARARGS, (char *)"\n"
		"Screen_coordKind(Screen self) -> int\n"
		"\n"
		"\n"
		"\n"
		"Get coordinate kind.\n"
		"\n"
		"From Screen::gg_. \n"
		""},
	 { "Screen_distance", _wrap_Screen_distance, METH_VARARGS, (char *)"\n"
		"distance(double dist)\n"
		"distance(double dist, std::string const & unit)\n"
		"distance() -> double\n"
		"Screen_distance(Screen self, std::string const & arg3) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get distance from observer.\n"
		"\n"
		"In specified unit. Get distance from observer \n"
		""},
	 { "Screen_dMax", _wrap_Screen_dMax, METH_VARARGS, (char *)"\n"
		"dMax(double dist)\n"
		"Screen_dMax(Screen self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get maximum ray-tracing distance.\n"
		"\n"
		"In geometrical units. \n"
		""},
	 { "Screen_inclination", _wrap_Screen_inclination, METH_VARARGS, (char *)"\n"
		"inclination(double arg2)\n"
		"inclination(double arg2, std::string const & unit)\n"
		"inclination() -> double\n"
		"Screen_inclination(Screen self, std::string const & arg3) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get inclination relative to line-of-sight.\n"
		"\n"
		"Inclination of z-axis relative to line-of-sight, or inclination of\n"
		"equatorial plane relative to plane of the sky, in specified unit. \n"
		""},
	 { "Screen_PALN", _wrap_Screen_PALN, METH_VARARGS, (char *)"\n"
		"PALN(double arg2)\n"
		"PALN(double arg2, std::string const & unit)\n"
		"PALN() -> double\n"
		"Screen_PALN(Screen self, std::string const & arg3) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get position angle of the line of nodes. \n"
		""},
	 { "Screen_argument", _wrap_Screen_argument, METH_VARARGS, (char *)"\n"
		"argument(double arg2)\n"
		"argument(double arg2, std::string const & unit)\n"
		"argument() -> double\n"
		"Screen_argument(Screen self, std::string const & arg3) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get angle between line of nodes and X axis of object. \n"
		""},
	 { "Screen_metric", _wrap_Screen_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"Screen_metric(Screen self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"\n"
		"\n"
		"\n"
		"Set Screen::gg_. \n"
		""},
	 { "Screen_time", _wrap_Screen_time, METH_VARARGS, (char *)"\n"
		"time() -> double\n"
		"time(std::string const & arg2) -> double\n"
		"time(double arg2, std::string const & arg3)\n"
		"Screen_time(Screen self, double arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set observing date in seconds. \n"
		""},
	 { "Screen_fieldOfView", _wrap_Screen_fieldOfView, METH_VARARGS, (char *)"\n"
		"fieldOfView() -> double\n"
		"fieldOfView(std::string const & unit) -> double\n"
		"fieldOfView(double arg2)\n"
		"Screen_fieldOfView(Screen self, double arg3, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set Screen::fov_ in specified unit. \n"
		""},
	 { "Screen_azimuthalFieldOfView", _wrap_Screen_azimuthalFieldOfView, METH_VARARGS, (char *)"\n"
		"azimuthalFieldOfView() -> double\n"
		"Screen_azimuthalFieldOfView(Screen self, double ff)\n"
		"\n"
		"\n"
		"\n"
		"Set Screen::azimuthal_fov_. \n"
		""},
	 { "Screen_dangle1", _wrap_Screen_dangle1, METH_VARARGS, (char *)"\n"
		"dangle1(double arg2)\n"
		"dangle1(double arg2, std::string const & unit)\n"
		"dangle1() -> double\n"
		"Screen_dangle1(Screen self, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get increment to first position angle in specified unit. \n"
		""},
	 { "Screen_dangle2", _wrap_Screen_dangle2, METH_VARARGS, (char *)"\n"
		"dangle2(double arg2)\n"
		"dangle2(double arg2, std::string const & unit)\n"
		"dangle2() -> double\n"
		"Screen_dangle2(Screen self, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get increment to second position angle in specified unit. \n"
		""},
	 { "Screen_anglekind", _wrap_Screen_anglekind, METH_VARARGS, (char *)"\n"
		"anglekind(int arg2)\n"
		"anglekind(std::string const & arg2)\n"
		"Screen_anglekind(Screen self) -> std::string\n"
		""},
	 { "Screen_resolution", _wrap_Screen_resolution, METH_VARARGS, (char *)"\n"
		"resolution() -> size_t\n"
		"Screen_resolution(Screen self, size_t arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set Screen::npix_. \n"
		""},
	 { "Screen_mask", _wrap_Screen_mask, METH_VARARGS, (char *)"\n"
		"mask(double const *const mm, size_t resolution=0)\n"
		"mask(double const *const mm)\n"
		"Screen_mask(Screen self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Retrieve const pointer to mask_. \n"
		""},
	 { "Screen_maskFile", _wrap_Screen_maskFile, METH_VARARGS, (char *)"\n"
		"maskFile(std::string const & fname)\n"
		"Screen_maskFile(Screen self) -> std::string\n"
		""},
	 { "Screen_fitsReadMask", _wrap_Screen_fitsReadMask, METH_VARARGS, (char *)"Screen_fitsReadMask(Screen self, std::string const & fname)"},
	 { "Screen_fitsWriteMask", _wrap_Screen_fitsWriteMask, METH_VARARGS, (char *)"Screen_fitsWriteMask(Screen self, std::string const & fname)"},
	 { "Screen___call__", _wrap_Screen___call__, METH_VARARGS, (char *)"Screen___call__(Screen self, size_t arg3, size_t arg4) -> bool"},
	 { "Screen_fourVel", _wrap_Screen_fourVel, METH_VARARGS, (char *)"\n"
		"fourVel(vector_double arg2)\n"
		"Screen_fourVel(Screen self) -> vector_double\n"
		""},
	 { "Screen_screenVector1", _wrap_Screen_screenVector1, METH_VARARGS, (char *)"\n"
		"screenVector1(vector_double arg2)\n"
		"Screen_screenVector1(Screen self) -> vector_double\n"
		""},
	 { "Screen_screenVector2", _wrap_Screen_screenVector2, METH_VARARGS, (char *)"\n"
		"screenVector2(vector_double arg2)\n"
		"Screen_screenVector2(Screen self) -> vector_double\n"
		""},
	 { "Screen_screenVector3", _wrap_Screen_screenVector3, METH_VARARGS, (char *)"\n"
		"screenVector3(vector_double arg2)\n"
		"Screen_screenVector3(Screen self) -> vector_double\n"
		""},
	 { "Screen_getScreen1", _wrap_Screen_getScreen1, METH_VARARGS, (char *)"\n"
		"Screen_getScreen1(Screen self, double [4] dest)\n"
		"\n"
		"\n"
		"\n"
		"Get copy of Screen::screen1_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"dest:  preallocated 4-element array \n"
		""},
	 { "Screen_getScreen2", _wrap_Screen_getScreen2, METH_VARARGS, (char *)"\n"
		"Screen_getScreen2(Screen self, double [4] dest)\n"
		"\n"
		"\n"
		"\n"
		"Get copy of Screen::screen2_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"dest:  preallocated 4-element array \n"
		""},
	 { "Screen_getScreen3", _wrap_Screen_getScreen3, METH_VARARGS, (char *)"\n"
		"Screen_getScreen3(Screen self, double [4] dest)\n"
		"\n"
		"\n"
		"\n"
		"Get copy of Screen::screen3_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"dest:  preallocated 4-element array \n"
		""},
	 { "Screen_getRayTriad", _wrap_Screen_getRayTriad, METH_VARARGS, (char *)"\n"
		"getRayTriad(double x, double y, double [8] dest, bool compute_polar_basis=False, double [4] Ephi=0, double [4] Etheta=0)\n"
		"getRayTriad(double x, double y, double [8] dest, bool compute_polar_basis=False, double [4] Ephi=0)\n"
		"getRayTriad(double x, double y, double [8] dest, bool compute_polar_basis=False)\n"
		"getRayTriad(double x, double y, double [8] dest)\n"
		"getRayTriad(size_t const i, size_t const j, double [8] dest, bool compute_polar_basis=False, double [4] Ephi=0, double [4] Etheta=0)\n"
		"getRayTriad(size_t const i, size_t const j, double [8] dest, bool compute_polar_basis=False, double [4] Ephi=0)\n"
		"getRayTriad(size_t const i, size_t const j, double [8] dest, bool compute_polar_basis=False)\n"
		"Screen_getRayTriad(Screen self, size_t const i, size_t const j, double [8] dest)\n"
		"\n"
		"\n"
		"\n"
		"Get 8-coordinate of Photon hitting screen pixel and polarization basis\n"
		"if needed.\n"
		"\n"
		"Similar to Screen::getObserverPos() but will return in addition the\n"
		"4-velocity of a photon corresponding to the sky direction given by x\n"
		"and y.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  j:  pixel coordinates\n"
		"\n"
		"dest:  position-velocity of the Photon. Preallocated.\n"
		"\n"
		"compute_polar_basis:  True if polarization basis Ephi,Etheta is needed\n"
		"\n"
		"Ephi:  first polarisation direction. Preallocated. Default: NULL.\n"
		"\n"
		"Etheta:  second polarisation direction. Preallocated. Default: NULL.\n"
		"\n"
		""},
	 { "Screen_coordToSky", _wrap_Screen_coordToSky, METH_VARARGS, (char *)"\n"
		"coordToSky(double const [4] pos, double [3] dest, bool geometrical=False)\n"
		"Screen_coordToSky(Screen self, double const [4] pos, double [3] dest)\n"
		"\n"
		"\n"
		"\n"
		"Convert metric 4-position to sky 3-position.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position in metric coordinates.\n"
		"\n"
		"dest:  3-position in plane of the sky: Cartesian East, North, front.\n"
		"\n"
		"geometrical:  if true, #dest will be in geometrical units instead of\n"
		"meters. \n"
		""},
	 { "Screen_skyToCoord", _wrap_Screen_skyToCoord, METH_VARARGS, (char *)"\n"
		"skyToCoord(double const [3] sky, double [4] dest, bool geometrical=False)\n"
		"Screen_skyToCoord(Screen self, double const [3] sky, double [4] dest)\n"
		"\n"
		"\n"
		"\n"
		"Convert sky 3-position to metric 4-position.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"sky:  3-position in plane of the sky.\n"
		"\n"
		"dest:  4-position in metric coordinates (dest[0] is not modified).\n"
		"\n"
		"geometrical:  set to true if #sky is in geometrical units instead of\n"
		"meters. \n"
		""},
	 { "Screen_coordToXYZ", _wrap_Screen_coordToXYZ, METH_VARARGS, (char *)"\n"
		"Screen_coordToXYZ(Screen self, double const [4] pos, double [3] dest)\n"
		"\n"
		"\n"
		"\n"
		"Convert 4-position to 3-cartesian coordinates. \n"
		""},
	 { "Screen_computeBaseVectors", _wrap_Screen_computeBaseVectors, METH_VARARGS, (char *)"\n"
		"Screen_computeBaseVectors(Screen self)\n"
		"\n"
		"\n"
		"\n"
		"Compute base vectors according to projection parameters. \n"
		""},
	 { "Screen__print", _wrap_Screen__print, METH_VARARGS, (char *)"\n"
		"Screen__print(Screen self, std::ostream & arg3) -> std::ostream &\n"
		"\n"
		"\n"
		"\n"
		"Display.\n"
		"\n"
		"Debug helper \n"
		""},
	 { "Screen_printBaseVectors", _wrap_Screen_printBaseVectors, METH_VARARGS, (char *)"\n"
		"Screen_printBaseVectors(Screen self, std::ostream & arg3) -> std::ostream &\n"
		"\n"
		"\n"
		"\n"
		"Debug helper. \n"
		""},
	 { "Screen_mapPixUnit", _wrap_Screen_mapPixUnit, METH_VARARGS, (char *)"Screen_mapPixUnit(Screen self)"},
	 { "Screen_unmapPixUnit", _wrap_Screen_unmapPixUnit, METH_VARARGS, (char *)"Screen_unmapPixUnit(Screen self)"},
	 { "Screen_fillProperty", _wrap_Screen_fillProperty, METH_VARARGS, (char *)"\n"
		"Screen_fillProperty(Screen self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "Screen_Subcontractor", _wrap_Screen_Subcontractor, METH_VARARGS, (char *)"Screen_Subcontractor(FactoryMessenger fmp) -> Gyoto::SmartPointer< Gyoto::Screen >"},
	 { "Screen_getObserverPos", _wrap_Screen_getObserverPos, METH_VARARGS, (char *)"\n"
		"getObserverPos(double [4] dest)\n"
		"Screen_getObserverPos(Screen self)\n"
		"\n"
		"\n"
		"\n"
		"4-Position of the observer relative to the metric\n"
		"\n"
		"A Screen is positioned relative to the observer with four elements:\n"
		"Screen::distance, Screen::inclination, Screen::paln and\n"
		"Screen::argument.\n"
		"\n"
		"This function returns the position of the observer relative to the\n"
		"metric system in Screen::gg_, using these parameters. The output\n"
		"parameter is coord.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  position of the observer. Must be preallocated. \n"
		""},
	 { "Screen_getFourVel", _wrap_Screen_getFourVel, METH_VARARGS, (char *)"\n"
		"getFourVel(double [4] dest)\n"
		"Screen_getFourVel(Screen self)\n"
		"\n"
		"\n"
		"\n"
		"Get copy of Screen::fourvel_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fourvel:  preallocated 4-element array \n"
		""},
	 { "Screen___str__", _wrap_Screen___str__, METH_VARARGS, (char *)"Screen___str__(Screen self) -> std::string"},
	 { "Screen_swigregister", Screen_swigregister, METH_VARARGS, NULL},
	 { "Scenery_isThreadSafe", _wrap_Scenery_isThreadSafe, METH_VARARGS, (char *)"\n"
		"Scenery_isThreadSafe(Scenery self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "Scenery_mpi_team__set", _wrap_Scenery_mpi_team__set, METH_VARARGS, (char *)"Scenery_mpi_team__set(Scenery self, boost::mpi::communicator * mpi_team_)"},
	 { "Scenery_mpi_team__get", _wrap_Scenery_mpi_team__get, METH_VARARGS, (char *)"Scenery_mpi_team__get(Scenery self) -> boost::mpi::communicator *"},
	 { "Scenery_am_worker_get", _wrap_Scenery_am_worker_get, METH_VARARGS, NULL},
	 { "Scenery_am_worker_set", _wrap_Scenery_am_worker_set, METH_VARARGS, NULL},
	 { "Scenery_mpiSpawn", _wrap_Scenery_mpiSpawn, METH_VARARGS, (char *)"\n"
		"Scenery_mpiSpawn(Scenery self, int nbchildren)\n"
		"\n"
		"\n"
		"\n"
		"Spawn gyoto-mpi-worker processes.\n"
		"\n"
		"If nbchildren is -1 set #mpi_team_ to MPI_COMM_WORLD else spawn\n"
		"nbchildren processes and set nprocesses_ accordingly. If a different\n"
		"number of workers are already running, terminate them first. If\n"
		"nbchildren is 0, just terminate running workers.\n"
		"\n"
		"The approach of Gyoto to MPI is that a manager process (of rank 0\n"
		"within a given MPI communicator) will distribute ray-tracing tasks\n"
		"across worker processes. Several scenarii are supported, including\n"
		"spawning instances of the gyoto-mpi-worker.version executable, where\n"
		"\"version\" matches the version component in the library name\n"
		"(typically a number, possibly followed by \"unreleased\").\n"
		"\n"
		"In all cases, the manager process needs to call this function, either\n"
		"with -1 if the worker processes are already running or >1 if workers\n"
		"need to be spawned.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nbchildren:  number of processes to spawn. \n"
		""},
	 { "Scenery_mpiTerminate", _wrap_Scenery_mpiTerminate, METH_VARARGS, (char *)"\n"
		"Scenery_mpiTerminate(Scenery self)\n"
		"\n"
		"\n"
		"\n"
		"Terminate worker processes. \n"
		""},
	 { "Scenery_mpiClone", _wrap_Scenery_mpiClone, METH_VARARGS, (char *)"\n"
		"Scenery_mpiClone(Scenery self)\n"
		"\n"
		"\n"
		"\n"
		"Send a copy of self to the mpi workers.\n"
		"\n"
		"Always call mpiClone() before ray-tracing if workers are running. \n"
		""},
	 { "Scenery_mpiTask", _wrap_Scenery_mpiTask, METH_VARARGS, (char *)"\n"
		"Scenery_mpiTask(Scenery self, Gyoto::Scenery::mpi_tag & tag)\n"
		"\n"
		"\n"
		"\n"
		"Send a tag to workers. \n"
		""},
	 { "Scenery_mpiWorker", _wrap_Scenery_mpiWorker, METH_VARARGS, (char *)"Scenery_mpiWorker()"},
	 { "Scenery_getProperties", _wrap_Scenery_getProperties, METH_VARARGS, (char *)"\n"
		"Scenery_getProperties(Scenery self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Scenery_plugins", _wrap_Scenery_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Scenery_plugins(Scenery self) -> vector_string\n"
		""},
	 { "Scenery__delta", _wrap_Scenery__delta, METH_VARARGS, (char *)"\n"
		"_delta(double const delta)\n"
		"_delta(double arg2, std::string const & unit)\n"
		"_delta() -> double\n"
		"Scenery__delta(Scenery self, std::string const & unit) -> double\n"
		""},
	 { "Scenery__tMin", _wrap_Scenery__tMin, METH_VARARGS, (char *)"\n"
		"_tMin(double const tmin)\n"
		"_tMin(double arg2, std::string const & unit)\n"
		"_tMin() -> double\n"
		"Scenery__tMin(Scenery self, std::string const & unit) -> double\n"
		""},
	 { "Scenery__adaptive", _wrap_Scenery__adaptive, METH_VARARGS, (char *)"\n"
		"_adaptive(bool mode)\n"
		"Scenery__adaptive(Scenery self) -> bool\n"
		""},
	 { "Scenery__secondary", _wrap_Scenery__secondary, METH_VARARGS, (char *)"\n"
		"_secondary(bool sec)\n"
		"Scenery__secondary(Scenery self) -> bool\n"
		""},
	 { "Scenery__integ31", _wrap_Scenery__integ31, METH_VARARGS, (char *)"\n"
		"_integ31(bool sec)\n"
		"Scenery__integ31(Scenery self) -> bool\n"
		""},
	 { "Scenery__parallelTransport", _wrap_Scenery__parallelTransport, METH_VARARGS, (char *)"\n"
		"_parallelTransport(bool sec)\n"
		"Scenery__parallelTransport(Scenery self) -> bool\n"
		""},
	 { "Scenery__maxiter", _wrap_Scenery__maxiter, METH_VARARGS, (char *)"\n"
		"_maxiter(size_t miter)\n"
		"Scenery__maxiter(Scenery self) -> size_t\n"
		""},
	 { "Scenery__integrator", _wrap_Scenery__integrator, METH_VARARGS, (char *)"\n"
		"_integrator(std::string const & type)\n"
		"Scenery__integrator(Scenery self) -> std::string\n"
		""},
	 { "Scenery__deltaMin", _wrap_Scenery__deltaMin, METH_VARARGS, (char *)"\n"
		"_deltaMin() -> double\n"
		"Scenery__deltaMin(Scenery self, double h1)\n"
		""},
	 { "Scenery__absTol", _wrap_Scenery__absTol, METH_VARARGS, (char *)"\n"
		"_absTol(double arg2)\n"
		"Scenery__absTol(Scenery self) -> double\n"
		""},
	 { "Scenery__maxCrossEqplane", _wrap_Scenery__maxCrossEqplane, METH_VARARGS, (char *)"\n"
		"_maxCrossEqplane(double arg2)\n"
		"Scenery__maxCrossEqplane(Scenery self) -> double\n"
		""},
	 { "Scenery__relTol", _wrap_Scenery__relTol, METH_VARARGS, (char *)"\n"
		"_relTol(double arg2)\n"
		"Scenery__relTol(Scenery self) -> double\n"
		""},
	 { "Scenery__deltaMax", _wrap_Scenery__deltaMax, METH_VARARGS, (char *)"\n"
		"_deltaMax(double h1)\n"
		"Scenery__deltaMax(Scenery self) -> double\n"
		""},
	 { "Scenery__deltaMaxOverR", _wrap_Scenery__deltaMaxOverR, METH_VARARGS, (char *)"\n"
		"_deltaMaxOverR() -> double\n"
		"Scenery__deltaMaxOverR(Scenery self, double t)\n"
		""},
	 { "Scenery__initCoord", _wrap_Scenery__initCoord, METH_VARARGS, (char *)"\n"
		"_initCoord() -> vector_double\n"
		"Scenery__initCoord(Scenery self, vector_double f)\n"
		""},
	 { "Scenery__metric", _wrap_Scenery__metric, METH_VARARGS, (char *)"\n"
		"_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"Scenery__metric(Scenery self) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		""},
	 { "Scenery_clone", _wrap_Scenery_clone, METH_VARARGS, (char *)"\n"
		"Scenery_clone(Scenery self) -> Scenery\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "new_Scenery", _wrap_new_Scenery, METH_VARARGS, (char *)"\n"
		"Scenery()\n"
		"Scenery(Scenery o)\n"
		"new_Scenery(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2, Gyoto::SmartPointer< Gyoto::Screen > arg3, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > arg4) -> Scenery\n"
		"\n"
		"\n"
		"\n"
		"Constructor setting Scenery::gg_, Scenery::screen_, and Scenery::obj_.\n"
		"\n"
		"To ensure consistency, the Metric will be forcibly attached to the\n"
		"Screen and to the Astrobj (if they are not NULL). \n"
		""},
	 { "delete_Scenery", _wrap_delete_Scenery, METH_VARARGS, (char *)"delete_Scenery(Scenery self)"},
	 { "Scenery_metric", _wrap_Scenery_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"Scenery_metric(Scenery self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set Scenery::gg_.\n"
		"\n"
		"The provided Metric will also be atached to the Screen and the\n"
		"Astrobj. \n"
		""},
	 { "Scenery_screen", _wrap_Scenery_screen, METH_VARARGS, (char *)"\n"
		"screen() -> Gyoto::SmartPointer< Gyoto::Screen >\n"
		"Scenery_screen(Scenery self, Gyoto::SmartPointer< Gyoto::Screen > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set Scenery::screen_.\n"
		"\n"
		"The Metric attached to the Scenery will be attached to the Screen \n"
		""},
	 { "Scenery_astrobj", _wrap_Scenery_astrobj, METH_VARARGS, (char *)"\n"
		"astrobj() -> Gyoto::SmartPointer< Gyoto::Astrobj::Generic >\n"
		"Scenery_astrobj(Scenery self, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set ph_.obj_.\n"
		"\n"
		"The Metric attached to the Scenery will be attached to the Astrobj \n"
		""},
	 { "Scenery_clonePhoton", _wrap_Scenery_clonePhoton, METH_VARARGS, (char *)"\n"
		"clonePhoton() -> Gyoto::SmartPointer< Photon >\n"
		"clonePhoton(size_t i, size_t j) -> Gyoto::SmartPointer< Photon >\n"
		"Scenery_clonePhoton(Scenery self, double a, double d) -> Gyoto::SmartPointer< Photon >\n"
		"\n"
		"\n"
		"\n"
		"Get clone of template Photon, intitializing it to direction. \n"
		""},
	 { "Scenery_updatePhoton", _wrap_Scenery_updatePhoton, METH_VARARGS, (char *)"\n"
		"Scenery_updatePhoton(Scenery self)\n"
		"\n"
		"\n"
		"\n"
		"Update values in cached Photon. \n"
		""},
	 { "Scenery_delta", _wrap_Scenery_delta, METH_VARARGS, (char *)"\n"
		"delta() -> double\n"
		"delta(std::string const & unit) -> double\n"
		"delta(double arg2)\n"
		"Scenery_delta(Scenery self, double arg3, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"set default step in specified units \n"
		""},
	 { "Scenery_initCoord", _wrap_Scenery_initCoord, METH_VARARGS, (char *)"\n"
		"initCoord(vector_double c)\n"
		"Scenery_initCoord(Scenery self) -> vector_double\n"
		""},
	 { "Scenery_setRequestedQuantities", _wrap_Scenery_setRequestedQuantities, METH_VARARGS, (char *)"\n"
		"Scenery_setRequestedQuantities(Scenery self, Gyoto::Quantity_t quant)\n"
		"\n"
		"\n"
		"\n"
		"Set Scenery::quantities_.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"quant:  Bitwise OR of desired quantities, e.g. \n"
		""},
	 { "Scenery_getRequestedQuantities", _wrap_Scenery_getRequestedQuantities, METH_VARARGS, (char *)"\n"
		"Scenery_getRequestedQuantities(Scenery self) -> Gyoto::Quantity_t\n"
		"\n"
		"\n"
		"\n"
		"Get Scenery::quantities_. \n"
		""},
	 { "Scenery_requestedQuantitiesString", _wrap_Scenery_requestedQuantitiesString, METH_VARARGS, (char *)"\n"
		"requestedQuantitiesString(std::string const & squant)\n"
		"Scenery_requestedQuantitiesString(Scenery self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Get a string representation of Scenery::quantities_. \n"
		""},
	 { "Scenery_getScalarQuantitiesCount", _wrap_Scenery_getScalarQuantitiesCount, METH_VARARGS, (char *)"\n"
		"getScalarQuantitiesCount(Gyoto::Quantity_t * q=None) -> size_t\n"
		"Scenery_getScalarQuantitiesCount(Scenery self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get number of requested quantities of scalar nature.\n"
		"\n"
		"This is all quantities except Spectrum, BinSpectrum and ImpactCoords.\n"
		"\n"
		""},
	 { "Scenery_getSpectralQuantitiesCount", _wrap_Scenery_getSpectralQuantitiesCount, METH_VARARGS, (char *)"\n"
		"getSpectralQuantitiesCount(Gyoto::Quantity_t * q=None) -> size_t\n"
		"Scenery_getSpectralQuantitiesCount(Scenery self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get number of requested quantities of spectral nature.\n"
		"\n"
		"This is Spectrum, SpectrumStokesQ, SpectrumStokesU, SpectrumStokesV\n"
		"and BinSpectrum. \n"
		""},
	 { "Scenery_tMin", _wrap_Scenery_tMin, METH_VARARGS, (char *)"\n"
		"tMin() -> double\n"
		"tMin(std::string const & unit) -> double\n"
		"tMin(double arg2)\n"
		"Scenery_tMin(Scenery self, double arg3, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set ph_.tmin_ in specified unit. \n"
		""},
	 { "Scenery_adaptive", _wrap_Scenery_adaptive, METH_VARARGS, (char *)"\n"
		"adaptive(bool mode)\n"
		"Scenery_adaptive(Scenery self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get ph_.adaptive_. \n"
		""},
	 { "Scenery_integrator", _wrap_Scenery_integrator, METH_VARARGS, (char *)"\n"
		"integrator(std::string type)\n"
		"Scenery_integrator(Scenery self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Passed to ph_. \n"
		""},
	 { "Scenery_deltaMin", _wrap_Scenery_deltaMin, METH_VARARGS, (char *)"\n"
		"deltaMin() -> double\n"
		"Scenery_deltaMin(Scenery self, double h1)\n"
		"\n"
		"\n"
		"\n"
		"Passed to ph_. \n"
		""},
	 { "Scenery_deltaMax", _wrap_Scenery_deltaMax, METH_VARARGS, (char *)"\n"
		"deltaMax() -> double\n"
		"Scenery_deltaMax(Scenery self, double h1)\n"
		"\n"
		"\n"
		"\n"
		"Passed to ph_. \n"
		""},
	 { "Scenery_deltaMaxOverR", _wrap_Scenery_deltaMaxOverR, METH_VARARGS, (char *)"\n"
		"deltaMaxOverR() -> double\n"
		"Scenery_deltaMaxOverR(Scenery self, double t)\n"
		"\n"
		"\n"
		"\n"
		"Passed to ph_. \n"
		""},
	 { "Scenery_absTol", _wrap_Scenery_absTol, METH_VARARGS, (char *)"\n"
		"absTol(double arg2)\n"
		"Scenery_absTol(Scenery self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Passed to ph_. \n"
		""},
	 { "Scenery_relTol", _wrap_Scenery_relTol, METH_VARARGS, (char *)"\n"
		"relTol(double arg2)\n"
		"Scenery_relTol(Scenery self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Passed to ph_. \n"
		""},
	 { "Scenery_maxCrossEqplane", _wrap_Scenery_maxCrossEqplane, METH_VARARGS, (char *)"\n"
		"maxCrossEqplane(double arg2)\n"
		"Scenery_maxCrossEqplane(Scenery self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Passed to ph_. \n"
		""},
	 { "Scenery_secondary", _wrap_Scenery_secondary, METH_VARARGS, (char *)"\n"
		"secondary(bool sec)\n"
		"Scenery_secondary(Scenery self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get ph_.secondary_. \n"
		""},
	 { "Scenery_integ31", _wrap_Scenery_integ31, METH_VARARGS, (char *)"\n"
		"integ31(bool integ)\n"
		"Scenery_integ31(Scenery self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get WorldlinIntegState integ_31_. \n"
		""},
	 { "Scenery_parallelTransport", _wrap_Scenery_parallelTransport, METH_VARARGS, (char *)"\n"
		"parallelTransport(bool pt)\n"
		"Scenery_parallelTransport(Scenery self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Get ph_.parallel_transport_. \n"
		""},
	 { "Scenery_maxiter", _wrap_Scenery_maxiter, METH_VARARGS, (char *)"\n"
		"maxiter(size_t miter)\n"
		"Scenery_maxiter(Scenery self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get ph_.maxiter_. \n"
		""},
	 { "Scenery_nThreads", _wrap_Scenery_nThreads, METH_VARARGS, (char *)"\n"
		"nThreads(size_t arg2)\n"
		"Scenery_nThreads(Scenery self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get nthreads_;. \n"
		""},
	 { "Scenery_nProcesses", _wrap_Scenery_nProcesses, METH_VARARGS, (char *)"\n"
		"nProcesses(size_t arg2)\n"
		"Scenery_nProcesses(Scenery self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get nprocesses_;. \n"
		""},
	 { "Scenery_intensityConverter", _wrap_Scenery_intensityConverter, METH_VARARGS, (char *)"\n"
		"Scenery_intensityConverter(Scenery self, std::string unit)\n"
		"\n"
		"\n"
		"\n"
		"Set Scenery::intensity_converter_. \n"
		""},
	 { "Scenery_spectrumConverter", _wrap_Scenery_spectrumConverter, METH_VARARGS, (char *)"\n"
		"Scenery_spectrumConverter(Scenery self, std::string unit)\n"
		"\n"
		"\n"
		"\n"
		"Set Scenery::spectrum_converter_. \n"
		""},
	 { "Scenery_binSpectrumConverter", _wrap_Scenery_binSpectrumConverter, METH_VARARGS, (char *)"\n"
		"Scenery_binSpectrumConverter(Scenery self, std::string unit)\n"
		"\n"
		"\n"
		"\n"
		"Set Scenery::binspectrum_converter_. \n"
		""},
	 { "Scenery_setPropertyConverters", _wrap_Scenery_setPropertyConverters, METH_VARARGS, (char *)"\n"
		"Scenery_setPropertyConverters(Scenery self, AstrobjProperties prop)\n"
		"\n"
		"\n"
		"\n"
		"Copy converters to Astrobj::Properties instance.\n"
		"\n"
		"Copy Scenery::intensity_converter_, Scenery::spectrum_converter_ and\n"
		"Scenery::binspectrum_converter_ to there alter ego in *prop. \n"
		""},
	 { "Scenery_rayTrace", _wrap_Scenery_rayTrace, METH_VARARGS, (char *)"\n"
		"rayTrace(Coord2dSet ij, AstrobjProperties data, double * impactcoords=None)\n"
		"Scenery_rayTrace(Scenery self, Coord2dSet ij, AstrobjProperties data)\n"
		"\n"
		"\n"
		"\n"
		"Perform ray-tracing.\n"
		"\n"
		"For each directions specified, launch a Photon back in time to compute\n"
		"the various quantities.\n"
		"\n"
		"At this time, the computed quantities depend on on the pointers in\n"
		"*data which are not NULL.\n"
		"\n"
		"rayTrace() uses  setPropertyConverters() to set the converters in\n"
		"*data;\n"
		"\n"
		"Astrobj::Properties::init() to initialize each cell in *data;\n"
		"\n"
		"Astrobj::Properties::operator++() to step through the arrays in *data.\n"
		"\n"
		"data must have been instantiated prior to calling rayTrace and the\n"
		"various pointers in *data must be NULL or point to the first cell in\n"
		"an array of size at least Screen::npix_ squared.\n"
		"\n"
		"If MPI support is built-in, MPI_Init() has been called, and\n"
		"nprocesses_ is1, then rayTrace() will use several processes, launching\n"
		"them using mpiSpawn() if necessary.\n"
		"\n"
		"Else, if Scenery::nthreads_ is2 and Gyoto has been compiled with\n"
		"pthreads support, rayTrace() will use Scenery::nthreads_ threads and\n"
		"launch photons in parallel. This works only if the\n"
		"Astrobj::Generic::clone() and Metric::Generic::clone() methods have\n"
		"been properly implemented for the specific astrobj and metric kind,\n"
		"and if they are both thread-safe. At the moment, unfortunately, Lorene\n"
		"metrics are known to not be thread-safe.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ij:   Screen::Coord2dSet specification of rays to trace. e.g.:\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"data:  Pointer to a preallocated Astrobj::Properties instance which\n"
		"sets which quantities must be computed and where to store the output.\n"
		"\n"
		"impactcoords:  Optional pointer to an array of pre-computed impact\n"
		"coordinates. If impactcoords is provided, rayTracing is skipped and\n"
		"the quantities in *data are fill assuming that the impact coordinates\n"
		"are correct. This only makes sense in optically thick mode, when ray-\n"
		"tracing several sceneries for which the shape of the object is\n"
		"identical but their emission distributions are not. impactcoords can\n"
		"be computed using the ImpactCoords quantity. \n"
		""},
	 { "Scenery___call__", _wrap_Scenery___call__, METH_VARARGS, (char *)"\n"
		"__call__(size_t i, size_t j, AstrobjProperties data, double * impactcoords=None, Photon * ph=None)\n"
		"__call__(size_t i, size_t j, AstrobjProperties data, double * impactcoords=None)\n"
		"__call__(size_t i, size_t j, AstrobjProperties data)\n"
		"__call__(double alpha, double delta, AstrobjProperties data, Photon * ph=None)\n"
		"Scenery___call__(Scenery self, double alpha, double delta, AstrobjProperties data)\n"
		""},
	 { "Scenery_fillProperty", _wrap_Scenery_fillProperty, METH_VARARGS, (char *)"\n"
		"Scenery_fillProperty(Scenery self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "Scenery_fillElement", _wrap_Scenery_fillElement, METH_VARARGS, (char *)"\n"
		"Scenery_fillElement(Scenery self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Fill the XML element for this Object.\n"
		"\n"
		"The base implementation simply calls fillProperty() for each Property\n"
		"defined for the Object.\n"
		"\n"
		"Derived classes should avoid overriding fillElement(). It may make\n"
		"sense occasionally, e.g. to make sure that the metric is output first.\n"
		"\n"
		"To customize how a given Property is rendered, it is better to\n"
		"override fillProperty().\n"
		"\n"
		"If this method is overridden, the implementation should in general\n"
		"call fillElement() on the direct base. \n"
		""},
	 { "Scenery_Subcontractor", _wrap_Scenery_Subcontractor, METH_VARARGS, (char *)"Scenery_Subcontractor(FactoryMessenger arg2) -> Gyoto::SmartPointer< Gyoto::Scenery >"},
	 { "Scenery___str__", _wrap_Scenery___str__, METH_VARARGS, (char *)"Scenery___str__(Scenery self) -> std::string"},
	 { "Scenery_swigregister", Scenery_swigregister, METH_VARARGS, NULL},
	 { "Photon_getProperties", _wrap_Photon_getProperties, METH_VARARGS, (char *)"\n"
		"Photon_getProperties(Photon self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Photon_plugins", _wrap_Photon_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Photon_plugins(Photon self) -> vector_string\n"
		""},
	 { "Photon_isThreadSafe", _wrap_Photon_isThreadSafe, METH_VARARGS, (char *)"\n"
		"Photon_isThreadSafe(Photon self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "Photon__delta", _wrap_Photon__delta, METH_VARARGS, (char *)"\n"
		"_delta(double const delta)\n"
		"_delta(double arg2, std::string const & unit)\n"
		"_delta() -> double\n"
		"Photon__delta(Photon self, std::string const & unit) -> double\n"
		""},
	 { "Photon__tMin", _wrap_Photon__tMin, METH_VARARGS, (char *)"\n"
		"_tMin(double const tmin)\n"
		"_tMin(double arg2, std::string const & unit)\n"
		"_tMin() -> double\n"
		"Photon__tMin(Photon self, std::string const & unit) -> double\n"
		""},
	 { "Photon__adaptive", _wrap_Photon__adaptive, METH_VARARGS, (char *)"\n"
		"_adaptive(bool mode)\n"
		"Photon__adaptive(Photon self) -> bool\n"
		""},
	 { "Photon__secondary", _wrap_Photon__secondary, METH_VARARGS, (char *)"\n"
		"_secondary(bool sec)\n"
		"Photon__secondary(Photon self) -> bool\n"
		""},
	 { "Photon__integ31", _wrap_Photon__integ31, METH_VARARGS, (char *)"\n"
		"_integ31(bool sec)\n"
		"Photon__integ31(Photon self) -> bool\n"
		""},
	 { "Photon__parallelTransport", _wrap_Photon__parallelTransport, METH_VARARGS, (char *)"\n"
		"_parallelTransport(bool sec)\n"
		"Photon__parallelTransport(Photon self) -> bool\n"
		""},
	 { "Photon__maxiter", _wrap_Photon__maxiter, METH_VARARGS, (char *)"\n"
		"_maxiter(size_t miter)\n"
		"Photon__maxiter(Photon self) -> size_t\n"
		""},
	 { "Photon__integrator", _wrap_Photon__integrator, METH_VARARGS, (char *)"\n"
		"_integrator(std::string const & type)\n"
		"Photon__integrator(Photon self) -> std::string\n"
		""},
	 { "Photon__deltaMin", _wrap_Photon__deltaMin, METH_VARARGS, (char *)"\n"
		"_deltaMin() -> double\n"
		"Photon__deltaMin(Photon self, double h1)\n"
		""},
	 { "Photon__absTol", _wrap_Photon__absTol, METH_VARARGS, (char *)"\n"
		"_absTol(double arg2)\n"
		"Photon__absTol(Photon self) -> double\n"
		""},
	 { "Photon__maxCrossEqplane", _wrap_Photon__maxCrossEqplane, METH_VARARGS, (char *)"\n"
		"_maxCrossEqplane(double arg2)\n"
		"Photon__maxCrossEqplane(Photon self) -> double\n"
		""},
	 { "Photon__relTol", _wrap_Photon__relTol, METH_VARARGS, (char *)"\n"
		"_relTol(double arg2)\n"
		"Photon__relTol(Photon self) -> double\n"
		""},
	 { "Photon__deltaMax", _wrap_Photon__deltaMax, METH_VARARGS, (char *)"\n"
		"_deltaMax(double h1)\n"
		"Photon__deltaMax(Photon self) -> double\n"
		""},
	 { "Photon__deltaMaxOverR", _wrap_Photon__deltaMaxOverR, METH_VARARGS, (char *)"\n"
		"_deltaMaxOverR() -> double\n"
		"Photon__deltaMaxOverR(Photon self, double t)\n"
		""},
	 { "Photon__initCoord", _wrap_Photon__initCoord, METH_VARARGS, (char *)"\n"
		"_initCoord() -> vector_double\n"
		"Photon__initCoord(Photon self, vector_double f)\n"
		""},
	 { "Photon__metric", _wrap_Photon__metric, METH_VARARGS, (char *)"\n"
		"_metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"Photon__metric(Photon self) -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		""},
	 { "Photon_className", _wrap_Photon_className, METH_VARARGS, (char *)"\n"
		"Photon_className(Photon self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"Photon\" \n"
		""},
	 { "Photon_className_l", _wrap_Photon_className_l, METH_VARARGS, (char *)"\n"
		"Photon_className_l(Photon self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"\"photon\" \n"
		""},
	 { "Photon_clone", _wrap_Photon_clone, METH_VARARGS, (char *)"\n"
		"Photon_clone(Photon self) -> Photon\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "new_Photon", _wrap_new_Photon, METH_VARARGS, (char *)"\n"
		"Photon()\n"
		"Photon(Photon arg2)\n"
		"Photon(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > obj, double * coord)\n"
		"new_Photon(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > obj, Gyoto::SmartPointer< Gyoto::Screen > screen, double d_alpha, double d_delta) -> Photon\n"
		"\n"
		"\n"
		"\n"
		"Same as Photon() followed by\n"
		"setInitialCondition(SmartPointer<Metric::Generic> gg,\n"
		"SmartPointer<Astrobj::Generic> obj, SmartPointer<Screen> screen,\n"
		"double d_alpha, double d_delta) \n"
		""},
	 { "delete_Photon", _wrap_delete_Photon, METH_VARARGS, (char *)"\n"
		"delete_Photon(Photon self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Photon_getMass", _wrap_Photon_getMass, METH_VARARGS, (char *)"\n"
		"Photon_getMass(Photon self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Return 0. \n"
		""},
	 { "Photon_astrobj", _wrap_Photon_astrobj, METH_VARARGS, (char *)"\n"
		"astrobj(Gyoto::SmartPointer< Gyoto::Astrobj::Generic > arg2)\n"
		"Photon_astrobj(Photon self) -> Gyoto::SmartPointer< Gyoto::Astrobj::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get Photon::object_. \n"
		""},
	 { "Photon_metric", _wrap_Photon_metric, METH_VARARGS, (char *)"\n"
		"metric(Gyoto::SmartPointer< Gyoto::Metric::Generic > arg2)\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"Photon_metric(Photon self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Get metric. \n"
		""},
	 { "Photon_spectrometer", _wrap_Photon_spectrometer, METH_VARARGS, (char *)"\n"
		"spectrometer(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > spr)\n"
		"Photon_spectrometer(Photon self) -> Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Get Photon::spectro_. \n"
		""},
	 { "Photon_freqObs", _wrap_Photon_freqObs, METH_VARARGS, (char *)"\n"
		"freqObs(double arg2)\n"
		"Photon_freqObs(Photon self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Photon::freq_obs__. \n"
		""},
	 { "Photon_nb_cross_eqplane", _wrap_Photon_nb_cross_eqplane, METH_VARARGS, (char *)"\n"
		"nb_cross_eqplane(int arg2)\n"
		"Photon_nb_cross_eqplane(Photon self) -> int\n"
		"\n"
		"\n"
		"\n"
		"Get Photon::nb_cross_eqplane_. \n"
		""},
	 { "Photon_setInitialCondition", _wrap_Photon_setInitialCondition, METH_VARARGS, (char *)"\n"
		"setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, double const [8] coord, int const dir, double const [4] Ephi, double const [4] Etheta)\n"
		"setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, double const [8] coord, int const dir)\n"
		"setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > obj, double const [8] coord)\n"
		"setInitialCondition(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > obj, double const [8] coord, double const [4] Ephi, double const [4] Etheta)\n"
		"Photon_setInitialCondition(Photon self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > obj, Gyoto::SmartPointer< Gyoto::Screen > screen, double d_alpha, double d_delta)\n"
		"\n"
		"\n"
		"\n"
		"Set or re-set the initial condition prior to integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gg:   Gyoto::SmartPointer to the Gyoto::Metric in this universe;\n"
		"\n"
		"coord:  8 element array containing the initial condition, i.e. the\n"
		"4-position and the 4-velocity of the Photon at the receiving end;\n"
		"\n"
		"dir:  direction: 1 for future, -1 for past. \n"
		""},
	 { "Photon_hit", _wrap_Photon_hit, METH_VARARGS, (char *)"\n"
		"hit(AstrobjProperties data=None) -> int\n"
		"Photon_hit(Photon self) -> int\n"
		"\n"
		"\n"
		"\n"
		"Integrate the geodesic.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"data:  Optional Astrobj::Properties to fill with observational\n"
		"quantities.\n"
		"\n"
		"1 if object was hit, else 0. \n"
		""},
	 { "Photon_findMin", _wrap_Photon_findMin, METH_VARARGS, (char *)"\n"
		"findMin(Functor__Double_constDoubleArray object, double t1, double t2, double & tmin, double threshold) -> double\n"
		"Photon_findMin(Photon self, Functor__Double_constDoubleArray object, double t1, double t2, double & tmin) -> double\n"
		"\n"
		"\n"
		"\n"
		"Find minimum of photonobject distance.\n"
		"\n"
		"Return the minimum of (*object)(this-> getCoord()) between t1 and t2.\n"
		"The date of this minimum is returned in tmin.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"object:  the distance to minimize is given by object->operator()().\n"
		"This method is in particular implemented by the subclasses of\n"
		"Astrobj::Standard.\n"
		"\n"
		"t1:  date\n"
		"\n"
		"t2:  date\n"
		"\n"
		"tmin:  on output, date correspondig to the minimum\n"
		"\n"
		"threshold:  stop searching for a minimum if a value < threshold is\n"
		"found (very often, we just want to find a date below the threshold,\n"
		"not the accurate minimum). \n"
		""},
	 { "Photon_findValue", _wrap_Photon_findValue, METH_VARARGS, (char *)"\n"
		"Photon_findValue(Photon self, Functor__Double_constDoubleArray object, double value, double tinside, double & toutside)\n"
		"\n"
		"\n"
		"\n"
		"Find date for which the photon is at a given distance from the object.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"object:   Object, must implement operator() (e.g. Astrobj::Standard,\n"
		"ThinDisk::Standard)\n"
		"\n"
		"value:  The value to find\n"
		"\n"
		"tinside:  A date for which\n"
		"object->Astrobj::operator()(Photon::getCoord()) is < value\n"
		"\n"
		"toutside:  On input: a date for which\n"
		"object->Astrobj::operator()(Photon::getCoord()) is > value. on output,\n"
		"(*object)(getCoord(toutside)) is < value, very close to value.\n"
		"toutside is closer to tinside on output than on input. \n"
		""},
	 { "Photon_setParameters", _wrap_Photon_setParameters, METH_VARARGS, (char *)"\n"
		"Photon_setParameters(Photon self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop for parsing Properties from XML description.\n"
		"\n"
		"This function queries the FactoryMessenger for elements to parse, and\n"
		"tries to matche each element to a Property to set it  accordingly. Any\n"
		"class that tries to be buildable from XML must supply a subcontractor\n"
		"(for base classes such as Metric, Astrobj, Spectrum  and Spectrometer,\n"
		"it is done as a template that must be  specialized for each class).\n"
		"This subcontractor typically looks somewhat like this: Although this\n"
		"is discouraged, it is possible to override the following functions to\n"
		"customize how XML entities are parsed:    - setParameters() if low-\n"
		"level access to the      FactoryMessenger is required;    -\n"
		"setParameter(std::string name, std::string content,\n"
		"std::string unit)      to interpret an entity that does not match a\n"
		"Property      (e.g. alternative name);    -\n"
		"setParameter(Gyoto::Property const &p, std::string const &name,\n"
		"std::string const &content, std::string const &unit)      to change\n"
		"how a Property is interpreted. \n"
		""},
	 { "Photon_Subcontractor", _wrap_Photon_Subcontractor, METH_VARARGS, (char *)"Photon_Subcontractor(FactoryMessenger arg2) -> Gyoto::SmartPointer< Gyoto::Photon >"},
	 { "Photon_resetTransmission", _wrap_Photon_resetTransmission, METH_VARARGS, (char *)"\n"
		"Photon_resetTransmission(Photon self)\n"
		"\n"
		"\n"
		"\n"
		"Set transmission to 1 for each channel as well as scalar transmission.\n"
		"\n"
		""},
	 { "Photon_resetTransmissionMatrix", _wrap_Photon_resetTransmissionMatrix, METH_VARARGS, (char *)"\n"
		"Photon_resetTransmissionMatrix(Photon self)\n"
		"\n"
		"\n"
		"\n"
		"Set transmission matrix to identity matrix for each frequency. \n"
		""},
	 { "Photon_getTransmissionMax", _wrap_Photon_getTransmissionMax, METH_VARARGS, (char *)"\n"
		"Photon_getTransmissionMax(Photon self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get maximum transmission;.\n"
		"\n"
		"Get current maximum of all the transmissions,\n"
		"Photon::transmission_freqobs_ or one elements of the\n"
		"Photon::transmission_ array. \n"
		""},
	 { "Photon_getTransmission", _wrap_Photon_getTransmission, METH_VARARGS, (char *)"\n"
		"getTransmission(size_t i) -> double\n"
		"Photon_getTransmission(Photon self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get Photon::transmission_.\n"
		"\n"
		"getTansmission()[i] == getTransmission(size_t i) \n"
		""},
	 { "Photon_getTransmissionMatrix", _wrap_Photon_getTransmissionMatrix, METH_VARARGS, (char *)"\n"
		"getTransmissionMatrix(size_t i) -> Eigen::Matrix4d\n"
		"Photon_getTransmissionMatrix(Photon self) -> Eigen::Matrix4d const *\n"
		"\n"
		"\n"
		"\n"
		"Get Photon::transmissionMatrix_.\n"
		"\n"
		"getTansmissionMatrix()[i] == getTransmissionMatrix(size_t i) \n"
		""},
	 { "Photon_transmit", _wrap_Photon_transmit, METH_VARARGS, (char *)"\n"
		"transmit(size_t i, double t)\n"
		"Photon_transmit(Photon self, size_t i, Eigen::Matrix4d mat)\n"
		"\n"
		"\n"
		"\n"
		"Update transmission matrix in a given channel.\n"
		"\n"
		"getTransmissionMatrix(size_t i) *= mat.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  channel number. -1 for Matrix Photon::transmissionMatrix_freqobs_.\n"
		"\n"
		"mat:  transmission Matrix of this fluid element. \n"
		""},
	 { "Photon_transfer", _wrap_Photon_transfer, METH_VARARGS, (char *)"\n"
		"Photon_transfer(Photon self, double * Inu, double * Qnu, double * Unu, double * Vnu, Eigen::Matrix4d * Onu)\n"
		"\n"
		"\n"
		"\n"
		"Perform one step of polarized radiative transfert and update\n"
		"transmission matrix. \n"
		""},
	 { "Photon___str__", _wrap_Photon___str__, METH_VARARGS, (char *)"Photon___str__(Photon self) -> std::string"},
	 { "Photon_swigregister", Photon_swigregister, METH_VARARGS, NULL},
	 { "getAstrobjRegister", _wrap_getAstrobjRegister, METH_VARARGS, (char *)"getAstrobjRegister() -> RegisterEntry"},
	 { "getAstrobjSubcontractor", _wrap_getAstrobjSubcontractor, METH_VARARGS, (char *)"\n"
		"getAstrobjSubcontractor(std::string name, vector_string plugin, int errmode=0) -> Gyoto::Astrobj::Subcontractor_t\n"
		"getAstrobjSubcontractor(std::string name, vector_string plugin) -> Gyoto::Astrobj::Subcontractor_t *\n"
		""},
	 { "initAstrobjRegister", _wrap_initAstrobjRegister, METH_VARARGS, (char *)"initAstrobjRegister()"},
	 { "registerAstrobj", _wrap_registerAstrobj, METH_VARARGS, (char *)"registerAstrobj(std::string name, Gyoto::Astrobj::Subcontractor_t * scp)"},
	 { "Astrobj_getProperties", _wrap_Astrobj_getProperties, METH_VARARGS, (char *)"\n"
		"Astrobj_getProperties(Astrobj self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Astrobj_plugins", _wrap_Astrobj_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Astrobj_plugins(Astrobj self) -> vector_string\n"
		""},
	 { "Astrobj_clone", _wrap_Astrobj_clone, METH_VARARGS, (char *)"\n"
		"Astrobj_clone(Astrobj self) -> Astrobj\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_Astrobj", _wrap_delete_Astrobj, METH_VARARGS, (char *)"\n"
		"delete_Astrobj(Astrobj self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor: does nothing. \n"
		""},
	 { "Astrobj_metric", _wrap_Astrobj_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"Astrobj_metric(Astrobj self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric gg_. \n"
		""},
	 { "Astrobj_deltaMax", _wrap_Astrobj_deltaMax, METH_VARARGS, (char *)"\n"
		"Astrobj_deltaMax(Astrobj self, double [8] coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get max step constraint for adaptive integration.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  position\n"
		"\n"
		"max step to find this object reliably \n"
		""},
	 { "Astrobj_rMax", _wrap_Astrobj_rMax, METH_VARARGS, (char *)"\n"
		"rMax() -> double\n"
		"rMax() -> double\n"
		"rMax(std::string const & unit) -> double\n"
		"rMax(std::string const & unit) -> double\n"
		"rMax(double val)\n"
		"Astrobj_rMax(Astrobj self, double val, std::string const & unit)\n"
		"\n"
		"\n"
		"\n"
		"Set maximal distance from center of coordinate system.\n"
		"\n"
		"Call Generic::rMax(double val) after converting val from unit to\n"
		"geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"val:   rmax_ expressed in unit \"unit\";\n"
		"\n"
		"unit:  string... \n"
		""},
	 { "Astrobj_deltaMaxInsideRMax", _wrap_Astrobj_deltaMaxInsideRMax, METH_VARARGS, (char *)"\n"
		"deltaMaxInsideRMax(double arg2)\n"
		"deltaMaxInsideRMax() -> double\n"
		"deltaMaxInsideRMax(double arg2, std::string const & arg3)\n"
		"Astrobj_deltaMaxInsideRMax(Astrobj self, std::string const & arg3) -> double\n"
		""},
	 { "Astrobj_opticallyThin", _wrap_Astrobj_opticallyThin, METH_VARARGS, (char *)"\n"
		"opticallyThin(bool flag)\n"
		"Astrobj_opticallyThin(Astrobj self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Query whether object is optically thin.\n"
		"\n"
		"See opticallyThin(bool flag). \n"
		""},
	 { "Astrobj_showshadow", _wrap_Astrobj_showshadow, METH_VARARGS, (char *)"\n"
		"showshadow(bool flag)\n"
		"Astrobj_showshadow(Astrobj self) -> bool\n"
		""},
	 { "Astrobj_redshift", _wrap_Astrobj_redshift, METH_VARARGS, (char *)"\n"
		"redshift(bool flag)\n"
		"Astrobj_redshift(Astrobj self) -> bool\n"
		""},
	 { "Astrobj_getDefaultQuantities", _wrap_Astrobj_getDefaultQuantities, METH_VARARGS, (char *)"\n"
		"Astrobj_getDefaultQuantities(Astrobj self) -> Gyoto::Quantity_t\n"
		"\n"
		"\n"
		"\n"
		"Which quantities to compute if know was requested.\n"
		"\n"
		"Return a Gyoto::Quantity_t suitable as input to\n"
		"Gyoto::Scenery::setRequestedQuantities() to set de default quantities\n"
		"to compute for this object. The default of these defaults\n"
		"GYOTO_QUANTITY_INTENSITY. \n"
		""},
	 { "Astrobj_setParameters", _wrap_Astrobj_setParameters, METH_VARARGS, (char *)"\n"
		"Astrobj_setParameters(Astrobj self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop in Subcontractor_t function.\n"
		"\n"
		"The Subcontractor_t function for each Astrobj kind should look\n"
		"somewhat like this (templated as\n"
		"Gyoto::Astrobj::Subcontractor<MyKind>):\n"
		"\n"
		"Each object kind should implement setParameter(string name, string\n"
		"content, string unit) to interpret the individual XML elements.\n"
		"setParameters() can be overloaded in case the specific Astrobj class\n"
		"needs low level access to the FactoryMessenger. See\n"
		"UniformSphere::setParameters(). \n"
		""},
	 { "Astrobj_Impact", _wrap_Astrobj_Impact, METH_VARARGS, (char *)"\n"
		"Impact(Photon ph, size_t index, AstrobjProperties data=None) -> int\n"
		"Astrobj_Impact(Astrobj self, Photon ph, size_t index) -> int\n"
		"\n"
		"\n"
		"\n"
		"Does a photon at these coordinates impact the object?\n"
		"\n"
		"Impact() checks whether a Photon impacts the object between two\n"
		"integration steps of the photon's trajectory (those two steps are\n"
		"photon->getCoord(index, coord1) and photon->getCoord(index+1,\n"
		"coord2)). Impact returns 1 if the photon impacts the object between\n"
		"these two steps, else 0. In many cases of geometrically thick obects,\n"
		"the implementation Astrobj::Standard::Impact() will be fine.\n"
		"\n"
		"Impact will call Generic::processHitQuantities() (which is virtual and\n"
		"may be re-implemented) to compute observable properties on demand: if\n"
		"the data pointer is non-NULL, the object will look in it for pointers\n"
		"to properties which apply to its kind. If a pointer to a property\n"
		"known to this object is present, then the property is computed and\n"
		"store at the pointed-to address. For instance, all objects know the\n"
		"\"intensity\" property. If data->intensity != NULL, the instensity is\n"
		"computed and stored in *data->intensity.\n"
		"\n"
		"If data is non-NULL and only in this case, processHitQuantities() will\n"
		"also call ph->transmit() to update the transmissions of the Photon\n"
		"(see Photon::transmit(size_t, double)). This must not be done if data\n"
		"is NULL (see Astrobj::Complex::Impact() for an explanation).\n"
		"\n"
		"Impact() may not extend the ph Worldline. The only two dates that are\n"
		"guaranteed to be defined are at indices index and index+1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ph:   Gyoto::Photon aimed at the object;\n"
		"\n"
		"index:  Index of the last photon step;\n"
		"\n"
		"data:  Pointer to a structure to hold the observables at impact.\n"
		"\n"
		"1 if impact, 0 if not. \n"
		""},
	 { "Astrobj_processHitQuantities", _wrap_Astrobj_processHitQuantities, METH_VARARGS, (char *)"Astrobj_processHitQuantities(Astrobj self, Photon ph, vector_double coord_ph_hit, double const * coord_obj_hit, double dt, AstrobjProperties data)"},
	 { "Astrobj_emission", _wrap_Astrobj_emission, METH_VARARGS, (char *)"\n"
		"emission(double nu_em, double dsem, vector_double coord_ph, double const [8] coord_obj=0) -> double\n"
		"emission(double nu_em, double dsem, vector_double coord_ph) -> double\n"
		"emission(double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"Astrobj_emission(Astrobj self, double [] Inu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "Astrobj_radiativeQ", _wrap_Astrobj_radiativeQ, METH_VARARGS, (char *)"\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph, double const [8] coord_obj=0)\n"
		"radiativeQ(double [] Inu, double [] Taunu, double const [] nu_em, size_t nbnu, double dsem, vector_double coord_ph)\n"
		"Astrobj_radiativeQ(Astrobj self, double * Inu, double * Qnu, double * Unu, double * Vnu, Eigen::Matrix4d * Onu, double const * nuem, size_t nbnu, double dsem, vector_double cph, double const * co)\n"
		"\n"
		"\n"
		"\n"
		"Compute the increment of Stokes parameters and transmission matrix.\n"
		"Polarised version of RadiaveQ.\n"
		"\n"
		"First function to be called for radiative quantities. If exist, i.e.\n"
		"implemented in an Astrobj, return the Stokes parameters emitted by the\n"
		"small volume of length dsem.\n"
		"\n"
		"Warning : The basis used to determine the Stokes coefficients is\n"
		"different from the observer parallel transported polarisation basis.\n"
		"One should use getChi function to compute the angle between these two\n"
		"basis.\n"
		"\n"
		"The non polarized case must also be implemented in this function to\n"
		"avoid error.\n"
		"\n"
		"See exemple in SimplePolarStar.C.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Inu[nbnu]:  Output increment of intensity (must be set to a previously\n"
		"allocated array of doubles)\n"
		"\n"
		"Qnu[nbnu]:  Output increment of Stokes parameter Q (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Unu[nbnu]:  Output increment of Stokes parameter U (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Vnu[nbnu]:  Output increment of Stokes parameter V (must be set to a\n"
		"previously allocated array of doubles)\n"
		"\n"
		"Onu[nbnu]:  Output transmission (Eigen) matrix (must be set to a\n"
		"previously allocated array of Matrix4d)\n"
		"\n"
		"nu_em[nbnu]:  Frequencies at emission\n"
		"\n"
		"nbnu:  Size of nu_em[], Inu[], Qnu[], Unu[], Vnu[], and Onu[]\n"
		"\n"
		"dsem:  Length over which to integrate inside the object\n"
		"\n"
		"cph:   Photon coordinate\n"
		"\n"
		"co:  Emitter coordinate at current photon position\n"
		"\n"
		"Increment of the Stokes parameters (I,Q,U,V) and local Transmission\n"
		"matrix (O). \n"
		""},
	 { "Astrobj_integrateEmission", _wrap_Astrobj_integrateEmission, METH_VARARGS, (char *)"\n"
		"integrateEmission(double nu1, double nu2, double dsem, vector_double c_ph, double const [8] c_obj=0) -> double\n"
		"integrateEmission(double nu1, double nu2, double dsem, vector_double c_ph) -> double\n"
		"Astrobj_integrateEmission(Astrobj self, double * I, double const * boundaries, size_t const * chaninds, size_t nbnu, double dsem, vector_double cph, double const * co)\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "Astrobj_transmission", _wrap_Astrobj_transmission, METH_VARARGS, (char *)"\n"
		"Astrobj_transmission(Astrobj self, double nuem, double dsem, vector_double coord_ph, double const [8] coord_obj) -> double\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "Astrobj_Omatrix", _wrap_Astrobj_Omatrix, METH_VARARGS, (char *)"\n"
		"Omatrix(double [4] alphanu, double [3] rnu, double Chi, double dsem) -> Eigen::Matrix4d\n"
		"Omatrix(double alphaInu, double alphaQnu, double alphaUnu, double alphaVnu, double rQnu, double rUnu, double rVnu, double Chi, double dsem) -> Eigen::Matrix4d\n"
		"Omatrix(double [4] alphanu, double [3] rnu, double sin2Chi, double cos2Chi, double dsem) -> Eigen::Matrix4d\n"
		"Astrobj_Omatrix(Astrobj self, double alphaInu, double alphaQnu, double alphaUnu, double alphaVnu, double rQnu, double rUnu, double rVnu, double sin2Chi, double cos2Chi, double dsem) -> Eigen::Matrix4d\n"
		""},
	 { "Astrobj_Pmatrix", _wrap_Astrobj_Pmatrix, METH_VARARGS, (char *)"Astrobj_Pmatrix(Astrobj self, double alphaInu, double alphaQnu, double alphaUnu, double alphaVnu, double rQnu, double rUnu, double rVnu, double sin2Chi, double cos2Chi, double dsem) -> Eigen::Matrix4d"},
	 { "Astrobj_rotateJs", _wrap_Astrobj_rotateJs, METH_VARARGS, (char *)"\n"
		"rotateJs(double jInu, double jQnu, double jUnu, double jVnu, double sin2Chi, double cos2Chi) -> Eigen::Vector4d\n"
		"Astrobj_rotateJs(Astrobj self, double jInu, double jQnu, double jUnu, double jVnu, double Chi) -> Eigen::Vector4d\n"
		""},
	 { "Astrobj_getChi", _wrap_Astrobj_getChi, METH_VARARGS, (char *)"\n"
		"getChi(double const [4] fourvect, vector_double cph, double const [4] vel, bool elec=False) -> double\n"
		"Astrobj_getChi(Astrobj self, double const [4] fourvect, vector_double cph, double const [4] vel) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Chi angle. Return the angle between the parallel transported\n"
		"observer polarization basis (Ephi,Etheta) and the Stokes basis in the\n"
		"rest frame of the emitter defined by the 4-vector magnetic/electric\n"
		"field.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fourvect:  4-vector magnetic/electric field depending on elec\n"
		"(false/true)\n"
		"\n"
		"cph:   Photon coordinate, must contain the Ephi and Etheta vectors\n"
		"i.e. size(cph)==16\n"
		"\n"
		"vel:  Fluid velocity at the photon coordinate \n"
		""},
	 { "Astrobj_getSinCos2Chi", _wrap_Astrobj_getSinCos2Chi, METH_VARARGS, (char *)"\n"
		"getSinCos2Chi(double const [4] fourvect, vector_double cph, double const [4] vel, double * sin2Chi, double * cos2Chi, bool elec=False)\n"
		"Astrobj_getSinCos2Chi(Astrobj self, double const [4] fourvect, vector_double cph, double const [4] vel, double * sin2Chi, double * cos2Chi)\n"
		"\n"
		"\n"
		"\n"
		"Get the cosinus and sinus of 2*Chi angle. Chi being the angle between\n"
		"the parallel transported observer polarization basis (Ephi,Etheta) and\n"
		"the Stokes basis in the rest frame of the emitter defined by the\n"
		"4-vector magnetic/electric field.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fourvect:  4-vector magnetic/electric field depending on elec\n"
		"(false/true)\n"
		"\n"
		"cph:   Photon coordinate, must contain the Ephi and Etheta vectors\n"
		"i.e. size(cph)==16\n"
		"\n"
		"vel:  Fluid velocity at the photon coordinate \n"
		""},
	 { "Astrobj_computeB4vect", _wrap_Astrobj_computeB4vect, METH_VARARGS, (char *)"\n"
		"Astrobj_computeB4vect(Astrobj self, double [4] B4vect, std::string const magneticConfig, double const [8] co, vector_double cph)\n"
		"\n"
		"\n"
		"\n"
		"Compute the magnetic field 4-vector at a given position and a given\n"
		"configuration\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"B4vect:  the output 4-vector magnetic field\n"
		"\n"
		"magneticConfig:  string which determine the wanted configuration\n"
		"('Radial', 'Azimuthal', 'Vertical')\n"
		"\n"
		"co:  coordinate of the object which also contain its velocity\n"
		"\n"
		"cph:  coordinate of the photon \n"
		""},
	 { "Astrobj_computeB4vect_ipole", _wrap_Astrobj_computeB4vect_ipole, METH_VARARGS, (char *)"Astrobj_computeB4vect_ipole(Astrobj self, double [4] B4vect, std::string const magneticConfig, double const [8] co, vector_double cph, double spin)"},
	 { "Astrobj_interpolate", _wrap_Astrobj_interpolate, METH_VARARGS, (char *)"\n"
		"interpolate(int const N, double *const array, double *const Xq, double **const X, int *const X_params, std::string const * cond_limits) -> double\n"
		"Astrobj_interpolate(Astrobj self, int const N, double *const array, double *const Xq, double **const X_params, std::string const * cond_limits) -> double\n"
		"\n"
		"\n"
		"\n"
		"N-dimensional linear interpolation function\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"N:  number of dimensions\n"
		"\n"
		"array:  array that should be interpolated. This array has to be a 1D\n"
		"array with the first dimension evolving the slowest\n"
		"\n"
		"Xq:  query position at which the interpolation should be done. 1D\n"
		"array with N elements.\n"
		"\n"
		"X_params[N][3]:  2D array that contain the minimum value, the maximum\n"
		"value and the length of each axes. The axes will be assumed to be\n"
		"linearly spaced.\n"
		"\n"
		"cond_limits:  1D array of strings that set the boundary conditions\n"
		"that will be applied to each axes. \n"
		""},
	 { "new_Astrobj", _wrap_new_Astrobj, METH_VARARGS, (char *)"\n"
		"Generic(std::string nm)\n"
		"Generic(std::string nm, vector_string plugin)\n"
		"Generic(long address)\n"
		"new_Astrobj(Astrobj orig) -> Astrobj\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor.\n"
		"\n"
		"Make a deep copy of an Astrobj::Generic instance \n"
		""},
	 { "Astrobj___str__", _wrap_Astrobj___str__, METH_VARARGS, (char *)"Astrobj___str__(Astrobj self) -> std::string"},
	 { "Astrobj_swigregister", Astrobj_swigregister, METH_VARARGS, NULL},
	 { "AstrobjProperties_intensity_set", _wrap_AstrobjProperties_intensity_set, METH_VARARGS, (char *)"AstrobjProperties_intensity_set(AstrobjProperties self, double * intensity)"},
	 { "AstrobjProperties_intensity_get", _wrap_AstrobjProperties_intensity_get, METH_VARARGS, (char *)"AstrobjProperties_intensity_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_time_set", _wrap_AstrobjProperties_time_set, METH_VARARGS, (char *)"AstrobjProperties_time_set(AstrobjProperties self, double * time)"},
	 { "AstrobjProperties_time_get", _wrap_AstrobjProperties_time_get, METH_VARARGS, (char *)"AstrobjProperties_time_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_distance_set", _wrap_AstrobjProperties_distance_set, METH_VARARGS, (char *)"AstrobjProperties_distance_set(AstrobjProperties self, double * distance)"},
	 { "AstrobjProperties_distance_get", _wrap_AstrobjProperties_distance_get, METH_VARARGS, (char *)"AstrobjProperties_distance_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_first_dmin_set", _wrap_AstrobjProperties_first_dmin_set, METH_VARARGS, (char *)"AstrobjProperties_first_dmin_set(AstrobjProperties self, double * first_dmin)"},
	 { "AstrobjProperties_first_dmin_get", _wrap_AstrobjProperties_first_dmin_get, METH_VARARGS, (char *)"AstrobjProperties_first_dmin_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_first_dmin_found_set", _wrap_AstrobjProperties_first_dmin_found_set, METH_VARARGS, (char *)"AstrobjProperties_first_dmin_found_set(AstrobjProperties self, int first_dmin_found)"},
	 { "AstrobjProperties_first_dmin_found_get", _wrap_AstrobjProperties_first_dmin_found_get, METH_VARARGS, (char *)"AstrobjProperties_first_dmin_found_get(AstrobjProperties self) -> int"},
	 { "AstrobjProperties_redshift_set", _wrap_AstrobjProperties_redshift_set, METH_VARARGS, (char *)"AstrobjProperties_redshift_set(AstrobjProperties self, double * redshift)"},
	 { "AstrobjProperties_redshift_get", _wrap_AstrobjProperties_redshift_get, METH_VARARGS, (char *)"AstrobjProperties_redshift_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_nbcrosseqplane_set", _wrap_AstrobjProperties_nbcrosseqplane_set, METH_VARARGS, (char *)"AstrobjProperties_nbcrosseqplane_set(AstrobjProperties self, double * nbcrosseqplane)"},
	 { "AstrobjProperties_nbcrosseqplane_get", _wrap_AstrobjProperties_nbcrosseqplane_get, METH_VARARGS, (char *)"AstrobjProperties_nbcrosseqplane_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_spectrum_set", _wrap_AstrobjProperties_spectrum_set, METH_VARARGS, (char *)"AstrobjProperties_spectrum_set(AstrobjProperties self, double * spectrum)"},
	 { "AstrobjProperties_spectrum_get", _wrap_AstrobjProperties_spectrum_get, METH_VARARGS, (char *)"AstrobjProperties_spectrum_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_stokesQ_set", _wrap_AstrobjProperties_stokesQ_set, METH_VARARGS, (char *)"AstrobjProperties_stokesQ_set(AstrobjProperties self, double * stokesQ)"},
	 { "AstrobjProperties_stokesQ_get", _wrap_AstrobjProperties_stokesQ_get, METH_VARARGS, (char *)"AstrobjProperties_stokesQ_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_stokesU_set", _wrap_AstrobjProperties_stokesU_set, METH_VARARGS, (char *)"AstrobjProperties_stokesU_set(AstrobjProperties self, double * stokesU)"},
	 { "AstrobjProperties_stokesU_get", _wrap_AstrobjProperties_stokesU_get, METH_VARARGS, (char *)"AstrobjProperties_stokesU_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_stokesV_set", _wrap_AstrobjProperties_stokesV_set, METH_VARARGS, (char *)"AstrobjProperties_stokesV_set(AstrobjProperties self, double * stokesV)"},
	 { "AstrobjProperties_stokesV_get", _wrap_AstrobjProperties_stokesV_get, METH_VARARGS, (char *)"AstrobjProperties_stokesV_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_binspectrum_set", _wrap_AstrobjProperties_binspectrum_set, METH_VARARGS, (char *)"AstrobjProperties_binspectrum_set(AstrobjProperties self, double * binspectrum)"},
	 { "AstrobjProperties_binspectrum_get", _wrap_AstrobjProperties_binspectrum_get, METH_VARARGS, (char *)"AstrobjProperties_binspectrum_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_offset_set", _wrap_AstrobjProperties_offset_set, METH_VARARGS, (char *)"AstrobjProperties_offset_set(AstrobjProperties self, ptrdiff_t offset)"},
	 { "AstrobjProperties_offset_get", _wrap_AstrobjProperties_offset_get, METH_VARARGS, (char *)"AstrobjProperties_offset_get(AstrobjProperties self) -> ptrdiff_t"},
	 { "AstrobjProperties_impactcoords_set", _wrap_AstrobjProperties_impactcoords_set, METH_VARARGS, (char *)"AstrobjProperties_impactcoords_set(AstrobjProperties self, double * impactcoords)"},
	 { "AstrobjProperties_impactcoords_get", _wrap_AstrobjProperties_impactcoords_get, METH_VARARGS, (char *)"AstrobjProperties_impactcoords_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_user1_set", _wrap_AstrobjProperties_user1_set, METH_VARARGS, (char *)"AstrobjProperties_user1_set(AstrobjProperties self, double * user1)"},
	 { "AstrobjProperties_user1_get", _wrap_AstrobjProperties_user1_get, METH_VARARGS, (char *)"AstrobjProperties_user1_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_user2_set", _wrap_AstrobjProperties_user2_set, METH_VARARGS, (char *)"AstrobjProperties_user2_set(AstrobjProperties self, double * user2)"},
	 { "AstrobjProperties_user2_get", _wrap_AstrobjProperties_user2_get, METH_VARARGS, (char *)"AstrobjProperties_user2_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_user3_set", _wrap_AstrobjProperties_user3_set, METH_VARARGS, (char *)"AstrobjProperties_user3_set(AstrobjProperties self, double * user3)"},
	 { "AstrobjProperties_user3_get", _wrap_AstrobjProperties_user3_get, METH_VARARGS, (char *)"AstrobjProperties_user3_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_user4_set", _wrap_AstrobjProperties_user4_set, METH_VARARGS, (char *)"AstrobjProperties_user4_set(AstrobjProperties self, double * user4)"},
	 { "AstrobjProperties_user4_get", _wrap_AstrobjProperties_user4_get, METH_VARARGS, (char *)"AstrobjProperties_user4_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_user5_set", _wrap_AstrobjProperties_user5_set, METH_VARARGS, (char *)"AstrobjProperties_user5_set(AstrobjProperties self, double * user5)"},
	 { "AstrobjProperties_user5_get", _wrap_AstrobjProperties_user5_get, METH_VARARGS, (char *)"AstrobjProperties_user5_get(AstrobjProperties self) -> double *"},
	 { "AstrobjProperties_intensity_converter__set", _wrap_AstrobjProperties_intensity_converter__set, METH_VARARGS, (char *)"AstrobjProperties_intensity_converter__set(AstrobjProperties self, Gyoto::SmartPointer< Gyoto::Units::Converter > * intensity_converter_)"},
	 { "AstrobjProperties_intensity_converter__get", _wrap_AstrobjProperties_intensity_converter__get, METH_VARARGS, (char *)"AstrobjProperties_intensity_converter__get(AstrobjProperties self) -> Gyoto::SmartPointer< Gyoto::Units::Converter > *"},
	 { "AstrobjProperties_spectrum_converter__set", _wrap_AstrobjProperties_spectrum_converter__set, METH_VARARGS, (char *)"AstrobjProperties_spectrum_converter__set(AstrobjProperties self, Gyoto::SmartPointer< Gyoto::Units::Converter > * spectrum_converter_)"},
	 { "AstrobjProperties_spectrum_converter__get", _wrap_AstrobjProperties_spectrum_converter__get, METH_VARARGS, (char *)"AstrobjProperties_spectrum_converter__get(AstrobjProperties self) -> Gyoto::SmartPointer< Gyoto::Units::Converter > *"},
	 { "AstrobjProperties_binspectrum_converter__set", _wrap_AstrobjProperties_binspectrum_converter__set, METH_VARARGS, (char *)"AstrobjProperties_binspectrum_converter__set(AstrobjProperties self, Gyoto::SmartPointer< Gyoto::Units::Converter > * binspectrum_converter_)"},
	 { "AstrobjProperties_binspectrum_converter__get", _wrap_AstrobjProperties_binspectrum_converter__get, METH_VARARGS, (char *)"AstrobjProperties_binspectrum_converter__get(AstrobjProperties self) -> Gyoto::SmartPointer< Gyoto::Units::Converter > *"},
	 { "AstrobjProperties_alloc_set", _wrap_AstrobjProperties_alloc_set, METH_VARARGS, (char *)"AstrobjProperties_alloc_set(AstrobjProperties self, bool alloc)"},
	 { "AstrobjProperties_alloc_get", _wrap_AstrobjProperties_alloc_get, METH_VARARGS, (char *)"AstrobjProperties_alloc_get(AstrobjProperties self) -> bool"},
	 { "new_AstrobjProperties", _wrap_new_AstrobjProperties, METH_VARARGS, (char *)"\n"
		"Properties()\n"
		"new_AstrobjProperties(double * arg2, double * arg3) -> AstrobjProperties\n"
		"\n"
		"\n"
		"\n"
		"< Set intensity and time pointers. \n"
		""},
	 { "AstrobjProperties_init", _wrap_AstrobjProperties_init, METH_VARARGS, (char *)"\n"
		"init(size_t nbnuobs=0)\n"
		"AstrobjProperties_init(AstrobjProperties self)\n"
		"\n"
		"\n"
		"\n"
		"Initialize observable quantities.\n"
		"\n"
		"The pointed-to values are initialized as follows (if the corresponding\n"
		"pointer is not NULL):\n"
		"\n"
		"intensity, firt_dmin_found, redshift, userN: 0\n"
		"\n"
		"time, distance, first_dmin: DBL_MAX\n"
		"\n"
		"for spectrum and binspectrum, nbnuobs values separated by offset in\n"
		"memory are initialized to 0\n"
		"\n"
		"for impactcoords, 16 contiguous values are initialized to DBL_MAX \n"
		""},
	 { "AstrobjProperties_increment", _wrap_AstrobjProperties_increment, METH_VARARGS, (char *)"AstrobjProperties_increment(AstrobjProperties self) -> AstrobjProperties"},
	 { "AstrobjProperties___iadd__", _wrap_AstrobjProperties___iadd__, METH_VARARGS, (char *)"AstrobjProperties___iadd__(AstrobjProperties self, ptrdiff_t offset) -> AstrobjProperties"},
	 { "AstrobjProperties_binSpectrumConverter", _wrap_AstrobjProperties_binSpectrumConverter, METH_VARARGS, (char *)"\n"
		"binSpectrumConverter(Gyoto::SmartPointer< Gyoto::Units::Converter > arg2)\n"
		"binSpectrumConverter(std::string arg2)\n"
		"AstrobjProperties_binSpectrumConverter(AstrobjProperties self) -> Converter\n"
		"\n"
		"\n"
		"\n"
		"Set Properties::binspectrum_converter_. \n"
		""},
	 { "AstrobjProperties_intensityConverter", _wrap_AstrobjProperties_intensityConverter, METH_VARARGS, (char *)"\n"
		"intensityConverter(Gyoto::SmartPointer< Gyoto::Units::Converter > arg2)\n"
		"intensityConverter(std::string arg2)\n"
		"AstrobjProperties_intensityConverter(AstrobjProperties self) -> Converter\n"
		"\n"
		"\n"
		"\n"
		"Set Properties::intentity_converter_. \n"
		""},
	 { "AstrobjProperties_spectrumConverter", _wrap_AstrobjProperties_spectrumConverter, METH_VARARGS, (char *)"\n"
		"spectrumConverter(Gyoto::SmartPointer< Gyoto::Units::Converter > arg2)\n"
		"spectrumConverter(std::string arg2)\n"
		"AstrobjProperties_spectrumConverter(AstrobjProperties self) -> Converter\n"
		"\n"
		"\n"
		"\n"
		"Set Properties::spectrum_converter_. \n"
		""},
	 { "delete_AstrobjProperties", _wrap_delete_AstrobjProperties, METH_VARARGS, (char *)"delete_AstrobjProperties(AstrobjProperties self)"},
	 { "AstrobjProperties_swigregister", AstrobjProperties_swigregister, METH_VARARGS, NULL},
	 { "ThinDisk_getProperties", _wrap_ThinDisk_getProperties, METH_VARARGS, (char *)"\n"
		"ThinDisk_getProperties(ThinDisk self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "ThinDisk_plugins", _wrap_ThinDisk_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"ThinDisk_plugins(ThinDisk self) -> vector_string\n"
		""},
	 { "ThinDisk_clone", _wrap_ThinDisk_clone, METH_VARARGS, (char *)"\n"
		"ThinDisk_clone(ThinDisk self) -> ThinDisk\n"
		"\n"
		"\n"
		"\n"
		"Cloner.\n"
		"\n"
		"This method must be implemented by the various Astrobj::Generic\n"
		"subclasses in order to support cloning:\n"
		"\n"
		"Cloning is necessary for multi-threading, recommended for interaction\n"
		"with the Yorick plug-in etc.\n"
		"\n"
		"Implementing it is very straightforward, as long as the copy\n"
		"constructor Generic(const Generic& ) has been implemented: \n"
		""},
	 { "delete_ThinDisk", _wrap_delete_ThinDisk, METH_VARARGS, (char *)"\n"
		"delete_ThinDisk(ThinDisk self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "ThinDisk_innerRadius", _wrap_ThinDisk_innerRadius, METH_VARARGS, (char *)"\n"
		"innerRadius() -> double\n"
		"innerRadius(std::string const & arg2) -> double\n"
		"innerRadius(double arg2)\n"
		"ThinDisk_innerRadius(ThinDisk self, double arg3, std::string const & arg4)\n"
		"\n"
		"\n"
		"\n"
		"Set rin_. \n"
		""},
	 { "ThinDisk_outerRadius", _wrap_ThinDisk_outerRadius, METH_VARARGS, (char *)"\n"
		"outerRadius() -> double\n"
		"outerRadius(std::string const & arg2) -> double\n"
		"outerRadius(double arg2)\n"
		"ThinDisk_outerRadius(ThinDisk self, double arg3, std::string const & arg4)\n"
		"\n"
		"\n"
		"\n"
		"Set rout_. \n"
		""},
	 { "ThinDisk_thickness", _wrap_ThinDisk_thickness, METH_VARARGS, (char *)"\n"
		"thickness() -> double\n"
		"thickness(std::string const & arg2) -> double\n"
		"thickness(double arg2)\n"
		"ThinDisk_thickness(ThinDisk self, double arg3, std::string const & arg4)\n"
		"\n"
		"\n"
		"\n"
		"Set thickness_. \n"
		""},
	 { "ThinDisk_dir", _wrap_ThinDisk_dir, METH_VARARGS, (char *)"\n"
		"dir() -> int\n"
		"ThinDisk_dir(ThinDisk self, int arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set dir_. \n"
		""},
	 { "ThinDisk_corotating", _wrap_ThinDisk_corotating, METH_VARARGS, (char *)"\n"
		"corotating() -> bool\n"
		"ThinDisk_corotating(ThinDisk self, bool t)\n"
		"\n"
		"\n"
		"\n"
		"Get dir_==1. \n"
		""},
	 { "ThinDisk_velocityKind", _wrap_ThinDisk_velocityKind, METH_VARARGS, (char *)"\n"
		"velocityKind() -> std::string\n"
		"ThinDisk_velocityKind(ThinDisk self, std::string const & arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set VelocityKind. \n"
		""},
	 { "ThinDisk___call__", _wrap_ThinDisk___call__, METH_VARARGS, (char *)"ThinDisk___call__(ThinDisk self, double const [] coord) -> double"},
	 { "ThinDisk_projectedRadius", _wrap_ThinDisk_projectedRadius, METH_VARARGS, (char *)"\n"
		"ThinDisk_projectedRadius(ThinDisk self, double const [] coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Projected radius of position coord on the equatorial plane. \n"
		""},
	 { "ThinDisk_sphericalPhi", _wrap_ThinDisk_sphericalPhi, METH_VARARGS, (char *)"\n"
		"ThinDisk_sphericalPhi(ThinDisk self, double const [] coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Longitude. \n"
		""},
	 { "ThinDisk_getVelocity", _wrap_ThinDisk_getVelocity, METH_VARARGS, (char *)"\n"
		"ThinDisk_getVelocity(ThinDisk self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Get fluid 4-velocity at point.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"getVelocity() should work at some distance from the equatorial plane.\n"
		"The default implementation calls Metric::Generic::circularVelocity().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "ThinDisk_Impact", _wrap_ThinDisk_Impact, METH_VARARGS, (char *)"\n"
		"Impact(Photon ph, size_t index, AstrobjProperties data=None) -> int\n"
		"ThinDisk_Impact(ThinDisk self, Photon ph, size_t index) -> int\n"
		"\n"
		"\n"
		"\n"
		"Does a photon at these coordinates impact the object?\n"
		"\n"
		"Impact() checks whether a Photon impacts the object between two\n"
		"integration steps of the photon's trajectory (those two steps are\n"
		"photon->getCoord(index, coord1) and photon->getCoord(index+1,\n"
		"coord2)). Impact returns 1 if the photon impacts the object between\n"
		"these two steps, else 0. In many cases of geometrically thick obects,\n"
		"the implementation Astrobj::Standard::Impact() will be fine.\n"
		"\n"
		"Impact will call Generic::processHitQuantities() (which is virtual and\n"
		"may be re-implemented) to compute observable properties on demand: if\n"
		"the data pointer is non-NULL, the object will look in it for pointers\n"
		"to properties which apply to its kind. If a pointer to a property\n"
		"known to this object is present, then the property is computed and\n"
		"store at the pointed-to address. For instance, all objects know the\n"
		"\"intensity\" property. If data->intensity != NULL, the instensity is\n"
		"computed and stored in *data->intensity.\n"
		"\n"
		"If data is non-NULL and only in this case, processHitQuantities() will\n"
		"also call ph->transmit() to update the transmissions of the Photon\n"
		"(see Photon::transmit(size_t, double)). This must not be done if data\n"
		"is NULL (see Astrobj::Complex::Impact() for an explanation).\n"
		"\n"
		"Impact() may not extend the ph Worldline. The only two dates that are\n"
		"guaranteed to be defined are at indices index and index+1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ph:   Gyoto::Photon aimed at the object;\n"
		"\n"
		"index:  Index of the last photon step;\n"
		"\n"
		"data:  Pointer to a structure to hold the observables at impact.\n"
		"\n"
		"1 if impact, 0 if not. \n"
		""},
	 { "new_ThinDisk", _wrap_new_ThinDisk, METH_VARARGS, (char *)"\n"
		"ThinDisk(std::string kind)\n"
		"ThinDisk()\n"
		"ThinDisk(ThinDisk orig)\n"
		"ThinDisk(Astrobj base)\n"
		"new_ThinDisk(long address) -> ThinDisk\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ThinDisk_swigregister", ThinDisk_swigregister, METH_VARARGS, NULL},
	 { "StandardAstrobj_getProperties", _wrap_StandardAstrobj_getProperties, METH_VARARGS, (char *)"\n"
		"StandardAstrobj_getProperties(StandardAstrobj self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "StandardAstrobj_plugins", _wrap_StandardAstrobj_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"StandardAstrobj_plugins(StandardAstrobj self) -> vector_string\n"
		""},
	 { "delete_StandardAstrobj", _wrap_delete_StandardAstrobj, METH_VARARGS, (char *)"\n"
		"delete_StandardAstrobj(StandardAstrobj self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor: does nothing. \n"
		""},
	 { "StandardAstrobj_safetyValue", _wrap_StandardAstrobj_safetyValue, METH_VARARGS, (char *)"\n"
		"safetyValue(double val)\n"
		"StandardAstrobj_safetyValue(StandardAstrobj self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get Standard::safety_value_. \n"
		""},
	 { "StandardAstrobj_deltaInObj", _wrap_StandardAstrobj_deltaInObj, METH_VARARGS, (char *)"\n"
		"deltaInObj() -> double\n"
		"StandardAstrobj_deltaInObj(StandardAstrobj self, double val)\n"
		"\n"
		"\n"
		"\n"
		"Set Generic::delta_inobj_. \n"
		""},
	 { "StandardAstrobj_Impact", _wrap_StandardAstrobj_Impact, METH_VARARGS, (char *)"\n"
		"Impact(Photon ph, size_t index, AstrobjProperties data=None) -> int\n"
		"StandardAstrobj_Impact(StandardAstrobj self, Photon ph, size_t index) -> int\n"
		"\n"
		"\n"
		"\n"
		"Does a photon at these coordinates impact the object?\n"
		"\n"
		"Impact() checks whether a Photon impacts the object between two\n"
		"integration steps of the photon's trajectory (those two steps are\n"
		"photon->getCoord(index, coord1) and photon->getCoord(index+1,\n"
		"coord2)). Impact returns 1 if the photon impacts the object between\n"
		"these two steps, else 0. In many cases of geometrically thick obects,\n"
		"the implementation Astrobj::Standard::Impact() will be fine.\n"
		"\n"
		"Impact will call Generic::processHitQuantities() (which is virtual and\n"
		"may be re-implemented) to compute observable properties on demand: if\n"
		"the data pointer is non-NULL, the object will look in it for pointers\n"
		"to properties which apply to its kind. If a pointer to a property\n"
		"known to this object is present, then the property is computed and\n"
		"store at the pointed-to address. For instance, all objects know the\n"
		"\"intensity\" property. If data->intensity != NULL, the instensity is\n"
		"computed and stored in *data->intensity.\n"
		"\n"
		"If data is non-NULL and only in this case, processHitQuantities() will\n"
		"also call ph->transmit() to update the transmissions of the Photon\n"
		"(see Photon::transmit(size_t, double)). This must not be done if data\n"
		"is NULL (see Astrobj::Complex::Impact() for an explanation).\n"
		"\n"
		"Impact() may not extend the ph Worldline. The only two dates that are\n"
		"guaranteed to be defined are at indices index and index+1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ph:   Gyoto::Photon aimed at the object;\n"
		"\n"
		"index:  Index of the last photon step;\n"
		"\n"
		"data:  Pointer to a structure to hold the observables at impact.\n"
		"\n"
		"1 if impact, 0 if not. \n"
		""},
	 { "StandardAstrobj___call__", _wrap_StandardAstrobj___call__, METH_VARARGS, (char *)"StandardAstrobj___call__(StandardAstrobj self, double const [4] coord) -> double"},
	 { "StandardAstrobj_getVelocity", _wrap_StandardAstrobj_getVelocity, METH_VARARGS, (char *)"\n"
		"StandardAstrobj_getVelocity(StandardAstrobj self, double const [4] pos, double [4] vel)\n"
		"\n"
		"\n"
		"\n"
		"Fluid velocity field.\n"
		"\n"
		"Fill vel with the 4-vector velocity of the fluid at 4-position pos.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position at which to compute velocity;\n"
		"\n"
		"vel:  4-velocity at pos. \n"
		""},
	 { "StandardAstrobj_giveDelta", _wrap_StandardAstrobj_giveDelta, METH_VARARGS, (char *)"\n"
		"StandardAstrobj_giveDelta(StandardAstrobj self, double [8] coord) -> double\n"
		"\n"
		"\n"
		"\n"
		"Maximum inside object.\n"
		"\n"
		"Gives the requested integration stept (in coordinate time t) between\n"
		"two neighbooring points along a portion of geodesic inside an astrobj;\n"
		"the current implementation only considers a constant delta, equal to\n"
		"Standard::deltaInobj()\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  input coordinate at whicht is given \n"
		""},
	 { "new_StandardAstrobj", _wrap_new_StandardAstrobj, METH_VARARGS, (char *)"\n"
		"Standard(Astrobj base)\n"
		"new_StandardAstrobj(long address) -> StandardAstrobj\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor.\n"
		"\n"
		"Make a deep copy of an Astrobj::Standard instance \n"
		""},
	 { "StandardAstrobj_swigregister", StandardAstrobj_swigregister, METH_VARARGS, NULL},
	 { "getMetricRegister", _wrap_getMetricRegister, METH_VARARGS, (char *)"getMetricRegister() -> RegisterEntry"},
	 { "getMetricSubcontractor", _wrap_getMetricSubcontractor, METH_VARARGS, (char *)"\n"
		"getMetricSubcontractor(std::string name, vector_string plugin, int errmode=0) -> Gyoto::Metric::Subcontractor_t\n"
		"getMetricSubcontractor(std::string name, vector_string plugin) -> Gyoto::Metric::Subcontractor_t *\n"
		"\n"
		"\n"
		"\n"
		"Query the Metric register.\n"
		"\n"
		"Query the Metric register to get the Metric::Subcontractor_t\n"
		"correspondig to a given kind name. This function is normally called\n"
		"only from the Factory. If plugin is specified, only a subcontractor\n"
		"matching both name and plugin will be returned, loading the plug-in if\n"
		"necessary. If plugin is the empty string, then the first subcontractor\n"
		"matching name will be returned, and the name of the plug-in it belongs\n"
		"to will be returned in plugin upon output.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  e.g. \"KerrBL\"\n"
		"\n"
		"plugin:  e.g. \"stdplug\".\n"
		"\n"
		"errmode:  int=0. If errmode==0, failure to find a registered Metric by\n"
		"that name is an error. Else, simply return NULL pointer in that case.\n"
		"\n"
		"pointer to the corresponding subcontractor. \n"
		""},
	 { "registerMetric", _wrap_registerMetric, METH_VARARGS, (char *)"\n"
		"registerMetric(std::string kind, Gyoto::Metric::Subcontractor_t * scp)\n"
		"\n"
		"\n"
		"\n"
		"Make a Metric kind known to the Factory.\n"
		"\n"
		"Register a new Metric::Generic sub-class so that the Gyoto::Factory\n"
		"knows it.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"kind:  The kind name which identifies this object type in an XML file,\n"
		"as in < Metric kind=\"name\">\n"
		"\n"
		"scp:  A pointer to the subcontractor, which will communicate with the\n"
		"Gyoto::Factory to build an instance of the class from its XML\n"
		"description \n"
		""},
	 { "initMetricRegister", _wrap_initMetricRegister, METH_VARARGS, (char *)"\n"
		"initMetricRegister()\n"
		"\n"
		"\n"
		"\n"
		"Empty the Metric register.\n"
		"\n"
		"This must be called once. It is called by Gyoto::Register::init(). \n"
		""},
	 { "Metric_getProperties", _wrap_Metric_getProperties, METH_VARARGS, (char *)"\n"
		"Metric_getProperties(Metric self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Metric_plugins", _wrap_Metric_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Metric_plugins(Metric self) -> vector_string\n"
		""},
	 { "Metric_getRefCount", _wrap_Metric_getRefCount, METH_VARARGS, (char *)"Metric_getRefCount(Metric self) -> int"},
	 { "delete_Metric", _wrap_delete_Metric, METH_VARARGS, (char *)"\n"
		"delete_Metric(Metric self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Metric_clone", _wrap_Metric_clone, METH_VARARGS, (char *)"\n"
		"Metric_clone(Metric self) -> Metric\n"
		"\n"
		"\n"
		"\n"
		"Virtual copy constructor. \n"
		""},
	 { "Metric_coordKind", _wrap_Metric_coordKind, METH_VARARGS, (char *)"\n"
		"Metric_coordKind(Metric self) -> int\n"
		"\n"
		"\n"
		"\n"
		"Get coordinate kind. \n"
		""},
	 { "Metric_mass", _wrap_Metric_mass, METH_VARARGS, (char *)"\n"
		"mass(double const arg2)\n"
		"mass(double const arg2, std::string const & unit)\n"
		"mass() -> double\n"
		"Metric_mass(Metric self, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get mass used in unitLength() \n"
		""},
	 { "Metric_unitLength", _wrap_Metric_unitLength, METH_VARARGS, (char *)"\n"
		"unitLength() -> double\n"
		"Metric_unitLength(Metric self, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"unitLength expressed in specified unit \n"
		""},
	 { "Metric_getRmb", _wrap_Metric_getRmb, METH_VARARGS, (char *)"\n"
		"Metric_getRmb(Metric self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the marginally bound radius Should be implemented in derived\n"
		"classes if useful If called on the base class, returns an error \n"
		""},
	 { "Metric_getRms", _wrap_Metric_getRms, METH_VARARGS, (char *)"\n"
		"Metric_getRms(Metric self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the marginally stable (ISCO) radius Should be implemented in\n"
		"derived classes if useful If called on the base class, returns an\n"
		"error \n"
		""},
	 { "Metric_getSpecificAngularMomentum", _wrap_Metric_getSpecificAngularMomentum, METH_VARARGS, (char *)"\n"
		"Metric_getSpecificAngularMomentum(Metric self, double rr) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns the specific angular momentum l=-u_phi/u_t Should be\n"
		"implemented in derived classes if useful If called on the base class,\n"
		"returns an error \n"
		""},
	 { "Metric_getPotential", _wrap_Metric_getPotential, METH_VARARGS, (char *)"\n"
		"Metric_getPotential(Metric self, double const [4] pos, double l_cst) -> double\n"
		"\n"
		"\n"
		"\n"
		"Returns potential W=-ln(|u_t|) for a cst specific angular momentum\n"
		"l_cst Should be implemented in derived classes if useful If called on\n"
		"the base class, returns an error \n"
		""},
	 { "Metric_deltaMin", _wrap_Metric_deltaMin, METH_VARARGS, (char *)"\n"
		"deltaMin() -> double\n"
		"Metric_deltaMin(Metric self, double h1)\n"
		"\n"
		"\n"
		"\n"
		"Set delta_min_ \n"
		""},
	 { "Metric_deltaMax", _wrap_Metric_deltaMax, METH_VARARGS, (char *)"\n"
		"deltaMax() -> double\n"
		"deltaMax(double const [8] pos, double delta_max_external) -> double\n"
		"Metric_deltaMax(Metric self, double h1)\n"
		"\n"
		"\n"
		"\n"
		"Set delta_max_ \n"
		""},
	 { "Metric_deltaMaxOverR", _wrap_Metric_deltaMaxOverR, METH_VARARGS, (char *)"\n"
		"deltaMaxOverR() -> double\n"
		"Metric_deltaMaxOverR(Metric self, double t)\n"
		"\n"
		"\n"
		"\n"
		"Set delta_max_over_r_. \n"
		""},
	 { "Metric_keplerian", _wrap_Metric_keplerian, METH_VARARGS, (char *)"\n"
		"keplerian() -> bool\n"
		"Metric_keplerian(Metric self, bool arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set keplerian_. \n"
		""},
	 { "Metric_cartesianVelocity", _wrap_Metric_cartesianVelocity, METH_VARARGS, (char *)"\n"
		"Metric_cartesianVelocity(Metric self, double const [8] coord, double [3] vel)\n"
		"\n"
		"\n"
		"\n"
		"Compute xprime, yprime and zprime from 8-coordinates. \n"
		""},
	 { "Metric_SysPrimeToTdot", _wrap_Metric_SysPrimeToTdot, METH_VARARGS, (char *)"\n"
		"Metric_SysPrimeToTdot(Metric self, double const [4] coord, double const [3] v) -> double\n"
		"\n"
		"\n"
		"\n"
		"Compute tdot as a function of dr/dt, dtheta/dt and dphi/dt. Everything\n"
		"is in geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  4-position (geometrical units);\n"
		"\n"
		"v:  3-velocity dx1/dx0, dx2/dx0, dx3/dx0;\n"
		"\n"
		"tdot = dx0/dtau. \n"
		""},
	 { "Metric_nullifyCoord", _wrap_Metric_nullifyCoord, METH_VARARGS, (char *)"\n"
		"nullifyCoord(double [8] coord)\n"
		"Metric_nullifyCoord(Metric self, double [8] coord, double & tdot2)\n"
		"\n"
		"\n"
		"\n"
		"Set tdot (coord[4]) such that coord is light-like and return other\n"
		"possible tdot.\n"
		"\n"
		"Set coord[4] so that the 4-velocity coord[4:7] is lightlike, i.e. of\n"
		"norm 0. There may be up to two solutions. coord[4] is set to the\n"
		"hightest. The lowest can be retrieved in tdot2. Everything is\n"
		"expressed in geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-position, coord[4] will be set according to the other\n"
		"elements;\n"
		"\n"
		"tdot2:  will be set to the smallest solution \n"
		""},
	 { "Metric_normalizeFourVel", _wrap_Metric_normalizeFourVel, METH_VARARGS, (char *)"\n"
		"normalizeFourVel(double [8] coord)\n"
		"Metric_normalizeFourVel(Metric self, double const [4] pos, double [4] fourvel)\n"
		"\n"
		"\n"
		"\n"
		"Normalize fourvelvel to -1.\n"
		"\n"
		"First computes threevel as xiprime=xidot/x0dot for i in {1, 2, 3},\n"
		"then computes x0dot using SyPrimeToTdot, then computes again xidot as\n"
		"xidot=xiprime*x0dot.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position;\n"
		"\n"
		"fourvel:  4-velocity, will be renormalized. \n"
		""},
	 { "Metric_ScalarProd", _wrap_Metric_ScalarProd, METH_VARARGS, (char *)"\n"
		"Metric_ScalarProd(Metric self, double const [4] pos, double const [4] u1, double const [4] u2) -> double\n"
		"\n"
		"\n"
		"\n"
		"Scalar product.\n"
		"\n"
		"Compute the scalarproduct of the two quadrivectors u1 and u2 in this\n"
		"Metric, at point pos expressed in coordinate system sys.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position;\n"
		"\n"
		"u1:  1st quadrivector;\n"
		"\n"
		"u2:  2nd quadrivector;\n"
		"\n"
		"u1*u2 \n"
		""},
	 { "Metric_norm", _wrap_Metric_norm, METH_VARARGS, (char *)"\n"
		"Metric_norm(Metric self, double const [4] pos, double const [4] u1) -> double\n"
		"\n"
		"\n"
		"\n"
		"Scalar product.\n"
		"\n"
		"Compute the norm of the quadrivector u1 in this Metric, at point pos\n"
		"expressed in coordinate system sys.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  4-position;\n"
		"\n"
		"u1:  quadrivector;\n"
		"\n"
		"||u1|| \n"
		""},
	 { "Metric_multiplyFourVect", _wrap_Metric_multiplyFourVect, METH_VARARGS, (char *)"\n"
		"Metric_multiplyFourVect(Metric self, double [4] vect, double a)\n"
		"\n"
		"\n"
		"\n"
		"multiply vector by scalar \n"
		""},
	 { "Metric_addFourVect", _wrap_Metric_addFourVect, METH_VARARGS, (char *)"\n"
		"Metric_addFourVect(Metric self, double [4] u1, double const [4] u2)\n"
		"\n"
		"\n"
		"\n"
		"add second vector to first one \n"
		""},
	 { "Metric_projectFourVect", _wrap_Metric_projectFourVect, METH_VARARGS, (char *)"\n"
		"Metric_projectFourVect(Metric self, double const [4] pos, double [4] u1, double const [4] u2)\n"
		"\n"
		"\n"
		"\n"
		"project u1 orthogonally to u2 at pos \n"
		""},
	 { "Metric_dualOneForm", _wrap_Metric_dualOneForm, METH_VARARGS, (char *)"\n"
		"Metric_dualOneForm(Metric self, double const [4] IN_ARRAY1_1, double const [4] IN_ARRAY1_2)\n"
		"\n"
		"\n"
		"\n"
		"Computes dual 1-form Compute the dual 1-form of 4-vector.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"IN_ARRAY1_1:  4-position;\n"
		"\n"
		"IN_ARRAY1_2:  quadrivector;\n"
		"\n"
		"ARGOUT_ARRAY1:  output 1-form \n"
		""},
	 { "Metric_observerTetrad", _wrap_Metric_observerTetrad, METH_VARARGS, (char *)"\n"
		"observerTetrad(unsigned int obskind, double const [4] pos, double [4] fourvel, double [4] screen1, double [4] screen2, double [4] screen3)\n"
		"Metric_observerTetrad(Metric self, double const [4] pos, double [4] fourvel, double [4] screen1, double [4] screen2, double [4] screen3)\n"
		"\n"
		"\n"
		"\n"
		"Computes the orthonormal local tetrad of the observer.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  position,\n"
		"\n"
		"fourvel:  observer 4-velocity (norm -1)\n"
		"\n"
		"screen1:  first vector in the screen plane\n"
		"\n"
		"screen2:  second vector in the screen plane\n"
		"\n"
		"screen3:  vector normal to the screen \n"
		""},
	 { "Metric_GramSchmidt", _wrap_Metric_GramSchmidt, METH_VARARGS, (char *)"\n"
		"Metric_GramSchmidt(Metric self, double const [4] pos, double [4] u0, double [4] u1, double [4] u2, double [4] u3)\n"
		"\n"
		"\n"
		"\n"
		"Apply Gram-Schmidt orthonormalization to a basis.\n"
		"\n"
		"On input, u0 to u3 must be four non-zero norm, independent 4-vectors.\n"
		"On output, they will form an orthonormal basis.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  position,\n"
		"\n"
		"u0:  basis vector\n"
		"\n"
		"u1:  basis vector\n"
		"\n"
		"u2:  basis vector\n"
		"\n"
		"u3:  basis vector \n"
		""},
	 { "Metric_gmunu", _wrap_Metric_gmunu, METH_VARARGS, (char *)"\n"
		"gmunu(double const [4] x, int mu, int nu) -> double\n"
		"Metric_gmunu(Metric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Metric coefficients.\n"
		"\n"
		"The default implementation calls double gmunu(const double * x, int\n"
		"mu, int nu) const.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ARGOUT_ARRAY2:  (g) 4x4 array to store the coeefficients\n"
		"\n"
		"IN_ARRAY1:  (x) 4-position at which to compute the coefficients;\n"
		"\n"
		"Metric coefficient g, at point x \n"
		""},
	 { "Metric_gmunu_up", _wrap_Metric_gmunu_up, METH_VARARGS, (char *)"\n"
		"gmunu_up(double const [4] x, int mu, int nu) -> double\n"
		"Metric_gmunu_up(Metric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Metric contravariant coefficients.\n"
		"\n"
		"The default implementation inverts the covariant coefficients matrix.\n"
		"\n"
		""},
	 { "Metric_jacobian", _wrap_Metric_jacobian, METH_VARARGS, (char *)"\n"
		"Metric_jacobian(Metric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Derivatives of the metric covariant coefficients.\n"
		"\n"
		"The default implementation evaluates them numerically. The gmunu\n"
		"matrix is assumed to be symmetrical but no other assumptions are made\n"
		"at the moment. \n"
		""},
	 { "Metric_gmunu_up_and_jacobian", _wrap_Metric_gmunu_up_and_jacobian, METH_VARARGS, (char *)"\n"
		"Metric_gmunu_up_and_jacobian(Metric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"gmunu_up() and jacobian() in one go \n"
		""},
	 { "Metric_computeNBeta", _wrap_Metric_computeNBeta, METH_VARARGS, (char *)"\n"
		"Metric_computeNBeta(Metric self, double const [4] coord, double & NN, double [3] beta)\n"
		"\n"
		"\n"
		"\n"
		"Computes lapse scalar and shift vector at coord. \n"
		""},
	 { "Metric_myrk4", _wrap_Metric_myrk4, METH_VARARGS, (char *)"\n"
		"Metric_myrk4(Metric self, Worldline line, vector_double coord, double h, vector_double res) -> int\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "Metric_myrk4_adaptive", _wrap_Metric_myrk4_adaptive, METH_VARARGS, (char *)"\n"
		"myrk4_adaptive(Worldline line, vector_double coord, double lastnorm, double normref, vector_double coordnew, double h0, double & h1, double deltamax) -> int\n"
		"Metric_myrk4_adaptive(Metric self, Worldline line, vector_double coord, double lastnorm, double normref, vector_double coordnew, double h0, double & h1) -> int\n"
		"\n"
		"\n"
		"\n"
		"Obsolete, update your code. \n"
		""},
	 { "Metric_isStopCondition", _wrap_Metric_isStopCondition, METH_VARARGS, (char *)"\n"
		"Metric_isStopCondition(Metric self, double const [8] coord) -> int\n"
		"\n"
		"\n"
		"\n"
		"Check whether integration should stop.\n"
		"\n"
		"The integrating loop will ask this the Metric through this method\n"
		"whether or not it is happy to continue the integration. Typically, the\n"
		"Metric should answer 0 when everything is fine, 1 when too close to\n"
		"the event horizon, inside the BH...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"coord:  8-coordinate vector to check. \n"
		""},
	 { "Metric_diff", _wrap_Metric_diff, METH_VARARGS, (char *)"Metric_diff(Metric self, vector_double x, vector_double dxdt, double mass) -> int"},
	 { "Metric_diff31", _wrap_Metric_diff31, METH_VARARGS, (char *)"\n"
		"Metric_diff31(Metric self, vector_double x, vector_double dxdt, double mass) -> int\n"
		"\n"
		"\n"
		"\n"
		"F function such as dx/dt=F(x,cst) for 3+1 case. \n"
		""},
	 { "Metric_setParticleProperties", _wrap_Metric_setParticleProperties, METH_VARARGS, (char *)"\n"
		"Metric_setParticleProperties(Metric self, Worldline line, double const [8] coord)\n"
		"\n"
		"\n"
		"\n"
		"Set Metric-specific constants of motion. Used e.g. in KerrBL. \n"
		""},
	 { "Metric_circularVelocity", _wrap_Metric_circularVelocity, METH_VARARGS, (char *)"\n"
		"circularVelocity(double const [4] pos, double [4] vel, double dir=1.)\n"
		"circularVelocity(double const [4] pos, double [4] vel)\n"
		"Metric_circularVelocity(Metric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield circular velocity at a given position.\n"
		"\n"
		"Give the velocity of a massive particle in circular orbit at the given\n"
		"position projected onto the equatorial plane. Such a velocity may not\n"
		"exist everywhere (or anywhere) for a given metric. This method is\n"
		"intended to be used by Astrobj classes such as Torus or ThinDisk.\n"
		"\n"
		"If keplerian_ is set to true, this method should return the Keplerian\n"
		"velcity instead (derived classes should ensure this, see\n"
		"KerrBL::circularVelocity() for instance).\n"
		"\n"
		"The default implementation throws an error if keplerian_ is set to\n"
		"false.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity,\n"
		"\n"
		"dir:  1 for corotating, -1 for counterrotating. \n"
		""},
	 { "Metric_zamoVelocity", _wrap_Metric_zamoVelocity, METH_VARARGS, (char *)"\n"
		"zamoVelocity(double const [4] pos, double [4] vel)\n"
		"Metric_zamoVelocity(Metric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Yield ZAMO velocity at a given position.\n"
		"\n"
		"Give the velocity of a zero angular momentul observer (whatever is\n"
		"closest to \"at rest\"). The default implementation simply projects\n"
		"(1, 0, 0, 0) othogonally along ephi and normalizes it, thus ensuring\n"
		"that vel is orthogonal to ephi.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pos:  input: position,\n"
		"\n"
		"vel:  output: velocity, \n"
		""},
	 { "Metric_christoffel", _wrap_Metric_christoffel, METH_VARARGS, (char *)"\n"
		"christoffel(double const [4] coord, int const alpha, int const mu, int const nu) -> double\n"
		"christoffel(double [4][4][4] dst, double const [4] coord) -> int\n"
		"Metric_christoffel(Metric self, double const [4] IN_ARRAY1)\n"
		"\n"
		"\n"
		"\n"
		"Chistoffel symbol.\n"
		"\n"
		"Value of Christoffel symbol at point (x1, x2, x3).\n"
		"\n"
		"1 on error, 0 otherwise \n"
		""},
	 { "new_Metric", _wrap_new_Metric, METH_VARARGS, (char *)"\n"
		"Generic(std::string nm)\n"
		"Generic(std::string nm, vector_string plugin)\n"
		"Generic(long address)\n"
		"new_Metric(Metric orig) -> Metric\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "Metric___str__", _wrap_Metric___str__, METH_VARARGS, (char *)"Metric___str__(Metric self) -> std::string"},
	 { "Metric_swigregister", Metric_swigregister, METH_VARARGS, NULL},
	 { "getSpectrumRegister", _wrap_getSpectrumRegister, METH_VARARGS, (char *)"getSpectrumRegister() -> RegisterEntry"},
	 { "registerSpectrum", _wrap_registerSpectrum, METH_VARARGS, (char *)"\n"
		"registerSpectrum(std::string kind, Gyoto::Spectrum::Subcontractor_t * scp)\n"
		"\n"
		"\n"
		"\n"
		"Make a Spectrum kind known to the Factory.\n"
		"\n"
		"Register a new Spectrum::Generic sub-class so that the Gyoto::Factory\n"
		"knows it.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"kind:  The kind name which identifies this object type in an XML file,\n"
		"as in < Spectrum kind=\"name\">\n"
		"\n"
		"scp:  A pointer to the subcontractor, which will communicate with the\n"
		"Gyoto::Factory to build an instance of the class from its XML\n"
		"description \n"
		""},
	 { "getSpectrumSubcontractor", _wrap_getSpectrumSubcontractor, METH_VARARGS, (char *)"\n"
		"getSpectrumSubcontractor(std::string name, vector_string plugins, int errmode=0) -> Gyoto::Spectrum::Subcontractor_t\n"
		"getSpectrumSubcontractor(std::string name, vector_string plugins) -> Gyoto::Spectrum::Subcontractor_t *\n"
		"\n"
		"\n"
		"\n"
		"Query the Spectrum register.\n"
		"\n"
		"Query the Spectrum register to get the Metric::Subcontractor_t\n"
		"correspondig to a given kind name. This function is normally called\n"
		"only from the Factory. If plugin is specified, only a subcontractor\n"
		"matching both name and plugin will be returned, loading the plug-in if\n"
		"necessary. If plugin is the empty string, then the first subcontractor\n"
		"matching name will be returned, and the name of the plug-in it belongs\n"
		"to will be returned in plugin upon output.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  e.g. \"PowerLaw\"\n"
		"\n"
		"plugin:  e.g. \"stdplug\".\n"
		"\n"
		"errmode:  int=0. If errmode==0, failure to find a registered Spectrum\n"
		"by that name is an error. Else, simply return NULL pointer in that\n"
		"case.\n"
		"\n"
		"pointer to the corresponding subcontractor. \n"
		""},
	 { "initSpectrumRegister", _wrap_initSpectrumRegister, METH_VARARGS, (char *)"\n"
		"initSpectrumRegister()\n"
		"\n"
		"\n"
		"\n"
		"Empty the Spectrum register.\n"
		"\n"
		"This must be called once. It is called by Gyoto::Register::init(). \n"
		""},
	 { "Spectrum_getProperties", _wrap_Spectrum_getProperties, METH_VARARGS, (char *)"\n"
		"Spectrum_getProperties(Spectrum self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Spectrum_plugins", _wrap_Spectrum_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Spectrum_plugins(Spectrum self) -> vector_string\n"
		""},
	 { "Spectrum_clone", _wrap_Spectrum_clone, METH_VARARGS, (char *)"\n"
		"Spectrum_clone(Spectrum self) -> Spectrum\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_Spectrum", _wrap_delete_Spectrum, METH_VARARGS, (char *)"\n"
		"delete_Spectrum(Spectrum self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor: does nothing. \n"
		""},
	 { "Spectrum___call__", _wrap_Spectrum___call__, METH_VARARGS, (char *)"\n"
		"__call__(double nu) -> double\n"
		"Spectrum___call__(Spectrum self, double nu, double opacity, double ds) -> double\n"
		""},
	 { "Spectrum_integrate", _wrap_Spectrum_integrate, METH_VARARGS, (char *)"\n"
		"integrate(double nu1, double nu2) -> double\n"
		"Spectrum_integrate(Spectrum self, double nu1, double nu2, Spectrum opacity, double ds) -> double\n"
		"\n"
		"\n"
		"\n"
		"Integrate optically thin I_nu.\n"
		"\n"
		"See operator()(double nu, double opacity, double ds) const\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"nu1:  nu2:  boundaries for the integration\n"
		"\n"
		"opacity:  the frequency-dependent opacity law given as a pointer to a\n"
		"Gyoto::Spectrum::Generic sub-class instance\n"
		"\n"
		"ds:  the element length for spatial integration\n"
		"\n"
		"I, the integral of I_nu between nu1 and nu2 \n"
		""},
	 { "new_Spectrum", _wrap_new_Spectrum, METH_VARARGS, (char *)"\n"
		"Generic(std::string nm)\n"
		"Generic(std::string nm, vector_string plugin)\n"
		"Generic(long address)\n"
		"new_Spectrum(Spectrum orig) -> Spectrum\n"
		""},
	 { "Spectrum___str__", _wrap_Spectrum___str__, METH_VARARGS, (char *)"Spectrum___str__(Spectrum self) -> std::string"},
	 { "Spectrum_swigregister", Spectrum_swigregister, METH_VARARGS, NULL},
	 { "getSpectrometerRegister", _wrap_getSpectrometerRegister, METH_VARARGS, (char *)"getSpectrometerRegister() -> RegisterEntry"},
	 { "getSpectrometerSubcontractor", _wrap_getSpectrometerSubcontractor, METH_VARARGS, (char *)"\n"
		"getSpectrometerSubcontractor(std::string name, vector_string plugins, int errmode=0) -> Gyoto::Spectrometer::Subcontractor_t\n"
		"getSpectrometerSubcontractor(std::string name, vector_string plugins) -> Gyoto::Spectrometer::Subcontractor_t *\n"
		"\n"
		"\n"
		"\n"
		"Query the Spectrometer register.\n"
		"\n"
		"Get the Spectrometer::Subcontractor_t correspondig to a given kind\n"
		"name. This function is normally called only from the Gyoto::Factory.\n"
		"If plugin is specified, only a subcontractor matching both name and\n"
		"plugin will be returned, loading the plug-in if necessary. If plugin\n"
		"is the empty string, then the first subcontractor matching name will\n"
		"be returned, and the name of the plug-in it belongs to will be\n"
		"returned in plugin upon output.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  Name of the subclass to build, e.g. \"Complex\" or \"wave\".\n"
		"\n"
		"plugin:  e.g. \"stdplug\".\n"
		"\n"
		"errmode[in]:  If name is not registered, getSubcontractor() return\n"
		"NULL errmode==1, throws a Gyoto::Error if errmode==0.\n"
		"\n"
		"pointer to the corresponding subcontractor. \n"
		""},
	 { "initSpectrometerRegister", _wrap_initSpectrometerRegister, METH_VARARGS, (char *)"\n"
		"initSpectrometerRegister()\n"
		"\n"
		"\n"
		"\n"
		"Initialize the Spectrometer register This must be called once. It\n"
		"initializes Register_ and registers the standard kinds ( Uniform and\n"
		"Complex). \n"
		""},
	 { "registerSpectrometer", _wrap_registerSpectrometer, METH_VARARGS, (char *)"\n"
		"registerSpectrometer(std::string name, Gyoto::Spectrometer::Subcontractor_t * scp)\n"
		"\n"
		"\n"
		"\n"
		"Register a new Spectrometer kind.\n"
		"\n"
		"Register a new Spectrometer::Generic sub-class so that the\n"
		"Gyoto::Factory knows it.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  The kind name which identifies this object type in an XML file,\n"
		"as in < Spectrometer kind=\"name\">. For clarity, this should be the\n"
		"same as the value of kindid_ for this object, but it is not mandatory.\n"
		"\n"
		"scp:  A pointer to the subcontractor, which will communicate with the\n"
		"Gyoto::Factory to build an instance of the class from its XML\n"
		"description. If all parameters can be set using setParameter(), this\n"
		"can be: \n"
		""},
	 { "Spectrometer_nsamples__set", _wrap_Spectrometer_nsamples__set, METH_VARARGS, (char *)"Spectrometer_nsamples__set(Spectrometer self, size_t nsamples_)"},
	 { "Spectrometer_nsamples__get", _wrap_Spectrometer_nsamples__get, METH_VARARGS, (char *)"Spectrometer_nsamples__get(Spectrometer self) -> size_t"},
	 { "Spectrometer_nboundaries__set", _wrap_Spectrometer_nboundaries__set, METH_VARARGS, (char *)"Spectrometer_nboundaries__set(Spectrometer self, size_t nboundaries_)"},
	 { "Spectrometer_nboundaries__get", _wrap_Spectrometer_nboundaries__get, METH_VARARGS, (char *)"Spectrometer_nboundaries__get(Spectrometer self) -> size_t"},
	 { "Spectrometer_boundaries__set", _wrap_Spectrometer_boundaries__set, METH_VARARGS, (char *)"Spectrometer_boundaries__set(Spectrometer self, double * boundaries_)"},
	 { "Spectrometer_boundaries__get", _wrap_Spectrometer_boundaries__get, METH_VARARGS, (char *)"Spectrometer_boundaries__get(Spectrometer self) -> double *"},
	 { "Spectrometer_chanind__set", _wrap_Spectrometer_chanind__set, METH_VARARGS, (char *)"Spectrometer_chanind__set(Spectrometer self, size_t * chanind_)"},
	 { "Spectrometer_chanind__get", _wrap_Spectrometer_chanind__get, METH_VARARGS, (char *)"Spectrometer_chanind__get(Spectrometer self) -> size_t *"},
	 { "Spectrometer_midpoints__set", _wrap_Spectrometer_midpoints__set, METH_VARARGS, (char *)"Spectrometer_midpoints__set(Spectrometer self, double * midpoints_)"},
	 { "Spectrometer_midpoints__get", _wrap_Spectrometer_midpoints__get, METH_VARARGS, (char *)"Spectrometer_midpoints__get(Spectrometer self) -> double *"},
	 { "Spectrometer_widths__set", _wrap_Spectrometer_widths__set, METH_VARARGS, (char *)"Spectrometer_widths__set(Spectrometer self, double * widths_)"},
	 { "Spectrometer_widths__get", _wrap_Spectrometer_widths__get, METH_VARARGS, (char *)"Spectrometer_widths__get(Spectrometer self) -> double *"},
	 { "Spectrometer_getProperties", _wrap_Spectrometer_getProperties, METH_VARARGS, (char *)"\n"
		"Spectrometer_getProperties(Spectrometer self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "Spectrometer_plugins", _wrap_Spectrometer_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"Spectrometer_plugins(Spectrometer self) -> vector_string\n"
		""},
	 { "Spectrometer_clone", _wrap_Spectrometer_clone, METH_VARARGS, (char *)"\n"
		"Spectrometer_clone(Spectrometer self) -> Spectrometer\n"
		"\n"
		"\n"
		"\n"
		"Clone an instance.\n"
		"\n"
		"Use this to get a deep copy of an instance;\n"
		"\n"
		"Most implementations will use the copy constructor: \n"
		""},
	 { "delete_Spectrometer", _wrap_delete_Spectrometer, METH_VARARGS, (char *)"\n"
		"delete_Spectrometer(Spectrometer self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor.\n"
		"\n"
		"Takes care of deleting the arrays (if the pointers are not NULL). \n"
		""},
	 { "Spectrometer_kindid", _wrap_Spectrometer_kindid, METH_VARARGS, (char *)"\n"
		"kindid() -> Gyoto::Spectrometer::kind_t\n"
		"Spectrometer_kindid(Spectrometer self, Gyoto::Spectrometer::kind_t arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set Generic::kindid_.\n"
		"\n"
		"This should rarely be used as the Generic::kindid_ attribute usually\n"
		"is set in the constructor and doesn't change after that.\n"
		"\n"
		"Always set to the address of a static variable, not to a temporary.\n"
		"Usually your class should have a static member for that purpose: \n"
		""},
	 { "Spectrometer_nSamples", _wrap_Spectrometer_nSamples, METH_VARARGS, (char *)"\n"
		"Spectrometer_nSamples(Spectrometer self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get Generic::nsamples_. \n"
		""},
	 { "Spectrometer_getNBoundaries", _wrap_Spectrometer_getNBoundaries, METH_VARARGS, (char *)"\n"
		"Spectrometer_getNBoundaries(Spectrometer self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get Generic::nboundaries_. \n"
		""},
	 { "Spectrometer_getMidpoints", _wrap_Spectrometer_getMidpoints, METH_VARARGS, (char *)"\n"
		"getMidpoints() -> double const\n"
		"Spectrometer_getMidpoints(Spectrometer self, double [] data, std::string unit)\n"
		"\n"
		"\n"
		"\n"
		"Copy Generic::midpoints_, converting to unit.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"data:  an array of Generic::nsamples_ doubles to fill with result\n"
		"\n"
		"unit:  a string \n"
		""},
	 { "Spectrometer_getChannelBoundaries", _wrap_Spectrometer_getChannelBoundaries, METH_VARARGS, (char *)"\n"
		"getChannelBoundaries(double [] data, std::string unit)\n"
		"Spectrometer_getChannelBoundaries(Spectrometer self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get Generic::boundaries_. \n"
		""},
	 { "Spectrometer_getChannelIndices", _wrap_Spectrometer_getChannelIndices, METH_VARARGS, (char *)"\n"
		"Spectrometer_getChannelIndices(Spectrometer self) -> size_t const *\n"
		"\n"
		"\n"
		"\n"
		"Get Generic::chanind_. \n"
		""},
	 { "Spectrometer_getWidths", _wrap_Spectrometer_getWidths, METH_VARARGS, (char *)"\n"
		"getWidths() -> double const\n"
		"Spectrometer_getWidths(Spectrometer self, double [] data, std::string unit)\n"
		"\n"
		"\n"
		"\n"
		"Copy Generic::widths_, converting to unit.\n"
		"\n"
		"Think carefully before using: widths are often used to convert\n"
		"spectral flux density to flux. If flux density is per Herz, you don't\n"
		"need to convert widths.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"data:  an array of Generic::nboundaries_ doubles to fill with result\n"
		"\n"
		"unit:  a string \n"
		""},
	 { "new_Spectrometer", _wrap_new_Spectrometer, METH_VARARGS, (char *)"\n"
		"Generic(std::string nm)\n"
		"Generic(std::string nm, vector_string plugin)\n"
		"Generic(long address)\n"
		"new_Spectrometer(Spectrometer orig) -> Spectrometer\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor.\n"
		"\n"
		"Takes care of (deep) copying all the members known to the base class.\n"
		"\n"
		""},
	 { "Spectrometer___str__", _wrap_Spectrometer___str__, METH_VARARGS, (char *)"Spectrometer___str__(Spectrometer self) -> std::string"},
	 { "Spectrometer_swigregister", Spectrometer_swigregister, METH_VARARGS, NULL},
	 { "new_myCplxSpectroIdxExcept", _wrap_new_myCplxSpectroIdxExcept, METH_VARARGS, (char *)"new_myCplxSpectroIdxExcept() -> myCplxSpectroIdxExcept"},
	 { "delete_myCplxSpectroIdxExcept", _wrap_delete_myCplxSpectroIdxExcept, METH_VARARGS, (char *)"delete_myCplxSpectroIdxExcept(myCplxSpectroIdxExcept self)"},
	 { "myCplxSpectroIdxExcept_swigregister", myCplxSpectroIdxExcept_swigregister, METH_VARARGS, NULL},
	 { "ComplexSpectrometer_isThreadSafe", _wrap_ComplexSpectrometer_isThreadSafe, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_isThreadSafe(ComplexSpectrometer self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether this class is thread-safe.\n"
		"\n"
		"Return True if this object is thread-safe, i.e. if an instance and its\n"
		"clone can be used in parallel threads (in the context of\n"
		"Scenery::raytrace()). Known objects which are not thread-safe include\n"
		"Lorene metrics and everything from the Python plug-in.\n"
		"\n"
		"The default implementation considers that the class itself is thread\n"
		"safe and recurses into the declared properties to check whether they\n"
		"are safe too. Classes that abide to the Object/Property paradigm and\n"
		"are themselves thread-safe have nothing special to do.\n"
		"\n"
		"Objects that clone children in their copy constructor that are not\n"
		"declared as properties must take these children into account.\n"
		"\n"
		"Classes that are never thread-safe must declare it. It acn be easily\n"
		"done using GYOTO_OBJECT_THREAD_SAFETY in the class declaration and\n"
		"GYOTO_PROPERTY_THREAD_UNSAFE in the class definition. \n"
		""},
	 { "ComplexSpectrometer_clone", _wrap_ComplexSpectrometer_clone, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_clone(ComplexSpectrometer self) -> ComplexSpectrometer\n"
		"\n"
		"\n"
		"\n"
		"Clone an instance.\n"
		"\n"
		"Use this to get a deep copy of an instance;\n"
		"\n"
		"Most implementations will use the copy constructor: \n"
		""},
	 { "delete_ComplexSpectrometer", _wrap_delete_ComplexSpectrometer, METH_VARARGS, (char *)"\n"
		"delete_ComplexSpectrometer(ComplexSpectrometer self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor.\n"
		"\n"
		"Frees every SmartPointer<Spectrometer::Generic> before freed the array\n"
		"itself. \n"
		""},
	 { "ComplexSpectrometer_append", _wrap_ComplexSpectrometer_append, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_append(ComplexSpectrometer self, Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > element)\n"
		"\n"
		"\n"
		"\n"
		"Add element at the end of the array.\n"
		"\n"
		"If the Spectrometer::Complex itself does not have a metric already\n"
		"assigned, it takes it from the new element. Else, it sets the metric\n"
		"in the new element to its own. This ensures that all elements use the\n"
		"same metric (this heuristic is not entirely fool-proof, it's safer to\n"
		"set the metric directly in the Spectrometer::Complex). \n"
		""},
	 { "ComplexSpectrometer_remove", _wrap_ComplexSpectrometer_remove, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_remove(ComplexSpectrometer self, size_t i)\n"
		"\n"
		"\n"
		"\n"
		"Remove i-th element from the array. \n"
		""},
	 { "ComplexSpectrometer_getCardinal", _wrap_ComplexSpectrometer_getCardinal, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_getCardinal(ComplexSpectrometer self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get the number of elements in the array. \n"
		""},
	 { "ComplexSpectrometer_tell", _wrap_ComplexSpectrometer_tell, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_tell(ComplexSpectrometer self, Teller msg)\n"
		"\n"
		"\n"
		"\n"
		"This is how a Teller tells.\n"
		"\n"
		"A teller will basically call listener->tell(this).\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"msg:  Teller* the Teller who is telling... Useful if the Listener\n"
		"listens to several Tellers. \n"
		""},
	 { "ComplexSpectrometer_fillElement", _wrap_ComplexSpectrometer_fillElement, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_fillElement(ComplexSpectrometer self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Fill in the XML entity.\n"
		"\n"
		"Loops on elements_[i]-> fillElement(); \n"
		""},
	 { "ComplexSpectrometer_setParameters", _wrap_ComplexSpectrometer_setParameters, METH_VARARGS, (char *)"\n"
		"ComplexSpectrometer_setParameters(ComplexSpectrometer self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop in the (templated) subcontractor.\n"
		"\n"
		"In the case of Spectrometer::Complex, the setParameter() API is not\n"
		"sufficient: setParameters() needs access to the FactoryMessenger to\n"
		"instantiate children for the SubSpectrometers. \n"
		""},
	 { "ComplexSpectrometer___getitem__", _wrap_ComplexSpectrometer___getitem__, METH_VARARGS, (char *)"ComplexSpectrometer___getitem__(ComplexSpectrometer self, size_t i) -> Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >"},
	 { "ComplexSpectrometer___setitem__", _wrap_ComplexSpectrometer___setitem__, METH_VARARGS, (char *)"ComplexSpectrometer___setitem__(ComplexSpectrometer self, int i, Spectrometer p)"},
	 { "new_ComplexSpectrometer", _wrap_new_ComplexSpectrometer, METH_VARARGS, (char *)"\n"
		"Complex()\n"
		"Complex(ComplexSpectrometer arg2)\n"
		"Complex(Spectrometer base)\n"
		"new_ComplexSpectrometer(long address) -> ComplexSpectrometer\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "ComplexSpectrometer_swigregister", ComplexSpectrometer_swigregister, METH_VARARGS, NULL},
	 { "UniformSpectrometer_getProperties", _wrap_UniformSpectrometer_getProperties, METH_VARARGS, (char *)"\n"
		"UniformSpectrometer_getProperties(UniformSpectrometer self) -> Property\n"
		"\n"
		"\n"
		"\n"
		"Get list of properties.\n"
		"\n"
		"This method is declared automatically by the GYOTO_OBJECT macro and\n"
		"defined automatically by the GYOTO_PROPERTY_END macro. \n"
		""},
	 { "UniformSpectrometer_plugins", _wrap_UniformSpectrometer_plugins, METH_VARARGS, (char *)"\n"
		"plugins(vector_string plugname)\n"
		"UniformSpectrometer_plugins(UniformSpectrometer self) -> vector_string\n"
		""},
	 { "UniformSpectrometer_clone", _wrap_UniformSpectrometer_clone, METH_VARARGS, (char *)"\n"
		"UniformSpectrometer_clone(UniformSpectrometer self) -> Spectrometer\n"
		"\n"
		"\n"
		"\n"
		"Cloner. \n"
		""},
	 { "delete_UniformSpectrometer", _wrap_delete_UniformSpectrometer, METH_VARARGS, (char *)"\n"
		"delete_UniformSpectrometer(UniformSpectrometer self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "UniformSpectrometer_kindid", _wrap_UniformSpectrometer_kindid, METH_VARARGS, (char *)"\n"
		"kindid() -> Gyoto::Spectrometer::kind_t\n"
		"kindid(Gyoto::Spectrometer::kind_t arg2)\n"
		"UniformSpectrometer_kindid(UniformSpectrometer self, Gyoto::Spectrometer::kind_t arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set Generic::kindid_.\n"
		"\n"
		"This should rarely be used as the Generic::kindid_ attribute usually\n"
		"is set in the constructor and doesn't change after that.\n"
		"\n"
		"Always set to the address of a static variable, not to a temporary.\n"
		"Usually your class should have a static member for that purpose: \n"
		""},
	 { "UniformSpectrometer_kind", _wrap_UniformSpectrometer_kind, METH_VARARGS, (char *)"\n"
		"kind(std::string const & name)\n"
		"UniformSpectrometer_kind(UniformSpectrometer self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Get kind_. \n"
		""},
	 { "UniformSpectrometer_nSamples", _wrap_UniformSpectrometer_nSamples, METH_VARARGS, (char *)"\n"
		"nSamples() -> size_t\n"
		"UniformSpectrometer_nSamples(UniformSpectrometer self, size_t n)\n"
		"\n"
		"\n"
		"\n"
		"Get Generic::nsamples_. \n"
		""},
	 { "UniformSpectrometer_band", _wrap_UniformSpectrometer_band, METH_VARARGS, (char *)"\n"
		"band(vector_double nu)\n"
		"band(vector_double nu, std::string const & unit)\n"
		"band() -> vector_double\n"
		"band(std::string const & unit) -> vector_double\n"
		"band(double [2] nu)\n"
		"band(double [2] nu, std::string const & unit, std::string const & kind)\n"
		"UniformSpectrometer_band(UniformSpectrometer self, double [] nu, std::string const & unit)\n"
		""},
	 { "UniformSpectrometer_getBand", _wrap_UniformSpectrometer_getBand, METH_VARARGS, (char *)"\n"
		"UniformSpectrometer_getBand(UniformSpectrometer self) -> double const *\n"
		"\n"
		"\n"
		"\n"
		"Get Uniform::band_. \n"
		""},
	 { "UniformSpectrometer_fillProperty", _wrap_UniformSpectrometer_fillProperty, METH_VARARGS, (char *)"\n"
		"UniformSpectrometer_fillProperty(UniformSpectrometer self, FactoryMessenger fmp, Property p)\n"
		"\n"
		"\n"
		"\n"
		"Output a single Property to XML.\n"
		"\n"
		"The base implementation decides what to do based on the p.type. The\n"
		"format matches how setParameters() an setParameter() would interpret\n"
		"the XML descition.\n"
		"\n"
		"Overriding this method should be avoided, but makes sense in some\n"
		"cases (for instance Screen::fillProperty() selects a different unit\n"
		"for Distance based on its magnitude, so that stellar sizes are\n"
		"expressed in solar radii while smaller sizes can be expressed in\n"
		"meters and larger sizes in parsecs).\n"
		"\n"
		"Overriding implementation should fall-back on calling the\n"
		"implementation in the direct parent class: \n"
		""},
	 { "UniformSpectrometer_setParameters", _wrap_UniformSpectrometer_setParameters, METH_VARARGS, (char *)"\n"
		"UniformSpectrometer_setParameters(UniformSpectrometer self, FactoryMessenger fmp)\n"
		"\n"
		"\n"
		"\n"
		"Main loop for parsing Properties from XML description.\n"
		"\n"
		"This function queries the FactoryMessenger for elements to parse, and\n"
		"tries to matche each element to a Property to set it  accordingly. Any\n"
		"class that tries to be buildable from XML must supply a subcontractor\n"
		"(for base classes such as Metric, Astrobj, Spectrum  and Spectrometer,\n"
		"it is done as a template that must be  specialized for each class).\n"
		"This subcontractor typically looks somewhat like this: Although this\n"
		"is discouraged, it is possible to override the following functions to\n"
		"customize how XML entities are parsed:    - setParameters() if low-\n"
		"level access to the      FactoryMessenger is required;    -\n"
		"setParameter(std::string name, std::string content,\n"
		"std::string unit)      to interpret an entity that does not match a\n"
		"Property      (e.g. alternative name);    -\n"
		"setParameter(Gyoto::Property const &p, std::string const &name,\n"
		"std::string const &content, std::string const &unit)      to change\n"
		"how a Property is interpreted. \n"
		""},
	 { "new_UniformSpectrometer", _wrap_new_UniformSpectrometer, METH_VARARGS, (char *)"\n"
		"Uniform()\n"
		"Uniform(size_t nsamples, double band_min, double band_max, Gyoto::Spectrometer::kind_t kind)\n"
		"Uniform(UniformSpectrometer arg2)\n"
		"Uniform(Spectrometer base)\n"
		"new_UniformSpectrometer(long address) -> UniformSpectrometer\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "UniformSpectrometer_swigregister", UniformSpectrometer_swigregister, METH_VARARGS, NULL},
	 { "debug", _wrap_debug, METH_VARARGS, (char *)"\n"
		"debug(int mode)\n"
		"debug() -> int\n"
		""},
	 { "verbose", _wrap_verbose, METH_VARARGS, (char *)"\n"
		"verbose(int mode)\n"
		"verbose() -> int\n"
		""},
	 { "convert", _wrap_convert, METH_VARARGS, (char *)"convert(double *const x, std::size_t const nelem, double const mass_sun, double const distance_kpc, std::string const unit)"},
	 { "atof", _wrap_atof, METH_VARARGS, (char *)"atof(char const * str) -> double"},
	 { "help", _wrap_help, METH_VARARGS, (char *)"help(std::string class_name)"},
	 { "split", _wrap_split, METH_VARARGS, (char *)"split(std::string const & src, std::string const & delim) -> vector_string"},
	 { "bessi0", _wrap_bessi0, METH_VARARGS, (char *)"bessi0(double xx) -> double"},
	 { "bessi1", _wrap_bessi1, METH_VARARGS, (char *)"bessi1(double xx) -> double"},
	 { "bessk0", _wrap_bessk0, METH_VARARGS, (char *)"bessk0(double xx) -> double"},
	 { "bessk1", _wrap_bessk1, METH_VARARGS, (char *)"bessk1(double xx) -> double"},
	 { "bessk", _wrap_bessk, METH_VARARGS, (char *)"bessk(int nn, double xx) -> double"},
	 { "hypergeom", _wrap_hypergeom, METH_VARARGS, (char *)"hypergeom(double kappaIndex, double thetae) -> double"},
	 { "cartesianToSpherical", _wrap_cartesianToSpherical, METH_VARARGS, (char *)"cartesianToSpherical(double const [3] cpos, double [3] spos)"},
	 { "sphericalToCartesian", _wrap_sphericalToCartesian, METH_VARARGS, (char *)"sphericalToCartesian(double const [3] spos, double [3] cpos)"},
	 { "matrix4Invert", _wrap_matrix4Invert, METH_VARARGS, (char *)"matrix4Invert(double const [4][4] IN_ARRAY2)"},
	 { "matrix4CircularInvert", _wrap_matrix4CircularInvert, METH_VARARGS, (char *)"matrix4CircularInvert(double const [4][4] IN_ARRAY2)"},
	 { "new_Factory", _wrap_new_Factory, METH_VARARGS, (char *)"\n"
		"Factory(char * filename)\n"
		"Factory(Gyoto::SmartPointer< Gyoto::Scenery > sc)\n"
		"Factory(Gyoto::SmartPointer< Gyoto::Metric::Generic > gg)\n"
		"Factory(Gyoto::SmartPointer< Gyoto::Astrobj::Generic > ao)\n"
		"Factory(Gyoto::SmartPointer< Gyoto::Spectrum::Generic > sp)\n"
		"Factory(Gyoto::SmartPointer< Gyoto::Screen > screen)\n"
		"Factory(Gyoto::SmartPointer< Gyoto::Photon > photon)\n"
		"new_Factory(Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > Spectrometer) -> Factory\n"
		"\n"
		"\n"
		"\n"
		"Constructor for saving (or printing) a Spectrometer. \n"
		""},
	 { "delete_Factory", _wrap_delete_Factory, METH_VARARGS, (char *)"\n"
		"delete_Factory(Factory self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "Factory_kind", _wrap_Factory_kind, METH_VARARGS, (char *)"\n"
		"Factory_kind(Factory self) -> std::string const\n"
		"\n"
		"\n"
		"\n"
		"Get Factory::kind_. \n"
		""},
	 { "Factory_scenery", _wrap_Factory_scenery, METH_VARARGS, (char *)"\n"
		"Factory_scenery(Factory self) -> Gyoto::SmartPointer< Gyoto::Scenery >\n"
		"\n"
		"\n"
		"\n"
		"Find Scenery element, instantiate it and get it.\n"
		"\n"
		"Scenery must be the root element. scenery() will call metric(),\n"
		"astrobj() and screen(). \n"
		""},
	 { "Factory_photon", _wrap_Factory_photon, METH_VARARGS, (char *)"\n"
		"Factory_photon(Factory self) -> Gyoto::SmartPointer< Gyoto::Photon >\n"
		"\n"
		"\n"
		"\n"
		"Find Photon element, instantiate it and get it.\n"
		"\n"
		"Photon may be either the root element or directly within the root\n"
		"element. \n"
		""},
	 { "Factory_spectrum", _wrap_Factory_spectrum, METH_VARARGS, (char *)"\n"
		"Factory_spectrum(Factory self) -> Gyoto::SmartPointer< Gyoto::Spectrum::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Find Photon element, instantiate it and get it.\n"
		"\n"
		"Photon may be either the root element or directly within the root\n"
		"element. \n"
		""},
	 { "Factory_spectrometer", _wrap_Factory_spectrometer, METH_VARARGS, (char *)"\n"
		"Factory_spectrometer(Factory self) -> Gyoto::SmartPointer< Gyoto::Spectrometer::Generic >\n"
		"\n"
		"\n"
		"\n"
		"Find Spectrometer element, instantiate it and get it.\n"
		"\n"
		"Spectrometer may be either the root element or directly within the\n"
		"root element. \n"
		""},
	 { "Factory_write", _wrap_Factory_write, METH_VARARGS, (char *)"\n"
		"write(char const *const fname=None)\n"
		"Factory_write(Factory self)\n"
		"\n"
		"\n"
		"\n"
		"Write constructed XML representation to file. \n"
		""},
	 { "Factory_format", _wrap_Factory_format, METH_VARARGS, (char *)"\n"
		"Factory_format(Factory self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Get constructed XML representation as std::string. \n"
		""},
	 { "Factory_metric", _wrap_Factory_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"Factory_metric(Factory self, Gyoto::SmartPointer< Gyoto::Metric::Generic > gg, xercesc::DOMElement * el)\n"
		"\n"
		"\n"
		"\n"
		"Set Metric for this document.\n"
		"\n"
		"If called several times for the same document, the metric\n"
		"SmartPointers must point to the same instance or an error will be\n"
		"thrown using Gyoto::throwError(). \n"
		""},
	 { "Factory_astrobj", _wrap_Factory_astrobj, METH_VARARGS, (char *)"\n"
		"astrobj() -> Gyoto::SmartPointer< Gyoto::Astrobj::Generic >\n"
		"Factory_astrobj(Factory self, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > ao, xercesc::DOMElement * el)\n"
		"\n"
		"\n"
		"\n"
		"Set Astrobj for this document.\n"
		"\n"
		"If called several times for the same document, the astrobj\n"
		"SmartPointers must point to the same instance or an error will be\n"
		"thrown using Gyoto::throwError(). \n"
		""},
	 { "Factory_screen", _wrap_Factory_screen, METH_VARARGS, (char *)"\n"
		"screen() -> Gyoto::SmartPointer< Gyoto::Screen >\n"
		"Factory_screen(Factory self, Gyoto::SmartPointer< Gyoto::Screen > scr, xercesc::DOMElement * el)\n"
		"\n"
		"\n"
		"\n"
		"Set Screen for this document.\n"
		"\n"
		"If called several times for the same document, the screen\n"
		"SmartPointers must point to the same instance or an error will be\n"
		"thrown using Gyoto::throwError(). \n"
		""},
	 { "Factory_setContent", _wrap_Factory_setContent, METH_VARARGS, (char *)"\n"
		"Factory_setContent(Factory self, std::string content, xercesc::DOMElement * el)\n"
		"\n"
		"\n"
		"\n"
		"Set text content of XML element. \n"
		""},
	 { "Factory_setParameter", _wrap_Factory_setParameter, METH_VARARGS, (char *)"\n"
		"setParameter(std::string name, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, double value, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, int value, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, unsigned int value, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, long value, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, unsigned long value, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, std::string value, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, double [] val, size_t nelem, xercesc::DOMElement * pel, Gyoto::FactoryMessenger ** child=None)\n"
		"setParameter(std::string name, double [] val, size_t nelem, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, vector_double val, xercesc::DOMElement * pel, Gyoto::FactoryMessenger ** child=None)\n"
		"setParameter(std::string name, vector_double val, xercesc::DOMElement * pel)\n"
		"setParameter(std::string name, vector_unsigned_long val, xercesc::DOMElement * pel, Gyoto::FactoryMessenger ** child=None)\n"
		"Factory_setParameter(Factory self, std::string name, vector_unsigned_long val, xercesc::DOMElement * pel)\n"
		""},
	 { "Factory_fullPath", _wrap_Factory_fullPath, METH_VARARGS, (char *)"\n"
		"Factory_fullPath(Factory self, std::string relpath) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Transform relative path into absolute path.\n"
		"\n"
		"relpath is interpreted as follows:\n"
		"\n"
		"If it starts with \"/\", it is interpreted as an absolute path and is\n"
		"returned as is.\n"
		"\n"
		"If it is prefixed with \"`pwd`/\", the rest of relpath is interpreted\n"
		"as relative to the current working directory, i.e. fullPath() tries to\n"
		"mimic how the shell would expand relpath into an absolute path.\n"
		"\n"
		"In any other circumstance, relpath is interpreted to relative to the\n"
		"directory where the XML file resides.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"relpath:  Path specification.\n"
		"\n"
		"Absolute path to same file. \n"
		""},
	 { "Factory_getScenery", _wrap_Factory_getScenery, METH_VARARGS, (char *)"Factory_getScenery(Factory self) -> Gyoto::SmartPointer< Gyoto::Scenery >"},
	 { "Factory_getPhoton", _wrap_Factory_getPhoton, METH_VARARGS, (char *)"Factory_getPhoton(Factory self) -> Gyoto::SmartPointer< Gyoto::Photon >"},
	 { "Factory_swigregister", Factory_swigregister, METH_VARARGS, NULL},
	 { "new_FactoryMessenger", _wrap_new_FactoryMessenger, METH_VARARGS, (char *)"\n"
		"FactoryMessenger(Factory arg2, xercesc::DOMElement * arg3)\n"
		"new_FactoryMessenger(FactoryMessenger parent, std::string arg3) -> FactoryMessenger\n"
		"\n"
		"\n"
		"\n"
		"Constructor called before fillElement. \n"
		""},
	 { "FactoryMessenger_reset", _wrap_FactoryMessenger_reset, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_reset(FactoryMessenger self)\n"
		"\n"
		"\n"
		"\n"
		"Get back to first parameter. \n"
		""},
	 { "FactoryMessenger_photon", _wrap_FactoryMessenger_photon, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_photon(FactoryMessenger self) -> Gyoto::SmartPointer< Gyoto::Photon >\n"
		"\n"
		"\n"
		"\n"
		"Build and get the Photon described in this XML file.\n"
		"\n"
		"An Gyoto XML file may contain at most a single Photon section and it\n"
		"may be present about anywhere in the XML tree. Individual\n"
		"subcontractors should not try to interpret this section directly, but\n"
		"should call photon() to find and interpret the Photon section. \n"
		""},
	 { "FactoryMessenger_getNextParameter", _wrap_FactoryMessenger_getNextParameter, METH_VARARGS, (char *)"\n"
		"getNextParameter(std::string * name, std::string * content, std::string * unit=None) -> int\n"
		"FactoryMessenger_getNextParameter(FactoryMessenger self, std::string * name, std::string * content) -> int\n"
		"\n"
		"\n"
		"\n"
		"Get name and value of next parameter.\n"
		"\n"
		"On each call, return a pair name-content of one of the children_.\n"
		"Usually, \"name\" is the name of a parameter and \"content\" is the\n"
		"string representation of the corresponding value. For instance:\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  upon output, name of the child\n"
		"\n"
		"content:  of the child\n"
		"\n"
		"unit=:  propertty of the child\n"
		"\n"
		"1 if there remains parameters to retrieve, 0 otherwise. \n"
		""},
	 { "FactoryMessenger_getSelfAttribute", _wrap_FactoryMessenger_getSelfAttribute, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_getSelfAttribute(FactoryMessenger self, std::string attrname) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Get attribute of FactoryMessenger::element_.\n"
		"\n"
		"For instance a Spectrometer description looks like this and the\n"
		"Spectrometer builder uses getSelfAttribute() to retrieve the\n"
		"attributes \"kind\" and \"nsamples\".\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attrname:  name of the attribute\n"
		"\n"
		"attrvalue \n"
		""},
	 { "FactoryMessenger_getAttribute", _wrap_FactoryMessenger_getAttribute, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_getAttribute(FactoryMessenger self, std::string attrname) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Get attribute of a last retrieved parameter.\n"
		"\n"
		"For instance\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attrname:  name of the attribute\n"
		"\n"
		"attrvalue \n"
		""},
	 { "FactoryMessenger_getFullContent", _wrap_FactoryMessenger_getFullContent, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_getFullContent(FactoryMessenger self) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Get full content of element_.\n"
		"\n"
		"In exceptional circumstances, it may be necessary to get the entire\n"
		"text content of the topmost element FactoryMessenger::element_ instead\n"
		"or getting only the individual FactoryMessenger::children_ .\n"
		"\n"
		"For instance a Spectrometer description looks like this: and the\n"
		"Spectrometer builder uses getFullContent() to retrieve the spectral\n"
		"boundaries (2.0e-6 and 2.4e-6 here). \n"
		""},
	 { "FactoryMessenger_getChild", _wrap_FactoryMessenger_getChild, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_getChild(FactoryMessenger self) -> FactoryMessenger\n"
		"\n"
		"\n"
		"\n"
		"Get another FactoryMessenger instance initialized to current child.\n"
		"\n"
		"If one of the FactoryMessenger::children_ is complex (for instance the\n"
		"complete description of a Gyoto::Spectrum), it is possible to\n"
		"initialize a new FactoryMessenger and call the correct subcontractor:\n"
		"The child is allocated with new and must be deleted after use. \n"
		""},
	 { "FactoryMessenger_fullPath", _wrap_FactoryMessenger_fullPath, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_fullPath(FactoryMessenger self, std::string relpath) -> std::string\n"
		"\n"
		"\n"
		"\n"
		"Transform path into full path specification.\n"
		"\n"
		"This function takes a relative path (e.g. ../foo/bar.data) and\n"
		"transforms it into a full path (starting with \"/\"). It is not\n"
		"guaranteed to be portable (we assume that the path separator is \"/\"\n"
		"and that absolute paths start with \"/\").\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"relpath:  path relative to the directory where the XML file on which\n"
		"the Factory works is located.\n"
		"\n"
		"fullpath at full path specification to the same point pon the file-\n"
		"system. \n"
		""},
	 { "FactoryMessenger_metric", _wrap_FactoryMessenger_metric, METH_VARARGS, (char *)"\n"
		"metric() -> Gyoto::SmartPointer< Gyoto::Metric::Generic >\n"
		"FactoryMessenger_metric(FactoryMessenger self, Gyoto::SmartPointer< Gyoto::Metric::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Metric.\n"
		"\n"
		"At most one Metric section may be present in a give Gyoto XML file.\n"
		"\n"
		"When an object's fillElement() method is called, if this object is\n"
		"connected to a Metric, it should call metric() with this Metric. Very\n"
		"often, the Metric will already have been set previously. The Factory\n"
		"will check that all the objects in the hierarchy are attached to the\n"
		"same Metric instance, and save this instance only once. Trying to set\n"
		"the Metric to something else than the already set Metric instance is\n"
		"an error condition.\n"
		"\n"
		"To make things clearer: Assume \"scenery\" is a fully filled Scenery.\n"
		"scenery->fillElement(messenger) will call:\n"
		"\n"
		"The Factory will then call screen_->fillElement(child_messenger) and\n"
		"obj_->fillElement(child_messenger), each of which will also call\n"
		"metric(). If the same Metric is connected to the Astrobj, to the\n"
		"Screen and to the Scenery, all is well. Else, you have a bug to fix.\n"
		"\n"
		""},
	 { "FactoryMessenger_astrobj", _wrap_FactoryMessenger_astrobj, METH_VARARGS, (char *)"\n"
		"astrobj() -> Gyoto::SmartPointer< Gyoto::Astrobj::Generic >\n"
		"FactoryMessenger_astrobj(FactoryMessenger self, Gyoto::SmartPointer< Gyoto::Astrobj::Generic > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Astrobj.\n"
		"\n"
		"Same as metric(), but for the Astrobj. \n"
		""},
	 { "FactoryMessenger_screen", _wrap_FactoryMessenger_screen, METH_VARARGS, (char *)"\n"
		"screen() -> Gyoto::SmartPointer< Gyoto::Screen >\n"
		"FactoryMessenger_screen(FactoryMessenger self, Gyoto::SmartPointer< Gyoto::Screen > arg3)\n"
		"\n"
		"\n"
		"\n"
		"Set the Screen.\n"
		"\n"
		"Same as metric(), but for the Screen. \n"
		""},
	 { "FactoryMessenger_setParameter", _wrap_FactoryMessenger_setParameter, METH_VARARGS, (char *)"\n"
		"setParameter(std::string name)\n"
		"setParameter(std::string name, double value)\n"
		"setParameter(std::string name, long value)\n"
		"setParameter(std::string name, unsigned int value)\n"
		"setParameter(std::string name, unsigned long value)\n"
		"setParameter(std::string name, int value)\n"
		"setParameter(std::string name, std::string value)\n"
		"setParameter(std::string name, double [] val, size_t n, Gyoto::FactoryMessenger ** child=None)\n"
		"setParameter(std::string name, double [] val, size_t n)\n"
		"setParameter(std::string name, vector_double val, Gyoto::FactoryMessenger ** child=None)\n"
		"setParameter(std::string name, vector_double val)\n"
		"setParameter(std::string name, vector_unsigned_long val, Gyoto::FactoryMessenger ** child=None)\n"
		"FactoryMessenger_setParameter(FactoryMessenger self, std::string name, vector_unsigned_long val)\n"
		"\n"
		"\n"
		"\n"
		"Output a vector of parameters. \n"
		""},
	 { "FactoryMessenger_setSelfAttribute", _wrap_FactoryMessenger_setSelfAttribute, METH_VARARGS, (char *)"\n"
		"setSelfAttribute(std::string attrname, std::string value)\n"
		"setSelfAttribute(std::string attrname, unsigned long value)\n"
		"setSelfAttribute(std::string attrname, unsigned int value)\n"
		"FactoryMessenger_setSelfAttribute(FactoryMessenger self, std::string attrname, double value)\n"
		"\n"
		"\n"
		"\n"
		"Set attribute in FactoryMessenger::element_.\n"
		"\n"
		"See setSelfAttribute(std::string attrname, std::string value) \n"
		""},
	 { "FactoryMessenger_setFullContent", _wrap_FactoryMessenger_setFullContent, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_setFullContent(FactoryMessenger self, std::string value)\n"
		"\n"
		"\n"
		"\n"
		"Low level, prefer setParameter()\n"
		"\n"
		"Exceptionnaly, a class instance may be best described by setting the\n"
		"entire content of the corresponding element than by setting a bunch of\n"
		"\"parameters\". This is the case of the spectrometer, which sets a\n"
		"couple of attributes and reserves the full content for the spectral\n"
		"boundaries (see Spectrometer::fillElement()). \n"
		""},
	 { "FactoryMessenger_makeChild", _wrap_FactoryMessenger_makeChild, METH_VARARGS, (char *)"\n"
		"FactoryMessenger_makeChild(FactoryMessenger self, std::string name) -> FactoryMessenger\n"
		"\n"
		"\n"
		"\n"
		"Create child FactoryMessenger.\n"
		"\n"
		"To be used from fillElement() methods. For instance, the\n"
		"Star::fillElement() method calls makeChild() to save the Star's\n"
		"Spectrum and Opacity members somewhat like this:\n"
		"\n"
		"The child messenger is allocated with new, you need to delete it after\n"
		"use. \n"
		""},
	 { "FactoryMessenger_parseArray", _wrap_FactoryMessenger_parseArray, METH_VARARGS, (char *)"\n"
		"parseArray(std::string src, double [] dst, size_t max_tokens) -> size_t\n"
		"FactoryMessenger_parseArray(std::string src) -> vector_double\n"
		""},
	 { "FactoryMessenger_parseArrayULong", _wrap_FactoryMessenger_parseArrayULong, METH_VARARGS, (char *)"FactoryMessenger_parseArrayULong(std::string src) -> vector_unsigned_long"},
	 { "delete_FactoryMessenger", _wrap_delete_FactoryMessenger, METH_VARARGS, (char *)"delete_FactoryMessenger(FactoryMessenger self)"},
	 { "FactoryMessenger_swigregister", FactoryMessenger_swigregister, METH_VARARGS, NULL},
	 { "ARRAY_double_2___getitem__", _wrap_ARRAY_double_2___getitem__, METH_VARARGS, (char *)"ARRAY_double_2___getitem__(ARRAY_double_2 self, size_t c) -> double"},
	 { "new_ARRAY_double_2", _wrap_new_ARRAY_double_2, METH_VARARGS, (char *)"new_ARRAY_double_2() -> ARRAY_double_2"},
	 { "delete_ARRAY_double_2", _wrap_delete_ARRAY_double_2, METH_VARARGS, (char *)"delete_ARRAY_double_2(ARRAY_double_2 self)"},
	 { "ARRAY_double_2_swigregister", ARRAY_double_2_swigregister, METH_VARARGS, NULL},
	 { "ARRAY_size_t_2___getitem__", _wrap_ARRAY_size_t_2___getitem__, METH_VARARGS, (char *)"ARRAY_size_t_2___getitem__(ARRAY_size_t_2 self, size_t c) -> size_t"},
	 { "new_ARRAY_size_t_2", _wrap_new_ARRAY_size_t_2, METH_VARARGS, (char *)"new_ARRAY_size_t_2() -> ARRAY_size_t_2"},
	 { "delete_ARRAY_size_t_2", _wrap_delete_ARRAY_size_t_2, METH_VARARGS, (char *)"delete_ARRAY_size_t_2(ARRAY_size_t_2 self)"},
	 { "ARRAY_size_t_2_swigregister", ARRAY_size_t_2_swigregister, METH_VARARGS, NULL},
	 { "Coord1dSet_kind_get", _wrap_Coord1dSet_kind_get, METH_VARARGS, (char *)"Coord1dSet_kind_get(Coord1dSet self) -> CoordType_e const"},
	 { "Coord1dSet_begin", _wrap_Coord1dSet_begin, METH_VARARGS, (char *)"\n"
		"Coord1dSet_begin(Coord1dSet self)\n"
		"\n"
		"\n"
		"\n"
		"Reset specifier to point to the first value. \n"
		""},
	 { "Coord1dSet_valid", _wrap_Coord1dSet_valid, METH_VARARGS, (char *)"\n"
		"Coord1dSet_valid(Coord1dSet self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"True if pointing to something, false if end has been reached. \n"
		""},
	 { "Coord1dSet_size", _wrap_Coord1dSet_size, METH_VARARGS, (char *)"\n"
		"Coord1dSet_size(Coord1dSet self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of values in this container. \n"
		""},
	 { "Coord1dSet___ref__", _wrap_Coord1dSet___ref__, METH_VARARGS, (char *)"Coord1dSet___ref__(Coord1dSet self) -> size_t"},
	 { "Coord1dSet_angle", _wrap_Coord1dSet_angle, METH_VARARGS, (char *)"\n"
		"Coord1dSet_angle(Coord1dSet self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get double value currently pointed to. \n"
		""},
	 { "Coord1dSet_increment", _wrap_Coord1dSet_increment, METH_VARARGS, (char *)"Coord1dSet_increment(Coord1dSet self) -> Coord1dSet"},
	 { "Coord1dSet_value", _wrap_Coord1dSet_value, METH_VARARGS, (char *)"Coord1dSet_value(Coord1dSet self) -> size_t"},
	 { "delete_Coord1dSet", _wrap_delete_Coord1dSet, METH_VARARGS, (char *)"\n"
		"delete_Coord1dSet(Coord1dSet self)\n"
		"\n"
		"\n"
		"\n"
		"Virtual destructor. \n"
		""},
	 { "Coord1dSet_swigregister", Coord1dSet_swigregister, METH_VARARGS, NULL},
	 { "Coord2dSet_kind_get", _wrap_Coord2dSet_kind_get, METH_VARARGS, (char *)"Coord2dSet_kind_get(Coord2dSet self) -> CoordType_e const"},
	 { "Coord2dSet_increment", _wrap_Coord2dSet_increment, METH_VARARGS, (char *)"Coord2dSet_increment(Coord2dSet self) -> Coord2dSet"},
	 { "Coord2dSet___ref__", _wrap_Coord2dSet___ref__, METH_VARARGS, (char *)"Coord2dSet___ref__(Coord2dSet self) -> ARRAY_size_t_2"},
	 { "Coord2dSet_angles", _wrap_Coord2dSet_angles, METH_VARARGS, (char *)"\n"
		"Coord2dSet_angles(Coord2dSet self) -> ARRAY_double_2\n"
		"\n"
		"\n"
		"\n"
		"Get angle coordinates. \n"
		""},
	 { "Coord2dSet_begin", _wrap_Coord2dSet_begin, METH_VARARGS, (char *)"\n"
		"Coord2dSet_begin(Coord2dSet self)\n"
		"\n"
		"\n"
		"\n"
		"Reset pointer. \n"
		""},
	 { "Coord2dSet_valid", _wrap_Coord2dSet_valid, METH_VARARGS, (char *)"\n"
		"Coord2dSet_valid(Coord2dSet self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether the end has not been passed. \n"
		""},
	 { "Coord2dSet_size", _wrap_Coord2dSet_size, METH_VARARGS, (char *)"\n"
		"Coord2dSet_size(Coord2dSet self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of positions contained. \n"
		""},
	 { "delete_Coord2dSet", _wrap_delete_Coord2dSet, METH_VARARGS, (char *)"\n"
		"delete_Coord2dSet(Coord2dSet self)\n"
		"\n"
		"\n"
		"\n"
		"Virtual destructor. \n"
		""},
	 { "Coord2dSet_swigregister", Coord2dSet_swigregister, METH_VARARGS, NULL},
	 { "new_Grid", _wrap_new_Grid, METH_VARARGS, (char *)"\n"
		"Grid(Coord1dSet iset, Coord1dSet jset, char const *const p=None)\n"
		"new_Grid(Coord1dSet iset, Coord1dSet jset) -> Grid\n"
		""},
	 { "Grid_increment", _wrap_Grid_increment, METH_VARARGS, (char *)"Grid_increment(Grid self) -> Coord2dSet"},
	 { "Grid___ref__", _wrap_Grid___ref__, METH_VARARGS, (char *)"Grid___ref__(Grid self) -> ARRAY_size_t_2"},
	 { "Grid_begin", _wrap_Grid_begin, METH_VARARGS, (char *)"\n"
		"Grid_begin(Grid self)\n"
		"\n"
		"\n"
		"\n"
		"Reset pointer. \n"
		""},
	 { "Grid_valid", _wrap_Grid_valid, METH_VARARGS, (char *)"\n"
		"Grid_valid(Grid self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether the end has not been passed. \n"
		""},
	 { "Grid_size", _wrap_Grid_size, METH_VARARGS, (char *)"\n"
		"Grid_size(Grid self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of positions contained. \n"
		""},
	 { "delete_Grid", _wrap_delete_Grid, METH_VARARGS, (char *)"delete_Grid(Grid self)"},
	 { "Grid_swigregister", Grid_swigregister, METH_VARARGS, NULL},
	 { "new_Bucket", _wrap_new_Bucket, METH_VARARGS, (char *)"new_Bucket(Coord1dSet iset, Coord1dSet jset) -> Bucket"},
	 { "Bucket_increment", _wrap_Bucket_increment, METH_VARARGS, (char *)"Bucket_increment(Bucket self) -> Coord2dSet"},
	 { "Bucket_angles", _wrap_Bucket_angles, METH_VARARGS, (char *)"\n"
		"Bucket_angles(Bucket self) -> ARRAY_double_2\n"
		"\n"
		"\n"
		"\n"
		"Get angle coordinates. \n"
		""},
	 { "Bucket___ref__", _wrap_Bucket___ref__, METH_VARARGS, (char *)"Bucket___ref__(Bucket self) -> ARRAY_size_t_2"},
	 { "Bucket_begin", _wrap_Bucket_begin, METH_VARARGS, (char *)"\n"
		"Bucket_begin(Bucket self)\n"
		"\n"
		"\n"
		"\n"
		"Reset pointer. \n"
		""},
	 { "Bucket_valid", _wrap_Bucket_valid, METH_VARARGS, (char *)"\n"
		"Bucket_valid(Bucket self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether the end has not been passed. \n"
		""},
	 { "Bucket_size", _wrap_Bucket_size, METH_VARARGS, (char *)"\n"
		"Bucket_size(Bucket self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of positions contained. \n"
		""},
	 { "delete_Bucket", _wrap_delete_Bucket, METH_VARARGS, (char *)"delete_Bucket(Bucket self)"},
	 { "Bucket_swigregister", Bucket_swigregister, METH_VARARGS, NULL},
	 { "new_Empty", _wrap_new_Empty, METH_VARARGS, (char *)"new_Empty() -> Empty"},
	 { "Empty_increment", _wrap_Empty_increment, METH_VARARGS, (char *)"Empty_increment(Empty self) -> Coord2dSet"},
	 { "Empty_begin", _wrap_Empty_begin, METH_VARARGS, (char *)"\n"
		"Empty_begin(Empty self)\n"
		"\n"
		"\n"
		"\n"
		"Reset pointer. \n"
		""},
	 { "Empty_valid", _wrap_Empty_valid, METH_VARARGS, (char *)"\n"
		"Empty_valid(Empty self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"Whether the end has not been passed. \n"
		""},
	 { "Empty_size", _wrap_Empty_size, METH_VARARGS, (char *)"\n"
		"Empty_size(Empty self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of positions contained. \n"
		""},
	 { "delete_Empty", _wrap_delete_Empty, METH_VARARGS, (char *)"delete_Empty(Empty self)"},
	 { "Empty_swigregister", Empty_swigregister, METH_VARARGS, NULL},
	 { "new_Range", _wrap_new_Range, METH_VARARGS, (char *)"\n"
		"new_Range(size_t mi, size_t ma, size_t d) -> Range\n"
		"\n"
		"\n"
		"\n"
		"Specify min, max and step of this range. \n"
		""},
	 { "Range_begin", _wrap_Range_begin, METH_VARARGS, (char *)"\n"
		"Range_begin(Range self)\n"
		"\n"
		"\n"
		"\n"
		"Reset specifier to point to the first value. \n"
		""},
	 { "Range_valid", _wrap_Range_valid, METH_VARARGS, (char *)"\n"
		"Range_valid(Range self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"True if pointing to something, false if end has been reached. \n"
		""},
	 { "Range_size", _wrap_Range_size, METH_VARARGS, (char *)"\n"
		"Range_size(Range self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of values in this container. \n"
		""},
	 { "Range_increment", _wrap_Range_increment, METH_VARARGS, (char *)"Range_increment(Range self) -> Coord1dSet"},
	 { "Range___ref__", _wrap_Range___ref__, METH_VARARGS, (char *)"Range___ref__(Range self) -> size_t"},
	 { "delete_Range", _wrap_delete_Range, METH_VARARGS, (char *)"delete_Range(Range self)"},
	 { "Range_swigregister", Range_swigregister, METH_VARARGS, NULL},
	 { "Indices_begin", _wrap_Indices_begin, METH_VARARGS, (char *)"\n"
		"Indices_begin(Indices self)\n"
		"\n"
		"\n"
		"\n"
		"Reset specifier to point to the first value. \n"
		""},
	 { "Indices_valid", _wrap_Indices_valid, METH_VARARGS, (char *)"\n"
		"Indices_valid(Indices self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"True if pointing to something, false if end has been reached. \n"
		""},
	 { "Indices_size", _wrap_Indices_size, METH_VARARGS, (char *)"\n"
		"Indices_size(Indices self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of values in this container. \n"
		""},
	 { "Indices_increment", _wrap_Indices_increment, METH_VARARGS, (char *)"Indices_increment(Indices self) -> Coord1dSet"},
	 { "Indices___ref__", _wrap_Indices___ref__, METH_VARARGS, (char *)"Indices___ref__(Indices self) -> size_t"},
	 { "Indices_index", _wrap_Indices_index, METH_VARARGS, (char *)"\n"
		"Indices_index(Indices self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Get index of value currently pointed to.\n"
		"\n"
		"Starts at 0 and is implemented each time operator++ is called.\n"
		"Depending on the implementation, this may be a real index or computed\n"
		"on demand. \n"
		""},
	 { "new_Indices", _wrap_new_Indices, METH_VARARGS, (char *)"\n"
		"Indices(size_t * carray, size_t nel)\n"
		"new_Indices(size_t DIM1) -> Indices\n"
		""},
	 { "delete_Indices", _wrap_delete_Indices, METH_VARARGS, (char *)"delete_Indices(Indices self)"},
	 { "Indices_swigregister", Indices_swigregister, METH_VARARGS, NULL},
	 { "Angles_begin", _wrap_Angles_begin, METH_VARARGS, (char *)"\n"
		"Angles_begin(Angles self)\n"
		"\n"
		"\n"
		"\n"
		"Reset specifier to point to the first value. \n"
		""},
	 { "Angles_valid", _wrap_Angles_valid, METH_VARARGS, (char *)"\n"
		"Angles_valid(Angles self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"True if pointing to something, false if end has been reached. \n"
		""},
	 { "Angles_size", _wrap_Angles_size, METH_VARARGS, (char *)"\n"
		"Angles_size(Angles self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of values in this container. \n"
		""},
	 { "Angles_increment", _wrap_Angles_increment, METH_VARARGS, (char *)"Angles_increment(Angles self) -> Coord1dSet"},
	 { "Angles_angle", _wrap_Angles_angle, METH_VARARGS, (char *)"\n"
		"Angles_angle(Angles self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get double value currently pointed to. \n"
		""},
	 { "new_Angles", _wrap_new_Angles, METH_VARARGS, (char *)"\n"
		"Angles(double * carray, size_t nel)\n"
		"new_Angles(size_t DIM1) -> Angles\n"
		""},
	 { "delete_Angles", _wrap_delete_Angles, METH_VARARGS, (char *)"delete_Angles(Angles self)"},
	 { "Angles_swigregister", Angles_swigregister, METH_VARARGS, NULL},
	 { "new_RepeatAngle", _wrap_new_RepeatAngle, METH_VARARGS, (char *)"new_RepeatAngle(double val, size_t sz) -> RepeatAngle"},
	 { "RepeatAngle_begin", _wrap_RepeatAngle_begin, METH_VARARGS, (char *)"\n"
		"RepeatAngle_begin(RepeatAngle self)\n"
		"\n"
		"\n"
		"\n"
		"Reset specifier to point to the first value. \n"
		""},
	 { "RepeatAngle_valid", _wrap_RepeatAngle_valid, METH_VARARGS, (char *)"\n"
		"RepeatAngle_valid(RepeatAngle self) -> bool\n"
		"\n"
		"\n"
		"\n"
		"True if pointing to something, false if end has been reached. \n"
		""},
	 { "RepeatAngle_size", _wrap_RepeatAngle_size, METH_VARARGS, (char *)"\n"
		"RepeatAngle_size(RepeatAngle self) -> size_t\n"
		"\n"
		"\n"
		"\n"
		"Number of values in this container. \n"
		""},
	 { "RepeatAngle_increment", _wrap_RepeatAngle_increment, METH_VARARGS, (char *)"RepeatAngle_increment(RepeatAngle self) -> Coord1dSet"},
	 { "RepeatAngle_angle", _wrap_RepeatAngle_angle, METH_VARARGS, (char *)"\n"
		"RepeatAngle_angle(RepeatAngle self) -> double\n"
		"\n"
		"\n"
		"\n"
		"Get double value currently pointed to. \n"
		""},
	 { "delete_RepeatAngle", _wrap_delete_RepeatAngle, METH_VARARGS, (char *)"delete_RepeatAngle(RepeatAngle self)"},
	 { "RepeatAngle_swigregister", RepeatAngle_swigregister, METH_VARARGS, NULL},
	 { "Property_name_set", _wrap_Property_name_set, METH_VARARGS, (char *)"Property_name_set(Property self, std::string const & name)"},
	 { "Property_name_get", _wrap_Property_name_get, METH_VARARGS, (char *)"Property_name_get(Property self) -> std::string const &"},
	 { "Property_name_false_set", _wrap_Property_name_false_set, METH_VARARGS, (char *)"Property_name_false_set(Property self, std::string const & name_false)"},
	 { "Property_name_false_get", _wrap_Property_name_false_get, METH_VARARGS, (char *)"Property_name_false_get(Property self) -> std::string const &"},
	 { "Property_type_set", _wrap_Property_type_set, METH_VARARGS, (char *)"Property_type_set(Property self, int type)"},
	 { "Property_type_get", _wrap_Property_type_get, METH_VARARGS, (char *)"Property_type_get(Property self) -> int"},
	 { "Property_setter_set", _wrap_Property_setter_set, METH_VARARGS, (char *)"Property_setter_set(Property self, Gyoto::Property::setter_t * setter)"},
	 { "Property_setter_get", _wrap_Property_setter_get, METH_VARARGS, (char *)"Property_setter_get(Property self) -> Gyoto::Property::setter_t *"},
	 { "Property_getter_set", _wrap_Property_getter_set, METH_VARARGS, (char *)"Property_getter_set(Property self, Gyoto::Property::getter_t * getter)"},
	 { "Property_getter_get", _wrap_Property_getter_get, METH_VARARGS, (char *)"Property_getter_get(Property self) -> Gyoto::Property::getter_t *"},
	 { "Property_setter_unit_set", _wrap_Property_setter_unit_set, METH_VARARGS, (char *)"Property_setter_unit_set(Property self, Gyoto::Property::setter_unit_t * setter_unit)"},
	 { "Property_setter_unit_get", _wrap_Property_setter_unit_get, METH_VARARGS, (char *)"Property_setter_unit_get(Property self) -> Gyoto::Property::setter_unit_t *"},
	 { "Property_getter_unit_set", _wrap_Property_getter_unit_set, METH_VARARGS, (char *)"Property_getter_unit_set(Property self, Gyoto::Property::getter_unit_t * getter_unit)"},
	 { "Property_getter_unit_get", _wrap_Property_getter_unit_get, METH_VARARGS, (char *)"Property_getter_unit_get(Property self) -> Gyoto::Property::getter_unit_t *"},
	 { "Property_doc_set", _wrap_Property_doc_set, METH_VARARGS, (char *)"Property_doc_set(Property self, std::string const & doc)"},
	 { "Property_doc_get", _wrap_Property_doc_get, METH_VARARGS, (char *)"Property_doc_get(Property self) -> std::string const &"},
	 { "Property___nonzero__", _wrap_Property___nonzero__, METH_VARARGS, (char *)"Property___nonzero__(Property self) -> bool"},
	 { "Property_parent_get", _wrap_Property_parent_get, METH_VARARGS, (char *)"Property_parent_get(Property self) -> Property"},
	 { "Property_typeFromString", _wrap_Property_typeFromString, METH_VARARGS, (char *)"Property_typeFromString(std::string stype) -> Gyoto::Property::type_e"},
	 { "delete_Property", _wrap_delete_Property, METH_VARARGS, (char *)"delete_Property(Property self)"},
	 { "Property_swigregister", Property_swigregister, METH_VARARGS, NULL},
	 { "getSystem", _wrap_getSystem, METH_VARARGS, (char *)"getSystem() -> ut_system *"},
	 { "Init", _wrap_Init, METH_VARARGS, (char *)"\n"
		"Init()\n"
		"\n"
		"\n"
		"\n"
		"Load and initialize all (non-context-sensitive) units.\n"
		"\n"
		"If udunits is used (preprocessor macro HAVE_UDUNITS), Init()\n"
		"initializes the ut_system used throughout Gyoto and maps a few\n"
		"additional units to the unit system. \n"
		""},
	 { "ToMeters", _wrap_ToMeters, METH_VARARGS, (char *)"\n"
		"ToMeters(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg=0) -> double\n"
		"ToMeters(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert from arbitrary length unit to meters.\n"
		"\n"
		"Convert value from unit represented by \"unit\" to meters.\n"
		"\n"
		"If gg is provided (and not NULL), use it to interpret the string\n"
		"\"geometrical\" as representing gg->\n"
		"Gyoto::Metric::Generic::unitLength().\n"
		"\n"
		"ToMeters() will also convert time, frequency and energy units to\n"
		"meters (as in frequency -> wavelength).\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed according to \"unit\"\n"
		"\n"
		"unit:  (std::string) the \"unit\" from which to convert, e.g. \"km\",\n"
		"\"sunradius\" or \"geometrical\". More units are supported if Gyoto\n"
		"was compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &, NULL if not\n"
		"specified) optional metric to interpret \"geometrical\".\n"
		"\n"
		"value, expressed in meters. \n"
		""},
	 { "FromMeters", _wrap_FromMeters, METH_VARARGS, (char *)"\n"
		"FromMeters(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg=0) -> double\n"
		"FromMeters(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert to arbitrary length unit from meters.\n"
		"\n"
		"Convert value to unit represented by \"unit\" from meters.\n"
		"\n"
		"If gg is provided (and not NULL), use it to interpret the string\n"
		"\"geometrical\" as representing gg->\n"
		"Gyoto::Metric::Generic::unitLength().\n"
		"\n"
		"ToMeters() will also convert to time, frequency and energy units (as\n"
		"in wavelength -> frequency).\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed in meters.\n"
		"\n"
		"unit:  (std::string) the \"unit\" to which to convert, e.g. \"km\",\n"
		"\"sunradius\" or \"geometrical\". More units are supported if Gyoto\n"
		"was compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &, NULL if not\n"
		"specified) optional metric to interpret \"geometrical\".\n"
		"\n"
		"value, expressed in \"unit\". \n"
		""},
	 { "ToSeconds", _wrap_ToSeconds, METH_VARARGS, (char *)"\n"
		"ToSeconds(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg=0) -> double\n"
		"ToSeconds(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert from arbitrary time unit to seconds.\n"
		"\n"
		"Convert value from unit represented by \"unit\" to seconds.\n"
		"\n"
		"If gg is provided (and not NULL), use it to interpret the string\n"
		"\"geometrical_time\" as representing gg->\n"
		"Gyoto::Metric::Generic::unitLength()/GYOTO_C.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed according to \"unit\"\n"
		"\n"
		"unit:  (std::string) the \"unit\" from which to convert, e.g. \"s\",\n"
		"\"yr\" or \"geometrical_time\". More units are supported if Gyoto was\n"
		"compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &, NULL if not\n"
		"specified) optional metric to interpret \"geometrical\".\n"
		"\n"
		"value, expressed in seconds. \n"
		""},
	 { "FromSeconds", _wrap_FromSeconds, METH_VARARGS, (char *)"\n"
		"FromSeconds(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg=0) -> double\n"
		"FromSeconds(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert to arbitrary time unit from seconds.\n"
		"\n"
		"Convert value to unit represented by \"unit\" from seconds.\n"
		"\n"
		"If gg is provided (and not NULL), use it to interpret the string\n"
		"\"geometrical_time\" as representing gg->\n"
		"Gyoto::Metric::Generic::unitLength()/GYOTO_C.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed in seconds.\n"
		"\n"
		"unit:  (std::string) the \"unit\" to which to convert, e.g. \"s\",\n"
		"\"yr\" or \"geometrical_time\". More units are supported if Gyoto was\n"
		"compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &, NULL if not\n"
		"specified) optional metric to interpret \"geometrical\".\n"
		"\n"
		"value, expressed in \"unit\". \n"
		""},
	 { "ToKilograms", _wrap_ToKilograms, METH_VARARGS, (char *)"\n"
		"ToKilograms(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert from arbitrary mass unit to kilograms.\n"
		"\n"
		"Convert value from unit represented by \"unit\" to kilograms.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed according to \"unit\"\n"
		"\n"
		"unit:  (std::string) the \"unit\" from which to convert, e.g. \"g\",\n"
		"\"kg\" or \"sunmass\". More units are supported if Gyoto was compiled\n"
		"with udunits support.\n"
		"\n"
		"value, expressed in kilograms. \n"
		""},
	 { "FromKilograms", _wrap_FromKilograms, METH_VARARGS, (char *)"\n"
		"FromKilograms(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert to arbitrary mass unit from kilograms.\n"
		"\n"
		"Convert value from unit represented by \"unit\" from kilograms.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed inkilograms.\n"
		"\n"
		"unit:  (std::string) the \"unit\" to which to convert, e.g. \"g\",\n"
		"\"kg\" or \"sunmass\". More units are supported if Gyoto was compiled\n"
		"with udunits support.\n"
		"\n"
		"value, expressed in \"unit\". \n"
		""},
	 { "ToGeometrical", _wrap_ToGeometrical, METH_VARARGS, (char *)"\n"
		"ToGeometrical(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert from arbitrary length unit to geometrical units.\n"
		"\n"
		"Convert value from unit represented by \"unit\" to geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed according to\n"
		"\"unit\".\n"
		"\n"
		"unit:  (std::string) the \"unit\" from which to convert, e.g. \"km\",\n"
		"\"sunradius\" or \"geometrical\". More units are supported if Gyoto\n"
		"was compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &) metric to\n"
		"interpret \"geometrical\".\n"
		"\n"
		"value, expressed in geometrical units. \n"
		""},
	 { "FromGeometrical", _wrap_FromGeometrical, METH_VARARGS, (char *)"\n"
		"FromGeometrical(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert to arbitrary length unit from geometrical units.\n"
		"\n"
		"Convert value to unit represented by \"unit\" from geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed in geometrical units.\n"
		"\n"
		"unit:  (std::string) the \"unit\" to which to convert, e.g. \"km\",\n"
		"\"sunradius\" or \"geometrical\". More units are supported if Gyoto\n"
		"was compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &) metric to\n"
		"interpret \"geometrical\".\n"
		"\n"
		"value, expressed in \"unit\". \n"
		""},
	 { "ToGeometricalTime", _wrap_ToGeometricalTime, METH_VARARGS, (char *)"\n"
		"ToGeometricalTime(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert from arbitrary time unit to geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed according to\n"
		"\"unit\".\n"
		"\n"
		"unit:  (std::string) the \"unit\" from which to convert, e.g. \"s\",\n"
		"\"kyr\" or \"geometrical_time\". More units are supported if Gyoto was\n"
		"compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &) metric to\n"
		"interpret \"geometrical_time\".\n"
		"\n"
		"value, expressed in geometrical (time) units. \n"
		""},
	 { "FromGeometricalTime", _wrap_FromGeometricalTime, METH_VARARGS, (char *)"\n"
		"FromGeometricalTime(double value, std::string const & unit, Gyoto::SmartPointer< Gyoto::Metric::Generic > const & gg) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert to arbitrary time unit from geometrical units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed in geometrical units.\n"
		"\n"
		"unit:  (std::string) the \"unit\" to which to convert, e.g. \"yr\",\n"
		"\"s\" or \"geometrical_time\". More units are supported if Gyoto was\n"
		"compiled with udunits support.\n"
		"\n"
		"gg:  (const Gyoto::SmartPointer<Gyoto::Metric::Generic> &) metric to\n"
		"interpret \"geometrical_time\".\n"
		"\n"
		"value, expressed in \"unit\". \n"
		""},
	 { "ToHerz", _wrap_ToHerz, METH_VARARGS, (char *)"\n"
		"ToHerz(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert from arbitrary frequency unit to Herz.\n"
		"\n"
		"ToHerz will also convert from length and energy units (such as\n"
		"\"eV\").\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed according to\n"
		"\"unit\".\n"
		"\n"
		"unit:  (std::string) the \"unit\" from which to convert, e.g. \"MHz\",\n"
		"\"keV\"\n"
		"\n"
		"value, expressed in \"Hz\". \n"
		""},
	 { "FromHerz", _wrap_FromHerz, METH_VARARGS, (char *)"\n"
		"FromHerz(double value, std::string const & unit) -> double\n"
		"\n"
		"\n"
		"\n"
		"Convert to arbitrary frequency unit from Herz.\n"
		"\n"
		"FromHerz will also convert to length and energy units (such as\n"
		"\"eV\").\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  (double) the value to convert, expressed according in \"Hz\".\n"
		"\n"
		"unit:  (std::string) the \"unit\" from which to convert, e.g. \"MHz\",\n"
		"\"keV\"\n"
		"\n"
		"value, expressed in \"units\". \n"
		""},
	 { "areConvertible", _wrap_areConvertible, METH_VARARGS, (char *)"areConvertible(Unit unit1, Unit unit2) -> bool"},
	 { "new_Unit", _wrap_new_Unit, METH_VARARGS, (char *)"\n"
		"Unit(std::string const & unit)\n"
		"new_Unit(char const *const unit) -> Unit\n"
		""},
	 { "delete_Unit", _wrap_delete_Unit, METH_VARARGS, (char *)"delete_Unit(Unit self)"},
	 { "Unit_To", _wrap_Unit_To, METH_VARARGS, (char *)"Unit_To(Unit self, double val, Unit from_unit) -> double"},
	 { "Unit_From", _wrap_Unit_From, METH_VARARGS, (char *)"Unit_From(Unit self, double val, Unit to_unit) -> double"},
	 { "Unit___str__", _wrap_Unit___str__, METH_VARARGS, (char *)"Unit___str__(Unit self) -> std::string"},
	 { "Unit_swigregister", Unit_swigregister, METH_VARARGS, NULL},
	 { "new_Converter", _wrap_new_Converter, METH_VARARGS, (char *)"\n"
		"Converter()\n"
		"new_Converter(Unit arg2, Unit to) -> Converter\n"
		""},
	 { "delete_Converter", _wrap_delete_Converter, METH_VARARGS, (char *)"delete_Converter(Converter self)"},
	 { "Converter_reset", _wrap_Converter_reset, METH_VARARGS, (char *)"\n"
		"reset()\n"
		"Converter_reset(Converter self, Unit arg3, Unit to)\n"
		""},
	 { "Converter___call__", _wrap_Converter___call__, METH_VARARGS, (char *)"Converter___call__(Converter self, double value) -> double"},
	 { "Converter_swigregister", Converter_swigregister, METH_VARARGS, NULL},
	 { "new_GridData2D", _wrap_new_GridData2D, METH_VARARGS, (char *)"\n"
		"GridData2D()\n"
		"new_GridData2D(GridData2D arg2) -> GridData2D\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "GridData2D_clone", _wrap_GridData2D_clone, METH_VARARGS, (char *)"GridData2D_clone(GridData2D self) -> GridData2D"},
	 { "delete_GridData2D", _wrap_delete_GridData2D, METH_VARARGS, (char *)"\n"
		"delete_GridData2D(GridData2D self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "GridData2D_rmin", _wrap_GridData2D_rmin, METH_VARARGS, (char *)"\n"
		"rmin(double rmn)\n"
		"GridData2D_rmin(GridData2D self) -> double\n"
		""},
	 { "GridData2D_rmax", _wrap_GridData2D_rmax, METH_VARARGS, (char *)"\n"
		"rmax(double rmx)\n"
		"GridData2D_rmax(GridData2D self) -> double\n"
		""},
	 { "GridData2D_nr", _wrap_GridData2D_nr, METH_VARARGS, (char *)"\n"
		"nr(size_t nn)\n"
		"GridData2D_nr(GridData2D self) -> size_t\n"
		""},
	 { "GridData2D_dr", _wrap_GridData2D_dr, METH_VARARGS, (char *)"\n"
		"dr(double dd)\n"
		"GridData2D_dr(GridData2D self) -> double\n"
		""},
	 { "GridData2D_phimin", _wrap_GridData2D_phimin, METH_VARARGS, (char *)"\n"
		"phimin(double phimn)\n"
		"GridData2D_phimin(GridData2D self) -> double\n"
		""},
	 { "GridData2D_phimax", _wrap_GridData2D_phimax, METH_VARARGS, (char *)"\n"
		"phimax(double phimx)\n"
		"GridData2D_phimax(GridData2D self) -> double\n"
		""},
	 { "GridData2D_dphi", _wrap_GridData2D_dphi, METH_VARARGS, (char *)"\n"
		"dphi(double dd)\n"
		"GridData2D_dphi(GridData2D self) -> double\n"
		""},
	 { "GridData2D_tmin", _wrap_GridData2D_tmin, METH_VARARGS, (char *)"\n"
		"tmin(double tmn)\n"
		"GridData2D_tmin(GridData2D self) -> double\n"
		""},
	 { "GridData2D_tmax", _wrap_GridData2D_tmax, METH_VARARGS, (char *)"\n"
		"tmax(double tmx)\n"
		"GridData2D_tmax(GridData2D self) -> double\n"
		""},
	 { "GridData2D_nt", _wrap_GridData2D_nt, METH_VARARGS, (char *)"\n"
		"nt(size_t nn)\n"
		"GridData2D_nt(GridData2D self) -> size_t\n"
		""},
	 { "GridData2D_nphi", _wrap_GridData2D_nphi, METH_VARARGS, (char *)"\n"
		"nphi(size_t nn)\n"
		"GridData2D_nphi(GridData2D self) -> size_t\n"
		""},
	 { "GridData2D_fitsReadHDU", _wrap_GridData2D_fitsReadHDU, METH_VARARGS, (char *)"\n"
		"fitsReadHDU(fitsfile * fptr, std::string extname, double *& dest, size_t length=0) -> std::vector< size_t,std::allocator< size_t > >\n"
		"GridData2D_fitsReadHDU(GridData2D self, fitsfile * fptr, std::string extname, double *& dest) -> std::vector< size_t,std::allocator< size_t > >\n"
		""},
	 { "GridData2D_fitsCreate", _wrap_GridData2D_fitsCreate, METH_VARARGS, (char *)"GridData2D_fitsCreate(GridData2D self, std::string filename) -> fitsfile *"},
	 { "GridData2D_fitsClose", _wrap_GridData2D_fitsClose, METH_VARARGS, (char *)"GridData2D_fitsClose(GridData2D self, fitsfile * fptr)"},
	 { "GridData2D_fitsWriteHDU", _wrap_GridData2D_fitsWriteHDU, METH_VARARGS, (char *)"\n"
		"fitsWriteHDU(fitsfile * fptr, std::string extname, double * src, size_t length=0)\n"
		"GridData2D_fitsWriteHDU(GridData2D self, fitsfile * fptr, std::string extname, double * src)\n"
		""},
	 { "GridData2D_getIndices", _wrap_GridData2D_getIndices, METH_VARARGS, (char *)"\n"
		"getIndices(size_t [3] i, double const tt, double const phi, double const rr, double *const time_array=None)\n"
		"GridData2D_getIndices(GridData2D self, size_t [3] i, double const tt, double const phi, double const rr)\n"
		""},
	 { "GridData2D_interpolate", _wrap_GridData2D_interpolate, METH_VARARGS, (char *)"\n"
		"interpolate(double tt, double phi, double rr, double *const array, double *const time_array=None) -> double\n"
		"GridData2D_interpolate(GridData2D self, double tt, double phi, double rr, double *const array) -> double\n"
		""},
	 { "GridData2D_swigregister", GridData2D_swigregister, METH_VARARGS, NULL},
	 { "new_FitsRW", _wrap_new_FitsRW, METH_VARARGS, (char *)"\n"
		"FitsRW()\n"
		"new_FitsRW(FitsRW arg2) -> FitsRW\n"
		"\n"
		"\n"
		"\n"
		"Copy constructor. \n"
		""},
	 { "FitsRW_clone", _wrap_FitsRW_clone, METH_VARARGS, (char *)"FitsRW_clone(FitsRW self) -> FitsRW"},
	 { "delete_FitsRW", _wrap_delete_FitsRW, METH_VARARGS, (char *)"\n"
		"delete_FitsRW(FitsRW self)\n"
		"\n"
		"\n"
		"\n"
		"Destructor. \n"
		""},
	 { "FitsRW_numin", _wrap_FitsRW_numin, METH_VARARGS, (char *)"\n"
		"numin(double numn)\n"
		"FitsRW_numin(FitsRW self) -> double\n"
		""},
	 { "FitsRW_numax", _wrap_FitsRW_numax, METH_VARARGS, (char *)"\n"
		"numax(double numx)\n"
		"FitsRW_numax(FitsRW self) -> double\n"
		""},
	 { "FitsRW_nnu", _wrap_FitsRW_nnu, METH_VARARGS, (char *)"\n"
		"nnu(size_t nn)\n"
		"FitsRW_nnu(FitsRW self) -> size_t\n"
		""},
	 { "FitsRW_tmin", _wrap_FitsRW_tmin, METH_VARARGS, (char *)"\n"
		"tmin(double tmn)\n"
		"FitsRW_tmin(FitsRW self) -> double\n"
		""},
	 { "FitsRW_tmax", _wrap_FitsRW_tmax, METH_VARARGS, (char *)"\n"
		"tmax(double tmx)\n"
		"FitsRW_tmax(FitsRW self) -> double\n"
		""},
	 { "FitsRW_nt", _wrap_FitsRW_nt, METH_VARARGS, (char *)"\n"
		"nt(size_t nn)\n"
		"FitsRW_nt(FitsRW self) -> size_t\n"
		""},
	 { "FitsRW_dt", _wrap_FitsRW_dt, METH_VARARGS, (char *)"\n"
		"dt(double dd)\n"
		"FitsRW_dt(FitsRW self) -> double\n"
		""},
	 { "FitsRW_fitsCreate", _wrap_FitsRW_fitsCreate, METH_VARARGS, (char *)"FitsRW_fitsCreate(FitsRW self, std::string filename) -> fitsfile *"},
	 { "FitsRW_fitsClose", _wrap_FitsRW_fitsClose, METH_VARARGS, (char *)"FitsRW_fitsClose(FitsRW self, fitsfile * fptr)"},
	 { "FitsRW_fitsWriteHDU", _wrap_FitsRW_fitsWriteHDU, METH_VARARGS, (char *)"FitsRW_fitsWriteHDU(FitsRW self, fitsfile * fptr, std::string extname, double * src)"},
	 { "FitsRW_fitsWriteParams", _wrap_FitsRW_fitsWriteParams, METH_VARARGS, (char *)"FitsRW_fitsWriteParams(FitsRW self, fitsfile * fptr, double n_e, double theta, double kappa, double BB, double t_inj)"},
	 { "FitsRW_fitsReadHDU", _wrap_FitsRW_fitsReadHDU, METH_VARARGS, (char *)"FitsRW_fitsReadHDU(FitsRW self, fitsfile * fptr, std::string extname, double *& dest) -> std::vector< size_t,std::allocator< size_t > >"},
	 { "FitsRW_getIndices", _wrap_FitsRW_getIndices, METH_VARARGS, (char *)"FitsRW_getIndices(FitsRW self, size_t [2] i, double const nu, double const tt, double *const freq_array)"},
	 { "FitsRW_interpolate", _wrap_FitsRW_interpolate, METH_VARARGS, (char *)"FitsRW_interpolate(FitsRW self, double nu, double tt, double *const array, double *const freq_array) -> double"},
	 { "FitsRW_swigregister", FitsRW_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_array_doubleTo_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double *)  ((array_double *) x));
}
static void *_p_p_array_doubleTo_p_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double **)  ((array_double **) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *)  ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__Functor__Double_constDoubleArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Functor::Double_constDoubleArray *)  ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_Gyoto__PhotonTo_p_Gyoto__Worldline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Worldline *)  ((Gyoto::Photon *) x));
}
static void *_p_Gyoto__Units__UnitTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Units::Unit *) x));
}
static void *_p_Gyoto__SceneryTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Scenery *) x));
}
static void *_p_Gyoto__ScreenTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Screen *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__PhotonTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Photon *) x));
}
static void *_p_Gyoto__Spectrometer__UniformTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Uniform *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_Gyoto__Astrobj__PropertiesTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Astrobj::Properties *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Units__ConverterTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Units::Converter *) x));
}
static void *_p_Gyoto__Spectrometer__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Spectrometer::Generic *) x));
}
static void *_p_Gyoto__Spectrum__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Spectrum::Generic *) x));
}
static void *_p_Gyoto__Metric__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Metric::Generic *) x));
}
static void *_p_Gyoto__Astrobj__GenericTo_p_Gyoto__SmartPointee(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::SmartPointee *)  ((Gyoto::Astrobj::Generic *) x));
}
static void *_p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Uniform *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__Metric__GenericTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *)  ((Gyoto::Metric::Generic *) x));
}
static void *_p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Hook__Teller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Teller *)  ((Gyoto::Spectrometer::Generic *) x));
}
static void *_p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Spectrometer__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Spectrometer::Generic *)  ((Gyoto::Spectrometer::Uniform *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Spectrometer__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Spectrometer::Generic *)  ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *)  ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__Astrobj__Generic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Astrobj::Generic *)  ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_RepeatAngleTo_p_Coord1dSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Coord1dSet *)  ((RepeatAngle *) x));
}
static void *_p_RangeTo_p_Coord1dSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Coord1dSet *)  ((Range *) x));
}
static void *_p_IndicesTo_p_Coord1dSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Coord1dSet *)  ((Indices *) x));
}
static void *_p_AnglesTo_p_Coord1dSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Coord1dSet *)  ((Angles *) x));
}
static void *_p_array_unsigned_longTo_p_unsigned_long(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((unsigned long *)  ((array_unsigned_long *) x));
}
static void *_p_GridTo_p_Coord2dSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Coord2dSet *)  ((Grid *) x));
}
static void *_p_BucketTo_p_Coord2dSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Coord2dSet *)  ((Bucket *) x));
}
static void *_p_EmptyTo_p_Coord2dSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Coord2dSet *)  ((Empty *) x));
}
static void *_p_array_size_tTo_p_size_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((size_t *)  ((array_size_t *) x));
}
static void *_p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Uniform *) x));
}
static void *_p_Gyoto__PhotonTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Photon *) x));
}
static void *_p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::ThinDisk *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Spectrometer::Generic *) ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__Astrobj__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Astrobj::Generic *) x));
}
static void *_p_Gyoto__Metric__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Metric::Generic *) x));
}
static void *_p_Gyoto__Spectrum__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Spectrum::Generic *) x));
}
static void *_p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Spectrometer::Generic *) x));
}
static void *_p_Gyoto__ScreenTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Screen *) x));
}
static void *_p_Gyoto__SceneryTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *)  ((Gyoto::Scenery *) x));
}
static void *_p_Gyoto__Astrobj__StandardTo_p_Gyoto__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Object *) (Gyoto::Astrobj::Generic *) ((Gyoto::Astrobj::Standard *) x));
}
static void *_p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Spectrometer::Complex *) x));
}
static void *_p_Gyoto__WorldlineTo_p_Gyoto__Hook__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Gyoto::Hook::Listener *)  ((Gyoto::Worldline *) x));
}
static swig_type_info _swigt__p_Angles = {"_p_Angles", "Angles *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Bucket = {"_p_Bucket", "Bucket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Coord1dSet = {"_p_Coord1dSet", "Coord1dSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Coord2dSet = {"_p_Coord2dSet", "Coord2dSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__Matrix4d = {"_p_Eigen__Matrix4d", "Eigen::Matrix4d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__Vector4d = {"_p_Eigen__Vector4d", "Eigen::Vector4d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Empty = {"_p_Empty", "Empty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Grid = {"_p_Grid", "Grid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Generic = {"_p_Gyoto__Astrobj__Generic", "Gyoto::Astrobj::Generic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Properties = {"_p_Gyoto__Astrobj__Properties", "Gyoto::Astrobj::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__Standard = {"_p_Gyoto__Astrobj__Standard", "Gyoto::Astrobj::Standard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Astrobj__ThinDisk = {"_p_Gyoto__Astrobj__ThinDisk", "Gyoto::Astrobj::ThinDisk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Error = {"_p_Gyoto__Error", "Gyoto::Error *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Factory = {"_p_Gyoto__Factory", "Gyoto::Factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__FactoryMessenger = {"_p_Gyoto__FactoryMessenger", "Gyoto::FactoryMessenger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__FitsRW = {"_p_Gyoto__FitsRW", "Gyoto::FitsRW *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Functor__Double_Double_const = {"_p_Gyoto__Functor__Double_Double_const", "Gyoto::Functor::Double_Double_const *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Functor__Double_constDoubleArray = {"_p_Gyoto__Functor__Double_constDoubleArray", "Gyoto::Functor::Double_constDoubleArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__GridData2D = {"_p_Gyoto__GridData2D", "Gyoto::GridData2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Hook__Listener = {"_p_Gyoto__Hook__Listener", "Gyoto::Hook::Listener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Hook__Teller = {"_p_Gyoto__Hook__Teller", "Gyoto::Hook::Teller *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Metric__Generic = {"_p_Gyoto__Metric__Generic", "Gyoto::Metric::Generic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Object = {"_p_Gyoto__Object", "Gyoto::Object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Photon = {"_p_Gyoto__Photon", "Gyoto::Photon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Property = {"_p_Gyoto__Property", "Gyoto::Property *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Property__getter_t = {"_p_Gyoto__Property__getter_t", "Gyoto::Property::getter_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Property__getter_unit_t = {"_p_Gyoto__Property__getter_unit_t", "Gyoto::Property::getter_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Property__setter_t = {"_p_Gyoto__Property__setter_t", "Gyoto::Property::setter_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Property__setter_unit_t = {"_p_Gyoto__Property__setter_unit_t", "Gyoto::Property::setter_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Register__Entry = {"_p_Gyoto__Register__Entry", "Gyoto::Register::Entry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Scenery = {"_p_Gyoto__Scenery", "Gyoto::Scenery *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Scenery__mpi_tag = {"_p_Gyoto__Scenery__mpi_tag", "enum Gyoto::Scenery::mpi_tag *|Gyoto::Scenery::mpi_tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Screen = {"_p_Gyoto__Screen", "Gyoto::Screen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__SmartPointee = {"_p_Gyoto__SmartPointee", "Gyoto::SmartPointee *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t = {"_p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t", "Gyoto::SmartPointer< Gyoto::Metric::Generic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t = {"_p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t", "Gyoto::SmartPointer< Gyoto::Units::Converter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrometer__Complex = {"_p_Gyoto__Spectrometer__Complex", "Gyoto::Spectrometer::Complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrometer__Generic = {"_p_Gyoto__Spectrometer__Generic", "Gyoto::Spectrometer::Generic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrometer__Uniform = {"_p_Gyoto__Spectrometer__Uniform", "Gyoto::Spectrometer::Uniform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Spectrum__Generic = {"_p_Gyoto__Spectrum__Generic", "Gyoto::Spectrum::Generic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Units__Converter = {"_p_Gyoto__Units__Converter", "Gyoto::Units::Converter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Units__Unit = {"_p_Gyoto__Units__Unit", "Gyoto::Units::Unit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Value = {"_p_Gyoto__Value", "Gyoto::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__WIP = {"_p_Gyoto__WIP", "Gyoto::WIP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gyoto__Worldline = {"_p_Gyoto__Worldline", "Gyoto::Worldline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handler_t = {"_p_Handler_t", "Handler_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Indices = {"_p_Indices", "Indices *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Photon = {"_p_Photon", "Photon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Range = {"_p_Range", "Range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RepeatAngle = {"_p_RepeatAngle", "RepeatAngle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Subcontractor_t = {"_p_Subcontractor_t", "Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_array_double = {"_p_array_double", "array_double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_array_size_t = {"_p_array_size_t", "array_size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_array_unsigned_long = {"_p_array_unsigned_long", "array_unsigned_long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__arrayT_double_2_t = {"_p_boost__arrayT_double_2_t", "boost::array< double,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__arrayT_size_t_2_t = {"_p_boost__arrayT_size_t_2_t", "boost::array< size_t,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__mpi__communicator = {"_p_boost__mpi__communicator", "boost::mpi::communicator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t", "Gyoto::SmartPointer< Gyoto::Astrobj::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)|Gyoto::Astrobj::Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t", "Gyoto::Metric::Subcontractor_t *|Gyoto::SmartPointer< Gyoto::Metric::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t", "Gyoto::SmartPointer< Gyoto::SmartPointee > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)|Gyoto::SmartPointee::Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t", "Gyoto::SmartPointer< Gyoto::Spectrometer::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)|Gyoto::Spectrometer::Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t = {"_p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t", "Gyoto::SmartPointer< Gyoto::Spectrum::Generic > (*)(Gyoto::FactoryMessenger *,std::vector< std::string,std::allocator< std::string > > const &)|Gyoto::Spectrum::Subcontractor_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_q_const__Gyoto__Error__void = {"_p_f_q_const__Gyoto__Error__void", "void (*)(Gyoto::Error const)|Gyoto::Error::Handler_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fitsfile = {"_p_fitsfile", "fitsfile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_astrobj_t = {"_p_get_astrobj_t", "get_astrobj_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_bool_t = {"_p_get_bool_t", "get_bool_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_double_t = {"_p_get_double_t", "get_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_double_unit_t = {"_p_get_double_unit_t", "get_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_fname_t = {"_p_get_fname_t", "get_fname_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_long_t = {"_p_get_long_t", "get_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_metric_t = {"_p_get_metric_t", "get_metric_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_screen_t = {"_p_get_screen_t", "get_screen_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_size_t_t = {"_p_get_size_t_t", "get_size_t_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_spectrometer_t = {"_p_get_spectrometer_t", "get_spectrometer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_spectrum_t = {"_p_get_spectrum_t", "get_spectrum_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_string_t = {"_p_get_string_t", "get_string_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_unsigned_long_t = {"_p_get_unsigned_long_t", "get_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_vector_double_t = {"_p_get_vector_double_t", "get_vector_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_vector_double_unit_t = {"_p_get_vector_double_unit_t", "get_vector_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_get_vector_unsigned_long_t = {"_p_get_vector_unsigned_long_t", "get_vector_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_myCplxSpectroIdxExcept = {"_p_myCplxSpectroIdxExcept", "myCplxSpectroIdxExcept *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Gyoto__FactoryMessenger = {"_p_p_Gyoto__FactoryMessenger", "Gyoto::FactoryMessenger **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_array_double = {"_p_p_array_double", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_set_astrobj_t = {"_p_set_astrobj_t", "set_astrobj_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_bool_t = {"_p_set_bool_t", "set_bool_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_double_t = {"_p_set_double_t", "set_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_double_unit_t = {"_p_set_double_unit_t", "set_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_fname_t = {"_p_set_fname_t", "set_fname_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_long_t = {"_p_set_long_t", "set_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_metric_t = {"_p_set_metric_t", "set_metric_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_screen_t = {"_p_set_screen_t", "set_screen_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_size_t_t = {"_p_set_size_t_t", "set_size_t_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_spectrometer_t = {"_p_set_spectrometer_t", "set_spectrometer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_spectrum_t = {"_p_set_spectrum_t", "set_spectrum_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_string_t = {"_p_set_string_t", "set_string_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_unsigned_long_t = {"_p_set_unsigned_long_t", "set_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_vector_double_t = {"_p_set_vector_double_t", "set_vector_double_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_vector_double_unit_t = {"_p_set_vector_double_unit_t", "set_vector_double_unit_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_set_vector_unsigned_long_t = {"_p_set_vector_unsigned_long_t", "set_vector_unsigned_long_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_unsigned_long_t = {"_p_std__allocatorT_unsigned_long_t", "std::vector< unsigned long >::allocator_type *|std::allocator< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|Gyoto::state_t *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t = {"_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t", "std::vector< unsigned long > *|std::vector< unsigned long,std::allocator< unsigned long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "Gyoto::CoordKind_t *|unsigned int *|Gyoto::Verbosity_t *|Gyoto::Quantity_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ut_system = {"_p_ut_system", "ut_system *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xercesc__DOMElement = {"_p_xercesc__DOMElement", "xercesc::DOMElement *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Angles,
  &_swigt__p_Bucket,
  &_swigt__p_Coord1dSet,
  &_swigt__p_Coord2dSet,
  &_swigt__p_Eigen__Matrix4d,
  &_swigt__p_Eigen__Vector4d,
  &_swigt__p_Empty,
  &_swigt__p_Grid,
  &_swigt__p_Gyoto__Astrobj__Generic,
  &_swigt__p_Gyoto__Astrobj__Properties,
  &_swigt__p_Gyoto__Astrobj__Standard,
  &_swigt__p_Gyoto__Astrobj__ThinDisk,
  &_swigt__p_Gyoto__Error,
  &_swigt__p_Gyoto__Factory,
  &_swigt__p_Gyoto__FactoryMessenger,
  &_swigt__p_Gyoto__FitsRW,
  &_swigt__p_Gyoto__Functor__Double_Double_const,
  &_swigt__p_Gyoto__Functor__Double_constDoubleArray,
  &_swigt__p_Gyoto__GridData2D,
  &_swigt__p_Gyoto__Hook__Listener,
  &_swigt__p_Gyoto__Hook__Teller,
  &_swigt__p_Gyoto__Metric__Generic,
  &_swigt__p_Gyoto__Object,
  &_swigt__p_Gyoto__Photon,
  &_swigt__p_Gyoto__Property,
  &_swigt__p_Gyoto__Property__getter_t,
  &_swigt__p_Gyoto__Property__getter_unit_t,
  &_swigt__p_Gyoto__Property__setter_t,
  &_swigt__p_Gyoto__Property__setter_unit_t,
  &_swigt__p_Gyoto__Register__Entry,
  &_swigt__p_Gyoto__Scenery,
  &_swigt__p_Gyoto__Scenery__mpi_tag,
  &_swigt__p_Gyoto__Screen,
  &_swigt__p_Gyoto__SmartPointee,
  &_swigt__p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,
  &_swigt__p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t,
  &_swigt__p_Gyoto__Spectrometer__Complex,
  &_swigt__p_Gyoto__Spectrometer__Generic,
  &_swigt__p_Gyoto__Spectrometer__Uniform,
  &_swigt__p_Gyoto__Spectrum__Generic,
  &_swigt__p_Gyoto__Units__Converter,
  &_swigt__p_Gyoto__Units__Unit,
  &_swigt__p_Gyoto__Value,
  &_swigt__p_Gyoto__WIP,
  &_swigt__p_Gyoto__Worldline,
  &_swigt__p_Handler_t,
  &_swigt__p_Indices,
  &_swigt__p_Photon,
  &_swigt__p_Range,
  &_swigt__p_RepeatAngle,
  &_swigt__p_Subcontractor_t,
  &_swigt__p_allocator_type,
  &_swigt__p_array_double,
  &_swigt__p_array_size_t,
  &_swigt__p_array_unsigned_long,
  &_swigt__p_boost__arrayT_double_2_t,
  &_swigt__p_boost__arrayT_size_t_2_t,
  &_swigt__p_boost__mpi__communicator,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t,
  &_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t,
  &_swigt__p_f_q_const__Gyoto__Error__void,
  &_swigt__p_fitsfile,
  &_swigt__p_get_astrobj_t,
  &_swigt__p_get_bool_t,
  &_swigt__p_get_double_t,
  &_swigt__p_get_double_unit_t,
  &_swigt__p_get_fname_t,
  &_swigt__p_get_long_t,
  &_swigt__p_get_metric_t,
  &_swigt__p_get_screen_t,
  &_swigt__p_get_size_t_t,
  &_swigt__p_get_spectrometer_t,
  &_swigt__p_get_spectrum_t,
  &_swigt__p_get_string_t,
  &_swigt__p_get_unsigned_long_t,
  &_swigt__p_get_vector_double_t,
  &_swigt__p_get_vector_double_unit_t,
  &_swigt__p_get_vector_unsigned_long_t,
  &_swigt__p_int,
  &_swigt__p_myCplxSpectroIdxExcept,
  &_swigt__p_p_Gyoto__FactoryMessenger,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_array_double,
  &_swigt__p_p_double,
  &_swigt__p_set_astrobj_t,
  &_swigt__p_set_bool_t,
  &_swigt__p_set_double_t,
  &_swigt__p_set_double_unit_t,
  &_swigt__p_set_fname_t,
  &_swigt__p_set_long_t,
  &_swigt__p_set_metric_t,
  &_swigt__p_set_screen_t,
  &_swigt__p_set_size_t_t,
  &_swigt__p_set_spectrometer_t,
  &_swigt__p_set_spectrum_t,
  &_swigt__p_set_string_t,
  &_swigt__p_set_unsigned_long_t,
  &_swigt__p_set_vector_double_t,
  &_swigt__p_set_vector_double_unit_t,
  &_swigt__p_set_vector_unsigned_long_t,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_unsigned_long_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_ut_system,
  &_swigt__p_value_type,
  &_swigt__p_void,
  &_swigt__p_xercesc__DOMElement,
};

static swig_cast_info _swigc__p_Angles[] = {  {&_swigt__p_Angles, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Bucket[] = {  {&_swigt__p_Bucket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Coord1dSet[] = {  {&_swigt__p_Angles, _p_AnglesTo_p_Coord1dSet, 0, 0},  {&_swigt__p_RepeatAngle, _p_RepeatAngleTo_p_Coord1dSet, 0, 0},  {&_swigt__p_Range, _p_RangeTo_p_Coord1dSet, 0, 0},  {&_swigt__p_Coord1dSet, 0, 0, 0},  {&_swigt__p_Indices, _p_IndicesTo_p_Coord1dSet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Coord2dSet[] = {  {&_swigt__p_Coord2dSet, 0, 0, 0},  {&_swigt__p_Empty, _p_EmptyTo_p_Coord2dSet, 0, 0},  {&_swigt__p_Bucket, _p_BucketTo_p_Coord2dSet, 0, 0},  {&_swigt__p_Grid, _p_GridTo_p_Coord2dSet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__Matrix4d[] = {  {&_swigt__p_Eigen__Matrix4d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__Vector4d[] = {  {&_swigt__p_Eigen__Vector4d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Empty[] = {  {&_swigt__p_Empty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Grid[] = {  {&_swigt__p_Grid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Generic[] = {  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Astrobj__Generic, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Generic, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__Astrobj__Generic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Properties[] = {  {&_swigt__p_Gyoto__Astrobj__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__Standard[] = {  {&_swigt__p_Gyoto__Astrobj__Standard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Astrobj__ThinDisk[] = {  {&_swigt__p_Gyoto__Astrobj__ThinDisk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Error[] = {  {&_swigt__p_Gyoto__Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Factory[] = {  {&_swigt__p_Gyoto__Factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__FactoryMessenger[] = {  {&_swigt__p_Gyoto__FactoryMessenger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__FitsRW[] = {  {&_swigt__p_Gyoto__FitsRW, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Functor__Double_Double_const[] = {  {&_swigt__p_Gyoto__Functor__Double_Double_const, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Functor__Double_constDoubleArray[] = {  {&_swigt__p_Gyoto__Functor__Double_constDoubleArray, 0, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__Functor__Double_constDoubleArray, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__GridData2D[] = {  {&_swigt__p_Gyoto__GridData2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Hook__Listener[] = {  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Photon, 0, 0, 0},  {&_swigt__p_Gyoto__Worldline, _p_Gyoto__WorldlineTo_p_Gyoto__Hook__Listener, 0, 0},  {&_swigt__p_Gyoto__Hook__Listener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Hook__Teller[] = {  {&_swigt__p_Gyoto__Spectrometer__Uniform, _p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Metric__Generic, _p_Gyoto__Metric__GenericTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Generic, _p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Hook__Teller, 0, 0},  {&_swigt__p_Gyoto__Hook__Teller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Metric__Generic[] = {  {&_swigt__p_Gyoto__Metric__Generic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Object[] = {  {&_swigt__p_Gyoto__Spectrometer__Uniform, _p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Photon, _p_Gyoto__PhotonTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Generic, _p_Gyoto__Astrobj__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Metric__Generic, _p_Gyoto__Metric__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrum__Generic, _p_Gyoto__Spectrum__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Generic, _p_Gyoto__Spectrometer__GenericTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Object, 0, 0, 0},  {&_swigt__p_Gyoto__Scenery, _p_Gyoto__SceneryTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__Object, 0, 0},  {&_swigt__p_Gyoto__Screen, _p_Gyoto__ScreenTo_p_Gyoto__Object, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Photon[] = {  {&_swigt__p_Gyoto__Photon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Property[] = {  {&_swigt__p_Gyoto__Property, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Property__getter_t[] = {  {&_swigt__p_Gyoto__Property__getter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Property__getter_unit_t[] = {  {&_swigt__p_Gyoto__Property__getter_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Property__setter_t[] = {  {&_swigt__p_Gyoto__Property__setter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Property__setter_unit_t[] = {  {&_swigt__p_Gyoto__Property__setter_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Register__Entry[] = {  {&_swigt__p_Gyoto__Register__Entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Scenery[] = {  {&_swigt__p_Gyoto__Scenery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Scenery__mpi_tag[] = {  {&_swigt__p_Gyoto__Scenery__mpi_tag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Screen[] = {  {&_swigt__p_Gyoto__Screen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__SmartPointee[] = {  {&_swigt__p_Gyoto__Photon, _p_Gyoto__PhotonTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Scenery, _p_Gyoto__SceneryTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Uniform, _p_Gyoto__Spectrometer__UniformTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Standard, _p_Gyoto__Astrobj__StandardTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Properties, _p_Gyoto__Astrobj__PropertiesTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Units__Unit, _p_Gyoto__Units__UnitTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__ThinDisk, _p_Gyoto__Astrobj__ThinDiskTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Screen, _p_Gyoto__ScreenTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Units__Converter, _p_Gyoto__Units__ConverterTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Generic, _p_Gyoto__Spectrometer__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Spectrum__Generic, _p_Gyoto__Spectrum__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Metric__Generic, _p_Gyoto__Metric__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__Astrobj__Generic, _p_Gyoto__Astrobj__GenericTo_p_Gyoto__SmartPointee, 0, 0},  {&_swigt__p_Gyoto__SmartPointee, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t[] = {  {&_swigt__p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t[] = {  {&_swigt__p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrometer__Complex[] = {  {&_swigt__p_Gyoto__Spectrometer__Complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrometer__Generic[] = {  {&_swigt__p_Gyoto__Spectrometer__Uniform, _p_Gyoto__Spectrometer__UniformTo_p_Gyoto__Spectrometer__Generic, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Complex, _p_Gyoto__Spectrometer__ComplexTo_p_Gyoto__Spectrometer__Generic, 0, 0},  {&_swigt__p_Gyoto__Spectrometer__Generic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrometer__Uniform[] = {  {&_swigt__p_Gyoto__Spectrometer__Uniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Spectrum__Generic[] = {  {&_swigt__p_Gyoto__Spectrum__Generic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Units__Converter[] = {  {&_swigt__p_Gyoto__Units__Converter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Units__Unit[] = {  {&_swigt__p_Gyoto__Units__Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Value[] = {  {&_swigt__p_Gyoto__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__WIP[] = {  {&_swigt__p_Gyoto__WIP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyoto__Worldline[] = {  {&_swigt__p_Gyoto__Photon, _p_Gyoto__PhotonTo_p_Gyoto__Worldline, 0, 0},  {&_swigt__p_Gyoto__Worldline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handler_t[] = {  {&_swigt__p_Handler_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Indices[] = {  {&_swigt__p_Indices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Photon[] = {  {&_swigt__p_Photon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Range[] = {  {&_swigt__p_Range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RepeatAngle[] = {  {&_swigt__p_RepeatAngle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Subcontractor_t[] = {  {&_swigt__p_Subcontractor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_array_double[] = {  {&_swigt__p_array_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_array_size_t[] = {  {&_swigt__p_array_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_array_unsigned_long[] = {  {&_swigt__p_array_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__arrayT_double_2_t[] = {  {&_swigt__p_boost__arrayT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__arrayT_size_t_2_t[] = {  {&_swigt__p_boost__arrayT_size_t_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__mpi__communicator[] = {  {&_swigt__p_boost__mpi__communicator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},  {&_swigt__p_array_double, _p_array_doubleTo_p_double, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t[] = {  {&_swigt__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_q_const__Gyoto__Error__void[] = {  {&_swigt__p_f_q_const__Gyoto__Error__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fitsfile[] = {  {&_swigt__p_fitsfile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_astrobj_t[] = {  {&_swigt__p_get_astrobj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_bool_t[] = {  {&_swigt__p_get_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_double_t[] = {  {&_swigt__p_get_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_double_unit_t[] = {  {&_swigt__p_get_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_fname_t[] = {  {&_swigt__p_get_fname_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_long_t[] = {  {&_swigt__p_get_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_metric_t[] = {  {&_swigt__p_get_metric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_screen_t[] = {  {&_swigt__p_get_screen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_size_t_t[] = {  {&_swigt__p_get_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_spectrometer_t[] = {  {&_swigt__p_get_spectrometer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_spectrum_t[] = {  {&_swigt__p_get_spectrum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_string_t[] = {  {&_swigt__p_get_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_unsigned_long_t[] = {  {&_swigt__p_get_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_vector_double_t[] = {  {&_swigt__p_get_vector_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_vector_double_unit_t[] = {  {&_swigt__p_get_vector_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_get_vector_unsigned_long_t[] = {  {&_swigt__p_get_vector_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_myCplxSpectroIdxExcept[] = {  {&_swigt__p_myCplxSpectroIdxExcept, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Gyoto__FactoryMessenger[] = {  {&_swigt__p_p_Gyoto__FactoryMessenger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_array_double[] = {{&_swigt__p_p_array_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},  {&_swigt__p_p_array_double, _p_p_array_doubleTo_p_p_double, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_astrobj_t[] = {  {&_swigt__p_set_astrobj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_bool_t[] = {  {&_swigt__p_set_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_double_t[] = {  {&_swigt__p_set_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_double_unit_t[] = {  {&_swigt__p_set_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_fname_t[] = {  {&_swigt__p_set_fname_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_long_t[] = {  {&_swigt__p_set_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_metric_t[] = {  {&_swigt__p_set_metric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_screen_t[] = {  {&_swigt__p_set_screen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_size_t_t[] = {  {&_swigt__p_set_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_spectrometer_t[] = {  {&_swigt__p_set_spectrometer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_spectrum_t[] = {  {&_swigt__p_set_spectrum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_string_t[] = {  {&_swigt__p_set_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_unsigned_long_t[] = {  {&_swigt__p_set_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_vector_double_t[] = {  {&_swigt__p_set_vector_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_vector_double_unit_t[] = {  {&_swigt__p_set_vector_double_unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_set_vector_unsigned_long_t[] = {  {&_swigt__p_set_vector_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},  {&_swigt__p_array_size_t, _p_array_size_tTo_p_size_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_unsigned_long_t[] = {  {&_swigt__p_std__allocatorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},  {&_swigt__p_array_unsigned_long, _p_array_unsigned_longTo_p_unsigned_long, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ut_system[] = {  {&_swigt__p_ut_system, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xercesc__DOMElement[] = {  {&_swigt__p_xercesc__DOMElement, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Angles,
  _swigc__p_Bucket,
  _swigc__p_Coord1dSet,
  _swigc__p_Coord2dSet,
  _swigc__p_Eigen__Matrix4d,
  _swigc__p_Eigen__Vector4d,
  _swigc__p_Empty,
  _swigc__p_Grid,
  _swigc__p_Gyoto__Astrobj__Generic,
  _swigc__p_Gyoto__Astrobj__Properties,
  _swigc__p_Gyoto__Astrobj__Standard,
  _swigc__p_Gyoto__Astrobj__ThinDisk,
  _swigc__p_Gyoto__Error,
  _swigc__p_Gyoto__Factory,
  _swigc__p_Gyoto__FactoryMessenger,
  _swigc__p_Gyoto__FitsRW,
  _swigc__p_Gyoto__Functor__Double_Double_const,
  _swigc__p_Gyoto__Functor__Double_constDoubleArray,
  _swigc__p_Gyoto__GridData2D,
  _swigc__p_Gyoto__Hook__Listener,
  _swigc__p_Gyoto__Hook__Teller,
  _swigc__p_Gyoto__Metric__Generic,
  _swigc__p_Gyoto__Object,
  _swigc__p_Gyoto__Photon,
  _swigc__p_Gyoto__Property,
  _swigc__p_Gyoto__Property__getter_t,
  _swigc__p_Gyoto__Property__getter_unit_t,
  _swigc__p_Gyoto__Property__setter_t,
  _swigc__p_Gyoto__Property__setter_unit_t,
  _swigc__p_Gyoto__Register__Entry,
  _swigc__p_Gyoto__Scenery,
  _swigc__p_Gyoto__Scenery__mpi_tag,
  _swigc__p_Gyoto__Screen,
  _swigc__p_Gyoto__SmartPointee,
  _swigc__p_Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,
  _swigc__p_Gyoto__SmartPointerT_Gyoto__Units__Converter_t,
  _swigc__p_Gyoto__Spectrometer__Complex,
  _swigc__p_Gyoto__Spectrometer__Generic,
  _swigc__p_Gyoto__Spectrometer__Uniform,
  _swigc__p_Gyoto__Spectrum__Generic,
  _swigc__p_Gyoto__Units__Converter,
  _swigc__p_Gyoto__Units__Unit,
  _swigc__p_Gyoto__Value,
  _swigc__p_Gyoto__WIP,
  _swigc__p_Gyoto__Worldline,
  _swigc__p_Handler_t,
  _swigc__p_Indices,
  _swigc__p_Photon,
  _swigc__p_Range,
  _swigc__p_RepeatAngle,
  _swigc__p_Subcontractor_t,
  _swigc__p_allocator_type,
  _swigc__p_array_double,
  _swigc__p_array_size_t,
  _swigc__p_array_unsigned_long,
  _swigc__p_boost__arrayT_double_2_t,
  _swigc__p_boost__arrayT_size_t_2_t,
  _swigc__p_boost__mpi__communicator,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Astrobj__Generic_t,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Metric__Generic_t,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__SmartPointee_t,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrometer__Generic_t,
  _swigc__p_f_p_Gyoto__FactoryMessenger_r_q_const__std__vector__std__string_std__allocator__std__string______Gyoto__SmartPointerT_Gyoto__Spectrum__Generic_t,
  _swigc__p_f_q_const__Gyoto__Error__void,
  _swigc__p_fitsfile,
  _swigc__p_get_astrobj_t,
  _swigc__p_get_bool_t,
  _swigc__p_get_double_t,
  _swigc__p_get_double_unit_t,
  _swigc__p_get_fname_t,
  _swigc__p_get_long_t,
  _swigc__p_get_metric_t,
  _swigc__p_get_screen_t,
  _swigc__p_get_size_t_t,
  _swigc__p_get_spectrometer_t,
  _swigc__p_get_spectrum_t,
  _swigc__p_get_string_t,
  _swigc__p_get_unsigned_long_t,
  _swigc__p_get_vector_double_t,
  _swigc__p_get_vector_double_unit_t,
  _swigc__p_get_vector_unsigned_long_t,
  _swigc__p_int,
  _swigc__p_myCplxSpectroIdxExcept,
  _swigc__p_p_Gyoto__FactoryMessenger,
  _swigc__p_p_PyObject,
  _swigc__p_p_array_double,
  _swigc__p_p_double,
  _swigc__p_set_astrobj_t,
  _swigc__p_set_bool_t,
  _swigc__p_set_double_t,
  _swigc__p_set_double_unit_t,
  _swigc__p_set_fname_t,
  _swigc__p_set_long_t,
  _swigc__p_set_metric_t,
  _swigc__p_set_screen_t,
  _swigc__p_set_size_t_t,
  _swigc__p_set_spectrometer_t,
  _swigc__p_set_spectrum_t,
  _swigc__p_set_string_t,
  _swigc__p_set_unsigned_long_t,
  _swigc__p_set_vector_double_t,
  _swigc__p_set_vector_double_unit_t,
  _swigc__p_set_vector_unsigned_long_t,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_unsigned_long_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_ut_system,
  _swigc__p_value_type,
  _swigc__p_void,
  _swigc__p_xercesc__DOMElement,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  if (!Gyoto::Astrobj::Register_ &&
    !Gyoto::Metric::Register_ &&
    !Gyoto::Spectrum::Register_ &&
    !Gyoto::Spectrometer::Register_)
  Gyoto::Register::init();
  
  import_array();
  
  
  SWIG_Python_SetConstant(d, "GYOTO_DEBUG_ENABLED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_PLUGIN_SFX",SWIG_FromCharPtr("so"));
  SWIG_Python_SetConstant(d, "GYOTO_SIZE__T_IS_UNSIGNED_LONG",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_SOVERS",SWIG_FromCharPtr("9-unreleased"));
  SWIG_Python_SetConstant(d, "GYOTO_USE_ARBLIB",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_USE_CFITSIO",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_USE_UDUNITS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_USE_XERCES",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_DLFCN_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_INTTYPES_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_LIBDL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_MPI",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_PTHREAD",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_PTHREAD_PRIO_INHERIT",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_SINCOS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_STDINT_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_STDLIB_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_STRINGS_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_STRING_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_SYS_STAT_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_SYS_TYPES_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_BOOST_MULTIPRECISION_CPP_DEC_FLOAT_HPP",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_BOOST_ARRAY_HPP",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_HAVE_BOOST_INTEGRATORS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_UNISTD_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HAVE_FENV_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "STDC_HEADERS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_NONE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_INTENSITY",SWIG_From_int(static_cast< int >(1 << 0)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_EMISSIONTIME",SWIG_From_int(static_cast< int >(1 << 1)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_MIN_DISTANCE",SWIG_From_int(static_cast< int >(1 << 2)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_FIRST_DMIN",SWIG_From_int(static_cast< int >(1 << 3)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_REDSHIFT",SWIG_From_int(static_cast< int >(1 << 4)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_IMPACTCOORDS",SWIG_From_int(static_cast< int >(1 << 5)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_SPECTRUM",SWIG_From_int(static_cast< int >(1 << 6)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_SPECTRUM_STOKES_Q",SWIG_From_int(static_cast< int >(1 << 7)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_SPECTRUM_STOKES_U",SWIG_From_int(static_cast< int >(1 << 8)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_SPECTRUM_STOKES_V",SWIG_From_int(static_cast< int >(1 << 9)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_BINSPECTRUM",SWIG_From_int(static_cast< int >(1 << 10)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_NBCROSSEQPLANE",SWIG_From_int(static_cast< int >(1 << 11)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_USER1",SWIG_From_int(static_cast< int >(1 << 31)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_USER2",SWIG_From_int(static_cast< int >(1 << 30)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_USER3",SWIG_From_int(static_cast< int >(1 << 29)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_USER4",SWIG_From_int(static_cast< int >(1 << 28)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_USER5",SWIG_From_int(static_cast< int >(1 << 27)));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_SPECTRAL",SWIG_From_int(static_cast< int >((1 << 6|1 << 7|1 << 8|1 << 9|1 << 10))));
  SWIG_Python_SetConstant(d, "GYOTO_QUANTITY_SPECTRUM_STOKES",SWIG_From_int(static_cast< int >((1 << 6|1 << 7|1 << 8|1 << 9))));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_DEBUG_MODE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "GYOTO_QUIET_VERBOSITY",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_SEVERE_VERBOSITY",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "GYOTO_WARNING_VERBOSITY",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_VERBOSITY",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "GYOTO_INFO_VERBOSITY",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "GYOTO_DEBUG_VERBOSITY",SWIG_From_int(static_cast< int >(3000)));
  SWIG_Python_SetConstant(d, "GYOTO_COORDKIND_UNSPECIFIED",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "GYOTO_COORDKIND_CARTESIAN",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_COORDKIND_SPHERICAL",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_X_SIZE",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_DELTA",SWIG_From_double(static_cast< double >(0.01)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_DELTA_MAX_OVER_R",SWIG_From_double(static_cast< double >(1.)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_ABSTOL",SWIG_From_double(static_cast< double >(1e-6)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_RELTOL",SWIG_From_double(static_cast< double >(1e-6)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_MAXITER",SWIG_From_int(static_cast< int >(100000)));
  SWIG_Python_SetConstant(d, "GYOTO_T_TOL",SWIG_From_double(static_cast< double >(1e-4)));
  SWIG_Python_SetConstant(d, "GYOTO_KERR_HORIZON_SECURITY",SWIG_From_double(static_cast< double >(0.01)));
  SWIG_Python_SetConstant(d, "GYOTO_PREC",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "GYOTO_WIDTH",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "GYOTO_DEFAULT_PLUGINS",SWIG_FromCharPtr("stdplug,nofail:lorene"));
  SWIG_Python_SetConstant(d, "GYOTO_C",SWIG_From_double(static_cast< double >(299792458.)));
  SWIG_Python_SetConstant(d, "GYOTO_C_CGS",SWIG_From_double(static_cast< double >(2.99792458e10)));
  SWIG_Python_SetConstant(d, "GYOTO_C2_CGS",SWIG_From_double(static_cast< double >(8.98755178736817668096e+20)));
  SWIG_Python_SetConstant(d, "GYOTO_C2_CGS_M1",SWIG_From_double(static_cast< double >(1.1126500560536184087938986e-21)));
  SWIG_Python_SetConstant(d, "GYOTO_G",SWIG_From_double(static_cast< double >(6.67428e-11)));
  SWIG_Python_SetConstant(d, "GYOTO_G_CGS",SWIG_From_double(static_cast< double >(6.67428e-8)));
  SWIG_Python_SetConstant(d, "GYOTO_G_OVER_C_SQUARE",SWIG_From_double(static_cast< double >(7.4261380161175445989e-28)));
  SWIG_Python_SetConstant(d, "GYOTO_G_OVER_C_SQUARE_CGS",SWIG_From_double(static_cast< double >(7.4261380161175445989e-29)));
  SWIG_Python_SetConstant(d, "GYOTO_PLANCK",SWIG_From_double(static_cast< double >(6.62606896e-34)));
  SWIG_Python_SetConstant(d, "GYOTO_PLANCK_CGS",SWIG_From_double(static_cast< double >(6.62606896e-27)));
  SWIG_Python_SetConstant(d, "GYOTO_PLANCK_OVER_C_SQUARE",SWIG_From_double(static_cast< double >(7.3724959997591407964e-51)));
  SWIG_Python_SetConstant(d, "GYOTO_BOLTZMANN",SWIG_From_double(static_cast< double >(1.3806504e-23)));
  SWIG_Python_SetConstant(d, "GYOTO_BOLTZMANN_CGS",SWIG_From_double(static_cast< double >(1.3806504e-16)));
  SWIG_Python_SetConstant(d, "GYOTO_STEFANBOLTZMANN_CGS",SWIG_From_double(static_cast< double >(5.670373e-5)));
  SWIG_Python_SetConstant(d, "GYOTO_PLANCK_OVER_BOLTZMANN",SWIG_From_double(static_cast< double >(4.7992373449498869688e-11)));
  SWIG_Python_SetConstant(d, "GYOTO_GAS_CST",SWIG_From_double(static_cast< double >(8.3144621)));
  SWIG_Python_SetConstant(d, "GYOTO_GAS_CST_CGS",SWIG_From_double(static_cast< double >(8.3144621e7)));
  SWIG_Python_SetConstant(d, "GYOTO_AVOGADRO",SWIG_From_double(static_cast< double >(6.0221413e23)));
  SWIG_Python_SetConstant(d, "GYOTO_THOMSON_CGS",SWIG_From_double(static_cast< double >(6.6524e-25)));
  SWIG_Python_SetConstant(d, "GYOTO_ALPHA_F",SWIG_From_double(static_cast< double >(0.00729927)));
  SWIG_Python_SetConstant(d, "GYOTO_PROTON_MASS_CGS",SWIG_From_double(static_cast< double >(1.67262158e-24)));
  SWIG_Python_SetConstant(d, "GYOTO_ELECTRON_MASS_CGS",SWIG_From_double(static_cast< double >(9.10938188e-28)));
  SWIG_Python_SetConstant(d, "GYOTO_ELECTRON_CLASSICAL_RADIUS_CGS",SWIG_From_double(static_cast< double >(2.8179e-13)));
  SWIG_Python_SetConstant(d, "GYOTO_ELEMENTARY_CHARGE_CGS",SWIG_From_double(static_cast< double >(4.80320427e-10)));
  SWIG_Python_SetConstant(d, "GYOTO_EULER_MASCHERONI",SWIG_From_double(static_cast< double >(0.577216)));
  SWIG_Python_SetConstant(d, "GYOTO_ATOMIC_MASS_UNIT_CGS",SWIG_From_double(static_cast< double >(1.660537781e-24)));
  SWIG_Python_SetConstant(d, "GYOTO_INU_CGS_TO_SI",SWIG_From_double(static_cast< double >(0.001)));
  SWIG_Python_SetConstant(d, "GYOTO_JNU_CGS_TO_SI",SWIG_From_double(static_cast< double >((0.001*100.))));
  SWIG_Python_SetConstant(d, "GYOTO_ANU_CGS_TO_SI",SWIG_From_double(static_cast< double >(100.)));
  SWIG_Python_SetConstant(d, "GYOTO_SUN_MASS",SWIG_From_double(static_cast< double >(1.98843e30)));
  SWIG_Python_SetConstant(d, "GYOTO_SUN_MASS_CGS",SWIG_From_double(static_cast< double >(1.98843e33)));
  SWIG_Python_SetConstant(d, "GYOTO_SUN_RADIUS",SWIG_From_double(static_cast< double >(6.955e8)));
  SWIG_Python_SetConstant(d, "GYOTO_KPC",SWIG_From_double(static_cast< double >(3.08568025e19)));
  SWIG_Python_SetConstant(d, "GYOTO_ASTRONOMICAL_UNIT",SWIG_From_double(static_cast< double >(1.49597870700e11)));
  SWIG_Python_SetConstant(d, "GYOTO_LIGHT_YEAR",SWIG_From_double(static_cast< double >(9.4607304725808e15)));
  SWIG_Python_SetConstant(d, "GYOTO_RADEG",SWIG_From_double(static_cast< double >(57.2957795130823)));
  SWIG_Python_SetConstant(d, "GYOTO_DEGRAD",SWIG_From_double(static_cast< double >(0.0174532925199433)));
  SWIG_Python_SetConstant(d, "GYOTO_MINRAD",SWIG_From_double(static_cast< double >(2.908882086657216e-04)));
  SWIG_Python_SetConstant(d, "GYOTO_SECRAD",SWIG_From_double(static_cast< double >(4.848136811095360e-06)));
  SWIG_Python_SetConstant(d, "GYOTO_MASRAD",SWIG_From_double(static_cast< double >(4.848136811095360e-09)));
  SWIG_Python_SetConstant(d, "GYOTO_MUASRAD",SWIG_From_double(static_cast< double >(4.848136811095360e-12)));
  SWIG_Python_SetConstant(d, "GYOTO_eV2Hz",SWIG_From_double(static_cast< double >(2.417989348e+14)));
  SWIG_Python_SetConstant(d, "GYOTO_OBSKIND_ATINFINITY",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "GYOTO_OBSKIND_KEPLERIAN",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "GYOTO_OBSKIND_ZAMO",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "GYOTO_OBSKIND_VELOCITYSPECIFIED",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "GYOTO_OBSKIND_FULLYSPECIFIED",SWIG_From_int(static_cast< int >(4)));
  PyDict_SetItemString(md,(char *)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char *)"Object_properties",Swig_var_Object_properties_get, Swig_var_Object_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Object_builtinPluginValue",Swig_var_Object_builtinPluginValue_get, Swig_var_Object_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Screen_properties",Swig_var_Screen_properties_get, Swig_var_Screen_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Screen_builtinPluginValue",Swig_var_Screen_builtinPluginValue_get, Swig_var_Screen_builtinPluginValue_set);
  SWIG_Python_SetConstant(d, "Screen_angle",SWIG_From_int(static_cast< int >(Gyoto::Screen::angle)));
  SWIG_Python_SetConstant(d, "Screen_pixel",SWIG_From_int(static_cast< int >(Gyoto::Screen::pixel)));
  SWIG_addvarlink(SWIG_globals(),(char *)"Scenery_am_worker",Swig_var_Scenery_am_worker_get, Swig_var_Scenery_am_worker_set);
  SWIG_Python_SetConstant(d, "Scenery_give_task",SWIG_From_int(static_cast< int >(Gyoto::Scenery::give_task)));
  SWIG_Python_SetConstant(d, "Scenery_read_scenery",SWIG_From_int(static_cast< int >(Gyoto::Scenery::read_scenery)));
  SWIG_Python_SetConstant(d, "Scenery_terminate",SWIG_From_int(static_cast< int >(Gyoto::Scenery::terminate)));
  SWIG_Python_SetConstant(d, "Scenery_raytrace",SWIG_From_int(static_cast< int >(Gyoto::Scenery::raytrace)));
  SWIG_Python_SetConstant(d, "Scenery_raytrace_done",SWIG_From_int(static_cast< int >(Gyoto::Scenery::raytrace_done)));
  SWIG_Python_SetConstant(d, "Scenery_ready",SWIG_From_int(static_cast< int >(Gyoto::Scenery::ready)));
  SWIG_Python_SetConstant(d, "Scenery_impactcoords",SWIG_From_int(static_cast< int >(Gyoto::Scenery::impactcoords)));
  SWIG_Python_SetConstant(d, "Scenery_noimpactcoords",SWIG_From_int(static_cast< int >(Gyoto::Scenery::noimpactcoords)));
  SWIG_addvarlink(SWIG_globals(),(char *)"Scenery_properties",Swig_var_Scenery_properties_get, Swig_var_Scenery_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Scenery_builtinPluginValue",Swig_var_Scenery_builtinPluginValue_get, Swig_var_Scenery_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Photon_properties",Swig_var_Photon_properties_get, Swig_var_Photon_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Photon_builtinPluginValue",Swig_var_Photon_builtinPluginValue_get, Swig_var_Photon_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"AstrobjRegister",Swig_var_AstrobjRegister_get, Swig_var_AstrobjRegister_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Astrobj_properties",Swig_var_Astrobj_properties_get, Swig_var_Astrobj_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Astrobj_builtinPluginValue",Swig_var_Astrobj_builtinPluginValue_get, Swig_var_Astrobj_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDisk_properties",Swig_var_ThinDisk_properties_get, Swig_var_ThinDisk_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ThinDisk_builtinPluginValue",Swig_var_ThinDisk_builtinPluginValue_get, Swig_var_ThinDisk_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"StandardAstrobj_properties",Swig_var_StandardAstrobj_properties_get, Swig_var_StandardAstrobj_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"StandardAstrobj_builtinPluginValue",Swig_var_StandardAstrobj_builtinPluginValue_get, Swig_var_StandardAstrobj_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"MetricRegister",Swig_var_MetricRegister_get, Swig_var_MetricRegister_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Metric_properties",Swig_var_Metric_properties_get, Swig_var_Metric_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Metric_builtinPluginValue",Swig_var_Metric_builtinPluginValue_get, Swig_var_Metric_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"SpectrumRegister",Swig_var_SpectrumRegister_get, Swig_var_SpectrumRegister_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Spectrum_properties",Swig_var_Spectrum_properties_get, Swig_var_Spectrum_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Spectrum_builtinPluginValue",Swig_var_Spectrum_builtinPluginValue_get, Swig_var_Spectrum_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"SpectrometerRegister",Swig_var_SpectrometerRegister_get, Swig_var_SpectrometerRegister_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Spectrometer_properties",Swig_var_Spectrometer_properties_get, Swig_var_Spectrometer_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Spectrometer_builtinPluginValue",Swig_var_Spectrometer_builtinPluginValue_get, Swig_var_Spectrometer_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"ComplexSpectrometer_Kind",Swig_var_ComplexSpectrometer_Kind_get, Swig_var_ComplexSpectrometer_Kind_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSpectrometer_properties",Swig_var_UniformSpectrometer_properties_get, Swig_var_UniformSpectrometer_properties_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSpectrometer_builtinPluginValue",Swig_var_UniformSpectrometer_builtinPluginValue_get, Swig_var_UniformSpectrometer_builtinPluginValue_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSpectrometer_WaveKind",Swig_var_UniformSpectrometer_WaveKind_get, Swig_var_UniformSpectrometer_WaveKind_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSpectrometer_WaveLogKind",Swig_var_UniformSpectrometer_WaveLogKind_get, Swig_var_UniformSpectrometer_WaveLogKind_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSpectrometer_FreqKind",Swig_var_UniformSpectrometer_FreqKind_get, Swig_var_UniformSpectrometer_FreqKind_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"UniformSpectrometer_FreqLogKind",Swig_var_UniformSpectrometer_FreqLogKind_get, Swig_var_UniformSpectrometer_FreqLogKind_set);
  SWIG_Python_SetConstant(d, "XERCES_INCLUDE_WCHAR_H",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "Property_double_t",SWIG_From_int(static_cast< int >(Gyoto::Property::double_t)));
  SWIG_Python_SetConstant(d, "Property_long_t",SWIG_From_int(static_cast< int >(Gyoto::Property::long_t)));
  SWIG_Python_SetConstant(d, "Property_unsigned_long_t",SWIG_From_int(static_cast< int >(Gyoto::Property::unsigned_long_t)));
  SWIG_Python_SetConstant(d, "Property_size_t_t",SWIG_From_int(static_cast< int >(Gyoto::Property::size_t_t)));
  SWIG_Python_SetConstant(d, "Property_bool_t",SWIG_From_int(static_cast< int >(Gyoto::Property::bool_t)));
  SWIG_Python_SetConstant(d, "Property_string_t",SWIG_From_int(static_cast< int >(Gyoto::Property::string_t)));
  SWIG_Python_SetConstant(d, "Property_filename_t",SWIG_From_int(static_cast< int >(Gyoto::Property::filename_t)));
  SWIG_Python_SetConstant(d, "Property_vector_double_t",SWIG_From_int(static_cast< int >(Gyoto::Property::vector_double_t)));
  SWIG_Python_SetConstant(d, "Property_vector_unsigned_long_t",SWIG_From_int(static_cast< int >(Gyoto::Property::vector_unsigned_long_t)));
  SWIG_Python_SetConstant(d, "Property_metric_t",SWIG_From_int(static_cast< int >(Gyoto::Property::metric_t)));
  SWIG_Python_SetConstant(d, "Property_screen_t",SWIG_From_int(static_cast< int >(Gyoto::Property::screen_t)));
  SWIG_Python_SetConstant(d, "Property_astrobj_t",SWIG_From_int(static_cast< int >(Gyoto::Property::astrobj_t)));
  SWIG_Python_SetConstant(d, "Property_spectrum_t",SWIG_From_int(static_cast< int >(Gyoto::Property::spectrum_t)));
  SWIG_Python_SetConstant(d, "Property_spectrometer_t",SWIG_From_int(static_cast< int >(Gyoto::Property::spectrometer_t)));
  SWIG_Python_SetConstant(d, "Property_empty_t",SWIG_From_int(static_cast< int >(Gyoto::Property::empty_t)));
  SWIG_addvarlink(SWIG_globals(),(char *)"__class__",Swig_var___class___get, Swig_var___class___set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

